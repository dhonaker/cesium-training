<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>AGI.Foundation.Core</name>
  </assembly>
  <members>
    <member name="T:AGI.Foundation.ArgumentTypeInvalidException">
      <summary>
            The exception that is thrown when one of the arguments provided to a
            method is not of a type expected by the method.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ArgumentTypeInvalidException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.ArgumentTypeInvalidException" /> class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ArgumentTypeInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.ArgumentTypeInvalidException" /> class with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.ArgumentTypeInvalidException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.ArgumentTypeInvalidException" />
            class with the name of the parameter that causes this exception.
            </summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:AGI.Foundation.ArgumentTypeInvalidException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.ArgumentTypeInvalidException" />
            class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:AGI.Foundation.ArgumentTypeInvalidException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.ArgumentTypeInvalidException" />
            class with a specified error message and the name of the parameter
            that causes this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="parameterName">The name of the parameter that caused the current exception.</param>
    </member>
    <member name="M:AGI.Foundation.ArgumentTypeInvalidException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.ArgumentTypeInvalidException" />
            class with a specified error message, the parameter name, and a
            reference to the inner exception that is the cause of this
            exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="parameterName">The name of the parameter that caused the current exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:AGI.Foundation.BehaviorBeyondAvailability">
      <summary>
            Defines the behavior when the evaluation time is beyond the availability for the object
            </summary>
    </member>
    <member name="F:AGI.Foundation.BehaviorBeyondAvailability.ThrowException">
      <summary>
            Throws an exception when evaluated beyond the object's availability.
            </summary>
    </member>
    <member name="F:AGI.Foundation.BehaviorBeyondAvailability.ReturnEndpointValue">
      <summary>
            Returns the closest endpoint value when evaluated beyond the object's availability.
            </summary>
    </member>
    <member name="F:AGI.Foundation.BehaviorBeyondAvailability.Extrapolate">
      <summary>
            Extrapolates values when evaluated beyond the object's availability.
            </summary>
    </member>
    <member name="T:AGI.Foundation.ConstantEvaluator`1">
      <summary>
            An Evaluator{T} which always returns the same value.
            </summary>
      <typeparam name="T">The type of the value to return.</typeparam>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.#ctor(AGI.Foundation.ConstantEvaluator{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.#ctor(`0)">
      <summary>
            Creates a new instance with the supplied value.
            </summary>
      <param name="value">The value to be returned by calls to Evaluate.</param>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.ConstantEvaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.ConstantEvaluator`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.ConstantEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Constants">
      <summary>
            A collection of constants.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.ArcSecondsPerRadian">
      <summary>
            The number of arc seconds in one radian.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Boltzmanns">
      <summary>
            Boltzmanns constant in Watts /(Kelvin-Hz): 1.380658e-023
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.DegreesPerHour">
      <summary>
            The number of degrees in an hour.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.DegreesPerRadian">
      <summary>
            The number of degrees in a radian.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.DegreesPerRevolution">
      <summary>
            The number of degrees in a complete revolution.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.EarthSurfaceGravity">
      <summary>
            Earth standard surface gravity at sea level according to the International System of Units and
            the 3rd General Conference on Weights and Measures, in meters per second squared: 9.80665.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon1">
      <summary>
            A small number useful for comparisons, 1e-1
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon10">
      <summary>
            A small number useful for comparisons, 1e-10
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon11">
      <summary>
            A small number useful for comparisons, 1e-11
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon12">
      <summary>
            A small number useful for comparisons, 1e-12
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon13">
      <summary>
            A small number useful for comparisons, 1e-13
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon14">
      <summary>
            A small number useful for comparisons, 1e-14
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon15">
      <summary>
            A small number useful for comparisons, 1e-15
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon16">
      <summary>
            A small number useful for comparisons, 1e-16
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon17">
      <summary>
            A small number useful for comparisons, 1e-17
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon18">
      <summary>
            A small number useful for comparisons, 1e-18
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon19">
      <summary>
            A small number useful for comparisons, 1e-19
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon2">
      <summary>
            A small number useful for comparisons, 1e-2
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon20">
      <summary>
            A small number useful for comparisons, 1e-20
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon3">
      <summary>
            A small number useful for comparisons, 1e-3
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon4">
      <summary>
            A small number useful for comparisons, 1e-4
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon5">
      <summary>
            A small number useful for comparisons, 1e-5
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon6">
      <summary>
            A small number useful for comparisons, 1e-6
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon7">
      <summary>
            A small number useful for comparisons, 1e-7
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon8">
      <summary>
            A small number useful for comparisons, 1e-8
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.Epsilon9">
      <summary>
            A small number useful for comparisons, 1e-9
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.GoldenRatio">
      <summary>
            The golden ratio.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.HalfPi">
      <summary>
            Half of <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.MinutesPerDegree">
      <summary>
            The number of minutes in a degree.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.QuarterPi">
      <summary>
            One quarter of <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.RadiansPerArcSecond">
      <summary>
            The number of radians in one arc second.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.RadiansPerDegree">
      <summary>
            The number of radians in a degree.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.SecondsPerDegree">
      <summary>
            The number of seconds in a degree.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.SecondsPerMinute">
      <summary>
            The number of seconds in a minute.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.SolarLuminosity">
      <summary>
            Solar Luminosity in Watts: 3.839E26, taken from "An Introduction to Modern Astrophysics", by Carrol et. al, published 2007.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.SpeedOfLight">
      <summary>
            The speed of light in m/s: 299792458.0
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.ThreeHalvesPi">
      <summary>
            Three-halves <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Constants.TwoPi">
      <summary>
            Twice <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.DataUnavailableException">
      <summary>
            Exception thrown when data is unavailable for a given computation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DataUnavailableException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.DataUnavailableException" /> class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DataUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the System.Exception class with serialized
            data.
            </summary>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
    </member>
    <member name="M:AGI.Foundation.DataUnavailableException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.DataUnavailableException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:AGI.Foundation.DataUnavailableException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.DataUnavailableException" /> class
            with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified.</param>
    </member>
    <member name="T:AGI.Foundation.DateMotionCollection`1">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Motion`1" />, each of which is associated with a particular <see cref="T:AGI.Foundation.Time.JulianDate" />.
            This is a convenient and efficient way to store time-varying position and velocity, etc.  Each
            <see cref="T:AGI.Foundation.Motion`1" /> instance is required to have the same <see cref="P:AGI.Foundation.Motion`1.Order" />.
            </summary>
      <typeparam name="T">
            The type of <see cref="T:AGI.Foundation.Motion`1" /> that this collection contains.  For example, if <typeparamref name="T" /> is
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" />, then this collection holds Motion&lt;Cartesian&gt;.
            </typeparam>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.#ctor">
      <summary>
            Initializes a new instance.  The order of the collection will be determined by the
            first item added to it.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance with a particular size and order.
            </summary>
      <param name="size">The number of items in the collection.</param>
      <param name="order">The number of derivatives that the collection should store.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0})">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="motion">The item to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0,`0,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
      <param name="secondDerivative">The second derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0[])">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="values">The values to add.  The first item in the array is the value, the second item is the first derivative, and so on.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.AddRange(AGI.Foundation.DateMotionCollection{`0})">
      <summary>
            Adds the elements of the specified collection to the end of this collection.
            </summary>
      <param name="collection">
            The collection whose elements should be added to the end of this collection.
            The input collection must have an <see cref="P:AGI.Foundation.DateMotionCollection`1.Order" /> equal to or greater than the
            Order of this collection.
            </param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <see cref="P:AGI.Foundation.DateMotionCollection`1.Order" /> of the parameter <paramref name="collection" />
            is lower than the <see cref="P:AGI.Foundation.DateMotionCollection`1.Order" /> of this object.
            </exception>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.Count">
      <summary>
            Gets the number of items in this collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.CreateImmutableView">
      <summary>
            Creates a view of this instance that is guaranteed not to change.
            </summary>
      <returns>A view of this instance that is guaranteed not to change.</returns>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.Dates">
      <summary>
            Gets the list of dates in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.FirstDerivatives">
      <summary>
            Gets the list of first derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.Item(System.Int32)">
      <summary>
            Gets the list of the specified derivative.
            </summary>
      <param name="index">The derivative list of retrieve.</param>
      <returns>The requested list.</returns>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.Motions">
      <summary>
            Gets the list of motion instances in this collection.
            Consider using <see cref="P:AGI.Foundation.DateMotionCollection`1.Values" />, <see cref="P:AGI.Foundation.DateMotionCollection`1.FirstDerivatives" />,
            <see cref="P:AGI.Foundation.DateMotionCollection`1.SecondDerivatives" />, etc. to get all of the corresponding
            data as a single list.  This is more
            efficient than requesting a list of motion instances.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.Order">
      <summary>
            Gets the number of derivatives in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.SecondDerivatives">
      <summary>
            Gets the list of second derivatives in the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0})">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="motion">The new item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`0,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
      <param name="secondDerivative">The new second derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0[])">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="values">The new values for the item.</param>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`1.Values">
      <summary>
            Gets the list of values in the collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.DateMotionCollection`2">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Motion`2" />, each of which is associated with a particular <see cref="T:AGI.Foundation.Time.JulianDate" />.
            This is a convenient and efficient way to store time-varying position and velocity, etc.  Each
            <see cref="T:AGI.Foundation.Motion`2" /> instance is required to have the same <see cref="P:AGI.Foundation.Motion`2.Order" />.
            </summary>
      <typeparam name="T">
            The coordinate type that this collection contains.  <see cref="P:AGI.Foundation.DateMotionCollection`2.Values" /> will be collection of this type.
            </typeparam>
      <typeparam name="TDerivative">
            The derivative type that this collection contains.  <see cref="P:AGI.Foundation.DateMotionCollection`2.FirstDerivatives" />, <see cref="P:AGI.Foundation.DateMotionCollection`2.SecondDerivatives" />,
            and additional derivatives are lists of this type.
            </typeparam>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.#ctor">
      <summary>
            Initializes a new instance.  The order of the collection will be determined by the
            first item added to it.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance with a particular size and order.
            </summary>
      <param name="size">The number of items in the collection.</param>
      <param name="order">The number of derivatives that the collection should store.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0,`1})">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="motion">The item to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0,`1,`1)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
      <param name="secondDerivative">The second derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0,`1[])">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="derivatives">The derivatives to add.  The first item in the array is the first derivative, the second item in the array is the second derivative, and so on.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.AddRange(AGI.Foundation.DateMotionCollection{`0,`1})">
      <summary>
            Adds the elements of the specified collection to the end of this collection.
            </summary>
      <param name="collection">
            The collection whose elements should be added to the end of this collection.
            The input collection must have an <see cref="P:AGI.Foundation.DateMotionCollection`2.Order" /> equal to or greater than the
            Order of this collection.
            </param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <see cref="P:AGI.Foundation.DateMotionCollection`2.Order" /> of the parameter <paramref name="collection" />
            is lower than the <see cref="P:AGI.Foundation.DateMotionCollection`2.Order" /> of this object.
            </exception>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.Count">
      <summary>
            Gets the number of items in this collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.CreateImmutableView">
      <summary>
            Creates a view of this instance that is guaranteed not to change.
            </summary>
      <returns>A view of this instance that is guaranteed not to change.</returns>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.Dates">
      <summary>
            Gets the list of dates in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.FirstDerivatives">
      <summary>
            Gets the list of first derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.Item(System.Int32)">
      <summary>
            Gets the list of the specified derivative.
            </summary>
      <param name="index">The derivative list to retrieve.</param>
      <returns>The requested list.</returns>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.Motions">
      <summary>
            Gets the list of motion instances in this collection.
            Consider using <see cref="P:AGI.Foundation.DateMotionCollection`2.Values" />, <see cref="P:AGI.Foundation.DateMotionCollection`2.FirstDerivatives" />,
            <see cref="P:AGI.Foundation.DateMotionCollection`2.SecondDerivatives" />, etc. to get all of the corresponding
            data as a single list.  This is more
            efficient than requesting a list of motion instances.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.Order">
      <summary>
            Gets the number of derivatives in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.SecondDerivatives">
      <summary>
            Gets the list of second derivatives in the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0,`1})">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="motion">The new item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`1,`1)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
      <param name="secondDerivative">The new second derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.DateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`1[])">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="derivatives">The new derivatives for the item.</param>
    </member>
    <member name="P:AGI.Foundation.DateMotionCollection`2.Values">
      <summary>
            Gets the list of values in the collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.DegreesMinutesSeconds">
      <summary>
            Holds information about an angle represented in the Degrees Minutes Seconds format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Create an instance of a <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> angle with parameters
            </summary>
      <param name="revolutions">The number of full 360 degree revolutions.</param>
      <param name="degrees">The number of degrees.</param>
      <param name="minutes">The number of arc minutes.</param>
      <param name="seconds">The number of arc seconds</param>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.Add(AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
            Adds the specified <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to this instance.
            </summary>
      <param name="add">The <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to add to this instance.</param>
      <returns>A <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> that represents the value of this instance plus the value of <paramref name="add" />.</returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.CompareTo(AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.CompareTo(System.Object)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="obj" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="obj" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="obj" />.
            </description></item></list></returns>
      <exception cref="T:AGI.Foundation.ArgumentTypeInvalidException">
        Thrown when the parameter <paramref name="obj" /> is not of the same type as the object on which
        this method is called.
      </exception>
    </member>
    <member name="P:AGI.Foundation.DegreesMinutesSeconds.Degrees">
      <summary>
            Gets the number of degrees.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.Equals(AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.EqualsEpsilon(AGI.Foundation.DegreesMinutesSeconds,System.Double)">
      <summary>
            Indicates whether each <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> value of another instance of this type
            is within the required tolerance of the corresponding <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> values to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.DegreesMinutesSeconds.Minutes">
      <summary>
            Gets the number of arc minutes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.Multiply(System.Double)">
      <summary>
            Multiplies this instance by the scalar provided.
            </summary>
      <param name="scalar">The scalar to multiply this angle by.</param>
      <returns>A <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> that represents the value of this instance times the value of <paramref name="scalar" />.</returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_Addition(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
            Adds two specified <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> instances.
            </summary>
      <param name="left">The first <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to add.</param>
      <param name="right">The second <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_Equality(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_GreaterThan(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Returns true if <paramref name="left" /> is greater than <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_GreaterThanOrEqual(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Returns true if <paramref name="left" /> is greater than or equal to <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_Inequality(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_LessThan(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Returns true if <paramref name="left" /> is less than <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_LessThanOrEqual(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
        Returns true if <paramref name="left" /> is less than or equal to <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_Multiply(AGI.Foundation.DegreesMinutesSeconds,System.Double)">
      <summary>
            Multiplies the <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> by a constant.
            </summary>
      <param name="left">The <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to multiply.</param>
      <param name="right">The constant by which to multiply the <see cref="T:AGI.Foundation.DegreesMinutesSeconds" />.</param>
      <returns>A <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> that represents the value of this instance multiplied by the constant.</returns>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.op_Subtraction(AGI.Foundation.DegreesMinutesSeconds,AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
            Subtracts a specified <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> from another specified <see cref="T:AGI.Foundation.DegreesMinutesSeconds" />.
            </summary>
      <param name="left">The subtrahend.</param>
      <param name="right">The minuend.</param>
      <returns>The difference <paramref name="left" /> minus <paramref name="right" />.</returns>
    </member>
    <member name="P:AGI.Foundation.DegreesMinutesSeconds.Revolutions">
      <summary>
            Gets the number of full 360 degree (2 Pi radians) revolutions.
            </summary>
    </member>
    <member name="P:AGI.Foundation.DegreesMinutesSeconds.Seconds">
      <summary>
            Gets the number of arc seconds.
            </summary>
    </member>
    <member name="M:AGI.Foundation.DegreesMinutesSeconds.Subtract(AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
            Subtracts the specified <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> from this instance.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to subtract from this instance.</param>
      <returns>A <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> that represents the value of this instance minus the value of <paramref name="minuend" />.</returns>
    </member>
    <member name="T:AGI.Foundation.DescriptiveStatistics">
      <summary>
            Provides static descriptive statistic methods
            </summary>
    </member>
    <member name="M:AGI.Foundation.DescriptiveStatistics.Mean(System.Collections.Generic.IList{System.Double})">
      <summary>
            Calculates the mean of a list of doubles
            </summary>
      <param name="dataList">The list of doubles to use to calculate the mean</param>
      <returns>The mean value</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the parameter <paramref name="dataList" /> is empty.
            </exception>
    </member>
    <member name="M:AGI.Foundation.DescriptiveStatistics.Percentile``1(System.Collections.Generic.IList{``0},System.Double)">
      <summary>
            Returns the nth percentile value from the list.  The list is assumed to be sorted.
            </summary>
      <param name="dataList">The sorted list from which to find the nth value</param>
      <param name="percentile">The percentile you seek (1-100)</param>
      <typeparam name="T">The type of element in the list.</typeparam>
      <returns>The nth percentile value from the sorted list</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameter <paramref name="percentile" /> is not between 1 and 100.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown when the parameter <paramref name="dataList" /> is empty.
            </exception>
    </member>
    <member name="M:AGI.Foundation.DescriptiveStatistics.RootMeanSquare(System.Collections.Generic.IList{System.Double})">
      <summary>
            Calculates the Root Mean Square of a list of doubles
            </summary>
      <param name="dataList">The list of doubles to use to calculate the RMS</param>
      <returns>The root mean square value</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the parameter <paramref name="dataList" /> is empty.
            </exception>
    </member>
    <member name="M:AGI.Foundation.DescriptiveStatistics.StandardDeviation(System.Collections.Generic.IList{System.Double})">
      <summary>
            Calculates the standard deviation of a list of doubles
            </summary>
      <param name="dataList">The list of doubles to use to calculate the standard deviation</param>
      <returns>The standard deviation value</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">List must not be empty</exception>
    </member>
    <member name="M:AGI.Foundation.DescriptiveStatistics.StandardDeviationNMinusOne(System.Collections.Generic.IList{System.Double})">
      <summary>
            Calculates the standard deviation of a list of doubles using the N-1 algorithm.  If <paramref name="dataList" />
            is empty, returns <see cref="M:AGI.Foundation.DescriptiveStatistics.StandardDeviation(System.Collections.Generic.IList{System.Double})" />.
            </summary>
      <param name="dataList">The list of doubles to use to calculate the standard deviation (N-1)</param>
      <returns>The (N-1) standard deviation value</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">List must not be empty</exception>
    </member>
    <member name="M:AGI.Foundation.DescriptiveStatistics.StandardError(System.Collections.Generic.IList{System.Double})">
      <summary>
            The Standard error is the Standard deviation of the mean.  This implementation uses the <see cref="M:AGI.Foundation.DescriptiveStatistics.StandardDeviationNMinusOne(System.Collections.Generic.IList{System.Double})" /> method
            </summary>
      <param name="dataList">The list of doubles to use to calculate the standard error</param>
      <returns>The standard error value</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">List must not be empty</exception>
    </member>
    <member name="T:AGI.Foundation.Evaluator`1">
      <summary>
            An abstract class that implements <see cref="T:AGI.Foundation.IEvaluator`1" />, making all interface methods and
            properties abstract.
            </summary>
      <typeparam name="T">The type returned by the evaluator.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.#ctor(AGI.Foundation.Evaluator{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Evaluator`1.AvailabilityIntervals">
      <summary>
        Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> over which data is available.
        If the availability interval is infinite, this returns
        <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates this evaluator at a specified fixed step over the specified interval.
            </summary>
      <param name="start">The start of the interval over which to evaluate.</param>
      <param name="stop">The end of the interval over which to evaluate.</param>
      <param name="step">The step size with which to sample this evaluator.</param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete..</param>
      <returns>The evaluated results, or null if the evaluation was canceled.</returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.Evaluate(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.Duration,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates this evaluator at a specified fixed step over the specified interval.
            </summary>
      <param name="interval">The interval over which to evaluate.</param>
      <param name="step">The step size with which to sample this evaluator.</param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <returns>The evaluated results, or null if the evaluation was canceled.</returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Evaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Evaluator`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Evaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup">
      <summary>
            A group of evaluators that share common computations so that all members
            of the group can be computed more efficiently.
            </summary>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CallAndMemoize``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})">
      <summary>
            Optimizes calls to a <paramref name="callback" /> that is expected to be called multiple times so that future calls
            with the same parameters return a cached result rather than actually invoking the callback again.
            The first time this method is called with a particular set of parameters, the <paramref name="callback" />
            is invoked and the result is stored in the evaluator group.  The second and successive times this
            method is called with the same parameters, the cached result is returned without invoking the
            <paramref name="callback" />.
            </summary>
      <param name="callback">The method to invoke.  This method must not have side-effects.</param>
      <typeparam name="TResult">The type of result returned by the method.</typeparam>
      <returns>The result of invoking the callback.</returns>
      <exception cref="T:System.InvalidOperationException">
            The result of calling <paramref name="callback" /> implemented <see cref="T:AGI.Foundation.IEvaluator" />.
            Use <see cref="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})" /> instead of this method when the return value
            is an evaluator.
            </exception>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CallAndMemoize``2(AGI.Foundation.EvaluatorGroup.Callback1{``0,``1},``1)">
      <summary>
            Optimizes calls to a <paramref name="callback" /> that is expected to be called multiple times so that future calls
            with the same parameters return a cached result rather than actually invoking the callback again.
            The first time this method is called with a particular set of parameters, the <paramref name="callback" />
            is invoked and the result is stored in the evaluator group.  The second and successive times this
            method is called with the same parameters, the cached result is returned without invoking the
            <paramref name="callback" />.
            </summary>
      <param name="callback">The method to invoke.  This method must not have side-effects.</param>
      <param name="parameter1">The first parameter to the callback.</param>
      <typeparam name="TResult">The type of result returned by the method.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback.</typeparam>
      <returns>The result of invoking the callback with the specified parameters.</returns>
      <exception cref="T:System.InvalidOperationException">
            The result of calling <paramref name="callback" /> implemented <see cref="T:AGI.Foundation.IEvaluator" />.
            Use <see cref="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})" /> instead of this method when the return value
            is an evaluator.
            </exception>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CallAndMemoize``3(AGI.Foundation.EvaluatorGroup.Callback2{``0,``1,``2},``1,``2)">
      <summary>
            Optimizes calls to a <paramref name="callback" /> that is expected to be called multiple times so that future calls
            with the same parameters return a cached result rather than actually invoking the callback again.
            The first time this method is called with a particular set of parameters, the <paramref name="callback" />
            is invoked and the result is stored in the evaluator group.  The second and successive times this
            method is called with the same parameters, the cached result is returned without invoking the
            <paramref name="callback" />.
            </summary>
      <param name="callback">The method to invoke.  This method must not have side-effects.</param>
      <param name="parameter1">The first parameter to the callback.</param>
      <param name="parameter2">The second parameter to the callback.</param>
      <typeparam name="TResult">The type of result returned by the method.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback.</typeparam>
      <returns>The result of invoking the callback with the specified parameters.</returns>
      <exception cref="T:System.InvalidOperationException">
            The result of calling <paramref name="callback" /> implemented <see cref="T:AGI.Foundation.IEvaluator" />.
            Use <see cref="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})" /> instead of this method when the return value
            is an evaluator.
            </exception>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CallAndMemoize``4(AGI.Foundation.EvaluatorGroup.Callback3{``0,``1,``2,``3},``1,``2,``3)">
      <summary>
            Optimizes calls to a <paramref name="callback" /> that is expected to be called multiple times so that future calls
            with the same parameters return a cached result rather than actually invoking the callback again.
            The first time this method is called with a particular set of parameters, the <paramref name="callback" />
            is invoked and the result is stored in the evaluator group.  The second and successive times this
            method is called with the same parameters, the cached result is returned without invoking the
            <paramref name="callback" />.
            </summary>
      <param name="callback">The method to invoke.  This method must not have side-effects.</param>
      <param name="parameter1">The first parameter to the callback.</param>
      <param name="parameter2">The second parameter to the callback.</param>
      <param name="parameter3">The third parameter to the callback.</param>
      <typeparam name="TResult">The type of result returned by the method.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the callback.</typeparam>
      <returns>The result of invoking the callback with the specified parameters.</returns>
      <exception cref="T:System.InvalidOperationException">
            The result of calling <paramref name="callback" /> implemented <see cref="T:AGI.Foundation.IEvaluator" />.
            Use <see cref="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})" /> instead of this method when the return value
            is an evaluator.
            </exception>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CallAndMemoize``5(AGI.Foundation.EvaluatorGroup.Callback4{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
      <summary>
            Optimizes calls to a <paramref name="callback" /> that is expected to be called multiple times so that future calls
            with the same parameters return a cached result rather than actually invoking the callback again.
            The first time this method is called with a particular set of parameters, the <paramref name="callback" />
            is invoked and the result is stored in the evaluator group.  The second and successive times this
            method is called with the same parameters, the cached result is returned without invoking the
            <paramref name="callback" />.
            </summary>
      <param name="callback">The method to invoke.  This method must not have side-effects.</param>
      <param name="parameter1">The first parameter to the callback.</param>
      <param name="parameter2">The second parameter to the callback.</param>
      <param name="parameter3">The third parameter to the callback.</param>
      <param name="parameter4">The fourth parameter to the callback.</param>
      <typeparam name="TResult">The type of result returned by the method.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the callback.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter to the callback.</typeparam>
      <returns>The result of invoking the callback with the specified parameters.</returns>
      <exception cref="T:System.InvalidOperationException">
            The result of calling <paramref name="callback" /> implemented <see cref="T:AGI.Foundation.IEvaluator" />.
            Use <see cref="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})" /> instead of this method when the return value
            is an evaluator.
            </exception>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CallAndMemoize``6(AGI.Foundation.EvaluatorGroup.Callback5{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
      <summary>
            Optimizes calls to a <paramref name="callback" /> that is expected to be called multiple times so that future calls
            with the same parameters return a cached result rather than actually invoking the callback again.
            The first time this method is called with a particular set of parameters, the <paramref name="callback" />
            is invoked and the result is stored in the evaluator group.  The second and successive times this
            method is called with the same parameters, the cached result is returned without invoking the
            <paramref name="callback" />.
            </summary>
      <param name="callback">The method to invoke.  This method must not have side-effects.</param>
      <param name="parameter1">The first parameter to the callback.</param>
      <param name="parameter2">The second parameter to the callback.</param>
      <param name="parameter3">The third parameter to the callback.</param>
      <param name="parameter4">The fourth parameter to the callback.</param>
      <param name="parameter5">The fifth parameter to the callback.</param>
      <typeparam name="TResult">The type of result returned by the method.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the callback.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter to the callback.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter to the callback.</typeparam>
      <returns>The result of invoking the callback with the specified parameters.</returns>
      <exception cref="T:System.InvalidOperationException">
            The result of calling <paramref name="callback" /> implemented <see cref="T:AGI.Foundation.IEvaluator" />.
            Use <see cref="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})" /> instead of this method when the return value
            is an evaluator.
            </exception>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``1(AGI.Foundation.EvaluatorGroup.Callback0{``0})">
      <summary>
            Creates an evaluator in the context of this evaluator group by invoking a callback, if the 
            evaluator does not already exist in the group.
            </summary>
      <param name="callback">The callback delegate to use to create the evaluator if the evaluator does not already exist.</param>
      <typeparam name="TEvaluator">The type of evaluator to create.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``2(AGI.Foundation.EvaluatorGroup.Callback1{``0,``1},``1)">
      <summary>
            Creates an evaluator in the context of this evaluator group by invoking a callback, if the 
            evaluator does not already exist in the group.
            </summary>
      <param name="callback">The callback delegate to use to create the evaluator if the evaluator does not already exist.</param>
      <param name="parameter1">The first parameter to pass to the callback delegate.</param>
      <typeparam name="TEvaluator">The type of evaluator to create.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback delegate.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``3(AGI.Foundation.EvaluatorGroup.Callback2{``0,``1,``2},``1,``2)">
      <summary>
            Creates an evaluator in the context of this evaluator group by invoking a callback, if the 
            evaluator does not already exist in the group.
            </summary>
      <param name="callback">The callback delegate to use to create the evaluator if the evaluator does not already exist.</param>
      <param name="parameter1">The first parameter to pass to the callback delegate.</param>
      <param name="parameter2">The second parameter to pass to the callback delegate.</param>
      <typeparam name="TEvaluator">The type of evaluator to create.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback delegate.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``4(AGI.Foundation.EvaluatorGroup.Callback3{``0,``1,``2,``3},``1,``2,``3)">
      <summary>
            Creates an evaluator in the context of this evaluator group by invoking a callback, if the 
            evaluator does not already exist in the group.
            </summary>
      <param name="callback">The callback delegate to use to create the evaluator if the evaluator does not already exist.</param>
      <param name="parameter1">The first parameter to pass to the callback delegate.</param>
      <param name="parameter2">The second parameter to pass to the callback delegate.</param>
      <param name="parameter3">The third parameter to pass to the callback delegate.</param>
      <typeparam name="TEvaluator">The type of evaluator to create.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the callback delegate.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``5(AGI.Foundation.EvaluatorGroup.Callback4{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
      <summary>
            Creates an evaluator in the context of this evaluator group by invoking a callback, if the 
            evaluator does not already exist in the group.
            </summary>
      <param name="callback">The callback delegate to use to create the evaluator if the evaluator does not already exist.</param>
      <param name="parameter1">The first parameter to pass to the callback delegate.</param>
      <param name="parameter2">The second parameter to pass to the callback delegate.</param>
      <param name="parameter3">The third parameter to pass to the callback delegate.</param>
      <param name="parameter4">The fourth parameter to pass to the callback delegate.</param>
      <typeparam name="TEvaluator">The type of evaluator to create.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter to the callback delegate.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.CreateEvaluator``6(AGI.Foundation.EvaluatorGroup.Callback5{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
      <summary>
            Creates an evaluator in the context of this evaluator group by invoking a callback, if the 
            evaluator does not already exist in the group.
            </summary>
      <param name="callback">The callback delegate to use to create the evaluator if the evaluator does not already exist.</param>
      <param name="parameter1">The first parameter to pass to the callback delegate.</param>
      <param name="parameter2">The second parameter to pass to the callback delegate.</param>
      <param name="parameter3">The third parameter to pass to the callback delegate.</param>
      <param name="parameter4">The fourth parameter to pass to the callback delegate.</param>
      <param name="parameter5">The fifth parameter to pass to the callback delegate.</param>
      <typeparam name="TEvaluator">The type of evaluator to create.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter to the callback delegate.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter to the callback delegate.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.ForceEvaluatorToBeCached(AGI.Foundation.IEvaluator)">
      <summary>
            Forces an evaluator to be cached, even if it does not appear to be called by more than one
            other evaluator.  This is useful when a single evaluator calls another evaluator in two
            different contexts, and the value should be cached between those two calls.
            </summary>
      <param name="evaluator">The evaluator to cache.</param>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.ForgetDependency(AGI.Foundation.IEvaluator)">
      <summary>
            Instructs the evaluator group to forget about a dependency for the evaluator that is currently being constructed.
            For example, if the current evaluator obtains a sub-evaluator and then decides (based on properties of the sub-evaluator,
            for example) that the sub-evaluator is not needed, it can call this method to eliminate the sub-evaluator from consideration.
            </summary>
      <param name="evaluator">
            The sub-evaluator that is no longer depended upon by the evaluator that is currently being constructed.
            </param>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.OptimizeEvaluators">
      <summary>
            Optimizes the evaluators in this group.  After calling this method, you should also call
            <see cref="M:AGI.Foundation.EvaluatorGroup.UpdateReference``1(``0)" /> to obtain an optimized version of each top-level evaluator you are using.
            </summary>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``1(AGI.Foundation.IEvaluator{``0})">
      <summary>
            Parameterizes an evaluator to take no additional parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with no additional parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.IEvaluator{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0})">
      <summary>
            Parameterizes an evaluator with one parameter.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The parameter.</param>
      <typeparam name="TParameter1">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``3(AGI.Foundation.IEvaluator{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1})">
      <summary>
            Parameterizes an evaluator with two parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``4(AGI.Foundation.IEvaluator{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2})">
      <summary>
            Parameterizes an evaluator with three parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``5(AGI.Foundation.IEvaluator{``4},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3})">
      <summary>
            Parameterizes an evaluator with four parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``6(AGI.Foundation.IEvaluator{``5},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``4})">
      <summary>
            Parameterizes an evaluator with five parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameter5">The fifth parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``6(AGI.Foundation.IEvaluator{``5},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``4},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with five parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameter5">The fifth parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``5(AGI.Foundation.IEvaluator{``4},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with four parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``4(AGI.Foundation.IEvaluator{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with three parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``3(AGI.Foundation.IEvaluator{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with two parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.IEvaluator{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with one parameter.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``1(AGI.Foundation.IEvaluator{``0},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator to take no additional parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if there are missing
            required parameters to <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with no additional parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``1(AGI.Foundation.MotionEvaluator{``0})">
      <summary>
            Parameterizes an evaluator to take no additional parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with no additional parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.MotionEvaluator{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0})">
      <summary>
            Parameterizes an evaluator with one parameter.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The parameter.</param>
      <typeparam name="TParameter1">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``3(AGI.Foundation.MotionEvaluator{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1})">
      <summary>
            Parameterizes an evaluator with two parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``4(AGI.Foundation.MotionEvaluator{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2})">
      <summary>
            Parameterizes an evaluator with three parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``5(AGI.Foundation.MotionEvaluator{``4},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3})">
      <summary>
            Parameterizes an evaluator with four parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``6(AGI.Foundation.MotionEvaluator{``5},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``4})">
      <summary>
            Parameterizes an evaluator with five parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameter5">The fifth parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``6(AGI.Foundation.MotionEvaluator{``5},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``4},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with five parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameter5">The fifth parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``5(AGI.Foundation.MotionEvaluator{``4},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with four parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``4(AGI.Foundation.MotionEvaluator{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with three parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``3(AGI.Foundation.MotionEvaluator{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with two parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if any of the specified parameters are not actually
            parameters to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.MotionEvaluator{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with one parameter.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``1(AGI.Foundation.MotionEvaluator{``0},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator to take no additional parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if there are missing 
            required parameters to <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <returns>An evaluator that can be evaluated with no additional parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.MotionEvaluator{``0,``1})">
      <summary>
            Parameterizes an evaluator to take no additional parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with no additional parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``3(AGI.Foundation.MotionEvaluator{``1,``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0})">
      <summary>
            Parameterizes an evaluator with one parameter.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The parameter.</param>
      <typeparam name="TParameter1">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``4(AGI.Foundation.MotionEvaluator{``2,``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1})">
      <summary>
            Parameterizes an evaluator with two parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``5(AGI.Foundation.MotionEvaluator{``3,``4},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2})">
      <summary>
            Parameterizes an evaluator with three parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``6(AGI.Foundation.MotionEvaluator{``4,``5},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3})">
      <summary>
            Parameterizes an evaluator with four parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``7(AGI.Foundation.MotionEvaluator{``5,``6},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``4})">
      <summary>
            Parameterizes an evaluator with five parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameter5">The fifth parameter.</param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``7(AGI.Foundation.MotionEvaluator{``5,``6},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``4},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with five parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameter5">The fifth parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``6(AGI.Foundation.MotionEvaluator{``4,``5},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``3},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with four parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameter4">The fourth parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``5(AGI.Foundation.MotionEvaluator{``3,``4},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``2},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with three parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameter3">The third parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``4(AGI.Foundation.MotionEvaluator{``2,``3},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.IEvaluatorParameter{``1},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with two parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The first parameter.</param>
      <param name="parameter2">The second parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``3(AGI.Foundation.MotionEvaluator{``1,``2},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator with one parameter.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameter1">The parameter.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if the specified parameter is not actually
            a parameter to the <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TParameter1">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with the given parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.MotionEvaluator{``0,``1},AGI.Foundation.Infrastructure.ParameterAction)">
      <summary>
            Parameterizes an evaluator to take no additional parameters.
            </summary>
      <param name="evaluatorToParameterize">The evaluator to parameterize.</param>
      <param name="parameterAction">
            Indicates whether an exception should be thrown if there are missing
            required parameters to <paramref name="evaluatorToParameterize" />.
            </param>
      <typeparam name="TResult">The type of the result of evaluating the evaluator.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives returned by evaluation.</typeparam>
      <returns>An evaluator that can be evaluated with no additional parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.EvaluatorGroup.UpdateReference``1(``0)">
      <summary>
            Updates a reference in order to ensure that references to two or more equivalent evaluators
            are reduced to a single instance.
            </summary>
      <param name="evaluator">The evaluator reference to update.</param>
      <typeparam name="T">The type of the evaluator</typeparam>
      <returns>A reference to an evaluator to use instead of the specified evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup.Callback0`1">
      <summary>
            A delegate for a method that takes no creation parameters (other than the EvaluatorGroup) and returns an evaluator.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <typeparam name="TEvaluator">The type of the created evaluator.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup.Callback1`2">
      <summary>
            A delegate for a method that takes one creation parameter (plus the EvaluatorGroup) and returns an evaluator.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <param name="parameter1">The first parameter to the creation callback.</param>
      <typeparam name="TEvaluator">The type of the created evaluator.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the evaluator creation callback.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup.Callback2`3">
      <summary>
            A delegate for a method that takes two creation parameters (plus the EvaluatorGroup) and returns an evaluator.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <param name="parameter1">The first parameter to the creation callback.</param>
      <param name="parameter2">The second parameter to the creation callback.</param>
      <typeparam name="TEvaluator">The type of the created evaluator.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the evaluator creation callback.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup.Callback3`4">
      <summary>
            A delegate for a method that takes three creation parameters (plus the EvaluatorGroup) and returns an evaluator.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <param name="parameter1">The first parameter to the creation callback.</param>
      <param name="parameter2">The second parameter to the creation callback.</param>
      <param name="parameter3">The third parameter to the creation callback.</param>
      <typeparam name="TEvaluator">The type of the created evaluator.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the evaluator creation callback.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup.Callback4`5">
      <summary>
            A delegate for a method that takes four creation parameters (plus the EvaluatorGroup) and returns an evaluator.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <param name="parameter1">The first parameter to the creation callback.</param>
      <param name="parameter2">The second parameter to the creation callback.</param>
      <param name="parameter3">The third parameter to the creation callback.</param>
      <param name="parameter4">The fourth parameter to the creation callback.</param>
      <typeparam name="TEvaluator">The type of the created evaluator.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter to the evaluator creation callback.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.EvaluatorGroup.Callback5`6">
      <summary>
            A delegate for a method that takes five creation parameters (plus the EvaluatorGroup) and returns an evaluator.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <param name="parameter1">The first parameter to the creation callback.</param>
      <param name="parameter2">The second parameter to the creation callback.</param>
      <param name="parameter3">The third parameter to the creation callback.</param>
      <param name="parameter4">The fourth parameter to the creation callback.</param>
      <param name="parameter5">The fifth parameter to the creation callback.</param>
      <typeparam name="TEvaluator">The type of the created evaluator.</typeparam>
      <typeparam name="TParameter1">The type of the first parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter to the evaluator creation callback.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter to the evaluator creation callback.</typeparam>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.FloatingPointComparison">
      <summary>
            Contains methods for comparing floating point numbers.
            </summary>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.CubeRoot(System.Double)">
      <summary>
            Computes the real-valued cube root if a given number.  The cube root of a negative value is the
            negative of the cube root of that value's magnitude.
            </summary>
      <param name="x">The value for which to compute the cube root.</param>
      <returns>The cube root.</returns>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.DivideRoundTripIsGreaterOrEqual(System.Double,System.Double)">
      <summary>
            Divides a dividend by a divisor such that if the quotient is later multiplied by the
            divisor the result is greater than or equal to the dividend.
            </summary>
      <param name="dividend">The dividend.</param>
      <param name="divisor">The divisor.</param>
      <returns>The quotient.</returns>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.DivideRoundTripIsLessOrEqual(System.Double,System.Double)">
      <summary>
            Divides a dividend by a divisor such that if the quotient is later multiplied by the
            divisor the result is less than or equal to the dividend.
            </summary>
      <param name="dividend">The dividend.</param>
      <param name="divisor">The divisor.</param>
      <returns>The quotient.</returns>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.EqualsSignificantDigits(System.Double,System.Double,System.Int32)">
      <summary>
            Compares two numbers up to the specified number of significant digits.
            </summary>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare</param>
      <param name="significantDigits">The number of significant digits to consider in the comparison.</param>
      <returns>true if the nth significant digit of the two numbers differ by no more than 1 and all preceding significant digits are equal.  Otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.EqualsSignificantDigits(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Compares two numbers up to the specified number of significant digits.
            </summary>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare</param>
      <param name="significantDigits">The number of significant digits to consider in the comparison.</param>
      <param name="maxDigitDifference">The maximum difference in the last significant digit.</param>
      <returns>true if the nth significant digit of the two numbers differ by no more than 1 and all preceding significant digits are equal.  Otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.EqualsSignificantDigitsOrAbsoluteError(System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            Compares two numbers up to the specified number of significant digits or by their absolute error.
            </summary>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare</param>
      <param name="significantDigits">The number of significant digits to consider in the comparison.</param>
      <param name="absoluteError">The maximum allowable difference between x and y.</param>
      <returns>true if the nth significant digit of the two numbers differ by no more than 1 and all preceding significant digits are equal, or if the difference between the two numbers is less than the absolute error specified.  Otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.FloatingPointComparison.GetVariableExponent(System.Double)">
      <summary>
            Returns the order N of the given variable of the form: var * 10^-(N+1) is less than 0.0
            </summary>
      <param name="var">The variable</param>
      <returns>The order of the variable</returns>
    </member>
    <member name="T:AGI.Foundation.Function`2">
      <summary>
            Represents any function.  Also provides additional information about the function
            that can be useful for clients that want to work with it in efficient ways.
            </summary>
      <typeparam name="TIndependent">The type of the independent (input) variable.</typeparam>
      <typeparam name="TDependent">The type of the dependent (output) variable.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Function`2.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Function`2.#ctor(AGI.Foundation.Function{`0,`1},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Function`2.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Function`2.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Function`2.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Function`2.Evaluate(`0)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="x">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="x">The value with which to evaluate the function.</param>
      <param name="order">
        The target order to evaluate.  Passing 0 evaluates the value only.
        Passing 1 evaluates the value and its derivative, etc. If necessary a
        result of lower or even higher order than the target may be returned.
      </param>
      <returns>
        The value of the function and additional requested derivatives, if possible.
        If necessary a lower or even higher order result may be returned.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Function`2.GetNextSampleSuggestion(`0)">
      <summary>
        Gets a suggestion for the next independent variable value at which to sample this function.
      </summary>
      <param name="x">The previous independent variable sample value.</param>
      <returns>
        A suggestion for the next independent variable sample value, or <paramref name="x" /> if this function has no suggestion.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Function`2.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Function`3">
      <summary>
            Represents any function.  Also provides additional information about the function
            that can be useful for clients that want to work with it in efficient ways.
            </summary>
      <typeparam name="TIndependent">The type of the independent (input) variable.</typeparam>
      <typeparam name="TDependent">The type of the dependent (output) variable.</typeparam>
      <typeparam name="TDependentDerivative">The type of the derivatives of the dependent (output) variable.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Function`3.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Function`3.#ctor(AGI.Foundation.Function{`0,`1,`2},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Function`3.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Function`3.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Function`3.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Function`3.Evaluate(`0)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="x">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.Function`3.Evaluate(`0,System.Int32)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="x">The value with which to evaluate the function.</param>
      <param name="order">
        The target order to evaluate.  Passing 0 evaluates the value only.
        Passing 1 evaluates the value and its derivative, etc. If necessary a
        result of lower or even higher order than the target may be returned.
      </param>
      <returns>
        The value of the function and additional requested derivatives, if possible.
        If necessary a lower or even higher order result may be returned.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Function`3.GetNextSampleSuggestion(`0)">
      <summary>
        Gets a suggestion for the next independent variable value at which to sample this function.
      </summary>
      <param name="x">The previous independent variable sample value.</param>
      <returns>
        A suggestion for the next independent variable sample value, or <paramref name="x" /> if this function has no suggestion.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Function`3.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.GaussianStatistics">
      <summary>
            Provides static methods helpful when working with Gaussian functions.
            </summary>
    </member>
    <member name="M:AGI.Foundation.GaussianStatistics.ComplementaryErrorFunction(System.Double)">
      <summary>
            Calculates the complement of <see cref="M:AGI.Foundation.GaussianStatistics.ErrorFunction(System.Double)" />. By definition this complement plus the error function
            are equal to one.
            </summary>
      <param name="x">The value to use to calculate the complement of the error function.</param>
      <returns>The complement of the error function of the given value.</returns>
    </member>
    <member name="M:AGI.Foundation.GaussianStatistics.ErrorFunction(System.Double)">
      <summary>
            Calculates the error function for all values of x.
            </summary>
      <param name="x">The value to calculate the error function of.</param>
      <returns>The error function of the given value.</returns>
    </member>
    <member name="M:AGI.Foundation.GaussianStatistics.InverseComplementaryErrorFunction(System.Double)">
      <summary>
            Calculates the inverse of the complementary error function.
            </summary>
      <param name="p">The value to use to calculate the inverse of the complementary error function, from 0.0 to 2.0.</param>
      <returns>The inverse of the complementary error function.</returns>
    </member>
    <member name="M:AGI.Foundation.GaussianStatistics.InverseErrorFunction(System.Double)">
      <summary>
            Calculates the inverse of the error function.
            </summary>
      <param name="p">The value to use to calculate the inverse of the error function, from -1.0 to 1.0.</param>
      <returns>The inverse of the error function.</returns>
    </member>
    <member name="M:AGI.Foundation.GaussianStatistics.MultiDimensionalConfidenceIntervals(System.Int32,System.Double)">
      <summary>
            Calculates the fraction of the probability distribution of a specified dimension that lies within
            the confidence interval described by the specified number of standard deviations.
            </summary>
      <param name="dimension">The dimension of the gaussian probability distribution.</param>
      <param name="sigmas">The width of the confidence interval in standard deviations.</param>
      <returns>The fraction of the probability distribution within the confidence interval, between 0.0 and 1.0.</returns>
    </member>
    <member name="M:AGI.Foundation.GaussianStatistics.MultiDimensionalStandardDeviationFactor(System.Int32,System.Double)">
      <summary>
            Calculates the number of standard deviations that describe the confidence interval which makes up
            the given portion of the probability distribution.
            </summary>
      <param name="dimension">The dimension of the gaussian probability distribution.</param>
      <param name="probability">The desired probability that an event in the probability distribution
            lies in the confidence interval described by the returned number of standard deviations, from 0.0 to 1.0;</param>
      <returns>The number of standard deviations necessary to provide the specified confidence interval.</returns>
    </member>
    <member name="T:AGI.Foundation.IDateMotionCollection`1">
      <summary>
            An interface to a collection of <see cref="T:AGI.Foundation.Motion`1" />, each of which is associated with a particular <see cref="T:AGI.Foundation.Time.JulianDate" />.
            Each <see cref="T:AGI.Foundation.Motion`1" /> instance is required to have the same <see cref="P:AGI.Foundation.Motion`1.Order" />.
            </summary>
      <typeparam name="T">
            The type of motion that this collection contains.  For example, if <typeparamref name="T" /> is
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" />, then this is collection holds <see cref="T:AGI.Foundation.Motion`1" />.
            </typeparam>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0})">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="motion">The item to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0,`0,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
      <param name="secondDerivative">The second derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.Add(AGI.Foundation.Time.JulianDate,`0[])">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="values">The values to add.  The first item in the array is the value, the second item is the first derivative, and so on.</param>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.Count">
      <summary>
            Gets the number of items in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.Dates">
      <summary>
            Gets the list of dates in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.FirstDerivatives">
      <summary>
            Gets the list of first derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.Item(System.Int32)">
      <summary>
            Gets the list of the specified derivative.
            </summary>
      <param name="index">The derivative list of retrieve.</param>
      <returns>The requested list.</returns>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.Motions">
      <summary>
            Gets the list of motion instances in this collection.
            Consider using <see cref="P:AGI.Foundation.IDateMotionCollection`1.Values" />, <see cref="P:AGI.Foundation.IDateMotionCollection`1.FirstDerivatives" />,
            <see cref="P:AGI.Foundation.IDateMotionCollection`1.SecondDerivatives" />, etc. to get all of the corresponding
            data as a single list.  This is more
            efficient than requesting a list of motion instances.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.Order">
      <summary>
            Gets the number of derivatives in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.SecondDerivatives">
      <summary>
            Gets the list of second derivatives in the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0})">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="motion">The new item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`0,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
      <param name="secondDerivative">The new second derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`1.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0[])">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="values">The new values for the item.</param>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`1.Values">
      <summary>
            Gets the list of values in the collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.IDateMotionCollection`2">
      <summary>
            An interface to a collection of <see cref="T:AGI.Foundation.Motion`2" />, each of which is associated with a particular <see cref="T:AGI.Foundation.Time.JulianDate" />.
            Each <see cref="T:AGI.Foundation.Motion`2" /> instance is required to have the same <see cref="P:AGI.Foundation.Motion`2.Order" />.
            </summary>
      <typeparam name="T">
            The coordinate type that this collection contains.  <see cref="P:AGI.Foundation.IDateMotionCollection`2.Values" /> will be collection of this type.
            </typeparam>
      <typeparam name="TDerivative">
            The derivative type that this collection contains.  <see cref="P:AGI.Foundation.IDateMotionCollection`2.FirstDerivatives" />, <see cref="P:AGI.Foundation.IDateMotionCollection`2.SecondDerivatives" />,
            and additional derivatives are lists of this type.
            </typeparam>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0,`1})">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="motion">The item to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0,`1,`1)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="firstDerivative">The first derivative to add.</param>
      <param name="secondDerivative">The second derivative to add.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.Add(AGI.Foundation.Time.JulianDate,`0,`1[])">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="date">The date associated with the item.</param>
      <param name="value">The value to add.</param>
      <param name="derivatives">The derivatives to add.  The first item in the array is the first derivative, the second item is the second derivative, and so on.</param>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.Count">
      <summary>
            Gets the number of items in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.Dates">
      <summary>
            Gets the list of dates in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.FirstDerivatives">
      <summary>
            Gets the list of first derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.Item(System.Int32)">
      <summary>
            Gets the list of the specified derivative.
            </summary>
      <param name="index">The derivative list of retrieve.</param>
      <returns>The requested list.</returns>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.Motions">
      <summary>
            Gets the list of motion instances in this collection.
            Consider using <see cref="P:AGI.Foundation.IDateMotionCollection`2.Values" />, <see cref="P:AGI.Foundation.IDateMotionCollection`2.FirstDerivatives" />,
            <see cref="P:AGI.Foundation.IDateMotionCollection`2.SecondDerivatives" />, etc. to get all of the corresponding
            data as a single list.  This is more
            efficient than requesting a list of motion instances.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.Order">
      <summary>
            Gets the number of derivatives in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.SecondDerivatives">
      <summary>
            Gets the list of second derivatives in the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{`0,`1})">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="motion">The new item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`1,`1)">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="firstDerivative">The new first derivative for the item.</param>
      <param name="secondDerivative">The new second derivative for the item.</param>
    </member>
    <member name="M:AGI.Foundation.IDateMotionCollection`2.SetItem(System.Int32,AGI.Foundation.Time.JulianDate,`0,`1[])">
      <summary>
            Sets an item at a particular index.
            </summary>
      <param name="index">The index of the item to set.</param>
      <param name="date">The new date for the item.</param>
      <param name="value">The new value for the item.</param>
      <param name="derivatives">The new derivatives for the item.</param>
    </member>
    <member name="P:AGI.Foundation.IDateMotionCollection`2.Values">
      <summary>
            Gets the list of values in the collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.IEvaluator">
      <summary>
            An interface for an evaluator that takes a <see cref="T:AGI.Foundation.Time.JulianDate" /> and produces
            a return value of a given type.
            </summary>
    </member>
    <member name="M:AGI.Foundation.IEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.IEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.IEvaluator`1">
      <summary>
            An interface for an evaluator that takes a <see cref="T:AGI.Foundation.Time.JulianDate" /> and produces
            a return value of a given type.
            </summary>
      <typeparam name="T">The type returned by the evaluator.</typeparam>
    </member>
    <member name="M:AGI.Foundation.IEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="T:AGI.Foundation.ImmutableDateMotionCollection`1">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Motion`1" />, each of which is associated with a particular <see cref="T:AGI.Foundation.Time.JulianDate" />.
            This is a convenient and efficient way to store time-varying position and velocity, etc.  Each
            <see cref="T:AGI.Foundation.Motion`1" /> instance is required to have the same <see cref="P:AGI.Foundation.Motion`1.Order" />.
            </summary>
      <typeparam name="T">
            The type of <see cref="T:AGI.Foundation.Motion`1" /> that this collection contains.  For example, if <typeparamref name="T" /> is
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" />, then this collection holds Motion&lt;Cartesian&gt;.
            </typeparam>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.Count">
      <summary>
            Gets the number of items in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.Dates">
      <summary>
            Gets the list of dates in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.FirstDerivatives">
      <summary>
            Gets the list of first derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.Item(System.Int32)">
      <summary>
            Gets the list of the specified derivative.
            </summary>
      <param name="index">The derivative list of retrieve.</param>
      <returns>The requested list.</returns>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.Motions">
      <summary>
            Gets the list of motion instances in this collection.
            Consider using <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`1.Values" />, <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`1.FirstDerivatives" />,
            <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`1.SecondDerivatives" />, etc. to get all of the corresponding
            data as a single list.  This is more
            efficient than requesting a list of motion instances.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.Order">
      <summary>
            Gets the number of derivatives in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.SecondDerivatives">
      <summary>
            Gets the list of second derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`1.Values">
      <summary>
            Gets the list of values in the collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.ImmutableDateMotionCollection`2">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Motion`2" />, each of which is associated with a particular <see cref="T:AGI.Foundation.Time.JulianDate" />.
            This is a convenient and efficient way to store time-varying position and velocity, etc.  Each
            <see cref="T:AGI.Foundation.Motion`2" /> instance is required to have the same <see cref="P:AGI.Foundation.Motion`2.Order" />.
            </summary>
      <typeparam name="T">
            The coordinate type that this collection contains.  <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`2.Values" /> will be collection of this type.
            </typeparam>
      <typeparam name="TDerivative">
            The derivative type that this collection contains.  <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`2.FirstDerivatives" />, <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`2.SecondDerivatives" />,
            and additional derivatives are lists of this type.
            </typeparam>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.Count">
      <summary>
            Gets the number of items in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.Dates">
      <summary>
            Gets the list of dates in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.FirstDerivatives">
      <summary>
            Gets the list of first derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.Item(System.Int32)">
      <summary>
            Gets the list of the specified derivative.
            </summary>
      <param name="index">The derivative list of retrieve.</param>
      <returns>The requested list.</returns>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.Motions">
      <summary>
            Gets the list of motion instances in this collection.
            Consider using <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`2.Values" />, <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`2.FirstDerivatives" />,
            <see cref="P:AGI.Foundation.ImmutableDateMotionCollection`2.SecondDerivatives" />, etc. to get all of the corresponding
            data as a single list.  This is more
            efficient than requesting a list of motion instances.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.Order">
      <summary>
            Gets the number of derivatives in this collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.SecondDerivatives">
      <summary>
            Gets the list of second derivatives in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ImmutableDateMotionCollection`2.Values">
      <summary>
            Gets the list of values in the collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.IMotion`2">
      <summary>
            Describes motion, including a coordinate and optionally one or more derivatives.
            </summary>
      <typeparam name="T">The coordinate type used to describe the motion.</typeparam>
      <typeparam name="TDerivative">The derivative type used to describe the motion.</typeparam>
    </member>
    <member name="P:AGI.Foundation.IMotion`2.FirstDerivative">
      <summary>
            Gets the first derivative, if it is available.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            This motion instance does not contain a first derivative.
            </exception>
    </member>
    <member name="P:AGI.Foundation.IMotion`2.Item(System.Int32)">
      <summary>
            Gets the indicated derivative of the motion.
            Index 1 retrieves the first derivative, if it exists.  Index 2 retrieves the second
            derivative, if it exists.  The number of available derivatives is indicated by the
            <see cref="P:AGI.Foundation.IMotion`2.Order" /> property.
            </summary>
      <param name="index">The index of the derivative to retrieve.</param>
      <returns>The requested derivative.</returns>
    </member>
    <member name="P:AGI.Foundation.IMotion`2.Order">
      <summary>
            Gets the number of derivatives described by this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.IMotion`2.SecondDerivative">
      <summary>
            Gets the second derivative, if it is available.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            This motion instance does not contain a second derivative.
            </exception>
    </member>
    <member name="P:AGI.Foundation.IMotion`2.Value">
      <summary>
            Gets the value of the coordinate.
            </summary>
    </member>
    <member name="T:AGI.Foundation.ITrackCalculationProgress">
      <summary>
            An interface that is provided to a calculation method when you want to receive updates
            about the progress of the calculation and to have the ability to cancel it.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ITrackCalculationProgress.CancellationPending">
      <summary>
            Gets a value indicating whether cancellation of the calculation is requested.
            If this returns true, the calculation will stop as soon as possible.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ITrackCalculationProgress.ReportProgress(System.Int32,System.Object)">
      <summary>
            Called periodically by the calculation to indicate its progress.
            </summary>
      <param name="percentProgress">A value between 0 and 100 indicating the progress of the calculation.  
            A value of -1 indicates that the percentage of the progress is unknown.</param>
      <param name="additionalInformation">Additional information about the progress of the calculation.  
            The type of this object depends on the specific calculation.</param>
    </member>
    <member name="T:AGI.Foundation.LicensedComponent">
      <summary>
            Represents a component of STK Components and holds information about its license status.
            </summary>
    </member>
    <member name="P:AGI.Foundation.LicensedComponent.ExpirationDate">
      <summary>
            Gets the expiration date of the component, or
            <see cref="F:System.DateTime.MaxValue" />
            
            if the component does not expire.
            </summary>
    </member>
    <member name="P:AGI.Foundation.LicensedComponent.Name">
      <summary>
            Gets the name of the component.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Licensing">
      <summary>
            Provides access to information about STK Components licensing.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Licensing.#ctor">
      <summary>
            Initializes a new instance.  It is generally not necessary to construct instances of this type.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Licensing.ActivateLicense(System.String)">
      <summary>
            Loads an STK Components license from the specified string.  In order to minimally protect your license from
            use by others, this string should be embedded in your application rather than included as a
            separate file with your application.
            </summary>
      <param name="license">The string value of the license from the license file.</param>
    </member>
    <member name="M:AGI.Foundation.Licensing.GetComponentExpirationDate(System.String)">
      <summary>
            Gets the expiration date of the specified component.  The component cannot be used after this date.
            </summary>
      <param name="componentName">The component to check.</param>
      <returns>
            The expiration date of the component, or <see cref="F:System.DateTime.MinValue" /> if no license is available
            for the component at all.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Licensing.IsComponentLicenseValid(System.String)">
      <summary>
            Determines if a valid license is available for the specified component.
            </summary>
      <param name="componentName">The component to check.</param>
      <returns>
            true if the license for the specified component is valid, otherwise
            false.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Licensing.LicensedComponents">
      <summary>
            Gets a list of components that are licensed for use.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Licensing.ValidateComponentLicense(System.String)">
      <summary>
            Checks that the license for a specified component is valid, and throws an exception if it is not.
            </summary>
      <param name="componentName">The component to check.</param>
    </member>
    <member name="T:AGI.Foundation.Motion`1">
      <summary>
            Describes motion, including a coordinate and optionally one or more derivatives.
            </summary>
      <typeparam name="T">The coordinate type used to describe the motion.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Motion`1.#ctor(`0[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="motion">The description of the motion.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="motion" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <paramref name="motion" /> does not contain any values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Motion`1.Equals(AGI.Foundation.Motion{`0})">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Motion`1.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Motion`1.FirstDerivative">
      <summary>
            Gets the first derivative, if it is available.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            This motion instance does not contain a first derivative.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Motion`1.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Motion`1.Item(System.Int32)">
      <summary>
            Gets the indicated component of the motion.
            Index 0 retrieves the coordinate value.  Index 1 retrieves the first derivative, if it
            exists.  Index 2 retrieves the second derivative, if it exists.  The number of available
            derivatives is indicated by the <see cref="P:AGI.Foundation.Motion`1.Order" /> property.
            </summary>
      <param name="index">The index of the motion component to retrieve.</param>
      <returns>The requested motion component.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is not between zero and the <see cref="P:AGI.Foundation.Motion`1.Order" /> inclusive.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Motion`1.op_Equality(AGI.Foundation.Motion{`0},AGI.Foundation.Motion{`0})">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Motion`1.op_Inequality(AGI.Foundation.Motion{`0},AGI.Foundation.Motion{`0})">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Motion`1.Order">
      <summary>
            Gets the number of derivatives described by this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Motion`1.SecondDerivative">
      <summary>
            Gets the second derivative, if it is available.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            This motion instance does not contain a second derivative.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Motion`1.Value">
      <summary>
            Gets the value of the coordinate.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Motion`2">
      <summary>
            Describes motion, including a coordinate and optionally one or more derivatives.
            </summary>
      <typeparam name="T">The coordinate type used to describe the motion.</typeparam>
      <typeparam name="TDerivative">The derivative type used to describe the motion.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Motion`2.#ctor(`0,`1[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="value">The value of the coordinate.</param>
      <param name="derivatives">The derivatives describing the motion.</param>
    </member>
    <member name="M:AGI.Foundation.Motion`2.Equals(AGI.Foundation.Motion{`0,`1})">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Motion`2.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Motion`2.FirstDerivative">
      <summary>
            Gets the first derivative, if it is available.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            This motion instance does not contain a first derivative.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Motion`2.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Motion`2.Item(System.Int32)">
      <summary>
            Gets the indicated derivative of the motion.
            Index 1 retrieves the first derivative, if it exists.  Index 2 retrieves the second
            derivative, if it exists.  The number of available derivatives is indicated by the
            <see cref="P:AGI.Foundation.Motion`2.Order" /> property.
            </summary>
      <param name="index">The index of the derivative to retrieve.</param>
      <returns>The requested derivative.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than one or greater than the <see cref="P:AGI.Foundation.Motion`2.Order" />.
            This exception can also be thrown if this object does not contain any derivatives.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Motion`2.op_Equality(AGI.Foundation.Motion{`0,`1},AGI.Foundation.Motion{`0,`1})">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Motion`2.op_Inequality(AGI.Foundation.Motion{`0,`1},AGI.Foundation.Motion{`0,`1})">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Motion`2.Order">
      <summary>
            Gets the number of derivatives described by this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Motion`2.SecondDerivative">
      <summary>
            Gets the second derivative, if it is available.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            This motion instance does not contain a second derivative.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Motion`2.Value">
      <summary>
            Gets the coordinate value.
            </summary>
    </member>
    <member name="T:AGI.Foundation.MotionEvaluator`1">
      <summary>
            The base class for evaluators that take a <see cref="T:AGI.Foundation.Time.JulianDate" /> and produce
            <see cref="T:AGI.Foundation.Motion`1" />.
            </summary>
      <typeparam name="T">The type of motion returned by evaluation.</typeparam>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.#ctor(AGI.Foundation.MotionEvaluator{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.MotionEvaluator`1.AvailabilityIntervals">
      <summary>
        Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> over which data is available.
        If the availability interval is infinite, this returns
        <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates this evaluator at a specified fixed step over the specified interval.
            </summary>
      <param name="start">The start of the interval over which to evaluate.</param>
      <param name="stop">The end of the interval over which to evaluate.</param>
      <param name="step">The step size with which to sample this evaluator.</param>
      <param name="order">
            The target order to evaluate.  Passing 0 evaluates the value only.
            Passing 1 evaluates the value and its derivative, etc. If necessary a result
            of lower or even higher order than the target may be returned.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete..</param>
      <returns>The evaluated results, or null if the evaluation was canceled.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
          Evaluates the function.
        </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <param name="order">
          The target order to evaluate.  Passing 0 evaluates the value only.
          Passing 1 evaluates the value and its derivative, etc. If necessary a
          result of lower or even higher order than the target may be returned.
        </param>
      <returns>
          The value of the function and additional requested derivatives, if possible.
          If necessary a lower or even higher order result may be returned.
        </returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.Evaluate(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates this evaluator at a specified fixed step over the specified interval.
            </summary>
      <param name="interval">The interval over which to evaluate.</param>
      <param name="step">The step size with which to sample this evaluator.</param>
      <param name="order">
            The target order to evaluate.  Passing 0 evaluates the value only.
            Passing 1 evaluates the value and its derivative, etc. If necessary a result
            of lower or even higher order than the target may be returned.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete..</param>
      <returns>The evaluated results, or null if the evaluation was canceled.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.EvaluateMotionWithoutOrder(AGI.Foundation.Time.JulianDate)">
      <summary>
          Evaluates the function using a default order.
        </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.MotionEvaluator`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.MotionEvaluator`2">
      <summary>
            The base class for evaluators that take a <see cref="T:AGI.Foundation.Time.JulianDate" /> and produce
            <see cref="T:AGI.Foundation.Motion`2" />.
            </summary>
      <typeparam name="T">The type of motion returned by evaluation.</typeparam>
      <typeparam name="TDerivative">The type of the derivatives returned by evaluation.</typeparam>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.#ctor(AGI.Foundation.MotionEvaluator{`0,`1},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.MotionEvaluator`2.AvailabilityIntervals">
      <summary>
        Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> over which data is available.
        If the availability interval is infinite, this returns
        <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
        Evaluates the function.
      </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.Evaluate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates this evaluator at a specified fixed step over the specified interval.
            </summary>
      <param name="start">The start of the interval over which to evaluate.</param>
      <param name="stop">The end of the interval over which to evaluate.</param>
      <param name="step">The step size with which to sample this evaluator.</param>
      <param name="order">
            The target order to evaluate.  Passing 0 evaluates the value only.
            Passing 1 evaluates the value and its derivative, etc. If necessary a
            result of lower or even higher order than the target may be returned.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete..</param>
      <returns>The evaluated results, or null if the evaluation was canceled.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.Evaluate(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates this evaluator at a specified fixed step over the specified interval.
            </summary>
      <param name="interval">The interval over which to evaluate.</param>
      <param name="step">The step size with which to sample this evaluator.</param>
      <param name="order">
            The target order to evaluate.  Passing 0 evaluates the value only.
            Passing 1 evaluates the value and its derivative, etc. If necessary a
            result of lower or even higher order than the target may be returned.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete..</param>
      <returns>The evaluated results, or null if the evaluation was canceled.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.EvaluateMotionWithoutOrder(AGI.Foundation.Time.JulianDate)">
      <summary>
          Evaluates the function using a default order.
        </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.MotionEvaluator`2.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.MotionEvaluator`2.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.ObjectFrozenException">
      <summary>
            An exception that is thrown when an attempt is made to modify an object that has been frozen
            with a call to <see cref="M:AGI.Foundation.Infrastructure.IFreezable.Freeze" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.#ctor(System.Object)">
      <summary>
            Initializes a new instance with a reference to the frozen object.
            </summary>
      <param name="frozenObject">The object that is frozen.</param>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.#ctor(System.Object,System.Exception)">
      <summary>
            Initializes a new instance with a specified frozen object and a reference to the inner
            exception that is the cause of this exception.
            </summary>
      <param name="frozenObject">The object that is frozen.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.#ctor(System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="message">The message associated with the exception.</param>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="message">The message associated with the exception.</param>
      <param name="innerException">The inner exception that caused this exception.</param>
    </member>
    <member name="P:AGI.Foundation.ObjectFrozenException.FrozenObject">
      <summary>
            Gets the object that was frozen.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ObjectFrozenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Will set the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            with information referring to the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the 
            serialized object data referring to the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information pertaining to the source or destination.</param>
    </member>
    <member name="T:AGI.Foundation.PropertyInvalidException">
      <summary>
            An exception that indicates that a property required for an operation has an invalid value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.PropertyInvalidException.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.PropertyInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.PropertyInvalidException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified property name.
            </summary>
      <param name="propertyName">The name of the property that has an invalid value.</param>
    </member>
    <member name="M:AGI.Foundation.PropertyInvalidException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified property name and a reference to the inner
            exception that is the cause of this exception.
            </summary>
      <param name="propertyName">The name of the property that has an invalid value.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:AGI.Foundation.PropertyInvalidException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified property name.
            </summary>
      <param name="propertyName">The name of the property that has an invalid value.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:AGI.Foundation.PropertyInvalidException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Will set the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            with information referring to the excepton.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the 
            serialized object data referring to the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information pertaining to the source or destination.</param>
    </member>
    <member name="P:AGI.Foundation.PropertyInvalidException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotBeLessThanOne">
      <summary>
            A message string indicating that a property must be greater than or equal to one.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotBeNegative">
      <summary>
            A message string indicating that a property cannot be negative.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotBeNull">
      <summary>
            A message string indicating that a property cannot be null.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotBePositive">
      <summary>
            A message string indicating that a property cannot be positive.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotBeZero">
      <summary>
            A message string indicating that a property may not be set to zero.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotContainNullElements">
      <summary>
            A message string indicating that a property cannot contain null elements.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyCannotHaveZeroElements">
      <summary>
            A message string indicating that a property cannot have zero elements.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyMustBeNegative">
      <summary>
            A message string indicating that a property must be negative.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyMustBePositive">
      <summary>
            A message string indicating that a property must be positive.
            </summary>
    </member>
    <member name="F:AGI.Foundation.PropertyInvalidException.PropertyMustBeSet">
      <summary>
            A message string indicating that a property must be set prior to execution.
            </summary>
    </member>
    <member name="P:AGI.Foundation.PropertyInvalidException.PropertyName">
      <summary>
            Gets the name of the property that is required.
            </summary>
    </member>
    <member name="T:AGI.Foundation.ScopedEvaluatorGroup">
      <summary>
            An <see cref="T:AGI.Foundation.EvaluatorGroup" /> that automatically calls <see cref="M:AGI.Foundation.EvaluatorGroup.OptimizeEvaluators" /> when it
            is disposed.  This is helpful for temporary evaluator groups that are not created directly by the user.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ScopedEvaluatorGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.ScopedEvaluatorGroup" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.ScopedEvaluatorGroup.Dispose">
      <summary>
            Calls <see cref="M:AGI.Foundation.EvaluatorGroup.OptimizeEvaluators" /> to eliminate redundancy in the evaluators
            created within the group.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ScopedEvaluatorGroup.Group">
      <summary>
            Gets the <see cref="T:AGI.Foundation.EvaluatorGroup" /> associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ScopedEvaluatorGroup.op_Implicit(AGI.Foundation.ScopedEvaluatorGroup)~AGI.Foundation.EvaluatorGroup">
      <summary>
            Implicitly converts this instance to an <see cref="T:AGI.Foundation.EvaluatorGroup" /> by returning the
            <see cref="P:AGI.Foundation.ScopedEvaluatorGroup.Group" /> property.
            </summary>
      <param name="group">The scoped group to convert.</param>
      <returns>The group held by this instance.</returns>
    </member>
    <member name="T:AGI.Foundation.ServiceNotAvailableException">
      <summary>
            An exception that indicates that a required service is not available from an
            <see cref="T:System.IServiceProvider" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.#ctor">
      <summary>
            Initializes a new instance with a default message.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.#ctor(System.String,System.Type,System.IServiceProvider)">
      <summary>
            Initializes a new instance with a custom message.
            </summary>
      <param name="message">The custom message to use.</param>
      <param name="requiredService">The required service that was not available.</param>
      <param name="provider">The provider that did not have the required service.</param>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.#ctor(System.Type,System.IServiceProvider)">
      <summary>
            Initializes a new instance with the service that was required and the provider from
            which it was requested.
            </summary>
      <param name="requiredService">The required service that was not available.</param>
      <param name="provider">The provider that did not have the required service.</param>
    </member>
    <member name="M:AGI.Foundation.ServiceNotAvailableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Will set the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            with information referring to the excepton.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the 
            serialized object data referring to the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information pertaining to the source or destination.</param>
    </member>
    <member name="P:AGI.Foundation.ServiceNotAvailableException.Provider">
      <summary>
            Gets the provider that did not have the required service.
            </summary>
    </member>
    <member name="P:AGI.Foundation.ServiceNotAvailableException.RequiredService">
      <summary>
            Gets the required service that was not available.
            </summary>
    </member>
    <member name="T:AGI.Foundation.ServiceProviderCollection">
      <summary>
            A collection of instances that implement <see cref="T:System.IServiceProvider" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ServiceProviderCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.ServiceProviderCollection.#ctor(AGI.Foundation.ServiceProviderCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.ServiceProviderCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{System.IServiceProvider})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.ServiceProviderCollection.CheckForSameDefinition(AGI.Foundation.ServiceProviderCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.ServiceProviderCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.ServiceProviderCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:AGI.Foundation.SignalDirection">
      <summary>
            Indicates the sense of the direction of a signal with respect to an observer.
            </summary>
    </member>
    <member name="F:AGI.Foundation.SignalDirection.Receive">
      <summary>
            The signal is received at the observer.
            </summary>
    </member>
    <member name="F:AGI.Foundation.SignalDirection.Transmit">
      <summary>
            The signal is transmitted at the observer.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StkComponentsCore">
      <summary>
            Version information for the STK Components Core library.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsCore.DisplayVersion">
      <summary>
            The display version of the library: <c>2015 r2</c>.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsCore.Version">
      <summary>
            The numeric version of the library: <c>15.2.379.0</c>.
            </summary>
    </member>
    <member name="T:AGI.Foundation.ThreadException">
      <summary>
            Wraps an exception that was thrown in a worker thread so that it can be
            re-thrown in the main thread without losing call stack information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ThreadException.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.ThreadException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="innerException">The actual exception that occurred in the thread.</param>
    </member>
    <member name="M:AGI.Foundation.ThreadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.ThreadException.#ctor(System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="message">The message of the exception.</param>
    </member>
    <member name="M:AGI.Foundation.ThreadException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="message">The message of the exception.</param>
      <param name="innerException">The actual exception that occurred in the thread.</param>
    </member>
    <member name="T:AGI.Foundation.Trig">
      <summary>
            Provides functions and constants which are useful when working with angles and solving
            problems related to trigonometry.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Trig.AngleEpsilon">
      <summary>
            Represents the smallest positive angle greater than zero for which the
            <see cref="M:System.Math.Cos(System.Double)" /> function will produce a distinct value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Trig.AreAnglesEquivalent(System.Double,System.Double,System.Double)">
      <summary>
            Checks to see whether the two given angles represent the same direction in the unit circle,
            regardless of any multiples of <see cref="F:AGI.Foundation.Constants.TwoPi" />.
            </summary>
      <param name="firstAngle">The first angle to check, in radians.</param>
      <param name="secondAngle">The second angle to check, in radians.</param>
      <param name="tolerance">The tolerance to use when comparing the two angles, in radians.</param>
      <returns>True if the two angles represent the same angular direction in the unit circle.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.DegreesMinutesSecondsToRadians(AGI.Foundation.DegreesMinutesSeconds)">
      <summary>
            Converts the specified number of revolutions, degrees, minutes, and seconds to radians.
            </summary>
      <param name="dms">The <see cref="T:AGI.Foundation.DegreesMinutesSeconds" /> to be converted to radians.</param>
      <returns>The corresponding angle in radians.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.DegreesMinutesSecondsToRadians(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Converts the specified number of revolutions, degrees, minutes, and seconds to radians.
            </summary>
      <param name="revolutions">The number of complete (360 degree) revolutions.</param>
      <param name="degrees">The number of degrees.</param>
      <param name="minutes">The number of minutes.</param>
      <param name="seconds">The number of seconds.</param>
      <returns>The corresponding angle in radians.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.DegreesToRadians(System.Double)">
      <summary>
            Converts degrees to radians.
            </summary>
      <param name="deg">The angle to convert in degrees.</param>
      <returns>The corresponding angle in radians.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.GetSmallSpan(System.Double,System.Double)">
      <summary>
            Get the signed small span between two arbitrary angles, in radians.
            This will return the angle in radians between minus Pi and Pi representing
            the angular distance between the two given angles.  It will remove the
            effect of 'winding' and compare the angular distance on the unit circle.
            </summary>
      <param name="startAngle">The first angle, in radians.</param>
      <param name="stopAngle">The second angle, in radians.</param>
      <returns>The signed small span between the two angles, in radians.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.IsAngleInRange(System.Double,System.Double,System.Double)">
      <summary>
            Checks to see if an angle is within the indicated range of values.
            </summary>
      <param name="minimum">The minimum angle value.</param>
      <param name="maximum">The maximum angle value.</param>
      <param name="angle">The angle value being checked.</param>
      <returns>true if <paramref name="angle" /> is within the indicated range of values, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.NegativePiToPi(System.Double)">
      <summary>
            Produces an angle in the range -Pi &lt;= angle &lt;= Pi which is equivalent to the provided angle.
            </summary>
      <param name="angle">The angle to be adjusted.</param>
      <returns>The adjusted angle.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.PutAngleInRange(System.Double,System.Double,System.Double)">
      <summary>
            Attempts to put an angle within the indicated range of values.
            </summary>
      <param name="minimum">The minimum angle value.</param>
      <param name="maximum">The maximum angle value.</param>
      <param name="angle">The angle value being checked.</param>
      <returns>The final angle value after attempting to place it within the indicated range.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value of <paramref name="angle" />
            cannot be placed within the open interval defined by the specified <paramref name="minimum" />
            and <paramref name="maximum" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Trig.RadiansToDegrees(System.Double)">
      <summary>
            Converts radians to degrees.
            </summary>
      <param name="angle">The angle to convert in radians.</param>
      <returns>The corresponding angle in degrees.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.RadiansToDegreesMinutesSeconds(System.Double)">
      <summary>
            Converts the specified angle in radians to revolutions, degrees, minutes, and seconds.
            </summary>
      <param name="radians">The angle in radians</param>
      <returns>The corresponding angle in DMS.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.TryPutAngleInRange(System.Double,System.Double,System.Double,System.Double@)">
      <summary>
            Attempts to put an angle within the indicated range of values.
            </summary>
      <param name="minimum">The minimum angle value.</param>
      <param name="maximum">The maximum angle value.</param>
      <param name="angle">The angle value being checked.</param>
      <param name="result">
            
            On return,
            the final angle value after attempting to place it within the indicated range.
            </param>
      <returns>true if <paramref name="result" /> is within the indicated range of values, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Trig.ZeroToTwoPi(System.Double)">
      <summary>
            Produces an angle in the range 0 &lt;= angle &lt; 2Pi which is equivalent to the provided angle.
            </summary>
      <param name="angle">The angle to be adjusted.</param>
      <returns>The adjusted angle.</returns>
    </member>
    <member name="T:AGI.Foundation.UnsupportedCaseException">
      <summary>
            The exception that is thrown when an unsupported case is encountered in a selection statement.
            </summary>
    </member>
    <member name="M:AGI.Foundation.UnsupportedCaseException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.UnsupportedCaseException" /> class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.UnsupportedCaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.UnsupportedCaseException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:AGI.Foundation.UnsupportedCaseException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:AGI.Foundation.Access.AccessClassification">
      <summary>
            The possible states of an Access availability computation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessClassification.NoAccess">
      <summary>
            Access is not available
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessClassification.AccessExists">
      <summary>
            Access is available
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessClassification.AccessUnknown">
      <summary>
            Access may be either available or unavailable, but data is missing
            so the computation cannot be completed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessComputation">
      <summary>
            Computes Access, or inter-visibility, between two objects.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.#ctor(AGI.Foundation.Access.AccessComputation,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.CalculateCompleteIntervalsPerConstraint">
      <summary>
            Gets or sets a value indicating whether satisfaction intervals are computed for each
            constraint in the Access computation.  If this value is set to true,
            <see cref="P:AGI.Foundation.Access.AccessEvaluationResult.ConstraintResults" /> will contain an entry for each
            constraint, and <see cref="P:AGI.Foundation.Access.AccessConstraintEvaluationResult.SatisfactionIntervals" /> will
            be filled with the intervals over which the constraint was satisfied.  If this value
            is set to false, <see cref="P:AGI.Foundation.Access.AccessEvaluationResult.ConstraintResults" /> will be null.
            The value of this property will not affect <see cref="P:AGI.Foundation.Access.AccessEvaluationResult.OverallSatisfactionIntervals" />.
            Generally, setting this property to false will result in much better performance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.CheckForSameDefinition(AGI.Foundation.Access.AccessComputation)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.ComputeIntervals(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the intervals during which all constraints are satisfied.
            </summary>
      <param name="start">The earliest date to consider.</param>
      <param name="end">The latest date to consider.</param>
      <returns>The result of the Access evaluation.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.ComputeIntervals(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Finds the intervals during which all constraints are satisfied.
            </summary>
      <param name="start">The earliest date to consider.</param>
      <param name="end">The latest date to consider.</param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <returns>The result of the Access evaluation.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.ComputeIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Finds the intervals during which all constraints are satisfied.
            </summary>
      <param name="computationIntervals">The list of intervals over which to compute Access.</param>
      <returns>The result of the Access evaluation.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.ComputeIntervals(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Finds the intervals during which all constraints are satisfied.
            </summary>
      <param name="computationIntervals">The list of intervals over which to compute Access.</param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <returns>The result of the Access evaluation.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when no access constraints were configured when this method is called.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.CreateQuery">
      <summary>
            Creates an <see cref="T:AGI.Foundation.Access.AccessQuery" /> from this computation.
            </summary>
      <returns>A query which is equivalent to this computation.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.DebuggingLogger">
      <summary>
            Gets or sets a logger to which debugging information will be written.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.EventTimes">
      <summary>
            Gets or sets the manner in which event times are to be reported.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to determine whether Access is available
            for individual Julian dates.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessComputation.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to determine whether Access is available
            for individual Julian dates.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.InertialFrameForLightTravel">
      <summary>
            Gets or sets the inertial reference frame in which light travel is modeled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.LightTravelTimeConvergenceTolerance">
      <summary>
            Gets or sets the convergence tolerance used in determining the light travel time.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the user attempts to set a tolerance 
            less than or equal to zero.</exception>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.Model">
      <summary>
            Gets or sets which effects are to be consider in modeling the signal path and observation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.OverrideConstraintSampling">
      <summary>
            Gets or sets a value indicating whether the sampling parameters specified by <see cref="P:AGI.Foundation.Access.AccessComputation.Sampling" /> should be
            applied to all constraints, overriding the sampling parameters specified by the constraints themselves.  By
            default, this value is true.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.Receiver">
      <summary>
            Gets or sets the <see cref="T:System.IServiceProvider" /> for the object that is receiving the signal for
            purposes of the Access computation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.ReceiverConstraints">
      <summary>
            Gets a list of constraints that are applied to the <see cref="P:AGI.Foundation.Access.AccessComputation.Receiver" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.ReceiverVelocityVectorForAberration">
      <summary>
            Gets or sets the velocity vector used in modeling the affect of aberration on the observed signal
            at the location of the receiver.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.Sampling">
      <summary>
            Gets an instance describing how all constraints are to be sampled as part of this <see cref="T:AGI.Foundation.Access.AccessComputation" />
            if <see cref="P:AGI.Foundation.Access.AccessComputation.OverrideConstraintSampling" /> is true.  If <see cref="P:AGI.Foundation.Access.AccessComputation.OverrideConstraintSampling" />
            is false, this property is ignored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.Transmitter">
      <summary>
            Gets or sets the <see cref="T:System.IServiceProvider" /> for the object that is transmitting the signal for
            purposes of the Access computation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.TransmitterConstraints">
      <summary>
            Gets a list of constraints that are applied to the <see cref="P:AGI.Foundation.Access.AccessComputation.Transmitter" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessComputation.TransmitterVelocityVectorForAberration">
      <summary>
            Gets or sets the velocity vector used in modeling the affect of aberration on the observed signal
            at the location of the transmitter.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraint">
      <summary>
            A constraint between two objects.  Constraints have a function (preferably continuous near f(x)=0)
            which is their degree of satisfaction.  This allows the exact start or end of the interval during
            which the constraint is satisfied to be computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.#ctor(AGI.Foundation.Access.AccessConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraint.Applicability">
      <summary>
            Gets or sets the Access situation in which this constraint applies.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraint.EvaluationOrder">
      <summary>
            Gets or sets a number indicating the evaluation order of this constraint relative
            to other constraints.  All constraints involved in an 
            <see cref="T:AGI.Foundation.Access.AccessComputation" /> or that share a common parent (e.g. <see cref="T:AGI.Foundation.Access.AccessQueryAnd" /> or
            <see cref="T:AGI.Foundation.Access.AccessQueryOr" />) in an <see cref="T:AGI.Foundation.Access.AccessQuery" /> are sorted by this value before being evaluated in
            ascending order, so constraints with a lower evaluation order are evaluated earlier than constraints with
            a higher evaluation order.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.GetEvaluationOrder">
      <summary>
            Returns <see cref="P:AGI.Foundation.Access.AccessConstraint.EvaluationOrder" />, indicating the suggested evaluation order of
            this constraint when it is used as part of an <see cref="T:AGI.Foundation.Access.AccessQuery" />.  Queries that hold sub-queries
            (such as an <see cref="T:AGI.Foundation.Access.AccessQueryAnd" />) generally evaluate their sub-queries in
            ascending order of this value, so constraints with a lower evaluation order are evaluated earlier than
            constraints with a higher evaluation order.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraint.Sampling">
      <summary>
            Gets an instance describing how this constraint is to be sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraint.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintApplicability">
      <summary>
            An indication of when an access constraint applies.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintApplicability.AppliesAlways">
      <summary>
            The constraint always applies, no matter whether the object to which 
            the constraint is attached is the "Transmitter" object or the "Receiver" object.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintApplicability.TransmitterOnly">
      <summary>
            The constraint only applies during access computations in which
            the object to which the constraint is attached is the "Transmitter"
            object.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintApplicability.ReceiverOnly">
      <summary>
            The constraint only applies during access computations in which
            the object to which the constraint is attached is the "Receiver"
            object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintCollection">
      <summary>
            A collection of Access constraints.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.#ctor(AGI.Foundation.Access.AccessConstraintCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraintCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{AGI.Foundation.Access.AccessConstraint})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:AGI.Foundation.Access.AccessConstraintCollection" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="E:AGI.Foundation.Access.AccessConstraintCollection.ConstraintAdded">
      <summary>
            Occurs when a constraint is added.
            </summary>
    </member>
    <member name="E:AGI.Foundation.Access.AccessConstraintCollection.ConstraintRemoved">
      <summary>
            Occurs when a constraint is removed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.InsertItem(System.Int32,AGI.Foundation.Access.AccessConstraint)">
      <summary>
            Inserts an element into the <see cref="T:AGI.Foundation.Access.AccessConstraintCollection" />
            at the given index.
            </summary>
      <param name="index">The index, based at zero, where the item is to be inserted.</param>
      <param name="item">The specific object that is being inserted (Value can be null for reference types).</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the given index of the <see cref="T:AGI.Foundation.Access.AccessConstraintCollection" />.
            </summary>
      <param name="index">The index, based at zero, where the item is to be removed.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintCollection.SetItem(System.Int32,AGI.Foundation.Access.AccessConstraint)">
      <summary>
            Replaces the element at the given index.
            </summary>
      <param name="index">The index, based at zero, where the item is to be replaced.</param>
      <param name="item">The new value for the element at the given index (Value can be null for reference types). </param>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintEvaluationResult">
      <summary>
            Holds the result of evaluating an Access constraint over an interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluationResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Access.AccessConstraintEvaluationResult" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraintEvaluationResult.Constraint">
      <summary>
            Gets the constraint instance that was evaluated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraintEvaluationResult.SatisfactionIntervals">
      <summary>
            Gets the intervals during which the constraint is satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraintEvaluationResult.Source">
      <summary>
            Gets the type or source of the constraint.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraintEvaluationResult.UnknownIntervals">
      <summary>
            Gets the intervals during which the access engine
            was unable to compute access for this constraint due to missing data.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintEvaluationResultCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Access.AccessConstraintEvaluationResult">AccessConstraintEvaluationResults</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluationResultCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluationResultCollection.#ctor(System.Collections.Generic.IList{AGI.Foundation.Access.AccessConstraintEvaluationResult})">
      <summary>Initializes a new instance.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintEvaluator">
      <summary>
            The base class for Access constraint evaluators.
            <para>
            The result of the <see cref="M:AGI.Foundation.MotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)" />
            method should be a scalar value indicating satisfaction for positive values.  If possible, it
            should also report the rates of change of the scalar constraint value.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluator.#ctor(AGI.Foundation.Access.AccessConstraintEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraintEvaluator.DebuggingLogger">
      <summary>
            Gets or sets the logger used to examine access query evaluations.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintEvaluator.DefaultTolerance">
      <summary>
            The default <see cref="P:AGI.Foundation.Access.AccessConstraintEvaluator.Tolerance" /> value used by this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluator.GetQueryEvaluator(System.IServiceProvider,AGI.Foundation.Access.AccessConstraint,System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and returns an <see cref="T:AGI.Foundation.Access.AccessEvaluator" /> wrapping a given constraint evaluator.
            </summary>
      <param name="inputTimeObserver">The <see cref="T:System.IServiceProvider" /> to use as a time observer
            in creating this query evaluator. Input times to be evaluated will be with respect to this observer,
            and this method will adjust the times as necessary for the constraint's
            <paramref name="requiredTimeObserver" />.</param>
      <param name="constraint">The constraint being evaluated.</param>
      <param name="requiredTimeObserver">
            The time observer that is required by the constraint function.  This method will attempt to reconcile the
            constraint's requested time observer against the <see cref="T:System.IServiceProvider" /> specified in
            <paramref name="inputTimeObserver" />.
            </param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintEvaluator.IsSatisfied(AGI.Foundation.Time.JulianDate)">
      <summary>
          Determines if the constraint is satisfied for a particular Julian date.
        </summary>
      <param name="date">The date to examine.</param>
      <returns>True if the constraint is satisfied, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessConstraintEvaluator.Tolerance">
      <summary>
            Gets the tolerance on the constraint value to use when computing the time when this constraint crosses its threshold.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintHelper">
      <summary>
            Contains helper methods that are useful when writing Access constraints.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintHelper.GetConstrainedLinkEnd(AGI.Foundation.Access.ILinkConstraint)">
      <summary>
            Gets the object at the end of the link to which a specified constraint is applied.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>The object at the end of the link to which the constraint is applied.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintHelper.GetDisplacementVectorForLinkConstraint(AGI.Foundation.Access.ILinkConstraint)">
      <summary>
            Gets the displacement vector for a given link constraint and time observer.
            </summary>
      <param name="constraint">The link constraint for which to obtain the displacement vector.</param>
      <returns>The displacement vector.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The <see cref="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLink" /> property of <paramref name="constraint" /> does not provide
            <see cref="T:AGI.Foundation.Access.ILinkService" />.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            The <see cref="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLinkEnd" /> property is neither <see cref="F:AGI.Foundation.Access.LinkRole.Transmitter" /> nor
            <see cref="F:AGI.Foundation.Access.LinkRole.Receiver" />.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintSampling">
      <summary>
            Contains static methods that can be useful to a constraint in determining the size of the next sampling step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintSampling.GetNextStepFromRelativeMotion(AGI.Foundation.Time.JulianDate,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double)">
      <summary>
            Computes an appropriate next sample step based on the relative motion between the two
            platforms involved in the Access computation and a maximum relative motion per step.
            </summary>
      <param name="epoch">The epoch from which the next sample is to be determined.</param>
      <param name="relativeMotion">The relative motion between the platforms.</param>
      <param name="maximumAngularMotion">The maximum angular motion allowed, in radians.</param>
      <returns>The Julian date at which the next sample should be evaluated.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintSampling.GetNextStepFromRelativeMotionEvaluator(AGI.Foundation.Access.ILinkConstraint,System.Double,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that determines the next time at which to sample a constraint function
            based on the relative motion between two objects and a maximum relative motion per step.
            </summary>
      <param name="constraint">The constraint from which the two objects (the observer and target) should be determined.</param>
      <param name="maximumAngularMotion">The maximum angular motion allowed, in radians.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            Thrown when any one of the following conditions are met:
            <list type="bullet"><item><description>The constraint's <see cref="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLink" /> does not provide <see cref="T:AGI.Foundation.Access.ILinkService" />.</description></item><item><description>The end of the link that is identified as the observer does not provide <see cref="T:AGI.Foundation.Geometry.IKinematicStateService" />.</description></item><item><description>The end of the link that is identified as the target does not provide <see cref="T:AGI.Foundation.Geometry.ILocationPointService" />.</description></item></list></exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when any of the following conditions are met:
            <list type="bullet"><item><description>The constraint's <see cref="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLink" /> property is null.</description></item><item><description>The link's <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" /> property is null.</description></item><item><description>The link's <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" /> property is null.</description></item><item><description>The end of the link which is identified as the observer has a null <see cref="P:AGI.Foundation.Geometry.IKinematicStateService.ReferenceFrame" /> property.</description></item><item><description>The end of the link which is identified as the target has a null <see cref="P:AGI.Foundation.Geometry.ILocationPointService.LocationPoint" /> property.</description></item></list></exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintSampling.GetNextStepFromRelativeMotionEvaluator(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.Point,System.Double,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that determines the next time at which to sample a constraint function
            based on the relative motion between two objects and a maximum relative motion per step.
            </summary>
      <param name="observer">The reference frame from which the motion of the <paramref name="target" /> is observed.</param>
      <param name="target">The point describing the motion of the object that is being observed.</param>
      <param name="maximumAngularMotion">The maximum angular motion allowed, in radians.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessConstraintSampling.GetNextStepFromRelativeMotionEvaluator(System.IServiceProvider,System.IServiceProvider,System.Double,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that determines the next time at which to sample a constraint function
            based on the relative motion between two objects and a maximum relative motion per step.
            </summary>
      <param name="observer">The object that is observing the motion of the <paramref name="target" />.</param>
      <param name="target">The object whose motion is being observed.</param>
      <param name="maximumAngularMotion">The maximum angular motion allowed, in radians.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The <paramref name="observer" /> does not provide <see cref="T:AGI.Foundation.Geometry.IKinematicStateService" /> or the
            <paramref name="target" /> does not provide <see cref="T:AGI.Foundation.Geometry.ILocationPointService" />.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            The <paramref name="observer" /> object's <see cref="T:AGI.Foundation.Geometry.IKinematicStateService" /> has a null
            <see cref="P:AGI.Foundation.Geometry.IKinematicStateService.ReferenceFrame" /> property or the <paramref name="target" /> object's
            <see cref="T:AGI.Foundation.Geometry.ILocationPointService" /> has a null <see cref="P:AGI.Foundation.Geometry.ILocationPointService.LocationPoint" />
            property.
            </exception>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintSampling.StandardMaximumMotionPerSample">
      <summary>
            A common value for the maximum angular motion between two objects that is allowed when choosing
            the next time at which to sample an Access constraint.  This corresponds to about 20 degrees.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessConstraintSource">
      <summary>
            Indicates the source of an Access constraint.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintSource.TransmitterConstraint">
      <summary>
            The constraint is owned by the <see cref="T:AGI.Foundation.Access.AccessComputation" /> instance and associated with the "Transmitter" platform.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintSource.ReceiverConstraint">
      <summary>
            The constraint is owned by the <see cref="T:AGI.Foundation.Access.AccessComputation" /> instance and associated with the "Receiver" platform.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintSource.InheritedTransmitterConstraint">
      <summary>
            The constraint is owned by and inherited from the "Transmitter" platform.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessConstraintSource.InheritedReceiverConstraint">
      <summary>
            The constraint is owned by and inherited from the "Receiver" platform.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessEvaluationResult">
      <summary>
            Holds the result of evaluating Access between two objects.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluationResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Access.AccessEvaluationResult" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessEvaluationResult.ConstraintResults">
      <summary>
            Gets the results of Constraint evaluation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessEvaluationResult.OverallSatisfactionIntervals">
      <summary>
            Gets the overall intervals during which all constraints are satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessEvaluationResult.OverallUnknownIntervals">
      <summary>
            Gets the intervals during which the access engine
            was unable to compute access due to missing data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessEvaluationResult.Receiver">
      <summary>
            Gets the receiver in the Access computation. 
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessEvaluationResult.Transmitter">
      <summary>
            Gets the transmitter in the Access computation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessEvaluator">
      <summary>
            An evaluator that determines whether access exists for an <see cref="T:AGI.Foundation.Access.AccessQuery" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.#ctor(AGI.Foundation.Access.AccessEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Access.AccessEvaluator.DebuggingLogger">
      <summary>
            Gets or sets the logger used to examine access query evaluations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.Evaluate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates the query over an interval.
            </summary>
      <param name="start">The earliest date to consider.</param>
      <param name="end">The latest date to consider.</param>
      <returns>The result of evaluating the query over the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.Evaluate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the query over an interval.
            </summary>
      <param name="start">The earliest date to consider.</param>
      <param name="end">The latest date to consider.</param>
      <param name="tracker">
            The object to which progress is reported and that is able to cancel this operation before it is complete.
            </param>
      <returns>The result of evaluating the query over the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.Evaluate(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Evaluates the query over an interval.
            </summary>
      <param name="consideredInterval">The interval over which to evaluate the query.</param>
      <returns>The result of evaluating the query over the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.Evaluate(AGI.Foundation.Time.TimeInterval,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the query over an interval.
            </summary>
      <param name="consideredInterval">The interval over which to evaluate the query.</param>
      <param name="tracker">
            The object to which progress is reported and that is able to cancel this operation before it is complete.
            </param>
      <returns>The result of evaluating the query over the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.Evaluate(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Evaluates the query over a collection of intervals.
            </summary>
      <param name="consideredIntervals">The collection of intervals over which to evaluate the query.</param>
      <returns>The result of evaluating the query over the intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.Evaluate(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the query over a collection of intervals.
            </summary>
      <param name="consideredIntervals">The collection of intervals over which to evaluate the query.</param>
      <param name="tracker">
            The object to which progress is reported and that is able to cancel this operation before it is complete.
            </param>
      <returns>The result of evaluating the query over the intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.EvaluateIgnoringAvailability(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates the query at a specified time without determining whether the underlying
            constraints and geometry are available.  This can produce an improvement in runtime
            performance at the cost of assuming that the underlying data will always be available.
            </summary>
      <param name="date">The time at which to evaluate access.</param>
      <returns>An indication of whether the access query is satisfied at this time or not.</returns>
      <exception cref="T:AGI.Foundation.DataUnavailableException">This will throw an exception if an evaluator involved
            in the overall access evaluation does not have data available.  The calling code is responsible
            for ensuring that this is only called at times where all data is expected to be available.</exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessEventTimes">
      <summary>
            Indicates the manner in which event times are to be reported.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessEventTimes.ReportReceiverEventTimes">
      <summary>
            Report observed times of events with respect to the <see cref="P:AGI.Foundation.Access.AccessComputation.Receiver" /> object.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessEventTimes.ReportTransmitterEventTimes">
      <summary>
            Report observed times of events with respect to the <see cref="P:AGI.Foundation.Access.AccessComputation.Transmitter" /> object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQuery">
      <summary>
            A query that determines whether or not Access exists for a given time or for intervals of time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.#ctor(AGI.Foundation.Access.AccessQuery,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.And(AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Creates a query that is satisfied whenever all of its sub-queries are satisfied.
            </summary>
      <param name="queries">The queries, all of which must be satisfied.</param>
      <returns>The new query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AnyPath(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Access.LinkGraph)">
      <summary>
            Creates a query which is satisfied whenever any path exists between a given transmitter and receiver.  The possible
            paths are defined by a <see cref="T:AGI.Foundation.Access.LinkGraph" />.
            </summary>
      <param name="transmitter">The transmitter.</param>
      <param name="receiver">The receiver.</param>
      <param name="linkGraph">
            The graph of links from which the possible paths between the <paramref name="transmitter" /> and <paramref name="receiver" />
            are computed.
            </param>
      <returns>A query that is satisfied whenever a path exists.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AnyPath``1(System.IServiceProvider,System.IServiceProvider,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates a query which is satisfied whenever any path exists between a given transmitter and receiver.  The possible
            paths are deduced from a list of links.
            </summary>
      <param name="transmitter">The transmitter.</param>
      <param name="receiver">The receiver.</param>
      <param name="links">The list of links from which the possible paths are deduced.</param>
      <typeparam name="T">The type used to represent a link.</typeparam>
      <returns>A query that is satisfied whenever a path exists.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AnyPath(System.IServiceProvider,System.IServiceProvider,System.Int32,AGI.Foundation.Access.LinkGraph)">
      <summary>
            Creates a query which is satisfied whenever any path exists between a given transmitter and receiver.  The possible
            paths are defined by a <see cref="T:AGI.Foundation.Access.LinkGraph" />.
            </summary>
      <param name="transmitter">The transmitter.</param>
      <param name="receiver">The receiver.</param>
      <param name="maximumLength">
            The maximum length of a path between the transmitter and receiver, expressed as the number of links traversed.
            To allow paths of any length, pass <see cref="F:System.Int32.MaxValue" /> for this argument.
            </param>
      <param name="linkGraph">
            The graph of links from which the possible paths between the <paramref name="transmitter" /> and <paramref name="receiver" />
            are computed.
            </param>
      <returns>A query that is satisfied whenever a path exists.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AnyPath``1(System.IServiceProvider,System.IServiceProvider,System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates a query which is satisfied whenever any path exists between a given transmitter and receiver.  The possible
            paths are deduced from a list of links.
            </summary>
      <param name="transmitter">The transmitter.</param>
      <param name="receiver">The receiver.</param>
      <param name="maximumLength">
            The maximum length of a path between the transmitter and receiver, expressed as the number of links traversed.
            To allow paths of any length, pass <see cref="F:System.Int32.MaxValue" /> for this argument.
            </param>
      <param name="links">The list of links from which the possible paths are deduced.</param>
      <typeparam name="T">The type used to represent a link.</typeparam>
      <returns>A query that is satisfied whenever a path exists.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AnyPath(System.IServiceProvider,System.IServiceProvider,System.Int32,System.IServiceProvider[])">
      <summary>
            Creates a query which is satisfied whenever any path exists between a given transmitter and receiver.  The possible
            paths are deduced from a list of links.
            </summary>
      <param name="transmitter">The transmitter.</param>
      <param name="receiver">The receiver.</param>
      <param name="maximumLength">
            The maximum length of a path between the transmitter and receiver, expressed as the number of links traversed.
            To allow paths of any length, pass <see cref="F:System.Int32.MaxValue" /> for this argument.
            </param>
      <param name="links">The list of links from which the possible paths are deduced.</param>
      <returns>A query that is satisfied whenever a path exists.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AnyPath(System.IServiceProvider,System.IServiceProvider,System.IServiceProvider[])">
      <summary>
            Creates a query which is satisfied whenever any path exists between a given transmitter and receiver.  The possible
            paths are deduced from a list of links.
            </summary>
      <param name="transmitter">The transmitter.</param>
      <param name="receiver">The receiver.</param>
      <param name="links">The list of links from which the possible paths are deduced.</param>
      <returns>A query that is satisfied whenever a path exists.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AtLeastN(System.Int32,AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Creates a query that is satisfied whenever at least N of the specified sub-queries are satisfied.
            </summary>
      <param name="n">The number of the given queries that must be satisfied for the returned query to be satisfied.</param>
      <param name="queries">The queries, at least <paramref name="n" /> of which must be satisfied.</param>
      <returns>The new query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.AtMostN(System.Int32,AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Creates a query that is satisfied whenever no more than N of the specified sub-queries are satisfied.
            </summary>
      <param name="n">The maximum number of the given queries that can be satisfied for the returned query to be satisfied.</param>
      <param name="queries">The queries, at most <paramref name="n" /> of which can be satisfied.</param>
      <returns>The new query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQuery.DebuggingLogger">
      <summary>
            Gets or sets a logger to which debugging information will be written.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.ExactlyN(System.Int32,AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Creates a query that is satisfied whenever exactly N of the specified sub-queries are satisfied.
            </summary>
      <param name="n">The number of the given queries that can be satisfied for the returned query to be satisfied.</param>
      <param name="queries">The queries, exactly <paramref name="n" /> of which must be satisfied.</param>
      <returns>The new query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.FromObject(System.IServiceProvider)">
      <summary>
            Constructs an access query from the constraints applied to a given object.  The given object can be
            a link, such as <see cref="T:AGI.Foundation.Access.LinkInstantaneous" /> or <see cref="T:AGI.Foundation.Access.LinkSpeedOfLight" />, or it can be
            a single object, such as
            <see cref="T:AGI.Foundation.Platforms.Platform" />.
            
            </summary>
      <param name="constrainedObject">The link or single object from which to construct a query.</param>
      <returns>The query.</returns>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="constrainedObject" /> does not have any constraints associated with it.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.FromObjectAllowNoConstraints(System.IServiceProvider)">
      <summary>
            Constructs an access query from the constraints applied to a given object or link.  The specified
            object is allowed to not have any constraints, in which case null will
            be returned.  This method is identical to <see cref="M:AGI.Foundation.Access.AccessQuery.FromObject(System.IServiceProvider)" /> except that it will not
            throw when the object does not provide the <see cref="T:AGI.Foundation.Access.IAccessConstraintsService" />.
            </summary>
      <param name="constrainedObject">The link or single object from which to construct a query.</param>
      <returns>The query, or null if the object does not have any constraints.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query.  Queries that hold sub-queries
            (such as an <see cref="T:AGI.Foundation.Access.AccessQueryAnd" />) generally evaluate their sub-queries in
            ascending order of this value, so queries with a lower evaluation order are evaluated
            earlier than queries with a higher evaluation order.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.GetEvaluator(System.IServiceProvider)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.Not(AGI.Foundation.Access.AccessQuery)">
      <summary>
            Creates a query that is satisfied whenever a given sub-query is NOT satisfied.
            </summary>
      <param name="query">The query to invert.</param>
      <returns>The new query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.op_BitwiseAnd(AGI.Foundation.Access.AccessQuery,AGI.Foundation.Access.AccessQuery)">
      <summary>
            Combines two queries using a logical AND operation.  The resulting query will only be satisfied
            when both of the input queries are satisfied.
            </summary>
      <param name="first">The first query.</param>
      <param name="second">The second query.</param>
      <returns>A new query which is a logical AND of the <paramref name="first" /> and <paramref name="second" /> queries.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.op_BitwiseOr(AGI.Foundation.Access.AccessQuery,AGI.Foundation.Access.AccessQuery)">
      <summary>
            Combines two queries using a logical OR operation.  The resulting query will only be satisfied
            when either of the input queries are satisfied.
            </summary>
      <param name="first">The first query.</param>
      <param name="second">The second query.</param>
      <returns>A new query which is a logical OR of the <paramref name="first" /> and <paramref name="second" /> queries.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.op_LogicalNot(AGI.Foundation.Access.AccessQuery)">
      <summary>
            Inverts a query using a logical NOT operation.  The new query is satisfied whenever the original is not.
            </summary>
      <param name="query">The query to invert.</param>
      <returns>The inverted query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.Or(AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Creates a query that is satisfied whenever any of its sub-queries are satisfied.
            </summary>
      <param name="queries">The queries, any of which can be satisfied.</param>
      <returns>The new query.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQuery.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF). 
            </summary>
      <returns>An equivalent query expressed in disjunctive normal form (DNF).</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryAnd">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessQuery" /> which is a logical AND of two or more sub-queries.  This query will only
            be considered satisfied when all sub-queries are satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.#ctor(AGI.Foundation.Access.AccessQuery,AGI.Foundation.Access.AccessQuery)">
      <summary>
            Initializes a new instance representing the logical AND of two sub-queries.
            </summary>
      <param name="first">The first sub-query.</param>
      <param name="second">The second sub-query.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.#ctor(AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Initializes a new instance representing the logical AND of any number of sub-queries.
            </summary>
      <param name="queries">The sub-queries.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Access.AccessQuery})">
      <summary>
            Initializes a new instance representing the logical AND of any number of sub-queries.
            </summary>
      <param name="queries">The sub-queries.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query, which is a function of the 
            evaluation orders of the queries in this query's <see cref="P:AGI.Foundation.Access.AccessQueryAnd.Queries" /> collection.
            The evaluation order is computed by sorting the sub-queries by 
            their evaluation orders (lowest first). 
            Then starting with the first sub-query’s evaluation order, it adds half of the subsequent sub-query’s 
            evaluation order to it. Next it will add a quarter of the following sub-query’s 
            evaluation order, and so on. Each time it adds a fraction of each subsequent sub-query’s
            evaluation order. This fraction starts as one half and is raised to a power dependent upon
            the order of the sub-query in the sorted array of queries 
            (e.g. ½^0 for the first, ½^1 for the second, and ½^2 for the third). 
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryAnd.Queries">
      <summary>
            Gets the collection of sub-queries.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAnd.ToString">
      <summary>
            Returns a string which represents the current object.
            </summary>
      <returns>A string which represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryAtLeastN">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessQuery" /> that requires at least N of a list of sub-queries to be satisfied
            in order to be considered satisfied itself.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.#ctor(System.Int32,AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="n">The number of <paramref name="queries" /> that must be satisfied.</param>
      <param name="queries">The queries, at least <paramref name="n" /> of which must be satisfied in order for this query to be satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.#ctor(System.Int32,System.Collections.Generic.IEnumerable{AGI.Foundation.Access.AccessQuery})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="n">The number of <paramref name="queries" /> that must be satisfied.</param>
      <param name="queries">The queries, at least <paramref name="n" /> of which must be satisfied in order for this query to be satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query by adding up the evaluation orders
            of this query's sub-queries, as returned by their <see cref="M:AGI.Foundation.Access.AccessQuery.GetEvaluationOrder" /> methods.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryAtLeastN.N">
      <summary>
            Gets or sets the number of <see cref="P:AGI.Foundation.Access.AccessQueryAtLeastN.Queries" /> that must be satisfied in order for this query to be satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryAtLeastN.Queries">
      <summary>
            Gets the collection of queries, at least <see cref="P:AGI.Foundation.Access.AccessQueryAtLeastN.N" /> of which must be satisfied in order for this query to be satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtLeastN.ToString">
      <summary>
            Returns a string which represents the current object.
            </summary>
      <returns>A string which represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryAtMostN">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessQuery" /> that requires that no more than N of a list of sub-queries be satisfied
            in order to be considered satisfied itself.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.#ctor(System.Int32,AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="n">The maximum number of <paramref name="queries" /> that must be satisfied.</param>
      <param name="queries">The queries, at most <paramref name="n" /> of which can be satisfied in order for this query to be satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.#ctor(System.Int32,System.Collections.Generic.IEnumerable{AGI.Foundation.Access.AccessQuery})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="n">The maximum number of <paramref name="queries" /> that must be satisfied.</param>
      <param name="queries">The queries, at most <paramref name="n" /> of which can be satisfied in order for this query to be satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query by adding up the evaluation orders
            of this query's sub-queries, as returned by their <see cref="M:AGI.Foundation.Access.AccessQuery.GetEvaluationOrder" /> methods.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryAtMostN.N">
      <summary>
            Gets or sets the number of <see cref="P:AGI.Foundation.Access.AccessQueryAtMostN.Queries" /> that must be satisfied in order for this query to be satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryAtMostN.Queries">
      <summary>
            Gets the collection of queries, at most <see cref="P:AGI.Foundation.Access.AccessQueryAtMostN.N" /> of which can be satisfied in order for this query to be satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryAtMostN.ToString">
      <summary>
            Returns a string which represents the current object.
            </summary>
      <returns>A string which represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Access.AccessQuery" /> objects.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryCollection.#ctor(AGI.Foundation.Access.AccessQueryCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryCollection.CheckForSameDefinition(AGI.Foundation.Access.AccessQueryCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{AGI.Foundation.Access.AccessQuery})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryExactlyN">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessQuery" /> that requires exactly N of a list of sub-queries to be satisfied
            in order to be considered satisfied itself.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.#ctor(System.Int32,AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="n">The number of <paramref name="queries" /> that must be satisfied.</param>
      <param name="queries">The queries, exactly <paramref name="n" /> of which must be satisfied in order for this query to be satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.#ctor(System.Int32,System.Collections.Generic.IEnumerable{AGI.Foundation.Access.AccessQuery})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="n">The number of <paramref name="queries" /> that must be satisfied.</param>
      <param name="queries">The queries, exactly <paramref name="n" /> of which must be satisfied in order for this query to be satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query by adding up the evaluation orders
            of this query's sub-queries, as returned by their <see cref="M:AGI.Foundation.Access.AccessQuery.GetEvaluationOrder" /> methods.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryExactlyN.N">
      <summary>
            Gets or sets the number of <see cref="P:AGI.Foundation.Access.AccessQueryExactlyN.Queries" /> that must be satisfied in order for this query to be satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryExactlyN.Queries">
      <summary>
            Gets the collection of queries, exactly <see cref="P:AGI.Foundation.Access.AccessQueryExactlyN.N" /> of which must be satisfied in order for this query to be satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryExactlyN.ToString">
      <summary>
            Returns a string which represents the current object.
            </summary>
      <returns>A string which represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryNot">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessQuery" /> which is a logical NOT of another query.  This query will be satisfied
            whenever the <see cref="P:AGI.Foundation.Access.AccessQueryNot.InvertedQuery" /> is not satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.#ctor(AGI.Foundation.Access.AccessQuery)">
      <summary>
            Initializes a new instance representing the logical NOT of a query.
            </summary>
      <param name="invertedQuery">The query to invert.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query, which is the value returned by
            <see cref="P:AGI.Foundation.Access.AccessQueryNot.InvertedQuery">InvertedQuery's</see><see cref="M:AGI.Foundation.Access.AccessQuery.GetEvaluationOrder" />
            method.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryNot.InvertedQuery">
      <summary>
            Gets or sets the query to invert.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryNot.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryOr">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessQuery" /> which is a logical OR of two or more sub-queries.  This query will
            be considered satisfied when at least one sub-query is satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.#ctor(AGI.Foundation.Access.AccessQuery,AGI.Foundation.Access.AccessQuery)">
      <summary>
            Initializes a new instance representing the logical OR of two sub-queries.
            </summary>
      <param name="first">The first sub-query.</param>
      <param name="second">The second sub-query.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.#ctor(AGI.Foundation.Access.AccessQuery[])">
      <summary>
            Initializes a new instance representing the logical OR of any number of sub-queries.
            </summary>
      <param name="queries">The sub-queries.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Access.AccessQuery})">
      <summary>
            Initializes a new instance representing the logical OR of any number of sub-queries.
            </summary>
      <param name="queries">The sub-queries.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.CheckForSameDefinition(AGI.Foundation.Access.AccessQuery)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.GetEvaluationOrder">
      <summary>
            Gets the suggested evaluation order of this query by adding up the evaluation orders
            of this query's sub-queries, as returned by their <see cref="M:AGI.Foundation.Access.AccessQuery.GetEvaluationOrder" /> methods.
            </summary>
      <returns>The suggested evaluation order.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.GetEvaluator(System.IServiceProvider,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to evaluate this query for a given time or for intervals of time.
            </summary>
      <param name="timeObserver">The <see cref="T:System.IServiceProvider" /> time observer to use when evaluating this query.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryOr.Queries">
      <summary>
            Gets the collection of sub-queries.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.ToDisjunctiveNormalForm">
      <summary>
            Transforms this query to disjunctive normal form (DNF).
            </summary>
      <returns>
            An equivalent query expressed in disjunctive normal form (DNF).
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryOr.ToString">
      <summary>
            Returns a string which represents the current object.
            </summary>
      <returns>A string which represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.AccessQueryResult">
      <summary>
            Holds the result of evaluating an <see cref="T:AGI.Foundation.Access.AccessQuery" /> over intervals.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryResult.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.AccessQueryResult.#ctor(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="satisfactionIntervals">The intervals during which the query is satisfied.</param>
      <param name="unknownIntervals">The intervals during which it is unknown whether or not the query is satisfied because insufficient data is available.</param>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryResult.SatisfactionIntervals">
      <summary>
            Gets the intervals during which the query is satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AccessQueryResult.UnknownIntervals">
      <summary>
            Gets the intervals during which it is unknown whether or
            not the query is satisfied because insufficient information is available.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AccessSignalModel">
      <summary>
            Indicates which effects are to be consider in modeling the signal path and observation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessSignalModel.TruePosition">
      <summary>
            Model the true relative position of the objects.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessSignalModel.ApparentPositionWithLightTravelTime">
      <summary>
            Model the apparent relative position of the objects accounting for light travel time.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.AccessSignalModel.ApparentPositionWithLightTravelTimeAndAberration">
      <summary>
            Model the apparent relative position of the objects accounting for light travel time and aberration.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint">
      <summary>
            An <see cref="T:AGI.Foundation.Access.AccessConstraint" /> which is always satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.#ctor(AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.#ctor(System.IServiceProvider)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="link">The link to which this constraint applies.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.CheckForSameDefinition(AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  Usually this corresponds to the
            end of the link that is observing the relationship between the objects for the purpose of the constraint
            computation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.AlwaysSatisfiedLinkConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.CircularAccessConstraint">
      <summary>
            Defines methods for implementing a circular function used to compute access.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.#ctor(AGI.Foundation.Access.CircularAccessConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.CheckForSameDefinition(AGI.Foundation.Access.CircularAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.NormalizedStartAngle">
      <summary>
          Gets the normalized value of <see cref="P:AGI.Foundation.Access.CircularAccessConstraint.StartAngle" /> which lies
          within <see cref="F:AGI.Foundation.Constants.TwoPi" /> of zero.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.NormalizedStopAngle">
      <summary>
          Gets the normalized value of <see cref="P:AGI.Foundation.Access.CircularAccessConstraint.StopAngle" /> which lies
          within <see cref="F:AGI.Foundation.Constants.TwoPi" /> of zero.
        </summary>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.SetAngularRegion(System.Double,System.Double)">
      <summary>
          Sets the satisfaction region given the two angles forming the boundary:
          <see cref="P:AGI.Foundation.Access.CircularAccessConstraint.StartAngle" /> and <see cref="P:AGI.Foundation.Access.CircularAccessConstraint.StopAngle" />.
          The region is defined from the <paramref name="startAngle" /> increasing to the <paramref name="stopAngle" />.
        </summary>
      <param name="startAngle">The angle at the start of the boundary.</param>
      <param name="stopAngle">The angle at the end of the boundary.</param>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.StartAngle">
      <summary>
          Gets or sets the angle defining the beginning of the satisfaction region.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.StopAngle">
      <summary>
          Gets or sets the angle defining the end of the satisfaction region
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.Tolerance">
      <summary>
        Gets or sets the tolerance on the constraint value to use when computing the time when this constraint crosses its threshold.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator">
      <summary>
            Base class for Access constraint evaluators which evaluate circular functions.
            This class provides functionality for handling angular values within a certain
            constrained angular region of a circle.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.#ctor(AGI.Foundation.Access.CircularAccessConstraint)">
      <summary>
            Initializes a new instance based on the circular region of <paramref name="constraint" />.
            </summary>
      <param name="constraint">The circular function which constrains the angular function values.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="constraint" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.#ctor(AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.GetFunctionValueInDomain(System.Double)">
      <summary>
          Converts the given angle value to lie in the domain represented by
          the current <see cref="P:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.StartAngle" />
          and <see cref="P:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.StopAngle" />.
        </summary>
      <param name="value">Value of the angle to convert.</param>
      <returns>An angle normalized to the midpoint of the satisfaction region.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.StartAngle">
      <summary>
          Gets or sets the angle defining the beginning of the satisfaction region.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.CircularAccessConstraint.CircularAccessConstraintEvaluator.StopAngle">
      <summary>
          Gets or sets the angle defining the end of the satisfaction region
        </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ConstraintAddedEventArgs">
      <summary>
            Provides data for the <see cref="E:AGI.Foundation.Access.AccessConstraintCollection.ConstraintAdded" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.ConstraintAddedEventArgs.#ctor(AGI.Foundation.Access.AccessConstraint)">
      <summary>
            Initializes a new instance using the specified <see cref="T:AGI.Foundation.Access.AccessConstraint" />.
            </summary>
      <param name="constraint">An instance that represents the constraint being added.</param>
    </member>
    <member name="P:AGI.Foundation.Access.ConstraintAddedEventArgs.Constraint">
      <summary>
            Gets or sets the constraint that is being added.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ConstraintQueryBuilder">
      <summary>
            This type is used to build an <see cref="T:AGI.Foundation.Access.AccessQuery" /> from a single constraint by assembling all
            of the individual functions that make up the constraint.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.ConstraintQueryBuilder.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.ConstraintQueryBuilder.AddConstraintFunction(AGI.Foundation.Access.AccessConstraintEvaluator)">
      <summary>
            Adds a constraint function to the query.  Times passed to the evaluator will be expressed
            on the default participant for the constraint.
            </summary>
      <param name="evaluator">The evaluator for the constraint function to add.</param>
    </member>
    <member name="M:AGI.Foundation.Access.ConstraintQueryBuilder.AddConstraintFunction(AGI.Foundation.Access.AccessConstraintEvaluator,System.IServiceProvider)">
      <summary>
            Adds a constraint function to the query.  Times passed to the evaluator will be expressed
            on the given participant.
            </summary>
      <param name="evaluator">The evaluator for the constraint function to add.</param>
      <param name="requiredTimeObserver">
            The participant on which times passed to the evaluator should be expressed.  For a constraint
            that implements <see cref="T:AGI.Foundation.Access.ISingleObjectConstraint" />, this parameter must be null
            or the same as <see cref="P:AGI.Foundation.Access.ISingleObjectConstraint.ConstrainedObject" />.  For a constraint that implements
            <see cref="T:AGI.Foundation.Access.ILinkConstraint" />, this parameter must be null or the same as one of the
            two ends of the <see cref="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLink" />.
            If this parameter is null, this method is identical to
            <see cref="M:AGI.Foundation.Access.ConstraintQueryBuilder.AddConstraintFunction(AGI.Foundation.Access.AccessConstraintEvaluator)" />.
            </param>
    </member>
    <member name="P:AGI.Foundation.Access.ConstraintQueryBuilder.Evaluators">
      <summary>
            Gets the list of evaluators that are part of this constraint query.  To add a constraint
            evaluator to the list, call <see cref="M:AGI.Foundation.Access.ConstraintQueryBuilder.AddConstraintFunction(AGI.Foundation.Access.AccessConstraintEvaluator,System.IServiceProvider)" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ConstraintQueryBuilder.InputTimeObserver">
      <summary>
            Gets or sets the <see cref="T:System.IServiceProvider" /> to use as the time observer for this query.
            Inputs into this query will be adjusted as necessary for the time observers of the constraints
            in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ConstraintQueryBuilder.RequiredTimeObservers">
      <summary>
            Gets the list of time observers required by each evaluator in this constraint query.  There will
            be one item in this list for each item in <see cref="P:AGI.Foundation.Access.ConstraintQueryBuilder.Evaluators" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ConstraintRemovedEventArgs">
      <summary>
            Provides data for the <see cref="E:AGI.Foundation.Access.AccessConstraintCollection.ConstraintRemoved" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.ConstraintRemovedEventArgs.#ctor(AGI.Foundation.Access.AccessConstraint)">
      <summary>
            Initializes a new instance using the specified <see cref="T:AGI.Foundation.Access.AccessConstraint" />.
            </summary>
      <param name="constraint">An instance that represents the constraint being removed.</param>
    </member>
    <member name="P:AGI.Foundation.Access.ConstraintRemovedEventArgs.Constraint">
      <summary>
            Gets or sets the constraint that is being removed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.EvaluatorDelayedByLink`1">
      <summary>
            An evaluator which wraps another evaluator while delaying it by a time specified by a 
            <see cref="T:AGI.Foundation.Geometry.LinkDelayEvaluator" />.
            </summary>
      <typeparam name="T">The return type of the wrapped evaluator.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.#ctor(AGI.Foundation.Evaluator{`0},AGI.Foundation.Geometry.LinkDelayEvaluator)">
      <summary>
            Construct a new instance based on the given evaluator delayed by the given link delay.
            </summary>
      <param name="evaluator">The evaluator to delay.</param>
      <param name="delay">The link delay evaluator.</param>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluate the inner evaluator at a time delayed from <paramref name="date" /> by the
            specified <see cref="T:AGI.Foundation.Geometry.LinkDelayEvaluator" />.
            </summary>
      <param name="date">The non-delayed time.</param>
      <returns>The result of the <see cref="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.InnerEvaluator" /> 
            at the delayed time.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.InnerEvaluator">
      <summary>
            Gets the evaluator which is delayed by the <see cref="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.LinkDelay" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns the availability at the non-delayed time.
            Returns true if availability for the <see cref="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.LinkDelay" />
            is true at <paramref name="date" /> and the 
            <see cref="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.InnerEvaluator" /> is true at the delayed time.
            </summary>
      <param name="date">The date to check.</param>
      <returns>Availability for the delayed evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.IsThreadSafe">
      <summary>
            Gets the thread safety of this delayed evaluator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.LinkDelay">
      <summary>
            Gets the link delay applied to the <see cref="P:AGI.Foundation.Access.EvaluatorDelayedByLink`1.InnerEvaluator" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.EvaluatorDelayedByLink`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Update the delay and inner evaluators.
            </summary>
      <param name="context">The copy context to use to update.</param>
    </member>
    <member name="T:AGI.Foundation.Access.IAccessConstraintsService">
      <summary>
            A service that provides <see cref="T:AGI.Foundation.Access.AccessConstraint">AccessConstraints</see>.  This is intended
            to be used with <see cref="M:AGI.Foundation.Access.AccessQuery.FromObject(System.IServiceProvider)" />, which will configure the constraints to
            ensure that they are configured to apply to the link (<see cref="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLink" />) or 
            object (<see cref="P:AGI.Foundation.Access.ISingleObjectConstraint.ConstrainedObject" />) to which they are attached.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.IAccessConstraintsService.Constraints">
      <summary>
            Gets the collection of <see cref="T:AGI.Foundation.Access.AccessConstraint">AccessConstraints</see> attached to the 
            given <see cref="T:System.IServiceProvider" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.IAccessResultService">
      <summary>
            A service that provides Access results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.IAccessResultService.AccessResult">
      <summary>
            Gets the Access results.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ICompositeAccessQuery">
      <summary>
            An interface to an <see cref="T:AGI.Foundation.Access.AccessQuery" /> which is composed of one or more sub-queries.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ICompositeAccessQuery.Queries">
      <summary>
            Gets the collection of sub-queries.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ILinkConstraint">
      <summary>
            An interface to an <see cref="T:AGI.Foundation.Access.AccessConstraint" /> that constrains the relationship between two objects.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ILinkConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  Usually this corresponds to the
            end of the link that is observing the relationship between the objects for the purpose of the constraint
            computation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ILinkService">
      <summary>
            A service interface that provides the most basic methods for modeling a communication link
            between a transmitter and a receiver.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.ILinkService.GetOffsetToReceptionTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that, given a time at which something is transmitted by the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" />,
            evaluates the time at which it will be received by the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" />.  The time is
            expressed as an offset from the input time.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.ILinkService.GetOffsetToTransmissionTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that, given a time at which something is received at the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" />,
            evaluates the time at which it was transmitted by the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" />.  The time is
            expressed as an offset from the input time.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.ILinkService.GetReceiverDisplacementRelativeToTransmitter">
      <summary>
            Gets a displacement vector that represents the displacement to the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" /> as observed
            by the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" />.
            </summary>
      <returns>The displacement vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.ILinkService.GetTransmitterDisplacementRelativeToReceiver">
      <summary>
            Gets a displacement vector that represents the displacement to the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" /> as observed
            by the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" />.
            </summary>
      <returns>The displacement vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.ILinkService.Receiver">
      <summary>
            Gets the object that is receiving.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ILinkService.Transmitter">
      <summary>
            Gets the object that is transmitting.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.ISingleObjectConstraint">
      <summary>
            An interface to an <see cref="T:AGI.Foundation.Access.AccessConstraint" /> that involves only one object.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.ISingleObjectConstraint.ConstrainedObject">
      <summary>
            Gets or sets the object to which this constraint applies.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.LinkGraph">
      <summary>
            A graph of links (<see cref="T:System.IServiceProvider" /> instances providing <see cref="T:AGI.Foundation.Access.ILinkService" />)
            represented as an adjacency list.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Access.LinkGraph" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.AddLink(System.IServiceProvider)">
      <summary>
            Adds a link to the graph.
            </summary>
      <param name="link">The link to add.</param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.Contains(System.IServiceProvider)">
      <summary>
            Determines whether the given link is in the graph.
            </summary>
      <param name="link">The link to locate in the graph.</param>
      <returns>True if the link is in the graph; otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.FindAllLinksAtNode(System.IServiceProvider,AGI.Foundation.Access.LinkGraphDirection)">
      <summary>
            Find all the links which contain the given node and are in the correct direction.
            </summary>
      <param name="node">The node for which to search.</param>
      <param name="direction">The direction for which to search.</param>
      <returns>A list of links containing the given node and with the node at the correct end.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.FindAllPaths(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Access.LinkGraphDirection)">
      <summary>
            Finds all paths between two objects.  The first returned path is the shortest and successive paths are
            arranged in increasing order of distance.
            </summary>
      <param name="initial">The source object.</param>
      <param name="final">The destination object.</param>
      <param name="direction">
            The direction of the signal.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Transmit" />, the
            <paramref name="initial" /> object is transmitting to the <paramref name="final" /> object and all links
            along the way must be in the transmit direction.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Receive" />,
            the <paramref name="final" /> object is receiving from the <paramref name="final" /> object and all
            links along the way must be in the receive direction.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Ignore" />,
            the signal direction is ignored and links in either direction can be traversed.
            </param>
      <returns>
            A list of paths between the objects.  Each path is a list of links that are traversed along the path.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.FindAllPaths(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Access.LinkGraphDirection,System.Int32)">
      <summary>
            Finds all paths between two objects.  The first returned path is the shortest and successive paths are
            arranged in increasing order of distance.
            </summary>
      <param name="initial">The source object.</param>
      <param name="final">The destination object.</param>
      <param name="direction">
            The direction of the signal.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Transmit" />, the
            <paramref name="initial" /> object is transmitting to the <paramref name="final" /> object and all links
            along the way must be in the transmit direction.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Receive" />,
            the <paramref name="final" /> object is receiving from the <paramref name="final" /> object and all
            links along the way must be in the receive direction.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Ignore" />,
            the signal direction is ignored and links in either direction can be traversed.
            </param>
      <param name="maximumLength">The maximum length of paths to explore.  The length of a path is the number of links in the path.</param>
      <returns>
            A list of paths between the objects.  Each path is a list of links that are traversed along the path.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkGraph.FindShortestPath(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Access.LinkGraphDirection)">
      <summary>
            Finds the shortest path between an initial object and a final object.
            </summary>
      <param name="initial">The initial object.</param>
      <param name="final">The final object.</param>
      <param name="direction">
            The direction of the signal.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Transmit" />, the
            <paramref name="initial" /> object is transmitting to the <paramref name="final" /> object and all links
            along the way must be in the transmit direction.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Receive" />,
            the <paramref name="final" /> object is receiving from the <paramref name="final" /> object and all
            links along the way must be in the receive direction.  If this parameter is <see cref="F:AGI.Foundation.Access.LinkGraphDirection.Ignore" />,
            the signal direction is ignored and links in either direction can be traversed.
            </param>
      <returns>
            A list of links traversed along the shortest path from <paramref name="initial" /> to <paramref name="final" />.
            If a path does not exist, null is returned.  If the initial and final objects are the same
            an empty array is returned.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Access.LinkGraphDirection">
      <summary>
            Identifies the link direction required during a traversal of the <see cref="T:AGI.Foundation.Access.LinkGraph" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.LinkGraphDirection.Ignore">
      <summary>
            The direction of the signal is ignored.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.LinkGraphDirection.Transmit">
      <summary>
            The initial object is transmitting to the final object.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.LinkGraphDirection.Receive">
      <summary>
            The initial object is receiving from the final object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.LinkHelper">
      <summary>
            A collection of helper methods for working with links such as <see cref="T:AGI.Foundation.Access.LinkInstantaneous" />
            and <see cref="T:AGI.Foundation.Access.LinkSpeedOfLight" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetLinkService(System.IServiceProvider)">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Access.ILinkService" /> provided by a link.
            </summary>
      <param name="link">The link from which to obtain the service.</param>
      <returns>The service provided by the link.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The specified link object does not provide <see cref="T:AGI.Foundation.Access.ILinkService" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetLinkService(System.IServiceProvider,System.String)">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Access.ILinkService" /> provided by a link.
            </summary>
      <param name="link">The link from which to obtain the service.</param>
      <param name="exceptionMessage">An error message to include in the exception if the service is unavailable.</param>
      <returns>The service provided by the link.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The specified link object does not provide <see cref="T:AGI.Foundation.Access.ILinkService" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetOppositeLinkEnd(AGI.Foundation.Access.LinkRole)">
      <summary>
            Given a <see cref="T:AGI.Foundation.Access.LinkRole" />, returns the <see cref="T:AGI.Foundation.Access.LinkRole" /> representing the
            opposite end of the link.
            </summary>
      <param name="role">The link role for which to obtain the opposite end.</param>
      <returns>The opposite end of the link.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetParticipantByRole(AGI.Foundation.Access.ILinkService,AGI.Foundation.Access.LinkRole)">
      <summary>
            Gets the participant that is playing a specified role in the link.
            </summary>
      <param name="link">The link.</param>
      <param name="role">The role for which to obtain the participant.</param>
      <returns>The participant.</returns>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:AGI.Foundation.Access.LinkRole" /> is not <see cref="F:AGI.Foundation.Access.LinkRole.Transmitter" />
            or <see cref="F:AGI.Foundation.Access.LinkRole.Receiver" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetParticipantByRole(System.IServiceProvider,AGI.Foundation.Access.LinkRole)">
      <summary>
            Gets the participant that is playing a specified role in the link.
            </summary>
      <param name="link">The link.</param>
      <param name="role">The role for which to obtain the participant.</param>
      <returns>The participant.</returns>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:AGI.Foundation.Access.LinkRole" /> is not <see cref="F:AGI.Foundation.Access.LinkRole.Transmitter" />
            or <see cref="F:AGI.Foundation.Access.LinkRole.Receiver" />.
            </exception>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The specified link object does not provide <see cref="T:AGI.Foundation.Access.ILinkService" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetRoleOfParticipant(AGI.Foundation.Access.ILinkService,System.IServiceProvider)">
      <summary>
            Gets the role played by a specified participant in the link.
            </summary>
      <param name="link">The link.</param>
      <param name="participant">The participant.</param>
      <returns>The role played by the participant.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The specified link object does not provide <see cref="T:AGI.Foundation.Access.ILinkService" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified participant is not the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" /> or
            the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" /> in the link.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkHelper.GetRoleOfParticipant(System.IServiceProvider,System.IServiceProvider)">
      <summary>
            Gets the role played by a specified participant in the link.
            </summary>
      <param name="link">The link.</param>
      <param name="participant">The participant.</param>
      <returns>The role played by the participant.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The specified link object does not provide <see cref="T:AGI.Foundation.Access.ILinkService" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The specified participant is not the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter" /> or
            the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver" /> in the link.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Access.LinkInstantaneous">
      <summary>
            An idealized link that allows instantaneous communication between the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" /> and
            <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.#ctor(AGI.Foundation.Access.LinkInstantaneous,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.#ctor(System.IServiceProvider,System.IServiceProvider)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="transmitter">The object that is transmitting.</param>
      <param name="receiver">The object that is receiving.</param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.CheckForSameDefinition(AGI.Foundation.Access.LinkInstantaneous)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.CheckForSameDefinition(AGI.Foundation.Infrastructure.ExtensibleObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.GetOffsetToReceptionTimeEvaluator">
      <summary>
            Gets an evaluator that, given a time at which an event occurs at the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" />,
            evaluates the time at which the event is received by the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" />.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.GetOffsetToReceptionTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that, given a time at which an event occurs at the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" />,
            evaluates the time at which the event is received by the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.GetOffsetToTransmissionTimeEvaluator">
      <summary>
            Gets an evaluator that, given a time at which an event is received at the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" />,
            evaluates the time at which the event occurred at the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" />.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.GetOffsetToTransmissionTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that, given a time at which an event is received at the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" />,
            evaluates the time at which the event occurred at the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.GetReceiverDisplacementRelativeToTransmitter">
      <summary>
            Gets a displacement vector that represents the displacement to the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" /> as observed
            by the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" />.
            </summary>
      <returns>The displacement vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkInstantaneous.GetTransmitterDisplacementRelativeToReceiver">
      <summary>
            Gets a displacement vector that represents the displacement to the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter" /> as observed
            by the <see cref="P:AGI.Foundation.Access.LinkInstantaneous.Receiver" />.
            </summary>
      <returns>The displacement vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.LinkInstantaneous.Name">
      <summary>
            Gets or sets the name of the link.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkInstantaneous.Receiver">
      <summary>
            Gets or sets the object that is receiving.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkInstantaneous.Transmitter">
      <summary>
            Gets or sets the object that is transmitting.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.LinkPath">
      <summary>
            Describes a path through one or more links (such as <see cref="T:AGI.Foundation.Access.LinkInstantaneous" /> or <see cref="T:AGI.Foundation.Access.LinkSpeedOfLight" />).  
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.#ctor(AGI.Foundation.Access.LinkPath,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.CheckForSameDefinition(AGI.Foundation.Access.LinkPath)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{System.IServiceProvider})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.GetLinkPathDelayEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Access.LinkRole)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.LinkDelayEvaluator" /> which evaluates the time delay offset from the initial service
            provider to the final service provider in the path.
            </summary>
      <param name="group">The evaluator group in which to create requisite link delay evaluators.</param>
      <param name="roleOfTimeObserver">The role of the time observer.  If the role is receiving,
            the delay is negative.  If the role is transmitting, the delay is positive.</param>
      <returns>The link delay offset evaluator from the first link to the last in this collection.  If there
            are no links in the collection, the evaluator produces no delay.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown when this link path does not continuously connected
            from beginning to end or when the path is not correctly directed in a single direction from beginning to end.
            This could occur if two links in the chain both point to a single receiver object rather than one transmitting
            to the other which in turn transmits to another etc.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkPath.Reverse">
      <summary>
            Reverses this path.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.LinkRole">
      <summary>
            Identifies an object (transmitter or receiver) in a link (<see cref="T:AGI.Foundation.Access.ILinkService" />).
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.LinkRole.Transmitter">
      <summary>
            The transmitter.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Access.LinkRole.Receiver">
      <summary>
            The receiver.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.LinkSpeedOfLight">
      <summary>
            A link between a <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" /> and <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" /> that travels at the speed of light.
            Thus, the time it takes information at the transmitter to reach the receiver is dependent on the distance
            between them.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.#ctor(AGI.Foundation.Access.LinkSpeedOfLight,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.#ctor(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance which only accounts for light travel time (not aberration) in determining the
            displacement vectors between the two objects.
            </summary>
      <param name="transmitter">The object that is transmitting.</param>
      <param name="receiver">The object that is receiving.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modeled.</param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.#ctor(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Geometry.ReferenceFrame,System.Double)">
      <summary>
            Initializes a new instance which only accounts for light travel time (not aberration) in determining the
            displacement vectors between the two objects.
            </summary>
      <param name="transmitter">The object that is transmitting.</param>
      <param name="receiver">The object that is receiving.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modeled.</param>
      <param name="lightTravelTimeConvergenceTolerance">The tolerance required to indicate convergence of the light travel time adjustment.</param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.#ctor(System.IServiceProvider,System.IServiceProvider,AGI.Foundation.Geometry.ReferenceFrame,System.Double,AGI.Foundation.Geometry.VectorVelocity,AGI.Foundation.Geometry.VectorVelocity)">
      <summary>
            Initializes a new instance which accounts for aberration in addition to light travel time in determining the
            displacement vectors between the two objects.
            </summary>
      <param name="transmitter">The object that is transmitting.</param>
      <param name="receiver">The object that is receiving.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modeled.</param>
      <param name="lightTravelTimeConvergenceTolerance">The tolerance required to indicate convergence of the light travel time adjustment.</param>
      <param name="transmitterVelocityOfMovingFrame">
            The velocity of the moving frame in which the affect of aberration is to be determined when finding the
            apparent position of the receiver relative to the transmitter.
            </param>
      <param name="receiverVelocityOfMovingFrame">
            The velocity of the moving frame in which the affect of aberration is to be determined when finding the
            apparent position of the transmitter relative to the receiver.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.CheckForSameDefinition(AGI.Foundation.Access.LinkSpeedOfLight)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.CheckForSameDefinition(AGI.Foundation.Infrastructure.ExtensibleObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.GetOffsetToReceptionTimeEvaluator">
      <summary>
            Gets an evaluator that, given a time at which an event occurs at the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" />,
            evaluates the time at which the event is received by the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" />.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.GetOffsetToReceptionTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that, given a time at which an event occurs at the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" />,
            evaluates the time at which the event is received by the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.GetOffsetToTransmissionTimeEvaluator">
      <summary>
            Gets an evaluator that, given a time at which an event is received at the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" />,
            evaluates the time at which the event occurred at the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" />.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.GetOffsetToTransmissionTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that, given a time at which an event is received at the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" />,
            evaluates the time at which the event occurred at the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.GetReceiverDisplacementRelativeToTransmitter">
      <summary>
            Gets a displacement vector that represents the displacement to the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" /> as observed
            by the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" />.
            </summary>
      <returns>The displacement vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Access.LinkSpeedOfLight.GetTransmitterDisplacementRelativeToReceiver">
      <summary>
            Gets a displacement vector that represents the displacement to the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter" /> as observed
            by the <see cref="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver" />.
            </summary>
      <returns>The displacement vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.InertialFrame">
      <summary>
            Gets or sets the inertial frame in which the light path is modeled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.LightTravelTimeConvergenceTolerance">
      <summary>
            Gets or sets the tolerance required to indicate convergence of the light travel time adjustment.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.Name">
      <summary>
            Gets or sets the name of the link.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.Receiver">
      <summary>
            Gets or sets the object that is receiving.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.ReceiverVelocityOfMovingFrame">
      <summary>
            Gets or sets the velocity of the moving frame in which the effect of aberration is to be determined
            when finding the apparent position of the transmitter relative to the receiver.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.Transmitter">
      <summary>
            Gets or sets the object that is transmitting.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.LinkSpeedOfLight.TransmitterVelocityOfMovingFrame">
      <summary>
            Gets or sets the velocity of the moving frame in which the effect of aberration is to be determined
            when finding the apparent position of the receiver relative to the transmitter.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.MinimumMaximumAccessConstraint">
      <summary>
            The base class for Access constraints where the function must lie between a minimum value and a
            maximum value in order for the constraint to be considered satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.#ctor(AGI.Foundation.Access.MinimumMaximumAccessConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.IsMaximumEnabled">
      <summary>
          Gets or sets the flag indicating whether a maximum threshold is used in calculating constraint satisfaction.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.IsMinimumEnabled">
      <summary>
          Gets or sets the flag indicating whether a minimum threshold is used in calculating constraint satisfaction.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MaximumTolerance">
      <summary>
            Gets or sets the tolerance associated with the <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MaximumValue" /> to be used when computing threshold crossings.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the tolerance must be positive and non-zero.</exception>
    </member>
    <member name="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MaximumValue">
      <summary>
          Gets or sets the maximum function value that is allowed for this constraint to be satisfied.
          By default this is <see cref="F:System.Double.PositiveInfinity" />.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinimumTolerance">
      <summary>
            Gets or sets the tolerance associated with the <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinimumValue" /> to be used when computing threshold crossings.        
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the tolerance must be positive and non-zero.</exception>
    </member>
    <member name="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinimumValue">
      <summary>
          Gets or sets the minimum function value that is required for this constraint to be satisfied.
          By default, this is <see cref="F:System.Double.NegativeInfinity" />.
        </summary>
    </member>
    <member name="T:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinMaxThresholdEvaluator">
      <summary>
            A convenient base class to use for the evaluators for constraints derived from
            <see cref="T:AGI.Foundation.Access.MinimumMaximumAccessConstraint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinMaxThresholdEvaluator.#ctor(AGI.Foundation.Access.MinimumMaximumAccessConstraint,System.Boolean)">
      <summary>
            Initializes a new instance based on a given minimum or maximum threshold value.
            </summary>
      <param name="constraint">The constraint which determines the threshold information.</param>
      <param name="isMinimum">Flag to indicate whether to evaluate the minimum or maximum threshold.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="constraint" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinMaxThresholdEvaluator.#ctor(AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinMaxThresholdEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinMaxThresholdEvaluator.GetConstraintValueFromFunctionValue(System.Double)">
      <summary>
          Adjusts a raw function value to be above zero when the value is between the <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinimumValue" />
          and <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MaximumValue" />, and less than zero when it is outside that range.  The evaluator
          of any constraint that derives from <see cref="T:AGI.Foundation.Access.MinimumMaximumAccessConstraint" /> should call this
          method in its Evaluate method with the raw function value and return the value that this method
          returns.
        </summary>
      <param name="functionValue">The raw function value.</param>
      <returns>The adjusted value.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.AngleAxisRotation">
      <summary>
            Represents a rotation as a unit vector indicating the axis of rotation and an angle indicating
            the amount of rotation about the axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if <paramref name="rotation" />'s <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property is not an <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />,
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.
            </summary>
      <param name="sequence">The Euler sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="matrix">The 3-by-3 rotation matrix.</param>
      <returns>The resulting angle-axis rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="quaternion">The quaternion.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" />.
            </summary>
      <param name="sequence">The yaw-pitch-roll sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(System.Double,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided values.
            </summary>
      <param name="angle">The angle of rotation.</param>
      <param name="axis">The unit Cartesian vector representation the axis of rotation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates from the provided array.
            </summary>
      <param name="elements">The array of element values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 4 <paramref name="elements" />. 
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AngleAxisRotation.Angle">
      <summary>
            Gets the angle coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AngleAxisRotation.Axis">
      <summary>
            Gets the unit vector representation the axis of rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.Equals(AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.EqualsEpsilon(AGI.Foundation.Coordinates.AngleAxisRotation,System.Double)">
      <summary>
            Returns true if all of the elements of this quaternion are within <paramref name="epsilon" />
            of the same elements of the specified quaternion.  That is, in order for the quaternions to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The Quaternion to compare to this quaternion.</param>
      <param name="epsilon">The smallest difference between the elements of the quaternions for which they will NOT be considered equal.</param>
      <returns>true if the quaternions are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.Invert">
      <summary>
            Returns the inverse of this angle-axis rotation.
            </summary>
      <returns>The resulting angle-axis rotation.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AngleAxisRotation.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with 0, 1, 2, and 3 corresponding to the elements Angle, Axis.X, Axis.Y, and Axis.Z.
            </summary>
      <param name="index">The index.</param>
      <returns>The value of the specified element.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified <paramref name="index" /> is less than 0 or greater or equal to the <see cref="P:AGI.Foundation.Coordinates.AngleAxisRotation.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AngleAxisRotation.Length">
      <summary>
            Gets the number of elements.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.op_Equality(AGI.Foundation.Coordinates.AngleAxisRotation,AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.op_Inequality(AGI.Foundation.Coordinates.AngleAxisRotation,AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.op_Multiply(AGI.Foundation.Coordinates.AngleAxisRotation,System.Double)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" />.
            </summary>
      <param name="rotation">The rotation.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.op_Multiply(System.Double,AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
            Multiplies a scalar by a specified <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="rotation">The rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AngleAxisRotation.ToString">
      <summary>
            Returns the value of this set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates in the form "angle, axis"
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AngleAxisRotation.Zero">
      <summary>
            Gets the set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates representing the zero vector.
            </summary>
      <returns>The set of <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> coordinates representing the zero vector.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.AxisIndicator">
      <summary>
            Specifies one of the three Cartesian axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.AxisIndicator.First">
      <summary>
            The first axis (commonly the x-axis).
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.AxisIndicator.Second">
      <summary>
            The second axis (commonly the y-axis).
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.AxisIndicator.Third">
      <summary>
            The third axis (commonly the z-axis).
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.AzimuthElevationRange">
      <summary>
            A set of curvilinear 3-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.#ctor(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates from the provided set of 
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates represented in the North-East-Down orientation with 
            X pointing north, Y pointing east, and Z pointing down.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="azimuth">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="elevation">The angular coordinate measured from the xy-plane and toward the negative z-axis.</param>
      <param name="range">The linear coordinate measured from the origin.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates from the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Azimuth">
      <summary>
            Gets the angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.ConvertMotion(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Construct a Motion&lt;Cartesian&gt; which represents the motion 
            expressed with <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> values and derivatives.
            </summary>
      <param name="topographic">The Motion&lt;Cartesian&gt; topographic motion to convert.</param>
      <param name="order">The order of the highest derivative to convert.  To convert just the position, pass 0 for this value.  To convert velocity as well, pass 1.</param>
      <returns>The equivalent Motion&lt;AzimuthElevationRange&gt; motion. </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Elevation">
      <summary>
            Gets the angular coordinate measured from the xy-plane measured toward the negative z-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.Equals(AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.EqualsEpsilon(AGI.Foundation.Coordinates.AzimuthElevationRange,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.FromCartesian(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates from the provided set of 
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates represented in the North-East-Down orientation with 
            X pointing north, Y pointing east, and Z pointing down.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates which represents the provided set of .</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            Azimuth, Elevation, and Range.
            </summary>
      <param name="index">Either 0, 1, or 2 corresponding to the coordinates Azimuth, Elevation, or Range.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.op_Equality(AGI.Foundation.Coordinates.AzimuthElevationRange,AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.op_Inequality(AGI.Foundation.Coordinates.AzimuthElevationRange,AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Range">
      <summary>
            Gets the linear coordinate measured from the origin.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.AzimuthElevationRange.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Azimuth, Elevation, Range".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.AzimuthElevationRange.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Cartesian">
      <summary>
            A set of rectilinear 3-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from the provided set of 
            <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(AGI.Foundation.Coordinates.Cylindrical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(AGI.Foundation.Coordinates.LongitudeLatitudeRadius)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(AGI.Foundation.Coordinates.Spherical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from the provided values.
            </summary>
      <param name="x">The linear coordinate along the positive x-axis.</param>
      <param name="y">The linear coordinate along the positive y-axis.</param>
      <param name="z">The linear coordinate along the positive z-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Add(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Adds the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to this instance.
            </summary>
      <param name="other">The addend, or value which is to be added to this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.ConvertMotion(AGI.Foundation.Motion{AGI.Foundation.Coordinates.LongitudeLatitudeRadius},System.Int32)">
      <summary>
            Converts the motion given in terms of a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates to motion
            of the corresponding set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="motion">The LongitudeLatitudeRadius motion.</param>
      <param name="order">The order of the highest derivative to convert.</param>
      <returns>The motion of the <see cref="T:AGI.Foundation.Coordinates.Cartesian" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Cross(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms the cross product of the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to cross with this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Divide(System.Double)">
      <summary>
            Divides this instance by a scalar.
            </summary>
      <param name="scalar">The divisor, or value which is to divide this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Dot(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms the dot product of the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to dot with this instance.</param>
      <returns>A <see cref="T:System.Double" /> that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Equals(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.EqualsEpsilon(AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.HasZeroMagnitude">
      <summary>
            Gets a value indicating if the <see cref="P:AGI.Foundation.Coordinates.Cartesian.Magnitude" /> of this instance is zero.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Invert">
      <summary>
            Inverts this instance.
            </summary>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the inverse of this instance.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.IsUndefined">
      <summary>
            Gets whether or not any of the coordinates for this instance have the value <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            X, Y, and Z.
            </summary>
      <param name="index">Either a 0, 1, or 2 corresponding to the coordinates X, Y, or Z.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.Cartesian.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Magnitude">
      <summary>
            Gets the magnitude of this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.MagnitudeSquared">
      <summary>
            Gets the square of the <see cref="P:AGI.Foundation.Coordinates.Cartesian.Magnitude" /> of this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.MostOrthogonalAxis">
      <summary>
            Gets the axis which is most orthogonal to this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.MostParallelAxis">
      <summary>
            Gets the axis which is most parallel to this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Multiply(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies this instance (treated as a row vector) by a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="matrix">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> which will be pre-multiplied by this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar.
            </summary>
      <param name="scalar">The multiplier, or value which is to multiply this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Normalize">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from this instance.
            </summary>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.</returns>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Normalize(System.Double@)">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from this instance
            and returns the <see cref="P:AGI.Foundation.Coordinates.Cartesian.Magnitude" /> of the original instance in the provided parameter.
            </summary>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </param>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.</returns>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Addition(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to another specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Division(AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Divides a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates by a scalar.
            </summary>
      <param name="left">The dividend, or value which is to be divided by <paramref name="right" />.</param>
      <param name="right">The divisor, or value which is to divide <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Equality(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Implicit(AGI.Foundation.Coordinates.UnitCartesian)~AGI.Foundation.Coordinates.Cartesian">
      <summary>
            Converts a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates to a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.</param>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Inequality(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Multiply(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates by a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Multiply(AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Multiplies a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates by a scalar.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Multiply(System.Double,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Multiplies a scalar by a specified set of set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_Subtraction(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from another specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.op_UnaryNegation(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Negates the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates, yielding a new set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of coordinates.</param>
      <returns>The result of negating the elements of the original set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Rotate(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
        <para>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> rotation.
            This type of rotation is sometimes referred to as an "alias rotation".
            </para>
        <para>
            For more information on how quaternions and other coordinates are used to represent rotations, see our
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </para>
      </summary>
      <param name="rotation">The <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates which is the result of the rotation.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if <paramref name="rotation" />'s <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property is not an <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />,
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Rotate(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
        <para>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> rotation. 
            This type of rotation is sometimes referred to as an "alias rotation".
            </para>
        <para>
            For more information on how quaternions and other coordinates are used to represent rotations, see our
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </para>
      </summary>
      <param name="rotation">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> rotation.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates which is the result of the rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Rotate(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
        <para>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> rotation.
            This type of rotation is sometimes referred to as an "alias rotation".
            </para>
        <para>
            For more information on how quaternions and other coordinates are used to represent rotations, see our
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </para>
      </summary>
      <param name="rotation">The <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> rotation.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates which is the result of the rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.Subtract(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Subtracts the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from this instance.
            </summary>
      <param name="other">The subtrahend, or value which is to be subtracted from this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartesian.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "X, Y, Z".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates with values of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.X">
      <summary>
            Gets the linear coordinate along the positive x-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Y">
      <summary>
            Gets the linear coordinate along the positive y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Z">
      <summary>
            Gets the linear coordinate along the positive z-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartesian.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.CartesianElement">
      <summary>
            An enumeration indicating a part of a <see cref="T:AGI.Foundation.Coordinates.Cartesian" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartesianElement.X">
      <summary>
            X.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartesianElement.Y">
      <summary>
            Y.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartesianElement.Z">
      <summary>
            Z.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartesianElement.Magnitude">
      <summary>
            Magnitude.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Cartographic">
      <summary>
            A set of curvilinear 3-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> coordinates from the provided values.
            </summary>
      <param name="longitude">The angular coordinate lying in the equatorial plane of the ellipsoid and measured from the prime meridian.</param>
      <param name="latitude">The angular coordinate measured perpendicular to the equatorial plane.</param>
      <param name="height">The linear coordinate measured perpendicular to the surface of the ellipsoid and positive above the surface.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> coordinates from the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.Equals(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.EqualsEpsilon(AGI.Foundation.Coordinates.Cartographic,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartographic.Height">
      <summary>
            Gets the linear coordinate measured perpendicular to the surface of the ellipsoid and positive above the surface.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartographic.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            "Longitude, Latitude, Height".
            </summary>
      <param name="index">Either a 0, 1, or 2 corresponding to the coordinates "Longitude, Latitude, Height".</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.Cartographic.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartographic.Latitude">
      <summary>
            Gets the angular coordinate measured perpendicular to the equatorial plane.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartographic.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartographic.Longitude">
      <summary>
            Gets the angular coordinate lying in the equatorial plane of the ellipsoid and measured from the prime meridian.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.op_Equality(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.op_Inequality(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cartographic.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Longitude, Latitude, Height".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cartographic.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> coordinates representing the zero vector.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.CartographicElement">
      <summary>
            The elements in a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> type.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartographicElement.Latitude">
      <summary>
            Latitude.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartographicElement.Longitude">
      <summary>
            Longitude.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.CartographicElement.Height">
      <summary>
            Height.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.CartographicExtent">
      <summary>
            A two dimensional region specified as longitude and latitude coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified extents.
            </summary>
      <param name="west">The westernmost longitude.</param>
      <param name="south">The southernmost latitude.</param>
      <param name="east">The easternmost longitude.</param>
      <param name="north">The northernmost latitude.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.CartographicExtent.EastLongitude">
      <summary>
            Gets the easternmost longitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.Equals(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.EqualsEpsilon(AGI.Foundation.Coordinates.CartographicExtent,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.CartographicExtent" /> to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.IsInsideExtent(System.Double,System.Double)">
      <summary>
            Returns true if the specified location is inside the extent, otherwise false.
            </summary>
      <param name="longitude">The longitude.</param>
      <param name="latitude">The latitude.</param>
      <returns>
            true if the specified location is inside the extent (or on the border),
            otherwise false.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.CartographicExtent.NorthLatitude">
      <summary>
            Gets the northernmost latitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.op_Equality(AGI.Foundation.Coordinates.CartographicExtent,AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.op_Inequality(AGI.Foundation.Coordinates.CartographicExtent,AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.CartographicExtent.SouthLatitude">
      <summary>
            Gets the southernmost latitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.CartographicExtent.Union(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Computes the union of this extent with another extent.  The union of two extents is
            the smallest extent that includes both.
            </summary>
      <param name="other">The other extent.</param>
      <returns>The union of the two extents.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.CartographicExtent.WestLongitude">
      <summary>
            Gets the westernmost longitude.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Covariance3By3Derivative">
      <summary>
            Holds the derivatives of the positional variance and covariance information for an object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3Derivative.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Int32)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> object from the sigmas and a rotation.
            </summary>
      <param name="sigmaDerivatives">The derivative sigmas.</param>
      <param name="rotationDerivative">The derivative of the rotation of the frame where the covariances
            (not the variances) are zero.</param>
      <param name="order">The order of the derivative of the other two parameters.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3Derivative.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3Derivative.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Covariance3By3Derivative.Order">
      <summary>
            Gets the order of the sigma and rotation derivatives held by this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Covariance3By3Derivative.RotationDerivative">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> describing the derivative of the rotation to the axes of the Covariance Ellipsoid.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Covariance3By3Derivative.SigmaDerivatives">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> with the derivative of the sigma values of the transformed Covariance Matrix.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3Derivative.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Order : SigmaDerivatives.X, SigmaDerivatives.Y, SigmaDerivatives.Z  :  RotationDerivative.X, RotationDerivative.Y, RotationDerivative.Z".
            </returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation">
      <summary>
            Holds the positional variance and covariance information for an object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> object from the sigmas and a rotation.
            </summary>
      <param name="sigmas">The sigmas.</param>
      <param name="rotation">The rotation from the frame where the covariances
            (not the variances) are zero to the original frame.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.#ctor(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> object from a symmetrical matrix.
            </summary>
      <param name="matrix">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" /> of the covariance elements.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.#ctor(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> object a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" />
            that contains position and velocity covariance information. Only the position information (the upper left 3-by-3 portion)
            is used.  The velocity related information is ignored.
            </summary>
      <param name="symmetricalMatrix">The position and velocity covariance matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.#ctor(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> object from a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric" />
            that contains position and velocity covariance information. Only the position information (the upper left 3-by-3 triangular portion)
            is used.  The velocity related information is ignored.
            </summary>
      <param name="matrix">The position and velocity covariance matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.ConstructDateMotionCollectionFromMatrixCollection(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Matrix})">
      <summary>
        <para>Converts a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of <see cref="T:AGI.Foundation.Coordinates.Matrix" /> into a DateMotionCollection of
            <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" />.</para>
        <para>Only the first three rows and columns of the matrices are examined, larger matrices (such as a 6x6 matrix
            including velocity covariance) can be fed in and the other indices will be ignored.</para>
      </summary>
      <param name="covarianceMatrices">The covariance matrices to convert.</param>
      <returns>A DateMotionCollection of Covariance3By3SizeAndOrientation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.ConstructDateMotionCollectionFromMatrixCollection(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Matrix3By3})">
      <summary>
            Converts a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> into a DateMotionCollection of
            <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" />.
            </summary>
      <param name="covarianceMatrices">The covariance matrices to convert.</param>
      <returns>A DateMotionCollection of Covariance3By3SizeAndOrientation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Equals(AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> describing the rotation from the axes of the Covariance Ellipsoid to a reference axes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Sigmas">
      <summary>
        <para>Gets the <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> with the sigma values of the transformed Covariance Matrix. These are equal to
            the square root of the standard deviation of the covariances, and are the semi-axes lengths of the covariance
            ellipsoid at one standard deviation of uncertainty.</para>
        <para>To calculate an appropriate multiplicative factor to apply to this value to attain different desired levels of
            uncertainty use <see cref="M:AGI.Foundation.GaussianStatistics.MultiDimensionalStandardDeviationFactor(System.Int32,System.Double)" /> with a dimension of three.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.ToMatrix3By3">
      <summary>
            Gets the covariance matrix that corresponds to the sigma and orientation information.
            </summary>
      <returns>The Covariance information as a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.ToMatrix3By3Symmetric">
      <summary>
            Gets the covariance matrix that corresponds to the sigma and orientation information.
            </summary>
      <returns>The Covariance information as a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Sigmas.X", Sigmas.Y, Sigmas.Z  :  Rotation.W, Rotation.X, Rotation.Y, Rotation.Z".
            </returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Cylindrical">
      <summary>
            A set of curvilinear 3-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from the provided set of 
            <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(AGI.Foundation.Coordinates.LongitudeLatitudeRadius)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(AGI.Foundation.Coordinates.Spherical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from the provided values.
            </summary>
      <param name="clock">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="radial">The linear coordinate perpendicular to the z-axis.</param>
      <param name="z">The linear coordinate along the positive z-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates from 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cylindrical.Clock">
      <summary>
            Gets the angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.Equals(AGI.Foundation.Coordinates.Cylindrical)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.EqualsEpsilon(AGI.Foundation.Coordinates.Cylindrical,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cylindrical.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            Clock, Radial, and Z.
            </summary>
      <param name="index">Either 0, 1, or 2 corresponding to the coordinates Clock, Radial, or Z.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.Cylindrical.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cylindrical.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.op_Equality(AGI.Foundation.Coordinates.Cylindrical,AGI.Foundation.Coordinates.Cylindrical)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.op_Inequality(AGI.Foundation.Coordinates.Cylindrical,AGI.Foundation.Coordinates.Cylindrical)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cylindrical.Radial">
      <summary>
            Gets the linear coordinate perpendicular to the z-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Cylindrical.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            Clock, Radial, and Z.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cylindrical.Z">
      <summary>
            Gets the linear coordinate along the positive z-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Cylindrical.Zero">
      <summary>
            Gets a  set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.DelaunayElements">
      <summary>
            A set of Delaunay elements. This is a set of canonical angle-action
            variables that are commonly used in analytic orbit theory.
            <para>
            All units are SI unless indicated otherwise.  For more information see <a href="../Programmer's Guide/Overview/Units.html">Overview: Units</a>.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Initialize a set of Delaunay elements based upon a cartesian position and velocity.
            </summary>
      <param name="position">The position (distance).</param>
      <param name="velocity">The velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter used to create these elements (distance cubed per time squared).</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <paramref name="position" /> and <paramref name="velocity" /> represent
            an open orbit (with an eccentricity greater than or equal to one).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the elements provided cannot be represented by Delaunay elements.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of Delaunay elements based upon a cartesian position and velocity.
            </summary>
      <param name="position">The position (distance).</param>
      <param name="velocity">The velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter used to create these elements (distance cubed per time squared).</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            angular momentum vector is nearly vertical and the orbit is equatorial.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <paramref name="position" /> and <paramref name="velocity" /> represent
            an open orbit (with an eccentricity greater than or equal to one).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the elements provided cannot be represented by Delaunay elements.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Coordinates.EquinoctialElements)">
      <summary>
            Initialize a set of Delaunay elements based on a set of <see cref="T:AGI.Foundation.Coordinates.EquinoctialElements" />.
            </summary>
      <param name="elements">A set of equinoctial elements.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Coordinates.KeplerianElements)">
      <summary>
            Initialize a set of Delaunay elements based on a set of classical <see cref="T:AGI.Foundation.Coordinates.KeplerianElements" />.
            </summary>
      <param name="elements">A set of classical Keplerian elements.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" /> throws an exception if the given elements
            do not represent a closed orbit.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Coordinates.ModifiedKeplerianElements)">
      <summary>
            Initialize a set of Delaunay elements based on a set of <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.
            </summary>
      <param name="elements">A set of modified Keplerian elements.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" /> throws an exception if the given elements
            do not represent a closed orbit.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body (distance cubed per time squared).</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the elements provided cannot be represented by Delaunay elements.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body (distance cubed per time squared).</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the elements provided cannot be represented by Delaunay elements.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of Delaunay elements.
            </summary>
      <param name="meanAnomaly">The mean anomaly (radians).</param>
      <param name="argumentOfPeriapsis">The argument of periapsis (radians).</param>
      <param name="rightAscensionOfAscendingNode">The right ascension of ascending node (radians).</param>
      <param name="squareRootGravitySemimajorAxis">The square root of the product of gravitational parameter and semimajor axis (distance squared per time).</param>
      <param name="angularMomentum">The angular momentum (distance squared per time).</param>
      <param name="angularMomentumAlongZ">The Z Component of angular momentum (distance squared per time).</param>
      <param name="gravitationalParameter">Gravitational parameter associated with these elements (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The following cases are invalid: 
            <paramref name="angularMomentumAlongZ" /> &gt; <paramref name="angularMomentum" />, 
            <paramref name="squareRootGravitySemimajorAxis" /> &lt; 0, or
            <paramref name="angularMomentum" /> &lt; 0.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.AngularMomentum">
      <summary>
            Gets the angular momentum (distance squared per time).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.AngularMomentumAlongZ">
      <summary>
            Gets the Z Component of angular momentum (distance squared per time).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.ArgumentOfPeriapsis">
      <summary>
            Gets the argument of periapsis (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.GravitationalParameter">
      <summary>
            Gets the gravitational parameter used to compute these elements (distance cubed per time squared).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.MeanAnomaly">
      <summary>
            Gets the mean anomaly (radians).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.RightAscensionOfAscendingNode">
      <summary>
            Gets the right ascension of ascending node (radians).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DelaunayElements.SquareRootGravitySemimajorAxis">
      <summary>
            Gets the square root of the product of gravitational parameter and semimajor axis,
            (distance squared per time).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DelaunayElements.ToCartesian">
      <summary>
            Converts this set of Delaunay elements to a cartesian position and velocity.
            </summary>
      <returns>Position and velocity (distance and distance per time).</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.DenseMatrix">
      <summary>
            A general implementation of <see cref="T:AGI.Foundation.Coordinates.Matrix" /> with no restrictions on element values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> from an existing <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" />.
            </summary>
      <param name="matrix">The existing <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to copy.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> from an existing <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="matrix">The existing <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to copy.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> from an existing <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" />.
            </summary>
      <param name="matrix">The existing <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to copy.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(System.Double[0:,0:])">
      <summary>Initialize a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> from a 2-D array.</summary>
      <param name="array">Two-dimensional array of doubles.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(System.Double[],System.Int32)">
      <summary>Initialize a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> from a one-dimensional packed array</summary>
      <param name="elements">One-dimensional array of doubles containing the values of all of the elements.</param>
      <param name="rowDimension">The number of rows in the matrix.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="rowDimension" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="elements" /> array length is not a multiple of m.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(System.Double[][])">
      <summary>Initialize a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> from a 2-D array.</summary>
      <param name="array">Two-dimensional array of doubles.</param>
      <exception cref="T:System.InvalidOperationException"> Throw if all rows are not the same length.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(System.Double[][],System.Int32,System.Int32)">
      <summary>Construct a matrix quickly without validating arguments.</summary>
      <param name="array">Rectangular two-dimensional array of doubles.</param>
      <param name="rowDimension"> Number of rows, this must match the first dimension of the given array.</param>
      <param name="columnDimension">Number of columns, this must match the second dimensions of the given array.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> with the specified row and column dimensions. All elements of the matrix
            will be set to zero.
            </summary>
      <param name="rowDimension">The number of rows in the matrix.</param>
      <param name="columnDimension">The number of columns in the matrix.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="rowDimension" /> or <paramref name="columnDimension" /> are less than zero.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.DenseMatrix" /> with the specified row and column dimensions. All elements of the matrix
            will be set to the provided double.
            </summary>
      <param name="rowDimension">The number of rows in the matrix.</param>
      <param name="columnDimension">The number of columns in the matrix.</param>
      <param name="elementValue">The value that all elements in the matrix will be set to.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="rowDimension" /> or <paramref name="columnDimension" /> are less than zero.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.CheckForSameDefinition(AGI.Foundation.Coordinates.DenseMatrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.CheckForSameDefinition(AGI.Foundation.Coordinates.Matrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Clear">
      <summary>
            Sets the value of every value in the matrix to zero.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Identity(System.Int32,System.Int32)">
      <summary>Generate identity matrix</summary>
      <param name="m">   Number of rows.
            </param>
      <param name="n">   Number of columns.
            </param>
      <returns>     An m-by-n matrix with ones on the diagonal and zeros elsewhere.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DenseMatrix.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the value at the specified location in the matrix.
            </summary>
      <param name="rowIndex">The row index of the element being queried.</param>
      <param name="columnIndex">The column index of the element being queried.</param>
      <returns>The value in the matrix.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Thrown if <paramref name="rowIndex" /> is greater than <see cref="P:AGI.Foundation.Coordinates.Matrix.RowDimension">RowDimension</see>, 
            <paramref name="columnIndex" /> is greater than <see cref="P:AGI.Foundation.Coordinates.Matrix.ColumnDimension">ColumnDimension</see>, or either are less than zero.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Multiply(System.Double)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which has the value of the current matrix multiplied by the given factor.
            </summary>
      <param name="factor">The 'scalar' to multiply by the current Matrix.</param>
      <returns>The new matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Multiply(System.Double[])">
      <summary>
            Returns the result of the multiplication of this matrix and a vector.
            </summary>
      <param name="vector">The vector to be multiplied.</param>
      <returns>The resultant vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.MultiplyAssign(System.Double)">
      <summary>Multiply a matrix by a scalar in place, A = s*A</summary>
      <param name="s">   scalar
            </param>
      <returns>A reference to this matrix, for convenience in performing multiple operations in a single line of code.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.op_Multiply(AGI.Foundation.Coordinates.DenseMatrix,System.Double[])">
      <summary>
            Returns the result of the multiplication of a matrix and a vector.
            </summary>
      <param name="matrix">The matrix to multiply by the vector.</param>
      <param name="vector">The vector being multiplied.</param>
      <returns>The array of doubles which is the product of the given matrix and vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Solve(System.Double[])">
      <summary>
            Solve A*X = B
            </summary>
      <param name="vectorB"> right hand side</param>
      <returns>     solution if A is square, least squares solution otherwise
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DenseMatrix.Transpose">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the transpose of the current matrix.
            </summary>
      <returns>The new matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.DiagonalMatrix">
      <summary>
            An implementation of a square <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose diagonal elements are
            the only ones with a non-zero value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.#ctor(System.Double[])">
      <summary>
            Initializes a new instance which has the dimension of the length of the given <paramref name="array" />, and whose diagonal elements
            take on the values of the contents of the array.
            </summary>
      <param name="array">The created matrix will have a row and column dimension equal to the length of this array, and the diagonal elements
            of the matrix will be equal to the elements of this array.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.#ctor(System.Int32)">
      <summary>
            Initializes a new instance with the given <paramref name="dimension" />. All element values are set to zero.
            </summary>
      <param name="dimension">The row and column dimension of the matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.#ctor(System.Int32,System.Double)">
      <summary>
            Initializes a new instance with the given <paramref name="dimension" />. All diagonal elements are set to the given <paramref name="value" />.
            </summary>
      <param name="dimension">The row and column dimension of the matrix.</param>
      <param name="value">The value that all diagonal elements will take.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.CheckForSameDefinition(AGI.Foundation.Coordinates.DiagonalMatrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.CheckForSameDefinition(AGI.Foundation.Coordinates.Matrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.DiagonalMatrix.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the value of the element at the given location.
            </summary>
      <param name="rowIndex">The row index of the desired element.</param>
      <param name="columnIndex">The column index of the desired element.</param>
      <returns>The value of the element at the given location.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if an attempt is made to set a
            non-diagonal element.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.Multiply(System.Double)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which has the value of the current matrix multiplied by the given factor.
            </summary>
      <param name="factor">The 'scalar' to multiply by the current Matrix.</param>
      <returns>The new matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.DiagonalMatrix.Transpose">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the transpose of the current matrix.
            </summary>
      <returns>The new matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.EigenDecomposition">
      <summary>
            Holds results of the Eigen decomposition of a 3-by-3 matrix.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EigenDecomposition.#ctor(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>Initializes a new instance.</summary>
      <param name="eigenvectors">The 3-by-3 matrix where the columns of the matrix hold the eigenvectors.</param>
      <param name="eigenValues">The 3-by-3 matrix where the diagonal elements of the matrix hold the eigenvalues.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EigenDecomposition.Equals(AGI.Foundation.Coordinates.EigenDecomposition)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EigenDecomposition.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EigenDecomposition.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EigenDecomposition.op_Equality(AGI.Foundation.Coordinates.EigenDecomposition,AGI.Foundation.Coordinates.EigenDecomposition)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EigenDecomposition.op_Inequality(AGI.Foundation.Coordinates.EigenDecomposition,AGI.Foundation.Coordinates.EigenDecomposition)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EigenDecomposition.Values">
      <summary>
            Gets the 3-by-3 matrix where the diagonal elements of the matrix hold the eigenvalues.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EigenDecomposition.Vectors">
      <summary>
            Gets the 3-by-3 matrix where the columns of the matrix hold the eigenvectors.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.ElementaryRotation">
      <summary>
        <para>
            Represents a rotation about a principal axis. This
            represents an 'alias' rotation which transforms coordinates by modifying the underlying coordinate
            basis rather than modifying the coordinates themselves.  For more information, see our 
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </para>
        <para>
            To transform a <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> with this rotation, see <see cref="M:AGI.Foundation.Coordinates.Cartesian.Rotate(AGI.Foundation.Coordinates.UnitQuaternion)" />.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.#ctor(AGI.Foundation.Coordinates.AxisIndicator,System.Double)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> from the provided values.
            </summary>
      <param name="axis">The axis of rotation.</param>
      <param name="angle">The angle of rotation.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ElementaryRotation.Angle">
      <summary>
            Gets the angle of rotation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis">
      <summary>
            Gets the axis of rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Equals(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.EqualsEpsilon(AGI.Foundation.Coordinates.ElementaryRotation,System.Double)">
      <summary>
            Returns true if all of the elements of this quaternion are within <paramref name="epsilon" />
            of the same elements of the specified quaternion.  That is, in order for the quaternions to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The Quaternion to compare to this quaternion.</param>
      <param name="epsilon">The smallest difference between the elements of the quaternions for which they will NOT be considered equal.</param>
      <returns>true if the quaternions are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Invert">
      <summary>
            Inverts this instance, yielding a new <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <returns>The inverted <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Multiply(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Multiply(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />, yielding a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The result of the multiplication.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> of this <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> is not
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Multiply(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, yielding a <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The result of the multiplication.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> of this <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> is not
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Equality(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Inequality(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Multiply(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> by a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="left">The first rotation.</param>
      <param name="right">The second rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Multiply(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> by a specified <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <param name="matrix">The matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Multiply(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> by a specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <param name="quaternion">The unit quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Multiply(AGI.Foundation.Coordinates.ElementaryRotation,System.Double)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.op_Multiply(System.Double,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies a scalar by a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="rotation">The elementary rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ElementaryRotation.ToString">
      <summary>
            Returns the value of this set of <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> coordinates in the form "axis, angle"
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.EquinoctialElements">
      <summary>
            A set of equinoctial orbital elements.  This is a nonsingular orbital element
            set that is often used in operational systems since it is
            well behaved for small eccentricities and inclinations.  The
            <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" /> element of the structure indicates whether the orbit is
            posigrade or retrograde.
            <para>
            All units are SI unless indicated otherwise.  For more information see <a href="../Programmer's Guide/Overview/Units.html">Overview: Units</a>.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Initialize a set of equinoctial elements from cartesian position and velocity.
            </summary>
      <param name="position">Cartesian position (distance).</param>
      <param name="velocity">Cartesian velocity (distance per time).</param>
      <param name="gravitationalParameter">Gravitational parameter (distance cubed per time squared).</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <paramref name="position" /> and <paramref name="velocity" /> represent
            an open orbit (with an eccentricity greater than or equal to one).
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.#ctor(AGI.Foundation.Coordinates.DelaunayElements)">
      <summary>
            Initialize a set of equinoctial elements from a set of <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" />.
            </summary>
      <param name="elements">A set of Delaunay elements.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.#ctor(AGI.Foundation.Coordinates.KeplerianElements)">
      <summary>
            Initialize a set of equinoctial elements from a set of classical <see cref="T:AGI.Foundation.Coordinates.KeplerianElements" />.
            </summary>
      <param name="elements">A set of classical Keplerian elements.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:AGI.Foundation.Coordinates.EquinoctialElements" /> cannot represent open orbits.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.#ctor(AGI.Foundation.Coordinates.ModifiedKeplerianElements)">
      <summary>
            Initialize a set of equinoctial elements from a set of <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.
            </summary>
      <param name="elements">A set of modified Keplerian elements.</param>
      <exception cref="T:System.ArgumentNullException">
            The parameter <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the provided equinoctial elements represent an open orbit.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body 
            (distance cubed per time squared).</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double)">
      <summary>
            Initialize a set of equinoctial elements.
            </summary>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="eccentricitySineLongitudeOfPeriapsis">Eccentricity * Sin(Argument Of Periapsis + <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" />*Right Ascension Of Ascending Node)</param>
      <param name="eccentricityCosineLongitudeOfPeriapsis">Eccentricity * Cos(Argument Of Periapsis + <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" />*Right Ascension Of Ascending Node)</param>
      <param name="inclinationAndRightAscensionSineParameter">Sin(Inclination)*Sin(Right Ascension Of Ascending Node) / (1 + Cos(Inclination) )</param>
      <param name="inclinationAndRightAscensionCosineParameter">Sin(Inclination)*Cos(Right Ascension Of Ascending Node) / (1 + Cos(Inclination) )</param>
      <param name="meanLongitude">Mean Anomaly + Argument Of Periapsis + <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" />*Right Ascension Of Ascending Node (radians)</param>
      <param name="isPosigrade">Boolean indicating whether this orbit is <see cref="F:AGI.Foundation.Coordinates.EquinoctialElements.OrbitDirection.Posigrade" /> (true) or <see cref="F:AGI.Foundation.Coordinates.EquinoctialElements.OrbitDirection.Retrograde" /> (false).</param>
      <param name="gravitationalParameter">Gravitational parameter associated with these elements (distance cubed per time squared).</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the orbit represented by these elements does not constitute a 
            closed orbit (eccentricity must be between zero and unity).</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction">
      <summary>
            Gets the parameter indicating whether this orbit is posigrade (+1.0) or retrograde (-1.0).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.EccentricityCosineLongitudeOfPeriapsis">
      <summary>
            Gets the Eccentricity * Cos(Argument Of Periapsis + <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" />*Right Ascension Of Ascending Node)
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.EccentricitySineLongitudeOfPeriapsis">
      <summary>
            Gets the Eccentricity * Sin(Argument Of Periapsis + <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" />*Right Ascension Of Ascending Node)
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.GravitationalParameter">
      <summary>
            Gets the gravitational parameter associated with this element set (distance cubed per time squared).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.InclinationAndRightAscensionCosineParameter">
      <summary>
            Gets the Sin(Inclination)*Cos(Right Ascension Of Ascending Node) / (1 + Cos(Inclination) )
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.InclinationAndRightAscensionSineParameter">
      <summary>
            Gets the Sin(Inclination)*Sin(Right Ascension Of Ascending Node) / (1 + Cos(Inclination) )
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.MeanLongitude">
      <summary>
            Gets the Mean Anomaly + Argument Of Periapsis + <see cref="P:AGI.Foundation.Coordinates.EquinoctialElements.Direction" />*Right Ascension Of Ascending Node (radians)
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.MeanLongitudeToEccentricLongitude(System.Double,System.Double,System.Double)">
      <summary>
            Converts the longitude of mean anomaly to longitude of eccentric anomaly.
            </summary>
      <param name="meanLongitude">The longitude of the mean anomaly (radians).</param>
      <param name="eccentricitySineLongitudeOfPeriapsis">The sine term of the equinoctial elements. <seealso cref="P:AGI.Foundation.Coordinates.EquinoctialElements.EccentricitySineLongitudeOfPeriapsis" /></param>
      <param name="eccentricityCosineLongitudeOfPeriapsis">The cosine term of the equinoctial elements. <seealso cref="P:AGI.Foundation.Coordinates.EquinoctialElements.EccentricityCosineLongitudeOfPeriapsis" /></param>
      <returns>The longitude of the eccentric anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">This method throws an exception if the orbit is not closed.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the provided arguments do not allow this function to converge.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EquinoctialElements.SemimajorAxis">
      <summary>
            Gets the Semimajor axis (distance).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EquinoctialElements.ToCartesian">
      <summary>
            Converts this set of equinoctial elements to a cartesian position and velocity.
            </summary>
      <returns>The corresponding cartesian motion containing position and velocity 
            (distance and distance per time).</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.EulerSequence">
      <summary>
        <para>
            Represents a rotation as a sequence of three <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation">ElementaryRotations</see>
            about consecutive axes.  The first elementary rotation results in an intermediate orientation and associated set of axes
            from which the second elementary rotation is performed.  Likewise, the third elementary rotation is performed from the
            intermediate orientation and set of axes which result from the second rotation.
            </para>
        <para>
            A 321 Euler sequence is commonly used to represent yaw about the z-axis, followed by pitch about the resulting y-axis,
            and then roll about the resulting x-axis when expressing the attitude of a vehicle relative to some reference orientation.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.#ctor(AGI.Foundation.Coordinates.AngleAxisRotation,AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> from the provided <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> and sequence.
            </summary>
      <param name="rotation">The rotation.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.#ctor(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> from the provided 
            <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation">ElementaryRotations</see>.
            </summary>
      <param name="firstRotation">The first rotation.</param>
      <param name="secondRotation">The second rotation.</param>
      <param name="thirdRotation">The third rotation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.#ctor(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> from the provided <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> and sequence.
            </summary>
      <param name="matrix">The orthogonal rotation matrix.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.#ctor(AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> from the provided <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> and sequence.
            </summary>
      <param name="quaternion">The unit quaternion.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.#ctor(AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence.
            </summary>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.#ctor(System.Double,System.Double,System.Double,AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Initializes an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> from the provided angles and sequence.
            </summary>
      <param name="angle1">The first angle.</param>
      <param name="angle2">The second angle.</param>
      <param name="angle3">The third angle.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.Equals(AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.EqualsEpsilon(AGI.Foundation.Coordinates.EulerSequence,System.Double)">
      <summary>
            Returns true if all of the elements of this quaternion are within <paramref name="epsilon" />
            of the same elements of the specified quaternion.  That is, in order for the quaternions to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The Quaternion to compare to this quaternion.</param>
      <param name="epsilon">The smallest difference between the elements of the quaternions for which they will NOT be considered equal.</param>
      <returns>true if the quaternions are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.FirstAxis(AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Determines the first axis indicator from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequenceIndicator" />.
            </summary>
      <param name="sequence">The order of the axes of rotation.</param>
      <returns>The first axis indicator.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EulerSequence.FirstRotation">
      <summary>
            Gets the first rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.Indicator(AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Coordinates.AxisIndicator)">
      <summary>
            Composes a <see cref="T:AGI.Foundation.Coordinates.EulerSequenceIndicator" /> from three individual <see cref="T:AGI.Foundation.Coordinates.AxisIndicator" /> items. 
            </summary>
      <param name="first">The first axis of rotation.</param>
      <param name="second">The second axis of rotation.</param>
      <param name="third">The third axis of rotation.</param>
      <returns>The indicator.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.Invert">
      <summary>
            Inverts this instance, yielding a new <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.
            </summary>
      <returns>The inverted <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.op_Equality(AGI.Foundation.Coordinates.EulerSequence,AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.op_Inequality(AGI.Foundation.Coordinates.EulerSequence,AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.SecondAxis(AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Determines the second axis indicator from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequenceIndicator" />.
            </summary>
      <param name="sequence">The order of the axes of rotation.</param>
      <returns>The second axis indicator.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EulerSequence.SecondRotation">
      <summary>
            Gets the second rotation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EulerSequence.Sequence">
      <summary>
            Gets the order of the axes rotations for this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.ThirdAxis(AGI.Foundation.Coordinates.EulerSequenceIndicator)">
      <summary>
            Determines the third axis indicator from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequenceIndicator" />.
            </summary>
      <param name="sequence">The order of the axes of rotation.</param>
      <returns>The third axis indicator.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.EulerSequence.ThirdRotation">
      <summary>
            Gets the third rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.EulerSequence.ToString">
      <summary>
            Returns the value of this set of <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> coordinates in the form "first rotation, second rotation, third rotation"
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.EulerSequenceIndicator">
      <summary>
            Indicates the order of the axes rotations in an Euler sequence.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler123">
      <summary>
            The first axes, followed by the second and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler321">
      <summary>
            The third axes, followed by the second and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler231">
      <summary>
            The second axes, followed by the third and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler132">
      <summary>
            The first axes, followed by the third and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler312">
      <summary>
            The third axes, followed by the first and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler213">
      <summary>
            The second axes, followed by the first and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler212">
      <summary>
            The second axes, followed by the first and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler313">
      <summary>
            The third axes, followed by the first and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler121">
      <summary>
            The first axes, followed by the second and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler323">
      <summary>
            The third axes, followed by the second and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler131">
      <summary>
            The first axes, followed by the third and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.EulerSequenceIndicator.Euler232">
      <summary>
            The second axes, followed by the third and then second axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.IDoubleBasedState">
      <summary>
            An <see cref="T:AGI.Foundation.Coordinates.IMotionState" /> whose independent variable is a <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.IDoubleBasedState.IndependentVariable">
      <summary>
            Gets or sets the double value when this state is valid.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.IGeneralState">
      <summary>
            A general state that stores raw values.  The state can represent anything you 
            would like it to be, however every element must have a name that is used to 
            retrieve and modify its values.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.IGeneralState.AvailableElements">
      <summary>
            Gets the names of all of the elements in this state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.IGeneralState.GetValue``1(System.String)">
      <summary>
            Returns the requested value of the requested element.
            </summary>
      <param name="elementName">The name of the element.</param>
      <typeparam name="T">The type of the motion that the <paramref name="elementName">element</paramref> is 
            (<see cref="T:AGI.Foundation.Coordinates.Cartesian" />, <see cref="T:System.Double" />, etc...).</typeparam>
      <returns>The value of the <paramref name="elementName">element</paramref>.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.IGeneralState.ModifyValue``1(System.String,``0)">
      <summary>
            Modifies the <paramref name="elementName">element</paramref> in this instance of <see cref="T:AGI.Foundation.Coordinates.IGeneralState" /> 
            with the <paramref name="newValue" />.
            </summary>
      <param name="elementName">The name of the element to change.</param>
      <param name="newValue">The new value for the <paramref name="elementName">element</paramref>.</param>
      <typeparam name="T">The type that the value described by the <paramref name="elementName">element</paramref> is.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Coordinates.IMotionState">
      <summary>
            A general state that stores <see cref="T:AGI.Foundation.Motion`1">Motions</see>.  The state can represent anything you 
            would like it to be, however every element must have a name that is used to 
            retrieve and modify its <see cref="T:AGI.Foundation.Motion`1" />. When implementing this interface, the 
            <see cref="M:AGI.Foundation.Coordinates.IGeneralState.GetValue``1(System.String)" /> and <see cref="M:AGI.Foundation.Coordinates.IGeneralState.ModifyValue``1(System.String,``0)" /> 
            methods should return and modify respectfully the value of the element's motion <see cref="T:AGI.Foundation.Motion`1" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.IMotionState.GetMotion``1(System.String)">
      <summary>
            Returns the <see cref="T:AGI.Foundation.Motion`1" /> of the requested <paramref name="elementName" />.
            </summary>
      <param name="elementName">The name of the element.</param>
      <typeparam name="T">The type of the <see cref="T:AGI.Foundation.Motion`1" /> that the 
            <paramref name="elementName">element</paramref> is (<see cref="T:AGI.Foundation.Coordinates.Cartesian" />, <see cref="T:System.Double" />, etc...).</typeparam>
      <returns>The <see cref="T:AGI.Foundation.Motion`1" /> of the <paramref name="elementName">element</paramref>.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.IMotionState.ModifyMotion``1(System.String,AGI.Foundation.Motion{``0})">
      <summary>
            Modifies this instance of <see cref="T:AGI.Foundation.Coordinates.IMotionState" /> with the <see cref="T:AGI.Foundation.Motion`1" /> of the 
            specified <paramref name="elementName">element</paramref> updated.
            </summary>
      <param name="elementName">The name of the element to change.</param>
      <param name="newValue">The new values for the <paramref name="elementName">element</paramref>.</param>
      <typeparam name="T">The type that the <see cref="T:AGI.Foundation.Motion`1" /> described by the <paramref name="elementName" /> 
            is.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Coordinates.ITimeBasedState">
      <summary>
            A <see cref="T:AGI.Foundation.Coordinates.IMotionState" /> at a specific <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ITimeBasedState.CurrentDate">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Time.JulianDate" /> that this state is valid.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.KeplerianElement">
      <summary>
            An enumeration indicating a specific element in Keplerian elements.  This enumeration can be used 
            to identify specific elements in a <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />, a <see cref="T:AGI.Foundation.Coordinates.KeplerianElements" />, or 
            any of the other classical element types.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.RadiusOfPeriapsis">
      <summary>
            Radius of periapsis.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.RadiusOfApoapsis">
      <summary>
            Radius of apoapsis.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.InverseSemimajorAxis">
      <summary>
            Inverse of the semi-major axis.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.Inclination">
      <summary>
            Inclination.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.ArgumentOfPeriapsis">
      <summary>
            Argument of periapsis.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.RightAscensionOfAscendingNode">
      <summary>
            Right ascension of ascending node.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.TrueAnomaly">
      <summary>
            True anomaly.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.MeanAnomaly">
      <summary>
            Mean anomaly
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.Eccentricity">
      <summary>
            Eccentricity.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.KeplerianElement.Period">
      <summary>
            The orbital period of the orbit in seconds.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.KeplerianElements">
      <summary>
            A set of classical Keplerian elements representing an elliptical orbit.
            <para>
            All units are SI unless indicated otherwise.  For more information see <a href="../Programmer's Guide/Overview/Units.html">Overview: Units</a>.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Initialize a set of classical Keplerian elements from a cartesian position and velocity.
            </summary>
      <param name="position">The cartesian position (distance).</param>
      <param name="velocity">The cartesian velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter to use to create this set (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of classical Keplerian elements from a cartesian position and velocity.
            </summary>
      <param name="position">The cartesian position (distance).</param>
      <param name="velocity">The cartesian velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter to use to create this set (distance cubed per time squared).</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.InvalidOperationException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.DelaunayElements)">
      <summary>
            Initialize a set of classical Keplerian elements from a set of <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" />.
            </summary>
      <param name="elements">A set of Delaunay elements.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.DelaunayElements,System.Double,System.Double)">
      <summary>
            Initialize a set of classical Keplerian elements from a set of <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" />.
            </summary>
      <param name="elements">A set of Delaunay elements.</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.EquinoctialElements)">
      <summary>
            Initialize a set of classical Keplerian elements from a set of <see cref="T:AGI.Foundation.Coordinates.EquinoctialElements" />.
            </summary>
      <param name="elements">A set of Equinoctial elements.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.EquinoctialElements,System.Double,System.Double)">
      <summary>
            Initialize a set of classical Keplerian elements from a set of <see cref="T:AGI.Foundation.Coordinates.EquinoctialElements" />.
            </summary>
      <param name="elements">A set of Equinoctial elements.</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Coordinates.ModifiedKeplerianElements)">
      <summary>
            Initialize a set of classical Keplerian elements from a set of   
            <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.
            </summary>
      <param name="modifiedKepler">The modified Keplerian elements.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="modifiedKepler" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body 
            (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body 
            (distance cubed per time squared).</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of classical Keplerian orbital elements.
            </summary>
      <param name="semimajorAxis">Semimajor axis (distance).</param>
      <param name="eccentricity">Eccentricity.</param>
      <param name="inclination">Inclination (radians).</param>
      <param name="argumentOfPeriapsis">Argument of periapsis (radians).</param>
      <param name="rightAscensionOfAscendingNode">Right ascension of the ascending node (radians).</param>
      <param name="trueAnomaly">True anomaly (radians).</param>
      <param name="gravitationalParameter">Gravitational parameter (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative, not below unity, or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The semimajor axis cannot be zero or nearly zero.  Thrown if
            <paramref name="semimajorAxis" /> is &lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="inclination" /> is less than zero or greater than Pi radians.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.ArgumentOfPeriapsis">
      <summary>
            Gets the argument of periapsis of the orbit (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeEccentricAnomaly">
      <summary>
            Computes the eccentric anomaly based on the current Keplerian position.
            </summary>
      <returns>The current eccentric anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Coordinates.KeplerianElements.OrbitType" /> does not represent
            either a circular or elliptical orbit.  To find mean anomaly for parabolic or hyperbolic orbits, convert
            to <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeEccentricity(System.Double,System.Double)">
      <summary>
            Compute the eccentricity from the given radius of periapsis and the semimajor axis.
            </summary>
      <param name="radiusPeriapsis">Radius of periapsis.</param>
      <param name="semimajorAxis">The semimajor axis.</param>
      <returns>eccentricity</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeMeanAnomaly">
      <summary>
            Computes the Mean anomaly based on the current Keplerian position.
            </summary>
      <returns>The current mean anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Coordinates.KeplerianElements.OrbitType" /> does not represent
            either a circular or elliptical orbit.  To find mean anomaly for parabolic or hyperbolic orbits, convert
            to <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeMeanMotion">
      <summary>
            Computes the mean motion based on the current Keplerian elements.
            </summary>
      <returns>The mean motion (radians per time).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Coordinates.KeplerianElements.OrbitType" /> does not represent
            either a circular or elliptical orbit.  To find mean anomaly for parabolic or hyperbolic orbits, convert
            to <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputePeriod">
      <summary>
            Computes the orbital period of the current Keplerian elements.
            </summary>
      <returns>The orbital period (time).</returns>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:AGI.Foundation.Coordinates.KeplerianElements.OrbitType" /> does not represent a 
            closed orbit (either circular or elliptical), there is no orbital period.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeRadiusOfApoapsis">
      <summary>
            Compute the apoapsis of the current Keplerian elements.
            </summary>
      <returns>The apoapsis (distance).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeRadiusOfApoapsis(System.Double,System.Double)">
      <summary>
            Compute the radius of apoapsis.
            </summary>
      <param name="semimajorAxis">The semimajor axis of the orbit (distance).</param>
      <param name="eccentricity">The eccentricity of the orbit.</param>
      <returns>The radius of apoapsis (distance).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeRadiusOfPeriapsis">
      <summary>
            Compute the periapsis of the current Keplerian elements.
            </summary>
      <returns>The periapsis (distance).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeRadiusOfPeriapsis(System.Double,System.Double)">
      <summary>
            Compute the radius of periapsis.
            </summary>
      <param name="semimajorAxis">The semimajor axis of the orbit (distance).</param>
      <param name="eccentricity">The eccentricity of the orbit.</param>
      <returns>The radius of periapsis (distance).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeTimeOfFlight(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compute the time of flight between the two true anomalies.
            </summary>
      <param name="initialTrueAnomaly">The initial true anomaly (radians).</param>
      <param name="finalTrueAnomaly">The final true anomaly (radians).</param>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="eccentricity">The eccentricity.</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The time of flight (time).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The eccentricity and semimajor axis must represent an elliptical orbit when using this method.
            For computing time of flight with parabolic and hyperbolic orbits, use instance methods.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeTimePastPeriapsis(System.Double,System.Double,System.Double)">
      <summary>
            Compute the time of flight since the last periapsis passage.
            </summary>
      <param name="meanAnomaly">The current mean anomaly (radians).</param>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The time since the last periapsis passage (time).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ComputeTimePastPeriapsis(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compute the time of flight since the last periapsis passage.
            </summary>
      <param name="trueAnomaly">The current true anomaly (radians).</param>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="eccentricity">The eccentricity.</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The time since the last periapsis passage (time).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The eccentricity must be between zero and unity.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.EccentricAnomalyToMeanAnomaly(System.Double,System.Double)">
      <summary>
            Calculates the mean anomaly given the eccentric anomaly and the eccentricity.
            </summary>
      <param name="eccentricAnomaly">The eccentric anomaly (radians).</param>
      <param name="eccentricity">The eccentricity.</param>
      <returns>The mean anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Eccentric anomaly is only valid for eccentricities
            between zero and unity.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.EccentricAnomalyToTrueAnomaly(System.Double,System.Double)">
      <summary>
            Calculates the true anomaly given the eccentric anomaly and the eccentricity.
            </summary>
      <param name="eccentricAnomaly">The eccentric anomaly (radians).</param>
      <param name="eccentricity">The eccentricity.</param>
      <returns>The true anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Eccentric anomaly is only valid for 
            eccentricities between zero and unity.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.Eccentricity">
      <summary>
            Gets the eccentricity of the orbit.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.GravitationalParameter">
      <summary>
            Gets the gravitational parameter used for this element set (distance cubed per time squared).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.Inclination">
      <summary>
            Gets the inclination of the orbit (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.MeanAnomalyToEccentricAnomaly(System.Double,System.Double)">
      <summary>
            Calculates the eccentric anomaly given the mean anomaly and the eccentricity.
            </summary>
      <param name="meanAnomaly">The mean anomaly (radians).</param>
      <param name="eccentricity">The eccentricity.</param>
      <returns>The eccentric anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Eccentric anomaly is only 
            valid for eccentricities between zero and unity.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the arguments cause the method to not converge.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.MeanAnomalyToTrueAnomaly(System.Double,System.Double)">
      <summary>
            Calculates the true anomaly given the mean anomaly and the eccentricity.
            </summary>
      <param name="meanAnomaly">The mean anomaly (radians).</param>
      <param name="eccentricity">The eccentricity.</param>
      <returns>The true anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">This method assumes a circular or elliptical orbit.
            So, the eccentricity must be between zero and unity.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.OrbitType">
      <summary>
            Gets the type of orbit represented by these elements.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.PerifocalToCartesianMatrix(System.Double,System.Double,System.Double)">
      <summary>
            Calculates the transformation matrix to convert from the perifocal (PQW) coordinate
            system to inertial cartesian coordinates.
            </summary>
      <param name="argumentOfPeriapsis">The argument of periapsis (radians).</param>
      <param name="inclination">The inclination (radians).</param>
      <param name="rightAscension">The right ascension of the ascending node (radians).</param>
      <returns>The transformation matrix to convert from the perifocal coordinate system to inertial cartesian coordinates.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="inclination" /> is less than zero or greater than Pi radians.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.RightAscensionOfAscendingNode">
      <summary>
            Gets the right ascension of the ascending node of the orbit (radians).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.SemimajorAxis">
      <summary>
            Gets the semimajor axis of the orbit (distance).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.SemimajorAxisToPeriod(System.Double,System.Double)">
      <summary>
            Calculates the orbital period from the semimajor axis and gravitational parameter.
            </summary>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The orbital period (time).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The semimajor axis cannot be negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.TimePastPeriapsisToEccentricAnomaly(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Calculates the eccentric anomaly given the time past the last periapsis passage.
            </summary>
      <param name="timePastPeriapsis">The time past the last periapsis passage (time).</param>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="eccentricity">The eccentricity.</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The eccentric anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Eccentricity must be between zero and unity.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Semimajor axis must be positive.  Exception thrown if  
            the <paramref name="semimajorAxis" /> is &lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.TimePastPeriapsisToMeanAnomaly(System.Double,System.Double,System.Double)">
      <summary>
            Calculates the mean anomaly given the time past the last periapsis passage.
            </summary>
      <param name="timePastPeriapsis">The time past the last periapsis passage (time).</param>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The mean anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Semimajor axis must be positive.  Exception thrown if  
            the <paramref name="semimajorAxis" /> is &lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.TimePastPeriapsisToTrueAnomaly(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Calculates the true anomaly given the time past the last periapsis passage.
            </summary>
      <param name="timePastPeriapsis">The time past the last periapsis passage (time).</param>
      <param name="semimajorAxis">The semimajor axis (distance).</param>
      <param name="eccentricity">The eccentricity.</param>
      <param name="gravitationalParameter">The gravitational parameter (distance cubed per time squared).</param>
      <returns>The true anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The eccentricity must be between zero and unity.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Semimajor axis must be positive.  Exception thrown if  
            the <paramref name="semimajorAxis" /> is &lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.ToCartesian">
      <summary>
            Returns a cartesian representation of these orbital elements.
            </summary>
      <returns>Cartesian elements that are equivalent to these <see cref="T:AGI.Foundation.Coordinates.KeplerianElements" />
            (distance and distance per time).</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KeplerianElements.TrueAnomaly">
      <summary>
            Gets the true anomaly of the orbit (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.TrueAnomalyToEccentricAnomaly(System.Double,System.Double)">
      <summary>
            Calculates the eccentric anomaly given the true anomaly and the eccentricity.
            </summary>
      <param name="trueAnomaly">The true anomaly (radians).</param>
      <param name="eccentricity">The eccentricity.</param>
      <returns>The eccentric anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Eccentric anomaly is only valid for eccentricities
            between zero and unity.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KeplerianElements.TrueAnomalyToMeanAnomaly(System.Double,System.Double)">
      <summary>
            Calculates the mean anomaly given the true anomaly and the eccentricity.
            </summary>
      <param name="trueAnomaly">The true anomaly (radians).</param>
      <param name="eccentricity">The eccentricity.</param>
      <returns>The mean anomaly (radians).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">This method assumes a circular or elliptical orbit.
            So, the eccentricity must be between zero and unity.</exception>
    </member>
    <member name="T:AGI.Foundation.Coordinates.KinematicTransformation">
      <summary>
            A kinematic transformation describing how to transform from one reference frame to another.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a new instance with the specified translational and rotational parameters.
            </summary>
      <param name="translation">The translation.</param>
      <param name="translationalVelocity">The translational velocity.</param>
      <param name="translationalAcceleration">The translational acceleration.</param>
      <param name="rotation">The rotation.</param>
      <param name="rotationalVelocity">The rotational velocity.</param>
      <param name="rotationalAcceleration">The rotational acceleration.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance with the specified translational parameters and <see cref="P:AGI.Foundation.Coordinates.KinematicTransformation.RotationalMotion" />.
            </summary>
      <param name="translation">The translation.</param>
      <param name="translationalVelocity">The translational velocity.</param>
      <param name="translationalAcceleration">The translational acceleration.</param>
      <param name="rotationalTransformation">The rotational transformation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance from the specified translational and rotational motion.
            </summary>
      <param name="translationalMotion">The translational portion of the transformation.</param>
      <param name="rotationalMotion">The rotational portion of the transformation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Compose(AGI.Foundation.Coordinates.KinematicTransformation)">
      <summary>
            Forms a new <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> as the composition of this transformation and the provided transformation.
            If this transformation represents the transformation between reference frame "B" and reference frame "C"
            and the provided transformation represents the transformation between reference frame "A" and reference frame "B",
            the result represents the transformation between reference frame "A" and reference frame "C".
            </summary>
      <param name="other">The transformation between reference frame "A" and reference frame "B".</param>
      <returns>The transformation between reference frame "A" and reference frame "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Compose(AGI.Foundation.Coordinates.KinematicTransformation,System.Int32)">
      <summary>
            Forms a new <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> as the composition of this transformation and the provided transformation.
            If this transformation represents the transformation between reference frame "B" and reference frame "C"
            and the provided transformation represents the transformation between reference frame "A" and reference frame "B",
            the result represents the transformation between reference frame "A" and reference frame "C".
            </summary>
      <param name="other">The transformation between reference frame "A" and reference frame "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the position, pass 0 for this value.  To retrieve the velocity as well, pass 1.  etc.</param>
      <returns>The transformation between reference frame "A" and reference frame "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Equals(AGI.Foundation.Coordinates.KinematicTransformation)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Invert">
      <summary>
            Forms the inverse kinematic transformation.
            If this transformation represents the transformation between reference frame "A" and reference frame "B",
            the result represents the transformation between reference frame "B" and reference frame "A".
            </summary>
      <returns>The transformation between axes "B" and axes "A".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Invert(System.Int32)">
      <summary>
            Forms the inverse kinematic transformation.
            If this transformation represents the transformation between reference frame "A" and reference frame "B",
            the result represents the transformation between reference frame "B" and reference frame "A".
            </summary>
      <param name="order">The order of highest required derivative.  To retrieve just the position, pass 0 for this value.  To retrieve the velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "B" and axes "A".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.op_Equality(AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Coordinates.KinematicTransformation)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.op_Inequality(AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Coordinates.KinematicTransformation)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.Rotation">
      <summary>
            Gets the relative rotation between the reference frames.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.RotationalAcceleration">
      <summary>
            Gets the rotational acceleration of the second reference frame relative to and expressed in
            the first reference frame.  If this transformation does not include rotational
            acceleration information, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the transformation does not include rotational acceleration information.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.RotationalMotion">
      <summary>
            Gets the rotational portion of this transformation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.RotationalOrder">
      <summary>
            Gets the number of rotational motion derivatives described by this transformation.
            If this property is 0, only rotation information is available.
            If this property is 1 or above, rotational velocity information is available.
            If this property is 2 or above, rotational acceleration information is available.
            If this property is above 2, further derivatives are available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.RotationalVelocity">
      <summary>
            Gets the rotational velocity of the second reference frame relative to and expressed in
            the first reference frame.  If this transformation does not include rotational
            velocity information, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the transformation does not have rotational velocity information.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Transform(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Transforms the position observed in the A frame to the B frame.
            </summary>
      <param name="position">The position to transform.</param>
      <returns>The transformed position.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Transform(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Transforms the motion observed in the A frame to the B frame.
            </summary>
      <param name="motion">The motion to transform.</param>
      <returns>The transformed motion.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KinematicTransformation.Transform(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Transforms the motion observed in the A frame to the B frame.
            </summary>
      <param name="motion">The motion to transform.</param>
      <param name="order">The order of highest required derivative.  To retrieve just the position, pass 0 for this value.  To retrieve the velocity as well, pass 1.  etc.</param>
      <returns>The transformed motion.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.Translation">
      <summary>
            Gets the relative position vector between the reference frames.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.TranslationalAcceleration">
      <summary>
            Gets the relative acceleration vector between the reference frames.  
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this transformation does not include translational acceleration information.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.TranslationalMotion">
      <summary>
            Gets the translational portion of this transformation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.TranslationalOrder">
      <summary>
            Gets the number of translational motion derivatives described by this transformation.
            If this property is 0, only position information is available.
            If this property is 1 or above, velocity information is available.
            If this property is 2 or above, acceleration information is available.
            If this property is above 2, further derivatives are available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KinematicTransformation.TranslationalVelocity">
      <summary>
            Gets the relative velocity vector between the reference frames.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this transformation does not include translational velocity information.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Coordinates.KozaiIzsakMeanElements">
      <summary>
            A set of Kozai-Izsak mean elements representing an elliptical orbit.
            <para>
            All units are SI unless indicated otherwise.  For more information see 
            <a href="../Programmer's Guide/Overview/Units.html">Overview: Units</a></para></summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of Kozai-Izsak mean elements from a cartesian position and velocity.
            </summary>
      <param name="position">The cartesian position (distance).</param>
      <param name="velocity">The cartesian velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter to use to create this set (distance cubed per time squared).</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
      <exception cref="T:System.ArgumentException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.#ctor(AGI.Foundation.Coordinates.KeplerianElements,System.Boolean,System.Double,System.Double)">
      <summary>
            Initialize a set of Kozai-Izsak mean elements from a set of osculating or mean
            <see cref="T:AGI.Foundation.Coordinates.KeplerianElements" />.
            </summary>
      <param name="elements">The Keplerian elements.</param>
      <param name="inputIsMean">True if input elements are mean elements, false if input elements are osculating.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.#ctor(AGI.Foundation.Coordinates.ModifiedKeplerianElements,System.Boolean,System.Double,System.Double)">
      <summary>
            Initialize a set of Kozai-Izsak mean elements from a set of osculating or mean
            <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.
            </summary>
      <param name="elements">The modified Keplerian elements.</param>
      <param name="inputIsMean">True if input elements are mean elements, false if input elements are osculating.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of Kozai-Izsak mean elements from the specified cartesian motion.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body 
            (distance cubed per time squared).</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
      <exception cref="T:System.ArgumentException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is negative or not below unity or if the semimajor axis is not finitely positive.
            For other orbit types, use <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of Kozai-Izsak mean orbital elements. Inputs are assumed to be mean elements.
            </summary>
      <param name="radius">Mean magnitude of position vector (distance).</param>
      <param name="radiusDot">Mean rate of change of magnitude of position vector (distance/time).</param>
      <param name="parameter">Mean semi-latus rectum (distance).</param>
      <param name="argumentOfLatitude">Mean argument of latitude (radians).</param>
      <param name="inclination">Mean inclination (radians).</param>
      <param name="rightAscensionOfAscendingNode">Mean right ascension of the ascending node (radians).</param>
      <param name="gravitationalParameter">Gravitational parameter (distance cubed per time squared).</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
      <exception cref="T:System.ArgumentException">The given elements must represent a closed orbit.  The exception
            is thrown if the eccentricity is not below unity or if the semimajor axis is not finitely positive.
            </exception>
      <exception cref="T:System.ArgumentException">The semimajor axis cannot be zero or nearly zero.  Thrown if
            the computed semimajor axis is less than <see cref="F:AGI.Foundation.Constants.Epsilon8" />.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ArgumentOfLatitude">
      <summary>
            Gets the argument of latitude of the orbit (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeEccentricAnomaly">
      <summary>
            Computes the mean eccentric anomaly.
            </summary>
      <returns>The mean eccentric anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.OrbitType" /> does not represent
            either a circular or elliptical orbit.  
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeEccentricity">
      <summary>
            Computes the mean eccentricity of the orbit.
            </summary>
      <returns>The mean eccentricity.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeMeanAnomaly">
      <summary>
            Computes the mean Mean anomaly.
            </summary>
      <returns>The mean mean anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.OrbitType" /> does not represent
            either a circular or elliptical orbit.  
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeOsculatingRadiusOfApoapsis">
      <summary>
            Computes the osculating radius of apoapsis.
            </summary>
      <returns>The osculating apoapsis radius (distance).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeOsculatingRadiusOfPeriapsis">
      <summary>
            Computes the osculating radius of periapsis.
            </summary>
      <returns>The osculating periapsis radius (distance).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeSemimajorAxis">
      <summary>
            Computes the mean semi-major axis length of the orbit.
            </summary>
      <returns>The mean semi-major axis length.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ComputeTrueAnomaly">
      <summary>
            Computes the mean True anomaly.
            </summary>
      <returns>The current mean true anomaly (radians).</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.GravitationalParameter">
      <summary>
            Gets the gravitational parameter used for this element set (distance cubed per time squared).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.Inclination">
      <summary>
            Gets the inclination of the orbit (radians).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.J2ZonalHarmonicCoefficient">
      <summary>
            Gets the unnormalized J2 zonal harmonic coefficient used for this element set.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.OrbitType">
      <summary>
            Gets the type of orbit represented by these elements.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.RadialVelocity">
      <summary>
            Gets the rate of change of the magnitude of the position vector (distance/time).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.Radius">
      <summary>
            Gets the magnitude of the position vector (distance).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ReferenceDistance">
      <summary>
            Gets the reference distance (equatorial radius) associated with the J2 zonal harmonic coefficient.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.RightAscensionOfAscendingNode">
      <summary>
            Gets the right ascension of the ascending node of the orbit (radians).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.SemilatusRectum">
      <summary>
            Gets the semi-latus rectum of the orbit (distance).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ToCartesian">
      <summary>
            Returns an osculating Cartesian representation of these mean orbital elements.
            </summary>
      <returns>Osculating Cartesian elements that are equivalent to these KozaiIzsakMeanElements
            (distance and distance per time).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ToMeanKeplerianElements">
      <summary>
            Returns a mean Keplerian orbit element representation of these mean orbital elements.
            </summary>
      <returns>Mean Keplerian orbit elements that are equivalent to these KozaiIzsakMeanElements.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ToMeanModifiedKeplerianElements">
      <summary>
            Returns a mean modified orbit element representation of these mean orbital elements.
            </summary>
      <returns>Mean modified orbit elements that are equivalent to these KozaiIzsakMeanElements.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ToOsculatingKeplerianElements">
      <summary>
            Returns an osculating Keplerian orbit element representation of these mean orbital elements.
            </summary>
      <returns>Osculating Keplerian orbit elements that are equivalent to these KozaiIzsakMeanElements.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.KozaiIzsakMeanElements.ToOsculatingModifiedKeplerianElements">
      <summary>
            Returns an osculating modified orbit element representation of these mean orbital elements.
            </summary>
      <returns>Osculating modified orbit elements that are equivalent to these KozaiIzsakMeanElements.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius">
      <summary>
            A set of curvilinear 3-dimensional coordinates typically used to describe geocentric (or
            planetocentric on non-Earth central bodies) positions.  Longitude is an angle lying in the
            xy-plane measured from the positive x-axis and toward the positive y-axis.  Latitude is an angle
            measured from the xy-plane and toward the positive z-axis.  Radius is a linear coordinate measured
            from the origin.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the provided set of 
            <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of Cartesian coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(AGI.Foundation.Coordinates.Cylindrical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(AGI.Foundation.Coordinates.Spherical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the provided set of
            <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the provided longitude, latitude, and radius.
            </summary>
      <param name="longitude">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="latitude">The angular coordinate measured from the xy-plane and toward the positive z-axis.</param>
      <param name="radius">The linear coordinate measured from the origin.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.  The first value is treated as the <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Longitude" />, the second as the <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Latitude" />, and the third as the <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Radius" />.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates from the provided array.
            </summary>
      <param name="elements">The array of coordinate values.  The first value is treated as the <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Longitude" />, the second as the <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Latitude" />, and the third as the <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Radius" />.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.ConvertMotion(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Converts the motion given in terms of a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to motion
            of the corresponding set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.
            </summary>
      <param name="motion">The Cartesian motion.</param>
      <param name="order">The order of the highest derivative to convert.</param>
      <returns>The motion of the <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Equals(AGI.Foundation.Coordinates.LongitudeLatitudeRadius)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.EqualsEpsilon(AGI.Foundation.Coordinates.LongitudeLatitudeRadius,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            Longitude, Latitude, and Radius.
            </summary>
      <param name="index">Either 0, 1, or 2 corresponding to the coordinates Longitude, Latitude, or Radius.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or is equal to or greater than <see cref="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Latitude">
      <summary>
            Gets the angular coordinate measured from the xy-plane and toward the positive z-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Longitude">
      <summary>
            Gets the angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.op_Equality(AGI.Foundation.Coordinates.LongitudeLatitudeRadius,AGI.Foundation.Coordinates.LongitudeLatitudeRadius)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.op_Inequality(AGI.Foundation.Coordinates.LongitudeLatitudeRadius,AGI.Foundation.Coordinates.LongitudeLatitudeRadius)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Radius">
      <summary>
            Gets the linear coordinate measured from the origin.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            Longitude, Latitude, and Radius.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.LongitudeLatitudeRadius.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Matrix">
      <summary>
            A two-dimensional tensor of doubles.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.#ctor(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> instance with the specified dimensions.
            </summary>
      <param name="rowDimension">The number of rows in the new matrix.</param>
      <param name="columnDimension">The number of columns in the new matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Add(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Add(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> matrix to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Add(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Add(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Add(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.AddAssign(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the sum <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to equal the element-wise addition
            of the <paramref name="leftAddend" /> and the <paramref name="rightAddend" />.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="sum">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to use to store the result of the operation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.CheckForSameDefinition(AGI.Foundation.Coordinates.Matrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix.ColumnDimension">
      <summary>
            Gets the number of columns in this matrix.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementDivide(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element division of
            the two given matrices.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="dividend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the numerators.</param>
      <param name="divisor">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the denominators.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element division of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementDivide(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element division of
            the two given matrices.
            </summary>
      <param name="dividend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the numerators.</param>
      <param name="divisor">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> whose elements will form the denominators.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element division of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementDivide(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element division of
            the two given matrices.
            </summary>
      <param name="dividend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the numerators.</param>
      <param name="divisor">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> whose elements will form the denominators.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element division of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementDivide(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element division of
            the two given matrices.
            </summary>
      <param name="dividend">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> whose elements will form the numerators.</param>
      <param name="divisor">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the denominators.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element division of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementDivide(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element division of
            the two given matrices.
            </summary>
      <param name="dividend">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> whose elements will form the numerators.</param>
      <param name="divisor">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the denominators.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element division of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementDivideAssign(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the quotient <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to equal the element-wise division
            of the <paramref name="dividend" /> divided by the <paramref name="divisor" />.
            </summary>
      <param name="dividend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the numerators.</param>
      <param name="divisor">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements will form the denominators.</param>
      <param name="quotient">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to use to store the result of the operation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementMultiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element multiplication of
            the two given matrices.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" />to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element multiplication of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementMultiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element multiplication of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementMultiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" />to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element multiplication of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementMultiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" />to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element multiplication of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementMultiply(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the element-by-element multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" />to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which equals the element multiplication of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ElementMultiplyAssign(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the product <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to equal the element-wise multiplication
            of the <paramref name="multiplicand" /> times the <paramref name="multiplier" />.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" />to multiply.</param>
      <param name="product">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to use to store the result of the operation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Equals(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Indicates whether the two provided matrices hold the same data. The type of matrix is not examined, only their dimensions
            and the value of the elements at each index.
            </summary>
      <param name="left">The first matrix to compare.</param>
      <param name="right">The second matrix to compare.</param>
      <returns>true if the given matrices hold the same values; otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.EqualsEpsilon(AGI.Foundation.Coordinates.Matrix,System.Double)">
      <summary>
            Indicates whether each cell value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetFrozenCopy">
      <summary>
            Gets a frozen copy of this <see cref="T:AGI.Foundation.Coordinates.Matrix" />. If this matrix is already frozen it returns a reference
            to itself, otherwise it clones itself, freezes the clone, and returns that object.
            </summary>
      <returns>A frozen copy of the current matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a new matrix with the values of the specified subset of this matrix..
            </summary>
      <param name="firstRow">Inclusive initial index of rows to output from this matrix.</param>
      <param name="numberOfRows">Number of rows to output from this matrix.</param>
      <param name="firstColumn">Inclusive initial index of columns to output from this matrix.</param>
      <param name="numberOfColumns">Number of columns to output from this matrix.</param>
      <returns>A new matrix with the values of the submatrix occurring between the specified bounds.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Places the values of a subsection of this matrix into the given matrix. The <paramref name="destination" />
            matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="firstRow">Inclusive initial index of rows to output from this matrix.</param>
      <param name="numberOfRows">Number of rows to output from this matrix.</param>
      <param name="firstColumn">Inclusive initial index of columns to output from this matrix.</param>
      <param name="numberOfColumns">Number of columns to output from this matrix.</param>
      <param name="destination">The matrix to fill with the values of the submatrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Gets a new matrix with the values of the specified subset of this matrix.
            </summary>
      <param name="firstRow">Inclusive initial index of rows to output from this matrix.</param>
      <param name="numberOfRows">Number of rows to output from this matrix.</param>
      <param name="columnArray">Array of indices of columns to output from this matrix.</param>
      <returns>A new matrix with the values of the specified subset of this matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32[],AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Places the values of a subsection of this matrix into the given matrix. The <paramref name="destination" />
            matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="firstRow">Inclusive initial index of rows to output from this matrix.</param>
      <param name="numberOfRows">Number of rows to output from this matrix.</param>
      <param name="columnArray">Array of indices of columns to output from this matrix.</param>
      <param name="destination">The matrix to fill with the values of the submatrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Gets a new matrix with the values of the specified subset of this matrix.
            </summary>
      <param name="rowArray">Array of indices of rows to output from this matrix.</param>
      <param name="firstColumn">Inclusive initial index of columns to output from this matrix.</param>
      <param name="numberOfColumns">Number of columns to output from this matrix.</param>
      <returns>A new matrix with the values of the specified subset of this matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Places the values of a subsection of this matrix into the given matrix. The <paramref name="destination" />
            matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="rowArray">Array of indices of rows to output from this matrix.</param>
      <param name="firstColumn">Inclusive initial index of columns to output from this matrix.</param>
      <param name="numberOfColumns">Number of columns to output from this matrix.</param>
      <param name="destination">The matrix to fill with the values of the submatrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32[],System.Int32[])">
      <summary>
            Gets a new matrix with the values of the specified subset of this matrix.
            </summary>
      <param name="rowArray">Array of indices of rows to output from this matrix.</param>
      <param name="columnArray">Array of indices of columns to output from this matrix.</param>
      <returns>A new matrix with the values of the specified subset of this matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.GetMatrix(System.Int32[],System.Int32[],AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Places the values of a subsection of this matrix into the given matrix. The <paramref name="destination" />
            matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="rowArray">Array of indices of rows to output from this matrix.</param>
      <param name="columnArray">Array of indices of columns to output from this matrix.</param>
      <param name="destination">The matrix to fill with the values of the submatrix.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the value of the element at the given location.
            </summary>
      <param name="rowIndex">The row index of the desired element.</param>
      <param name="columnIndex">The column index of the desired element.</param>
      <returns>The value of the element at the given location.</returns>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">Thrown if a set is attempted on a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> when
            <see cref="P:AGI.Foundation.Infrastructure.DefinitionalObject.IsFrozen" /> is true.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Multiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Multiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Multiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Multiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Multiply(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Multiply(System.Double)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which has the value of the current matrix multiplied by the given factor.
            </summary>
      <param name="factor">The 'scalar' to multiply by the current Matrix.</param>
      <returns>The new matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.MultiplyAssign(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the product <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to equal the linear algebra multiplication
            of the <paramref name="multiplicand" /> times the <paramref name="multiplier" />.
            </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="product">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to use to store the result of the operation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Addition(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Addition(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Addition(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Addition(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="leftAddend">The first <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Addition(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices.
            </summary>
      <param name="left">The first <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to sum.</param>
      <param name="rightAddend">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to sum.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the sum of the two given matrices and the given matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(AGI.Foundation.Coordinates.Matrix,System.Double)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which has the value of the given matrix multiplied by the given factor.
            </summary>
      <param name="matrix">The matrix to be multiplied by the given factor.</param>
      <param name="factor">The 'scalar' to multiply by the given matrix.</param>
      <returns>The new matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the linear algebra multiplication of
            the two given matrices.</para>
      </summary>
      <param name="multiplicand">The first <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to multiply.</param>
      <param name="multiplier">The second <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to multiply.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the multiplication of this matrix and the given matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Multiply(System.Double,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which has the value of the given matrix multiplied by the given factor.
            </summary>
      <param name="factor">The 'scalar' to multiply by the given matrix.</param>
      <param name="matrix">The matrix to be multiplied by the given factor.</param>
      <returns>The new matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Subtraction(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Subtraction(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Subtraction(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Subtraction(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.op_Subtraction(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix.RowDimension">
      <summary>
            Gets the number of rows in this matrix.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the contents of a subset of this matrix to equal the values of the given <paramref name="origin" /> matrix.
            The origin matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="firstRow">Inclusive initial index of rows to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="numberOfRows">Number of rows to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="firstColumn">Inclusive initial index of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="numberOfColumns">Number of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="origin">The matrix containing the subset of values to set to the elements of this matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32[],AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the contents of a subset of this matrix to equal the values of the given <paramref name="origin" /> matrix.
            The origin matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="firstRow">Inclusive initial index of rows to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="numberOfRows">Number of rows to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="columnArray">Array of indices of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="origin">The matrix containing the subset of values to set to the elements of this matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.SetMatrix(System.Int32[],System.Int32,System.Int32,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the contents of a subset of this matrix to equal the values of the given <paramref name="origin" /> matrix.
            The origin matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="rowArray">Array of indices of rows to to receive input from the <paramref name="origin" />matrix.</param>
      <param name="firstColumn">Inclusive initial index of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="numberOfColumns">Number of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="origin">The matrix containing the subset of values to set to the elements of this matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.SetMatrix(System.Int32[],System.Int32[],AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the contents of a subset of this matrix to equal the values of the given <paramref name="origin" /> matrix.
            The origin matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="rowArray">Array of indices of rows to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="columnArray">Array of indices of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="origin">The matrix containing the subset of values to set to the elements of this matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.SetMatrix(System.Int32[],System.Int32[],AGI.Foundation.Coordinates.Matrix,System.Int32[],System.Int32[])">
      <summary>
            Sets the contents of a subset of this matrix to equal the values of the given <paramref name="origin" /> matrix.
            The origin matrix must match the dimensions of the requested submatrix.
            </summary>
      <param name="destinationRowArray">Array of indices of rows to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="destinationColumnArray">Array of indices of columns to receive input from the <paramref name="origin" /> matrix.</param>
      <param name="origin">The matrix containing the subset of values to set to the elements of this matrix.</param>
      <param name="originRowArray">Array of indices of rows to take input from the <paramref name="origin" /> matrix.</param>
      <param name="originColumnArray">Array of indices of columns to take input from the <paramref name="origin" /> matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Subtract(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
        <para>Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.</para>
        <para>The most efficient operation to do this is chosen through double dispatch based
            on the concrete types of the given matrices.</para>
      </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Subtract(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Subtract(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Subtract(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Subtract(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> whose elements have the values of the elements of the minuend matrix
            subtracted by the elements of the subtrahend matrix.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <returns>A <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the subtraction of the two given matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.SubtractAssign(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix,AGI.Foundation.Coordinates.Matrix)">
      <summary>
            Sets the difference <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to equal the element-wise subtraction
            of the <paramref name="minuend" /> by the <paramref name="subtrahend" />.
            </summary>
      <param name="minuend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> being subtracted from.</param>
      <param name="subtrahend">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to subtract.</param>
      <param name="difference">The <see cref="T:AGI.Foundation.Coordinates.Matrix" /> to use to store the result of the operation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.ToString">
      <summary>
            Returns a string representation of the matrix.
            </summary>
      <returns>A string representation of the matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix.Transpose">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Coordinates.Matrix" /> which is the transpose of the current matrix.
            </summary>
      <returns>The new matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Matrix3By3">
      <summary>
            A 3-by-3 matrix. This type is often used to represent a rotation. This
            represents an 'alias' rotation which transforms coordinates by modifying the underlying coordinate
            basis rather than modifying the coordinates themselves.  For more information, see our 
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
            Initializes a new instance from an angle axis rotation.
            </summary>
      <param name="rotation">The angle axis rotation.</param>
      <returns>The resulting 3-by-3 matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.EigenDecomposition)">
      <summary>
            Initializes a new instance from an <see cref="T:AGI.Foundation.Coordinates.EigenDecomposition" />.
            </summary>
      <param name="eigenDecomposition">The eigenvectors and eigenvalues of the matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Initializes a new instance representing an elementary rotation about one of the original axes.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <returns>The resulting 3-by-3 matrix.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
            Initializes a new instance from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.
            </summary>
      <param name="sequence">The Euler sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Initializes a new instance from a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" />.
            </summary>
      <param name="matrix">The symmetric matrix.</param>
      <returns>The resulting 3-by-3 matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Initializes a new instance from a <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The resulting 3-by-3 matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
            Initializes a new instance from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence.
            </summary>
      <param name="sequence">The yaw-pitch-roll sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance from elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m12">1,2</param>
      <param name="m13">1,3</param>
      <param name="m21">2,1</param>
      <param name="m22">2,2</param>
      <param name="m23">2,3</param>
      <param name="m31">3,1</param>
      <param name="m32">3,2</param>
      <param name="m33">3,3</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Add(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Add(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.CrossProductEquivalentMatrix(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> from the input vector such that the result of the cross product of the input vector
            with another vector is equivalent to pre-multiplying the other vector by the returned matrix.
            </summary>
      <param name="vector">The vector for which the cross product equivalent matrix is desired.</param>
      <returns>The cross product equivalent matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.CrossProductEquivalentMatrix(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Forms a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> from the input vector such that the result of the cross product of the input unit vector
            with another vector is equivalent to pre-multiplying the other vector by the returned matrix.
            </summary>
      <param name="vector">The unit vector for which the cross product equivalent matrix is desired.</param>
      <returns>The cross product equivalent matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Determinant">
      <summary>
            The determinant of the matrix.
            </summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.DiagonalMatrix(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms a diagonal matrix from the input vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The diagonal matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.DiagonalMatrix(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Forms a diagonal matrix from the input unit vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The diagonal matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.DiagonalMatrix(System.Double,System.Double,System.Double)">
      <summary>
            Forms a diagonal matrix from the input elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m22">2,2</param>
      <param name="m33">3,3</param>
      <returns>The diagonal matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Equals(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Equals(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.EqualsEpsilon(AGI.Foundation.Coordinates.Matrix3By3,System.Double)">
      <summary>
            Returns true if all of the elements of this matrix are within <paramref name="epsilon" />
            of the same elements of the specified matrix.  That is, in order for the matrices to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> to compare to this matrix.</param>
      <param name="epsilon">The smallest difference between the elements of the matrices for which they will NOT be considered equal.</param>
      <returns>true if the matrices are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.FrobeniusNorm">
      <summary>
            Computes the Frobenius norm of the matrix.
            </summary>
      <returns>The Frobenius norm.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.FrobeniusNormSquared">
      <summary>
            Computes the square of the Frobenius norm of the matrix.
            </summary>
      <returns>The square of the Frobenius norm.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.Identity">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> representing an identity transformation.
            </summary>
      <returns>The 3-by-3 identity matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <returns>The inverted matrix.</returns>
      <exception cref="T:System.ArithmeticException">
            Thrown when the absolute value of the <see cref="M:AGI.Foundation.Coordinates.Matrix3By3.Determinant" /> is less than
            <see cref="F:AGI.Foundation.Constants.Epsilon15" />.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.IsUndefined">
      <summary>
            Gets an indication as to whether any of the matrix values are <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.Item(System.Int32,System.Int32)">
      <summary>
            Accesses the matrix elements using zero-based indexing.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <returns>The value corresponding to the indicated element of the matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either <paramref name="row" /> or <paramref name="column" /> is less than 0 or greater than 2.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M11">
      <summary>
            Gets the element in the first row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M12">
      <summary>
            Gets the element in the first row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M13">
      <summary>
            Gets the element in the first row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M21">
      <summary>
            Gets the element in the second row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M22">
      <summary>
            Gets the element in the second row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M23">
      <summary>
            Gets the element in the second row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M31">
      <summary>
            Gets the element in the third row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M32">
      <summary>
            Gets the element in the third row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.M33">
      <summary>
            Gets the element in the third row, third column.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Multiply(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms a new Cartesian vector as the product of this 3-by-3 matrix and the provided Cartesian vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The resulting Cartesian vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Multiply(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Forms a new 3-by-3 matrix as the product of this 3-by-3 matrix and the provided elementary rotation.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <returns>The resulting 3-by-3 matrix.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Multiply(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Multiply(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Multiply(System.Double)">
      <summary>
            Multiplies this matrix by a scalar.
            </summary>
      <param name="scalar">The scalar to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Addition(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Addition(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Equality(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Inequality(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Multiplies the 3-by-3 matrix by the Cartesian vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The vector.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies a 3-by-3 matrix by an <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="rotation">The elementary rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The matrix on the left.</param>
      <param name="right">The matrix on the right.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The matrix on the left.</param>
      <param name="right">The matrix on the right.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3,System.Double)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Multiply(System.Double,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies a scalar by a matrix.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Subtraction(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.op_Subtraction(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Subtract(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Subtract(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3.Transpose">
      <summary>
            Transposes the matrix.
            </summary>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.Undefined">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> with elements of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3.Zero">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> representing the zero matrix.
            </summary>
      <returns>The 3-by-3 zero matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric">
      <summary>
            A 3-by-3 symmetric matrix. This type is often used to represent position covariance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.#ctor(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Initializes this instance as a symmetrical matrix constructed
            from the given symmetrical or nearly symmetrical <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            Mxy and Myx of this matrix will be equal to the average Mxy and Myx of the given matrix.
            </summary>
      <param name="matrix">The symmetrical or nearly symmetrical <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Add(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Add(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Determinant">
      <summary>
            The determinant of the matrix.
            </summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.DiagonalMatrix(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms a diagonal matrix from the input vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The diagonal matrix</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.DiagonalMatrix(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Forms a diagonal matrix from the input unit vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The diagonal matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.DiagonalMatrix(System.Double,System.Double,System.Double)">
      <summary>
            Forms a diagonal matrix from the input elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m22">2,2</param>
      <param name="m33">3,3</param>
      <returns>The diagonal matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.EigenDecomposition">
      <summary>
            Determines the eigenvectors and eigenvalues of the matrix.
            </summary>
      <returns>The eigenvectors and eigenvalues.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Equals(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Equals(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.EqualsEpsilon(AGI.Foundation.Coordinates.Matrix3By3Symmetric,System.Double)">
      <summary>
            Returns true if all of the elements of this matrix are within <paramref name="epsilon" />
            of the same elements of the specified matrix.  That is, in order for the matrices to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" /> to compare to this matrix.</param>
      <param name="epsilon">The smallest difference between the elements of the matrices for which they will NOT be considered equal.</param>
      <returns>true if the matrices are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.FrobeniusNorm">
      <summary>
            Computes the Frobenius norm of the matrix.
            </summary>
      <returns>The Frobenius norm.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.FrobeniusNormSquared">
      <summary>
            Computes the square of the Frobenius norm of the matrix.
            </summary>
      <returns>The square of the Frobenius norm.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.FromLowerTriangular(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Forms a symmetric matrix from the lower triangular elements of the provided matrix.
            </summary>
      <param name="matrix">The original matrix.</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.FromLowerTriangular(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Forms a symmetric matrix from the lower triangular elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m21">2,1</param>
      <param name="m22">2,2</param>
      <param name="m31">3,1</param>
      <param name="m32">3,2</param>
      <param name="m33">3,3</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.FromUpperTriangular(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Forms a symmetric matrix from the upper triangular elements of the provided matrix.
            </summary>
      <param name="matrix">The original matrix.</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.FromUpperTriangular(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Forms a symmetric matrix from the upper triangular elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m12">1,2</param>
      <param name="m13">1,3</param>
      <param name="m22">2,2</param>
      <param name="m23">2,3</param>
      <param name="m33">3,3</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Identity">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" /> representing an identity transformation.
            </summary>
      <returns>The 3-by-3 identity matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Invert">
      <summary>
            Inverts the matrix.
            </summary>
      <returns>The inverted matrix.</returns>
      <exception cref="T:System.ArithmeticException">
            Thrown when the absolute value of the <see cref="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Determinant" /> is less than
            <see cref="F:AGI.Foundation.Constants.Epsilon15" />.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.IsUndefined">
      <summary>
            Gets an indication as to whether any of the matrix values are <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Item(System.Int32,System.Int32)">
      <summary>
            Accesses the matrix elements using zero-based indexing.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <returns>The value corresponding to the indicated element of the matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either <paramref name="row" /> or <paramref name="column" /> is less than 0 or greater than 2.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M11">
      <summary>
            Gets the element in the first row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M12">
      <summary>
            Gets the element in the first row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M13">
      <summary>
            Gets the element in the first row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M21">
      <summary>
            Gets the element in the second row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M22">
      <summary>
            Gets the element in the second row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M23">
      <summary>
            Gets the element in the second row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M31">
      <summary>
            Gets the element in the third row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M32">
      <summary>
            Gets the element in the third row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.M33">
      <summary>
            Gets the element in the third row, third column.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Multiply(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms a new Cartesian vector as the product of this 3-by-3 matrix and the provided Cartesian vector.
            </summary>
      <param name="vector">The vector.</param>
      <returns>The resulting Cartesian vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Multiply(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Multiply(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Multiply(System.Double)">
      <summary>
            Multiplies this matrix by a scalar.
            </summary>
      <param name="scalar">The scalar to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Addition(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Addition(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Equality(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Inequality(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Multiplies the 3-by-3 matrix by the Cartesian vector.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="vector">The vector.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The matrix on the left.</param>
      <param name="right">The matrix on the right.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The matrix on the left.</param>
      <param name="right">The matrix on the right.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix3By3Symmetric,System.Double)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Multiply(System.Double,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Multiplies a scalar by a matrix.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Subtraction(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.op_Subtraction(AGI.Foundation.Coordinates.Matrix3By3Symmetric,AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Subtract(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Subtract(AGI.Foundation.Coordinates.Matrix3By3Symmetric)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Transpose">
      <summary>
            Transposes the matrix.
            </summary>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Undefined">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" /> with elements of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix3By3Symmetric.Zero">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix3By3Symmetric" /> representing the zero matrix.
            </summary>
      <returns>The 3-by-3 zero matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Matrix6By6">
      <summary>
            A 6-by-6 matrix.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.#ctor(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Initializes a new instance from a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric" />.
            </summary>
      <param name="matrix">The symmetric matrix.</param>
      <returns>The resulting matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> instance from elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m12">1,2</param>
      <param name="m13">1,3</param>
      <param name="m14">1,4</param>
      <param name="m15">1,5</param>
      <param name="m16">1,6</param>
      <param name="m21">2,1</param>
      <param name="m22">2,2</param>
      <param name="m23">2,3</param>
      <param name="m24">2,4</param>
      <param name="m25">2,5</param>
      <param name="m26">2,6</param>
      <param name="m31">3,1</param>
      <param name="m32">3,2</param>
      <param name="m33">3,3</param>
      <param name="m34">3,4</param>
      <param name="m35">3,5</param>
      <param name="m36">3,6</param>
      <param name="m41">4,1</param>
      <param name="m42">4,2</param>
      <param name="m43">4,3</param>
      <param name="m44">4,4</param>
      <param name="m45">4,5</param>
      <param name="m46">4,6</param>
      <param name="m51">5,1</param>
      <param name="m52">5,2</param>
      <param name="m53">5,3</param>
      <param name="m54">5,4</param>
      <param name="m55">5,5</param>
      <param name="m56">5,6</param>
      <param name="m61">6,1</param>
      <param name="m62">6,2</param>
      <param name="m63">6,3</param>
      <param name="m64">6,4</param>
      <param name="m65">6,5</param>
      <param name="m66">6,6</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Add(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Add(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Equals(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.EqualsEpsilon(AGI.Foundation.Coordinates.Matrix6By6,System.Double)">
      <summary>
            Returns true if all of the elements of this matrix are within <paramref name="epsilon" />
            of the same elements of the specified matrix.  That is, in order for the matrices to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> to compare to this matrix.</param>
      <param name="epsilon">The smallest difference between the elements of the matrices for which they will NOT be considered equal.</param>
      <returns>true if the matrices are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.Identity">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> representing an identity transformation.
            </summary>
      <returns>The 6-by-6 identity matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.IsUndefined">
      <summary>
            Gets an indication as to whether any of the matrix values are <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.Item(System.Int32,System.Int32)">
      <summary>
            Accesses the matrix elements using zero-based indexing.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <returns>The value corresponding to the indicated element of the matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either <paramref name="row" /> or <paramref name="column" /> is less than 0 or greater than 5.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M11">
      <summary>
            Gets the element in the first row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M12">
      <summary>
            Gets the element in the first row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M13">
      <summary>
            Gets the element in the first row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M14">
      <summary>
            Gets the element in the first row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M15">
      <summary>
            Gets the element in the first row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M16">
      <summary>
            Gets the element in the first row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M21">
      <summary>
            Gets the element in the second row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M22">
      <summary>
            Gets the element in the second row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M23">
      <summary>
            Gets the element in the second row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M24">
      <summary>
            Gets the element in the second row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M25">
      <summary>
            Gets the element in the second row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M26">
      <summary>
            Gets the element in the second row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M31">
      <summary>
            Gets the element in the third row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M32">
      <summary>
            Gets the element in the third row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M33">
      <summary>
            Gets the element in the third row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M34">
      <summary>
            Gets the element in the third row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M35">
      <summary>
            Gets the element in the third row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M36">
      <summary>
            Gets the element in the third row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M41">
      <summary>
            Gets the element in the fourth row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M42">
      <summary>
            Gets the element in the fourth row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M43">
      <summary>
            Gets the element in the fourth row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M44">
      <summary>
            Gets the element in the fourth row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M45">
      <summary>
            Gets the element in the fourth row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M46">
      <summary>
            Gets the element in the fourth row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M51">
      <summary>
            Gets the element in the fifth row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M52">
      <summary>
            Gets the element in the fifth row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M53">
      <summary>
            Gets the element in the fifth row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M54">
      <summary>
            Gets the element in the fifth row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M55">
      <summary>
            Gets the element in the fifth row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M56">
      <summary>
            Gets the element in the fifth row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M61">
      <summary>
            Gets the element in the sixth row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M62">
      <summary>
            Gets the element in the sixth row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M63">
      <summary>
            Gets the element in the sixth row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M64">
      <summary>
            Gets the element in the sixth row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M65">
      <summary>
            Gets the element in the sixth row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.M66">
      <summary>
            Gets the element in the sixth row, sixth column.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Multiply(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Multiply(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Multiply(System.Double)">
      <summary>
            Multiplies this matrix by a scalar.
            </summary>
      <param name="scalar">The scalar to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Addition(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Addition(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Equality(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Inequality(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The matrix on the left.</param>
      <param name="right">The matrix on the right.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The matrix on the left.</param>
      <param name="right">The matrix on the right.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6,System.Double)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Multiply(System.Double,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Multiplies a scalar by a matrix.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Subtraction(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.op_Subtraction(AGI.Foundation.Coordinates.Matrix6By6,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Subtract(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Subtract(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6.Transpose">
      <summary>
            Transposes the matrix.
            </summary>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.Undefined">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> representing an undefined matrix containing <see cref="F:System.Double.NaN" /> values.
            </summary>
      <returns>The 6-by-6 undefined matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6.Zero">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6" /> representing the zero matrix.
            </summary>
      <returns>The 6-by-6 zero matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric">
      <summary>
            A 6-by-6 symmetric matrix. This type is often used to represent position and velocity covariance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Add(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Add(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.DiagonalMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Forms a diagonal matrix from the input elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m22">2,2</param>
      <param name="m33">3,3</param>
      <param name="m44">4,4</param>
      <param name="m55">5,5</param>
      <param name="m66">6,6</param>
      <returns>The diagonal matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Equals(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.EqualsEpsilon(AGI.Foundation.Coordinates.Matrix6By6Symmetric,System.Double)">
      <summary>
            Returns true if all of the elements of this matrix are within <paramref name="epsilon" />
            of the same elements of the specified matrix.  That is, in order for the matrices to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The <see cref="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric" /> to compare to this matrix.</param>
      <param name="epsilon">The smallest difference between the elements of the matrices for which they will NOT be considered equal.</param>
      <returns>true if the matrices are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.FromLowerTriangular(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Forms a symmetric matrix from the lower triangular elements of the provided matrix.
            </summary>
      <param name="matrix">The original matrix.</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.FromLowerTriangular(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Forms a symmetric matrix from the lower triangular elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m21">2,1</param>
      <param name="m22">2,2</param>
      <param name="m31">3,1</param>
      <param name="m32">3,2</param>
      <param name="m33">3,3</param>
      <param name="m41">4,1</param>
      <param name="m42">4,2</param>
      <param name="m43">4,3</param>
      <param name="m44">4,4</param>
      <param name="m51">5,1</param>
      <param name="m52">5,2</param>
      <param name="m53">5,3</param>
      <param name="m54">5,4</param>
      <param name="m55">5,5</param>
      <param name="m61">6,1</param>
      <param name="m62">6,2</param>
      <param name="m63">6,3</param>
      <param name="m64">6,4</param>
      <param name="m65">6,5</param>
      <param name="m66">6,6</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.FromUpperTriangular(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Forms a symmetric matrix from the upper triangular elements of the provided matrix.
            </summary>
      <param name="matrix">The original matrix.</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.FromUpperTriangular(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Forms a symmetric matrix from the upper triangular elements.
            </summary>
      <param name="m11">1,1</param>
      <param name="m12">1,2</param>
      <param name="m13">1,3</param>
      <param name="m14">1,4</param>
      <param name="m15">1,5</param>
      <param name="m16">1,6</param>
      <param name="m22">2,2</param>
      <param name="m23">2,3</param>
      <param name="m24">2,4</param>
      <param name="m25">2,5</param>
      <param name="m26">2,6</param>
      <param name="m33">3,3</param>
      <param name="m34">3,4</param>
      <param name="m35">3,5</param>
      <param name="m36">3,6</param>
      <param name="m44">4,4</param>
      <param name="m45">4,5</param>
      <param name="m46">4,6</param>
      <param name="m55">5,5</param>
      <param name="m56">5,6</param>
      <param name="m66">6,6</param>
      <returns>The symmetric matrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Identity">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric" /> representing an identity transformation.
            </summary>
      <returns>The 6-by-6 identity matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.IsUndefined">
      <summary>
            Gets an indication as to whether any of the matrix values are <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Item(System.Int32,System.Int32)">
      <summary>
            Accesses the matrix elements using zero-based indexing.
            </summary>
      <param name="row">The row index.</param>
      <param name="column">The column index.</param>
      <returns>The value corresponding to the indicated element of the matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either <paramref name="row" /> or <paramref name="column" /> is less than 0 or greater than 5.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M11">
      <summary>
            Gets the element in the first row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M12">
      <summary>
            Gets the element in the first row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M13">
      <summary>
            Gets the element in the first row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M14">
      <summary>
            Gets the element in the first row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M15">
      <summary>
            Gets the element in the first row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M16">
      <summary>
            Gets the element in the first row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M21">
      <summary>
            Gets the element in the second row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M22">
      <summary>
            Gets the element in the second row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M23">
      <summary>
            Gets the element in the second row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M24">
      <summary>
            Gets the element in the second row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M25">
      <summary>
            Gets the element in the second row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M26">
      <summary>
            Gets the element in the second row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M31">
      <summary>
            Gets the element in the third row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M32">
      <summary>
            Gets the element in the third row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M33">
      <summary>
            Gets the element in the third row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M34">
      <summary>
            Gets the element in the third row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M35">
      <summary>
            Gets the element in the third row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M36">
      <summary>
            Gets the element in the third row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M41">
      <summary>
            Gets the element in the fourth row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M42">
      <summary>
            Gets the element in the fourth row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M43">
      <summary>
            Gets the element in the fourth row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M44">
      <summary>
            Gets the element in the fourth row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M45">
      <summary>
            Gets the element in the fourth row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M46">
      <summary>
            Gets the element in the fourth row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M51">
      <summary>
            Gets the element in the fifth row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M52">
      <summary>
            Gets the element in the fifth row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M53">
      <summary>
            Gets the element in the fifth row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M54">
      <summary>
            Gets the element in the fifth row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M55">
      <summary>
            Gets the element in the fifth row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M56">
      <summary>
            Gets the element in the fifth row, sixth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M61">
      <summary>
            Gets the element in the sixth row, first column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M62">
      <summary>
            Gets the element in the sixth row, second column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M63">
      <summary>
            Gets the element in the sixth row, third column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M64">
      <summary>
            Gets the element in the sixth row, fourth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M65">
      <summary>
            Gets the element in the sixth row, fifth column.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.M66">
      <summary>
            Gets the element in the sixth row, sixth column.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Multiply(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Multiply(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Multiplies this matrix by a matrix.
            </summary>
      <param name="matrix">The matrix to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Multiply(System.Double)">
      <summary>
            Multiplies this matrix by a scalar.
            </summary>
      <param name="scalar">The scalar to multiply by.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Addition(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Addition(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Adds a matrix to this matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Equality(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Inequality(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Multiply(AGI.Foundation.Coordinates.Matrix6By6Symmetric,System.Double)">
      <summary>
            Multiplies a matrix by a scalar.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Multiply(System.Double,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Multiplies a scalar by a matrix.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="matrix">The matrix.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Subtraction(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.op_Subtraction(AGI.Foundation.Coordinates.Matrix6By6Symmetric,AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Subtracts the second matrix from the first.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The result of subtracting the second matrix from the first.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Subtract(AGI.Foundation.Coordinates.Matrix6By6)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Subtract(AGI.Foundation.Coordinates.Matrix6By6Symmetric)">
      <summary>
            Subtracts a matrix from this matrix.
            </summary>
      <param name="matrix">The matrix to subtract.</param>
      <returns>The result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Transpose">
      <summary>
            Transposes the matrix.
            </summary>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Undefined">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric" /> representing an undefined matrix containing <see cref="F:System.Double.NaN" /> values.
            </summary>
      <returns>The 6-by-6 undefined matrix.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Matrix6By6Symmetric.Zero">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Coordinates.Matrix6By6Symmetric" /> representing the zero matrix.
            </summary>
      <returns>The 6-by-6 zero matrix.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem">
      <summary>
            A set of coordinates for specifying locations on the Earth based on a grid of longitude and latitude zones
            as outlined in Defense Mapping Agency Technical Manual (DMA TM) 8358.1,
            "Datums, Ellipsoids, Grids, and Grid Reference Systems",
            Edition 1, 20 September 1990.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.#ctor(AGI.Foundation.Coordinates.UniversalPolarStereographic)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem">Military Grid Reference System (MGRS)</see>
            coordinates from the provided
            <see cref="T:AGI.Foundation.Coordinates.UniversalPolarStereographic">Universal Polar Stereographic (UPS)</see> coordinates.
            </summary>
      <param name="coordinates">The UPS coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.#ctor(AGI.Foundation.Coordinates.UniversalTransverseMercator,AGI.Foundation.Geometry.Shapes.Ellipsoid)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem">Military Grid Reference System (MGRS)</see>
            coordinates from the provided
            <see cref="T:AGI.Foundation.Coordinates.UniversalTransverseMercator">Universal Transverse Mercator (UTM)</see> coordinates and ellipsoid.
            </summary>
      <param name="coordinates">The UTM coordinates.</param>
      <param name="ellipsoid">The reference ellipsoid.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.#ctor(System.String,System.String,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem">Military Grid Reference System (MGRS)</see>
            coordinates from the provided values.
            </summary>
      <param name="grid">The 1 or 3 character grid zone designator.</param>
      <param name="square">The 2 character 100,000 meter square designator.</param>
      <param name="easting">The eastward distance of the location into the square.</param>
      <param name="northing">The northward distance of the location into the square.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.Easting">
      <summary>
            Gets the eastward distance of the location into the square.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.Equals(AGI.Foundation.Coordinates.MilitaryGridReferenceSystem)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.EqualsEpsilon(AGI.Foundation.Coordinates.MilitaryGridReferenceSystem,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.Grid">
      <summary>
            Gets the 1 or 3 character grid zone designator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.Northing">
      <summary>
            Gets the northward distance of the location into the grid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.op_Equality(AGI.Foundation.Coordinates.MilitaryGridReferenceSystem,AGI.Foundation.Coordinates.MilitaryGridReferenceSystem)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.op_Inequality(AGI.Foundation.Coordinates.MilitaryGridReferenceSystem,AGI.Foundation.Coordinates.MilitaryGridReferenceSystem)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.Square">
      <summary>
            Gets the 2 character 100,000 meter square designator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Grid, Square, Easting, Northing".
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.TryConvertToUniversalPolarStereographic(AGI.Foundation.Coordinates.UniversalPolarStereographic@)">
      <summary>
            Attempts to convert this instance to a set of <see cref="T:AGI.Foundation.Coordinates.UniversalPolarStereographic" /> coordinates.
            </summary>
      <param name="ups">The converted coordinates.</param>
      <returns>
            true if this instance could be converted to the desired coordinate type,
            otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.MilitaryGridReferenceSystem.TryConvertToUniversalTransverseMercator(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.UniversalTransverseMercator@)">
      <summary>
            Attempts to convert this instance to a set of <see cref="T:AGI.Foundation.Coordinates.UniversalTransverseMercator" /> coordinates.
            </summary>
      <param name="ellipsoid">The reference ellipsoid.</param>
      <param name="utm">The converted coordinates.</param>
      <returns>
            true if this instance could be converted to the desired coordinate type,
            otherwise false.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements">
      <summary>
            Modified Keplerian orbital elements.  These are the same as the Classical/Keplerian orbital elements
            except that Radius of Periapsis and the inverse of Semimajor Axis are used instead of 
            Semimajor Axis and Eccentricity.  This is useful because the Radius of Periapsis is well defined 
            for all but rectilinear orbits.  For Eccentricity, use <see cref="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeEccentricity" />.
            <para>
            All units are SI unless indicated otherwise.  For more information see <a href="../Programmer's Guide/Overview/Units.html">Overview: Units</a>.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="position">The cartesian position (distance).</param>
      <param name="velocity">The cartesian velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the position is nearly zero (&lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />).</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="position">The cartesian position (distance).</param>
      <param name="velocity">The cartesian velocity (distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body (distance cubed per time squared).</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the position is nearly zero (&lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.DelaunayElements)">
      <summary>
            Initializes a new instance for the specified <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" />.
            </summary>
      <param name="elements">The set of Delaunay elements.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.DelaunayElements,System.Double,System.Double)">
      <summary>
            Initializes a new instance for the specified <see cref="T:AGI.Foundation.Coordinates.DelaunayElements" />.
            </summary>
      <param name="elements">The set of Delaunay elements.</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.EquinoctialElements)">
      <summary>
            Initialize a new instance from the given set of <see cref="T:AGI.Foundation.Coordinates.EquinoctialElements" />.
            </summary>
      <param name="elements">The set of Equinoctial elements.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.EquinoctialElements,System.Double,System.Double)">
      <summary>
            Initialize a new instance from the given set of <see cref="T:AGI.Foundation.Coordinates.EquinoctialElements" />.
            </summary>
      <param name="elements">The set of Equinoctial elements.</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Coordinates.KeplerianElements)">
      <summary>
            Initialize a new instance from the given set of classical <see cref="T:AGI.Foundation.Coordinates.KeplerianElements" />.
            </summary>
      <param name="elements">A set of classical Keplerian elements.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="elements" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body 
            (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the position is nearly zero (&lt; <see cref="F:AGI.Foundation.Constants.Epsilon8" />).</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance from the specified cartesian motion and gravitational constant.
            </summary>
      <param name="motion">The cartesian position and velocity (distance and distance per time).</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body 
            (distance cubed per time squared).</param>
      <param name="eccentricityTolerance">The tolerance which defines the value of 'zero' to use when checking whether the 
            eccentricity is zero below which the orbit is circular.</param>
      <param name="inclinationTolerance">The tolerance which defines the value of 'zero' to use when checking whether the
            inclination is zero below which the orbit is equatorial.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either <paramref name="eccentricityTolerance" /> or
            <paramref name="inclinationTolerance" /> is negative.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a set of modified Keplerian elements.
            </summary>
      <param name="radiusOfPeriapsis">Radius of periapsis (distance).</param>
      <param name="inverseSemimajorAxis">The inverse of semimajor axis (distance).</param>
      <param name="inclination">Inclination (radians).</param>
      <param name="argumentOfPeriapsis">Argument of periapsis (radians).</param>
      <param name="rightAscensionOfAscendingNode">Right ascension of the ascending node (radians).</param>
      <param name="trueAnomaly">True anomaly (radians).</param>
      <param name="gravitationalParameter">The gravitational parameter associated with these elements (distance cubed per time squared).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If the orbit is hyperbolic, the absolute value of 
            the true anomaly is restricted to be below <see cref="F:System.Math.PI" /> - ArcCos(1/eccentricity).
            Otherwise, the constructor throws an exception.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="inclination" /> is less than zero or greater than Pi radians.</exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ArgumentOfPeriapsis">
      <summary>
            Gets the argument of periapsis of the orbit (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeEccentricAnomaly">
      <summary>
            Computes the eccentric anomaly based on the current Keplerian position.
            </summary>
      <returns>The current eccentric anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown when the <see cref="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.OrbitType" /> is not circular or elliptical.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeEccentricity">
      <summary>
            Computes the eccentricity based on the current elements.
            </summary>
      <returns>The eccentricity based on the current elements.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeHyperbolicAnomaly">
      <summary>
            Computes the hyperbolic anomaly based on the current Keplerian position.
            </summary>
      <returns>The current hyperbolic anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the orbit type is not hyperbolic.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeMeanAnomaly">
      <summary>
            Computes the mean anomaly based on the current Keplerian position.
            </summary>
      <returns>The current mean anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">In the case of a hyperbolic orbit,
            the true anomaly 'v' is bound within: -Pi+ Acos(1/e) &lt; v &lt; Pi - Acos(1/e).  Otherwise, the
            method throws an exception.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeMeanMotion">
      <summary>
            Computes the mean motion based on the current Keplerian elements.
            </summary>
      <returns>The mean angular motion (radians per time).</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeParabolicAnomaly">
      <summary>
            Computes the parabolic anomaly based on the current Keplerian position.
            </summary>
      <returns>The current parabolic anomaly (radians).</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the orbit type is not parabolic.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputePeriod">
      <summary>
            Computes the orbital period of the current Keplerian elements.
            </summary>
      <returns>The orbital period (time).</returns>
      <exception cref="T:System.InvalidOperationException">This method is only valid for closed orbits.
            For parabolic and hyperbolic orbits, there is no valid orbital period.</exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ComputeRadiusOfApoapsis">
      <summary>
            Computes the radius of apoapsis based on the current elements.
            </summary>
      <returns>The radius of apoapsis based on the current elements.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.GravitationalParameter">
      <summary>
            Gets the gravitational parameter associated with this element set (distance cubed per time squared).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.Inclination">
      <summary>
            Gets the inclination of the orbit (radians).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.InverseSemimajorAxis">
      <summary>
            Gets the inverse of the semimajor axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.OrbitType">
      <summary>
            Gets the type of orbit represented by these elements.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.RadiusOfPeriapsis">
      <summary>
            Gets the radius of periapsis of the orbit (distance).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.RightAscensionOfAscendingNode">
      <summary>
            Gets the right ascension of the ascending node of the orbit (radians).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.ModifiedKeplerianElements.ToCartesian">
      <summary>
            Returns a cartesian representation of these orbital elements.
            </summary>
      <returns>Cartesian elements that are equivalent to these <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />
            (distance and distance per time).</returns>
      <exception cref="T:System.InvalidOperationException">
            Throws an exception in the case where the values become singular, namely when the true anomaly
            is Pi in the case of a parabolic orbit.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.TrueAnomaly">
      <summary>
            Gets the true anomaly of the orbit (radians).
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.OrbitType">
      <summary>
            An enumeration of the possible types and special cases of orbits.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.OrbitType.Circular">
      <summary>
            An orbit where the eccentricity is zero.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.OrbitType.Elliptical">
      <summary>
            An orbit where the eccentricity is between zero and unity.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.OrbitType.Parabolic">
      <summary>
            An orbit where the eccentricity is exactly unity.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.OrbitType.Hyperbolic">
      <summary>
            An orbit with an eccentricity greater than unity.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.OrthonormalBasis">
      <summary>
            Represents an orthonormal basis spanning Cartesian space.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.OrthonormalBasis.#ctor(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Initializes an orthonormal bases with the input direction.
            </summary>
      <param name="direction">The direction.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.OrthonormalBasis.#ctor(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Initializes an orthonormal bases with the input direction and reference.
            </summary>
      <param name="principal">The principal direction.</param>
      <param name="reference">The reference direction.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.OrthonormalBasis.FirstAxis">
      <summary>
            Gets the first axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.OrthonormalBasis.Rotation">
      <summary>
            Gets the rotation from the axes of the defining Cartesian vector(s) to the axes of the basis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.OrthonormalBasis.SecondAxis">
      <summary>
            Gets the second axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.OrthonormalBasis.ThirdAxis">
      <summary>
            Gets the third axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.OrthonormalBasis.ToString">
      <summary>
            Returns the <see cref="T:AGI.Foundation.Coordinates.UnitCartesian">UnitCartesians</see> that define this <see cref="T:AGI.Foundation.Coordinates.OrthonormalBasis" /> in the format <see cref="P:AGI.Foundation.Coordinates.OrthonormalBasis.FirstAxis" /> : <see cref="P:AGI.Foundation.Coordinates.OrthonormalBasis.SecondAxis" /> : <see cref="P:AGI.Foundation.Coordinates.OrthonormalBasis.ThirdAxis" />.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Polar">
      <summary>
            A set of curvilinear 2-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.#ctor(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates from the provided values.
            </summary>
      <param name="clock">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="radial">The linear coordinate perpendicular to the z-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates from the first 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 2 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates from 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 2 <paramref name="elements" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Polar.Clock">
      <summary>
            Gets the angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.Equals(AGI.Foundation.Coordinates.Polar)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.EqualsEpsilon(AGI.Foundation.Coordinates.Polar,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Polar.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0 and 1 corresponding to the coordinates
            Clock, Radial.
            </summary>
      <param name="index">Either 0 or 1 corresponding to the coordinates Clock or Radial.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.Polar.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Polar.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.op_Equality(AGI.Foundation.Coordinates.Polar,AGI.Foundation.Coordinates.Polar)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.op_Inequality(AGI.Foundation.Coordinates.Polar,AGI.Foundation.Coordinates.Polar)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Polar.Radial">
      <summary>
            Gets the linear coordinate perpendicular to the z-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Polar.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            Clock, Radial.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Polar.Zero">
      <summary>
            Gets a  set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.PoleIndicator">
      <summary>
            Specifies one of the two geographical poles, or neither.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.PoleIndicator.South">
      <summary>
            Indicates the southern pole.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.PoleIndicator.Neither">
      <summary>
            Indicates neither pole.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.PoleIndicator.North">
      <summary>
            Indicates the northern pole.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Quaternion">
      <summary>
        <para>
            A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space.  For more information, see our 
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </para>
        <para>
            In general, <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> is used to represent rotations.  This type is available for completeness,
            providing quaternion operations on non-normalized quaternions.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" />.
            </summary>
      <param name="rotation">The angle-axis rotation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.
            </summary>
      <param name="sequence">The Euler sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />.
            </summary>
      <param name="matrix">The 3-by-3 rotation matrix.</param>
      <returns>The resulting quaternion.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" />.
            </summary>
      <param name="sequence">The yaw-pitch-roll sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from the provided values.
            </summary>
      <param name="w">The W coordinate.</param>
      <param name="x">The X coordinate.</param>
      <param name="y">The Y coordinate.</param>
      <param name="z">The Z coordinate.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates from 4 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 4 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Conjugate">
      <summary>
            Forms the conjugate of this instance, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <returns>The new quaternion.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Equals(AGI.Foundation.Coordinates.Quaternion)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.EqualsEpsilon(AGI.Foundation.Coordinates.Quaternion,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.HasZeroNorm">
      <summary>
            Gets a value indicating if the <see cref="P:AGI.Foundation.Coordinates.Quaternion.Norm" /> of this instance is zero.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Identity">
      <summary>
            Gets the set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates representing the identity vector.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.IsUndefined">
      <summary>
            Gets whether or not any of the coordinates for this instance have the value <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, 2, and 3 corresponding to the coordinates
            W, X, Y, and Z.
            </summary>
      <param name="index">Either 0, 1, 2, or 3 corresponding to the coordinates W, X, Y, or Z.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.Quaternion.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Multiply(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <returns>The result of the multiplication.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Multiply(AGI.Foundation.Coordinates.Quaternion)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Norm">
      <summary>
            Gets the norm of this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Normalize">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from this instance.
            </summary>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates.</returns>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.Normalize(System.Double@)">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from this instance
            and returns the magnitude of the original instance in the provided parameter.
            </summary>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates.
            </param>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates.</returns>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.NormSquared">
      <summary>
            Gets the square of the <see cref="P:AGI.Foundation.Coordinates.Quaternion.Norm" /> of this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Equality(AGI.Foundation.Coordinates.Quaternion,AGI.Foundation.Coordinates.Quaternion)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Implicit(AGI.Foundation.Coordinates.UnitQuaternion)~AGI.Foundation.Coordinates.Quaternion">
      <summary>
            Converts a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates to a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates.</param>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Inequality(AGI.Foundation.Coordinates.Quaternion,AGI.Foundation.Coordinates.Quaternion)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Multiply(AGI.Foundation.Coordinates.Quaternion,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> by a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="rotation">The elementary rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Multiply(AGI.Foundation.Coordinates.Quaternion,AGI.Foundation.Coordinates.Quaternion)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> by another specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="left">The first quaternion.</param>
      <param name="right">The second quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Multiply(AGI.Foundation.Coordinates.Quaternion,System.Double)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_Multiply(System.Double,AGI.Foundation.Coordinates.Quaternion)">
      <summary>
            Multiplies a scalar by a specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="quaternion">The quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.op_UnaryNegation(AGI.Foundation.Coordinates.Quaternion)">
      <summary>
            Negates the specified <see cref="T:AGI.Foundation.Coordinates.Quaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="coordinates">The set of coordinates.</param>
      <returns>The result of negating the elements of the original <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Quaternion.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "W, X, Y, Z".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates with values of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.W">
      <summary>
            Gets the W coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.X">
      <summary>
            Gets the X coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Y">
      <summary>
            Gets the Y coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Z">
      <summary>
            Gets the Z coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Quaternion.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Rectangular">
      <summary>
            A set of rectilinear 2-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.#ctor(AGI.Foundation.Coordinates.Polar)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Polar" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from the provided values.
            </summary>
      <param name="x">The linear coordinate along the positive x-axis.</param>
      <param name="y">The linear coordinate along the positive y-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from the first 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 2 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 2 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Add(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Adds the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates to this instance.
            </summary>
      <param name="other">The addend, or value which is to be added to this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Divide(System.Double)">
      <summary>
            Divides this instance by a scalar.
            </summary>
      <param name="scalar">The divisor, or value which is to divide this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Dot(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Forms the dot product of the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates to dot with this instance.</param>
      <returns>A <see cref="T:System.Double" /> that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Equals(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.EqualsEpsilon(AGI.Foundation.Coordinates.Rectangular,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.HasZeroMagnitude">
      <summary>
            Gets a value indicating if the <see cref="P:AGI.Foundation.Coordinates.Rectangular.Magnitude" /> of this instance is zero.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Invert">
      <summary>
            Inverts this instance.
            </summary>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the inverse of this instance.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.IsUndefined">
      <summary>
            Gets whether or not any of the coordinates for this instance have the value <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0 and 1 corresponding to the coordinates
            X and Y.
            </summary>
      <param name="index">Either 0 or 1 corresponding to the coordinates X or Y.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or is equal to or greater than <see cref="P:AGI.Foundation.Coordinates.Rectangular.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.Magnitude">
      <summary>
            Gets the magnitude of this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.MagnitudeSquared">
      <summary>
            Gets the square of the <see cref="P:AGI.Foundation.Coordinates.Rectangular.Magnitude" /> of this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar.
            </summary>
      <param name="scalar">The multiplier, or value which is to multiply this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Normalize">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from this instance.
            </summary>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.</returns>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Normalize(System.Double@)">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from this instance
            and returns the <see cref="P:AGI.Foundation.Coordinates.Rectangular.Magnitude" /> of the original instance in the provided parameter.
            </summary>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </param>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.</returns>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Addition(AGI.Foundation.Coordinates.Rectangular,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates to another specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Division(AGI.Foundation.Coordinates.Rectangular,System.Double)">
      <summary>
            Divides a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates by a scalar.
            </summary>
      <param name="left">The dividend, or value which is to be divided by <paramref name="right" />.</param>
      <param name="right">The divisor, or value which is to divide <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Equality(AGI.Foundation.Coordinates.Rectangular,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Implicit(AGI.Foundation.Coordinates.UnitRectangular)~AGI.Foundation.Coordinates.Rectangular">
      <summary>
            Converts a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.</param>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Inequality(AGI.Foundation.Coordinates.Rectangular,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Multiply(AGI.Foundation.Coordinates.Rectangular,System.Double)">
      <summary>
            Multiplies a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates by a scalar.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Multiply(System.Double,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Multiplies a scalar by a specified set of set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_Subtraction(AGI.Foundation.Coordinates.Rectangular,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from another specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.op_UnaryNegation(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Negates the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates, yielding a new set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="coordinates">The set of coordinates.</param>
      <returns>The result of negating the elements of the original set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Rotate(System.Double)">
      <summary>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided angle.
            </summary>
      <param name="angle">The angle of rotation.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates which is the result of the rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.Subtract(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Subtracts the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from this instance.
            </summary>
      <param name="other">The subtrahend, or value which is to be subtracted from this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Rectangular.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "X, Y".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates with values of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.X">
      <summary>
            Gets the linear coordinate along the positive x-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.Y">
      <summary>
            Gets the linear coordinate along the positive y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Rectangular.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.RotationalTransformation">
      <summary>
            Holds static methods for manipulating a <see cref="T:AGI.Foundation.Motion`2" /> representing
            a rotation and its derivatives.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Compose(AGI.Foundation.Coordinates.AngleAxisRotation,AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Forms a new rotational transformation as the composition of two transformations.  The rotational rates of
            the first transformation are assumed to be zero. If the first transformation represents the transformation
            between axes "B" and axes "C" and the second transformation represents the
            transformation between axes "A" and axes "B", the result represents the transformation
            between axes "A" and axes "C".
            </summary>
      <param name="first">The transformation between axes "B" and axes "C".</param>
      <param name="second">The transformation between axes "A" and axes "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the rotation, pass 0 for this value.  To retrieve the rotational velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "A" and axes "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Compose(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Forms a new rotational transformation as the composition of two transformations.  The rotational rates of
            the first transformation are assumed to be zero. If the first transformation represents the transformation
            between axes "B" and axes "C" and the second transformation represents the
            transformation between axes "A" and axes "B", the result represents the transformation
            between axes "A" and axes "C".
            </summary>
      <param name="first">The transformation between axes "B" and axes "C".</param>
      <param name="second">The transformation between axes "A" and axes "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the rotation, pass 0 for this value.  To retrieve the rotational velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "A" and axes "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Compose(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.AngleAxisRotation,System.Int32)">
      <summary>
            Forms a new rotational transformation as the composition of two transformations.  The rotational rates of
            the second transformation are assumed to be zero. If the first transformation represents the transformation
            between axes "B" and axes "C" and the second transformation represents the
            transformation between axes "A" and axes "B", the result represents the transformation
            between axes "A" and axes "C".
            </summary>
      <param name="first">The transformation between axes "B" and axes "C".</param>
      <param name="second">The transformation between axes "A" and axes "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the rotation, pass 0 for this value.  To retrieve the rotational velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "A" and axes "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Compose(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.ElementaryRotation,System.Int32)">
      <summary>
            Forms a new rotational transformation as the composition of two transformations.  The rotational rates of
            the second transformation are assumed to be zero. If the first transformation represents the transformation
            between axes "B" and axes "C" and the second transformation represents the
            transformation between axes "A" and axes "B", the result represents the transformation
            between axes "A" and axes "C".
            </summary>
      <param name="first">The transformation between axes "B" and axes "C".</param>
      <param name="second">The transformation between axes "A" and axes "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the rotation, pass 0 for this value.  To retrieve the rotational velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "A" and axes "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Compose(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Forms a new rotational transformation as the composition of two transformations.
            If the first transformation represents the transformation
            between axes "B" and axes "C" and the second transformation represents the
            transformation between axes "A" and axes "B", the result represents the transformation
            between axes "A" and axes "C".
            </summary>
      <param name="first">The transformation between axes "B" and axes "C".</param>
      <param name="second">The transformation between axes "A" and axes "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the rotation, pass 0 for this value.  To retrieve the rotational velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "A" and axes "C".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Invert(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Forms the inverse rotational transformation.
            If this transformation represents the transformation between axes "A" and axes "B",
            the result represents the transformation between axes "B" and axes "A".
            </summary>
      <param name="motion">The transformation between axes "A" and axes "B".</param>
      <param name="order">The order of highest required derivative.  To retrieve just the rotation, pass 0 for this value.  To retrieve the rotational velocity as well, pass 1.  etc.</param>
      <returns>The transformation between axes "B" and axes "A".</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.RotationalTransformation.Transform(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Transforms the vector observed in the A axes to the B axes.
            </summary>
      <param name="rotationalTransformation">The transformation from the A axes to the B axes.</param>
      <param name="motion">The vector motion to transform.</param>
      <param name="order">The order of highest required derivative.  To retrieve just the vector, pass 0 for this value.  To retrieve the vector and its derivative, pass 1.  etc.</param>
      <returns>The vector transformed by the rotational transformation.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.Spherical">
      <summary>
            A set of curvilinear 3-dimensional coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(AGI.Foundation.Coordinates.AzimuthElevationRange)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the provided set of 
            <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.AzimuthElevationRange" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of Cartesian coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(AGI.Foundation.Coordinates.Cylindrical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cylindrical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(AGI.Foundation.Coordinates.LongitudeLatitudeRadius)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the provided set of
            <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.LongitudeLatitudeRadius" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the provided clock angle, cone angle, and magnitude.
            </summary>
      <param name="clock">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="cone">The angular coordinate measured from the positive z-axis and toward the negative z-axis.</param>
      <param name="magnitude">The linear coordinate measured from the origin.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates from the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Spherical.Clock">
      <summary>
            Gets the angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Spherical.Cone">
      <summary>
            Gets the angular coordinate measured from the positive z-axis and toward the negative z-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.Equals(AGI.Foundation.Coordinates.Spherical)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.EqualsEpsilon(AGI.Foundation.Coordinates.Spherical,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Spherical.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            Clock, Cone, and Magnitude.
            </summary>
      <param name="index">Either 0, 1, or 2 corresponding to the coordinates Clock, Cone, or Magnitude.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or is equal to or greater than <see cref="P:AGI.Foundation.Coordinates.Spherical.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Spherical.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Spherical.Magnitude">
      <summary>
            Gets the linear coordinate measured from the origin.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.Normalize">
      <summary>
            Forms a set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates from this instance.
            </summary>
      <returns>The resulting set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.op_Equality(AGI.Foundation.Coordinates.Spherical,AGI.Foundation.Coordinates.Spherical)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.op_Inequality(AGI.Foundation.Coordinates.Spherical,AGI.Foundation.Coordinates.Spherical)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.Spherical.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            Clock, Cone, and Magnitude.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.Spherical.Zero">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates with values of zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.SphericalElement">
      <summary>
            The elements in a <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.SphericalElement.Clock">
      <summary>
            The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.  
            This can also be thought of as the right ascension.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.SphericalElement.Cone">
      <summary>
            The angular coordinate measured from the positive z-axis and toward the negative z-axis.  This can be 
            thought of as the declination.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.SphericalElement.Magnitude">
      <summary>
            The linear coordinate measured from the origin.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.UnitCartesian">
      <summary>
            A set of rectilinear 3-dimensional coordinates with unit magnitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(AGI.Foundation.Coordinates.Cartesian,System.Double@)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.</param>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of coordinates.
            </param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.
            </summary>
      <param name="unit">The set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(AGI.Foundation.Coordinates.UnitSpherical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided set of
            <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates.
            </summary>
      <param name="unitSpherical">The set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided spherical coordinates.
            </summary>
      <param name="clock">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="cone">The angular coordinate measured from the positive z-axis and toward the negative z-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided values.
            </summary>
      <param name="x">The linear coordinate along the positive x-axis.</param>
      <param name="y">The linear coordinate along the positive y-axis.</param>
      <param name="z">The linear coordinate along the positive z-axis.</param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(System.Double,System.Double,System.Double,System.Double@)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the provided values.
            </summary>
      <param name="x">The linear coordinate along the positive x-axis.</param>
      <param name="y">The linear coordinate along the positive y-axis.</param>
      <param name="z">The linear coordinate along the positive z-axis.</param>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of coordinates.
            </param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from the first 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 3 <paramref name="elements" />.
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from 3 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 3 <paramref name="elements" />.
            </exception>
      <exception cref="T:System.DivideByZeroException">
            Thrown when the magnitude of the provided coordinates are zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            Thrown when the magnitude of the provided coordinates is infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Add(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Adds the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to this instance.
            </summary>
      <param name="other">The addend, or value which is to be added to this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Add(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Adds the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates to this instance.
            </summary>
      <param name="other">The addend, or value which is to be added to this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.AngleBetween(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Determines the angle in radians between the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates and this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates to evaluate.</param>
      <returns>A <see cref="T:System.Double" /> that represents the angle in radians between the two instances.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.ConvertMotion(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Converts the motion given in terms of a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to motion
            of the corresponding set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="motion">The Cartesian motion.</param>
      <param name="order">The order of the highest derivative to convert.</param>
      <returns>The motion of the unit Cartesian.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Cross(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms the cross product of the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to cross with this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Cross(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Forms the cross product of the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to cross with this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.DihedralAngle(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Calculates the scalar dihedral angle of the three given UnitCartesians.
            </summary>
      <param name="cartFrom">Cartesian to measure the angle from.</param>
      <param name="cartTo">Cartesian to measure the angle to.</param>
      <param name="cartAxis">The axis about which to measure the angle.</param>
      <returns>Returns a double representing the ScalarDihedralAngle of the three given Cartesians.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.DihedralAngle(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Calculates the scalar dihedral angle (and derivatives) of the three given UnitCartesians with
            Cartesian derivative information.
            </summary>
      <param name="motFrom">Cartesian (with possible derivative data) to measure the angle from.</param>
      <param name="motTo">Cartesian (with possible derivative data) to measure the angle to.</param>
      <param name="motAxis">The axis about which to measure the angle (with possible derivative data).</param>
      <param name="order">The order of the desired response, from 0 to 2.</param>
      <returns>Returns a Motion<double></double> representing the ScalarDihedralAngle of the three given Cartesians, and (optionally) its 1st and 2nd derivatives.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Divide(System.Double)">
      <summary>
            Divides this instance by a scalar.
            </summary>
      <param name="scalar">The divisor, or value by which to divide this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Dot(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Forms the dot product of the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to dot with this instance.</param>
      <returns>A <see cref="T:System.Double" /> that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Dot(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Forms the dot product of the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to dot with this instance.</param>
      <returns>A <see cref="T:System.Double" /> that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Equals(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.EqualsEpsilon(AGI.Foundation.Coordinates.UnitCartesian,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Invert">
      <summary>
            Inverts this instance.
            </summary>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates that represents the inverse of this instance.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.IsUndefined">
      <summary>
            Gets whether or not any of the coordinates for this instance have the value <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, and 2 corresponding to the coordinates
            X, Y, and Z.
            </summary>
      <param name="index">Either 0, 1, or 2 corresponding to the coordinates X, Y, or Z.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="index" /> is less than 0 or is equal to or greater than <see cref="P:AGI.Foundation.Coordinates.UnitCartesian.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.MostOrthogonalAxis">
      <summary>
            Gets the axis that is most orthogonal to this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.MostParallelAxis">
      <summary>
            Gets the axis which is most parallel to this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar.
            </summary>
      <param name="scalar">The multiplier, or value by which to multiply this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Addition(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates to a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Addition(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates to a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Addition(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates to another specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Division(AGI.Foundation.Coordinates.UnitCartesian,System.Double)">
      <summary>
            Divides a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates by a scalar.
            </summary>
      <param name="left">The dividend, or value to be divided by <paramref name="right" />.</param>
      <param name="right">The divisor, or value by which <paramref name="left" /> is to be divided.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Equality(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Inequality(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Multiply(AGI.Foundation.Coordinates.UnitCartesian,System.Double)">
      <summary>
            Multiplies a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates by a scalar.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Multiply(System.Double,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Multiplies a scalar by a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="left">The multiplicand, or value to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which by which <paramref name="left" /> is to be multiplied.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Subtraction(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Subtraction(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_Subtraction(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from another specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.op_UnaryNegation(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Negates the specified <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" />.
            </summary>
      <param name="coordinates">The set of coordinates.</param>
      <returns>The result of negating the elements of the original <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Rotate(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates representing this instance, which results from rotating
            the original axes used to represent this instance by the provided <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> rotation.
            </summary>
      <param name="rotation">The <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates which is the result of the rotation.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Rotate(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> rotation.
            </summary>
      <param name="rotation">The <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> rotation.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates which is the result of the rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Rotate(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> rotation.
            </summary>
      <param name="rotation">The <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> rotation.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates which is the result of the rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Subtract(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Subtracts the specified set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates from this instance.
            </summary>
      <param name="other">The subtrahend, or value which is to be subtracted from this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.Subtract(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Subtracts the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates from this instance.
            </summary>
      <param name="other">The subtrahend, or value which is to be subtracted from this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitCartesian.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "X, Y, Z".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates with values of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.UnitX">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates representing the x-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.UnitY">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates representing the y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.UnitZ">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates representing the z-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.X">
      <summary>
            Gets the linear coordinate along the positive x-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.Y">
      <summary>
            Gets the linear coordinate along the positive y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitCartesian.Z">
      <summary>
            Gets the linear coordinate along the positive z-axis.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.UnitQuaternion">
      <summary>
        <para>
            A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space.  This
            represents an 'alias' rotation which transforms coordinates by modifying the underlying coordinate
            basis rather than modifying the coordinates themselves.  For more information, see our 
            <a href="../Programmer%27s%20Guide/Overview/Coordinates.html">Coordinates Overview Documentation</a>.
            </para>
        <para>
            To transform a <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> with this rotation, see <see cref="M:AGI.Foundation.Coordinates.Cartesian.Rotate(AGI.Foundation.Coordinates.UnitQuaternion)" />.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(AGI.Foundation.Coordinates.AngleAxisRotation)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" />.
            </summary>
      <param name="rotation">The angle-axis rotation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />.
            </summary>
      <param name="rotation">The elementary rotation.</param>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.
            </summary>
      <param name="sequence">The Euler sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided rotation matrix (<see cref="T:AGI.Foundation.Coordinates.Matrix3By3" />).
            Note that if the given <paramref name="matrix" /> is not an orthogonal rotation matrix, 
            it will create a non-unit <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> and could cause problems in code which assumes that the <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> represents a rotation.
            </summary>
      <param name="matrix">The 3-by-3 rotation matrix.</param>
      <returns>The resulting quaternion.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(AGI.Foundation.Coordinates.Quaternion)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates.</param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" />.
            </summary>
      <param name="sequence">The yaw-pitch-roll sequence of rotations.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided values.
            </summary>
      <param name="w">The W coordinate.</param>
      <param name="x">The X coordinate.</param>
      <param name="y">The Y coordinate.</param>
      <param name="z">The Z coordinate.</param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double@)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the provided values.
            </summary>
      <param name="w">The W coordinate.</param>
      <param name="x">The X coordinate.</param>
      <param name="y">The Y coordinate.</param>
      <param name="z">The Z coordinate.</param>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of coordinates.
            </param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from the first 4 consecutive elements in the provided array.
            Note that the elements will not be normalized and may represent an invalid unit quaternion.  
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 4 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates from 4 consecutive elements in the provided array.
            Note that the elements will not be normalized and may represent an invalid unit quaternion.  
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 4 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.Conjugate">
      <summary>
            Forms the conjugate of this instance.
            </summary>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates that represents the conjugate of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.Equals(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.EqualsEpsilon(AGI.Foundation.Coordinates.UnitQuaternion,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.Identity">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates representing the identity vector.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.IsUndefined">
      <summary>
            Gets whether or not any of the coordinates for this instance have the value <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0, 1, 2, and 3 corresponding to the coordinates
            W, X, Y, and Z.
            </summary>
      <param name="index">Either 0, 1, 2, or 3 corresponding to the coordinates W, X, Y, or Z.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="index" /> is less than 0 or is greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.UnitQuaternion.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.Multiply(AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="rotation">The rotation by which to multiply this quaternion.</param>
      <returns>The result of the multiplication.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            Thrown if the <see cref="P:AGI.Foundation.Coordinates.ElementaryRotation.Axis" /> property of <paramref name="rotation" /> is
            not <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.First" />, <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Second" />, or 
            <see cref="F:AGI.Foundation.Coordinates.AxisIndicator.Third" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.Multiply(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Multiplies this instance by the specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="quaternion">The quaternion by which to multiply this quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar.
            </summary>
      <param name="scalar">The multiplier, or value which is to multiply this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_Equality(AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_Inequality(AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_Multiply(AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> by a specified <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="quaternion">The unit quaternion.</param>
      <param name="rotation">The elementary rotation.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_Multiply(AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> by another specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="left">The first unit quaternion.</param>
      <param name="right">The second unit quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_Multiply(AGI.Foundation.Coordinates.UnitQuaternion,System.Double)">
      <summary>
            Multiplies a specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> by a scalar, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="quaternion">The unit quaternion.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_Multiply(System.Double,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Multiplies a scalar by a specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.Quaternion" />.
            </summary>
      <param name="scalar">The scalar.</param>
      <param name="quaternion">The unit quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.op_UnaryNegation(AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Negates the specified <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.
            </summary>
      <param name="coordinates">The set of coordinates.</param>
      <returns>The result of negating the elements of the original <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitQuaternion.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "W, X, Y, Z".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> coordinates with values of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.W">
      <summary>
            Gets the W coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.X">
      <summary>
            Gets the X coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.Y">
      <summary>
            Gets the Y coordinate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitQuaternion.Z">
      <summary>
            Gets the Z coordinate.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.UnitRectangular">
      <summary>
            A set of rectilinear 2-dimensional coordinates with unit magnitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.#ctor(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="coordinates">The set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.</param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.#ctor(System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from the provided polar coordinates.
            </summary>
      <param name="clock">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from the provided values.
            </summary>
      <param name="x">The linear coordinate along the positive x-axis.</param>
      <param name="y">The linear coordinate along the positive y-axis.</param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.#ctor(System.Double,System.Double,System.Double@)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from the provided values.
            </summary>
      <param name="x">The linear coordinate along the positive x-axis.</param>
      <param name="y">The linear coordinate along the positive y-axis.</param>
      <param name="magnitude">
            
            On return,
            the magnitude of the original set of coordinates.
            </param>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from the first 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 2 <paramref name="elements" />.
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            The magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 2 <paramref name="elements" />.
            </exception>
      <exception cref="T:System.DivideByZeroException">
            Thrown when the magnitude of the provided coordinates must not be zero.
            </exception>
      <exception cref="T:System.NotFiniteNumberException">
            Thrown when the magnitude of the provided coordinates must not be infinite.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Add(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Adds the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates to this instance.
            </summary>
      <param name="other">The addend, or value which is to be added to this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Add(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Adds the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to this instance.
            </summary>
      <param name="other">The addend, or value which is to be added to this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.AngleBetween(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Determines the angle in radians between the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates and this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to evaluate.</param>
      <returns>A <see cref="T:System.Double" /> that represents the angle in radians between the two instances.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Divide(System.Double)">
      <summary>
            Divides this instance by a scalar.
            </summary>
      <param name="scalar">The divisor, or value which is to divide this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Dot(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Forms the dot product of the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates to dot with this instance.</param>
      <returns>A <see cref="T:System.Double" /> that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Dot(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Forms the dot product of the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates with this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to dot with this instance.</param>
      <returns>A <see cref="T:System.Double" /> that represents the result of the product.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Equals(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.EqualsEpsilon(AGI.Foundation.Coordinates.UnitRectangular,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Invert">
      <summary>
            Inverts this instance.
            </summary>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates that represents the inverse of this instance.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.IsUndefined">
      <summary>
            Gets whether or not any of the coordinates for this instance have the value <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0 and 1 corresponding to the coordinates
            X and Y.
            </summary>
      <param name="index">Either 0 or 1 corresponding to the coordinates X or Y.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:AGI.Foundation.Coordinates.UnitRectangular.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.MostOrthogonalAxis">
      <summary>
            Gets the axis which is most orthogonal to this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.MostParallelAxis">
      <summary>
            Gets the axis which is most parallel to this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Multiply(System.Double)">
      <summary>
            Multiplies this instance by a scalar.
            </summary>
      <param name="scalar">The multiplier, or value which is to multiply this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Addition(AGI.Foundation.Coordinates.Rectangular,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Addition(AGI.Foundation.Coordinates.UnitRectangular,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Addition(AGI.Foundation.Coordinates.UnitRectangular,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Adds a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates to another specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.
            </summary>
      <param name="left">The augend, or value to which <paramref name="right" /> is to be added.</param>
      <param name="right">The addend, or value which is to be added to <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Division(AGI.Foundation.Coordinates.UnitRectangular,System.Double)">
      <summary>
            Divides a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates by a scalar.
            </summary>
      <param name="left">The dividend, or value which is to be divided by <paramref name="right" />.</param>
      <param name="right">The divisor, or value which is to divide <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the division.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Equality(AGI.Foundation.Coordinates.UnitRectangular,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Inequality(AGI.Foundation.Coordinates.UnitRectangular,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Multiply(AGI.Foundation.Coordinates.UnitRectangular,System.Double)">
      <summary>
            Multiplies a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates by a scalar.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Multiply(System.Double,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Multiplies a scalar by a specified set of set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.
            </summary>
      <param name="left">The multiplicand, or value which is to be multiplied by <paramref name="right" />.</param>
      <param name="right">The multiplier, or value which is to multiply <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the multiplication.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Subtraction(AGI.Foundation.Coordinates.Rectangular,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Subtraction(AGI.Foundation.Coordinates.UnitRectangular,AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_Subtraction(AGI.Foundation.Coordinates.UnitRectangular,AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Subtracts a specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from another specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates.
            </summary>
      <param name="left">The minuend, or value from which <paramref name="right" /> is to be subtracted.</param>
      <param name="right">The subtrahend, or value which is to be subtracted from <paramref name="left" />.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.op_UnaryNegation(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Negates the specified <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" />, yielding a new <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" />.
            </summary>
      <param name="coordinates">The set of coordinates.</param>
      <returns>The result of negating the elements of the original <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Rotate(System.Double)">
      <summary>
            Produces a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates representing this instance which results from rotating
            the original axes used to represent this instance by the provided angle.
            </summary>
      <param name="angle">The angle of rotation.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates which is the result of the rotation.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Subtract(AGI.Foundation.Coordinates.Rectangular)">
      <summary>
            Subtracts the specified set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates from this instance.
            </summary>
      <param name="other">The subtrahend, or value which is to be subtracted from this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.Subtract(AGI.Foundation.Coordinates.UnitRectangular)">
      <summary>
            Subtracts the specified set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates from this instance.
            </summary>
      <param name="other">The subtrahend, or value which is to be subtracted from this instance.</param>
      <returns>A set of <see cref="T:AGI.Foundation.Coordinates.Rectangular" /> coordinates that represents the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitRectangular.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "X, Y".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates with values of <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.UnitX">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates representing the x-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.UnitY">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UnitRectangular" /> coordinates representing the y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.X">
      <summary>
            Gets the linear coordinate along the positive x-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitRectangular.Y">
      <summary>
            Gets the linear coordinate along the positive y-axis.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.UnitSpherical">
      <summary>
            A set of curvilinear 3-dimensional coordinates with unit magnitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.#ctor(AGI.Foundation.Coordinates.Spherical)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates from the provided set of
            <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinates.
            </summary>
      <param name="coordinates">The set of Spherical coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.#ctor(AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates from the provided set of <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> coordinates.
            </summary>
      <param name="coordinates">The set of UnitCartesian coordinates.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates from the provided clock angle and cone angle.
            </summary>
      <param name="clock">The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.</param>
      <param name="cone">The angular coordinate measured from the positive z-axis and toward the negative z-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.#ctor(System.Double[])">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates from the first 2 consecutive elements in the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <exception cref="T:System.ArgumentNullException">
            The array of <paramref name="elements" /> cannot be null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An object of this type must be constructed from an array with at least 2 <paramref name="elements" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.#ctor(System.Double[],System.Int32)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates from the provided array.
            </summary>
      <param name="elements">The array of coordinate values.</param>
      <param name="startIndex">The index of the first element in the array to use.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the array of <paramref name="elements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an object of this type is constructed from an array with less than 2 <paramref name="elements" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitSpherical.Clock">
      <summary>
            Gets the angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitSpherical.Cone">
      <summary>
            Gets the angular coordinate measured from the positive z-axis and toward the negative z-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.Equals(AGI.Foundation.Coordinates.UnitSpherical)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.EqualsEpsilon(AGI.Foundation.Coordinates.UnitSpherical,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UnitSpherical" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitSpherical.Item(System.Int32)">
      <summary>
            Gets the value of the specified element with <paramref name="index" /> of 0 and 1 corresponding to the coordinates
            Clock and Cone.
            </summary>
      <param name="index">Either 0 or 1 corresponding to the coordinates Clock or Cone.</param>
      <returns>The coordinate associated with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is less than 0 or is equal to or greater than <see cref="P:AGI.Foundation.Coordinates.UnitSpherical.Length" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitSpherical.Length">
      <summary>
            Gets the number of elements in this set of coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UnitSpherical.Magnitude">
      <summary>
            Gets the linear coordinate measured from the origin.  The value of this property is always 1.0.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.op_Equality(AGI.Foundation.Coordinates.UnitSpherical,AGI.Foundation.Coordinates.UnitSpherical)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.op_Inequality(AGI.Foundation.Coordinates.UnitSpherical,AGI.Foundation.Coordinates.UnitSpherical)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UnitSpherical.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            Clock, Cone, and Magnitude.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.UniversalPolarStereographic">
      <summary>
            A set of coordinates for specifying locations near the poles of the Earth based on a grid
            as outlined in Defense Mapping Agency Technical Manual (DMA TM) 8358.2,
            "The Universal Grids: Universal Transverse Mercator (UTM) and Universal Polar Stereographic (UPS)",
            Edition 1, 18 September 1989.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.#ctor(AGI.Foundation.Coordinates.PoleIndicator,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UniversalPolarStereographic" /> coordinates from the provided values.
            </summary>
      <param name="hemisphere">The hemisphere indicator.</param>
      <param name="easting">The eastward distance of the location into the zone.</param>
      <param name="northing">The northward distance of the location into the zone.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Easting">
      <summary>
            Gets the eastward distance of the location into the zone.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.Equals(AGI.Foundation.Coordinates.UniversalPolarStereographic)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.EqualsEpsilon(AGI.Foundation.Coordinates.UniversalPolarStereographic,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UniversalPolarStereographic" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Hemisphere">
      <summary>
            Gets the hemisphere of the coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.IsUndefined">
      <summary>
            Gets whether or not the <see cref="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Easting" /> and <see cref="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Northing" /> coordinates for this
            instance have the value <see cref="F:System.Double.NaN" /> or the <see cref="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Hemisphere" /> is invalid.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Northing">
      <summary>
            Gets the northward distance of the location into the zone.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.op_Equality(AGI.Foundation.Coordinates.UniversalPolarStereographic,AGI.Foundation.Coordinates.UniversalPolarStereographic)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.op_Inequality(AGI.Foundation.Coordinates.UniversalPolarStereographic,AGI.Foundation.Coordinates.UniversalPolarStereographic)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalPolarStereographic.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Hemisphere, Easting, Northing".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UniversalPolarStereographic" /> coordinates with
            <see cref="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Easting" /> and <see cref="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Northing" /> values of <see cref="F:System.Double.NaN" />
            and <see cref="P:AGI.Foundation.Coordinates.UniversalPolarStereographic.Hemisphere" /> 0.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.UniversalTransverseMercator">
      <summary>
            A set of coordinates for specifying locations on the Earth based on a grid of longitude zones
            as outlined in Defense Mapping Agency Technical Manual (DMA TM) 8358.2,
            "The Universal Grids: Universal Transverse Mercator (UTM) and Universal Polar Stereographic (UPS)",
            Edition 1, 18 September 1989.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.#ctor(System.Int32,AGI.Foundation.Coordinates.PoleIndicator,System.Double,System.Double)">
      <summary>
            Initializes a set of <see cref="T:AGI.Foundation.Coordinates.UniversalTransverseMercator" /> coordinates from the provided values.
            </summary>
      <param name="zone">The longitude zone indicator.</param>
      <param name="hemisphere">The hemisphere indicator.</param>
      <param name="easting">The eastward distance of the location into the zone.</param>
      <param name="northing">The northward distance of the location into the zone.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Easting">
      <summary>
            Gets the eastward distance of the location into the zone.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.Equals(AGI.Foundation.Coordinates.UniversalTransverseMercator)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.EqualsEpsilon(AGI.Foundation.Coordinates.UniversalTransverseMercator,System.Double)">
      <summary>
            Indicates whether each coordinate value of another instance of this type
            is within the required tolerance of the corresponding coordinate value of this instance.
            </summary>
      <param name="other">The set of <see cref="T:AGI.Foundation.Coordinates.UniversalTransverseMercator" /> coordinates to compare to this instance.</param>
      <param name="epsilon">The limit at which the absolute differences between the coordinate values will not be considered equal.</param>
      <returns>
            true if the absolute differences are less than <paramref name="epsilon" />; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Hemisphere">
      <summary>
            Gets the hemisphere of the coordinates.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.IsUndefined">
      <summary>
            Gets whether or not the <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Easting" /> and <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Northing" /> coordinates for this
            instance have the value <see cref="F:System.Double.NaN" />, the <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Zone" /> is not in the
            correct range, or the <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Hemisphere" /> is invalid.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Northing">
      <summary>
            Gets the northward distance of the location into the zone.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.op_Equality(AGI.Foundation.Coordinates.UniversalTransverseMercator,AGI.Foundation.Coordinates.UniversalTransverseMercator)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.op_Inequality(AGI.Foundation.Coordinates.UniversalTransverseMercator,AGI.Foundation.Coordinates.UniversalTransverseMercator)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.UniversalTransverseMercator.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance in the form
            "Zone, Hemisphere, Easting, Northing".
            </returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Undefined">
      <summary>
            Gets a set of <see cref="T:AGI.Foundation.Coordinates.UniversalTransverseMercator" /> coordinates with
            <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Easting" /> and <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Northing" /> values of <see cref="F:System.Double.NaN" />, 
            <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Zone" /> 0, and <see cref="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Hemisphere" /> 0.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.UniversalTransverseMercator.Zone">
      <summary>
            Gets the longitude zone of the location.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.YawPitchRoll">
      <summary>
            Represents a rotation as a sequence of three <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation">ElementaryRotations</see>
            about a reference set of axes.  The orientation and associated set of axes which result from the first elementary rotation
            are modified by a second elementary rotation, again performed about the original reference set of axes.
            Likewise, the third elementary rotation is performed about the original reference set of axes to further modify
            the orientation.  This differs from an <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> where the sequence
            of rotations are performed about the consecutive set of axes which result from the successive elementary rotations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.#ctor(AGI.Foundation.Coordinates.AngleAxisRotation,AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Coordinates.EulerSequence" /> sequence from the provided <see cref="T:AGI.Foundation.Coordinates.AngleAxisRotation" /> and sequence.
            </summary>
      <param name="rotation">The rotation.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.#ctor(AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation,AGI.Foundation.Coordinates.ElementaryRotation)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence from the provided <see cref="T:AGI.Foundation.Coordinates.ElementaryRotation" /> instances.
            </summary>
      <param name="firstRotation">The first rotation.</param>
      <param name="secondRotation">The second rotation.</param>
      <param name="thirdRotation">The third rotation.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.#ctor(AGI.Foundation.Coordinates.EulerSequence)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence from the provided <see cref="T:AGI.Foundation.Coordinates.EulerSequence" />.
            </summary>
      <param name="sequence">The Euler sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.#ctor(AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence from the provided <see cref="T:AGI.Foundation.Coordinates.Matrix3By3" /> and sequence.
            </summary>
      <param name="matrix">The orthogonal rotation matrix.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.#ctor(AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence from the provided <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> and sequence.
            </summary>
      <param name="quaternion">The unit quaternion.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.#ctor(System.Double,System.Double,System.Double,AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence from the provided angles and sequence.
            </summary>
      <param name="angle1">The first angle.</param>
      <param name="angle2">The second angle.</param>
      <param name="angle3">The third angle.</param>
      <param name="sequence">The sequence.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.Equals(AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.EqualsEpsilon(AGI.Foundation.Coordinates.YawPitchRoll,System.Double)">
      <summary>
            Returns true if all of the elements of this quaternion are within <paramref name="epsilon" />
            of the same elements of the specified quaternion.  That is, in order for the quaternions to be
            considered equal (and for this function to return true), the absolute value of the
            difference between each of their elements must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The Quaternion to compare to this quaternion.</param>
      <param name="epsilon">The smallest difference between the elements of the quaternions for which they will NOT be considered equal.</param>
      <returns>true if the quaternions are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.FirstAxis(AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Determines the first axis indicator from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRollIndicator" />.
            </summary>
      <param name="sequence">The order of the axes of rotation.</param>
      <returns>The first axis indicator.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.YawPitchRoll.FirstRotation">
      <summary>
            Gets the first rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.Indicator(AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Coordinates.AxisIndicator)">
      <summary>
            Composes a <see cref="T:AGI.Foundation.Coordinates.YawPitchRollIndicator" /> from three individual <see cref="T:AGI.Foundation.Coordinates.AxisIndicator" /> items. 
            </summary>
      <param name="first">The first axis of rotation.</param>
      <param name="second">The second axis of rotation.</param>
      <param name="third">The third axis of rotation.</param>
      <returns>The indicator.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.Invert">
      <summary>
            Inverts this instance, yielding a new <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> sequence.
            </summary>
      <returns>The inverted <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.op_Equality(AGI.Foundation.Coordinates.YawPitchRoll,AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.op_Inequality(AGI.Foundation.Coordinates.YawPitchRoll,AGI.Foundation.Coordinates.YawPitchRoll)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.SecondAxis(AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Determines the second axis indicator from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRollIndicator" />.
            </summary>
      <param name="sequence">The order of the axes of rotation.</param>
      <returns>The second axis indicator.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.YawPitchRoll.SecondRotation">
      <summary>
            Gets the second rotation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.YawPitchRoll.Sequence">
      <summary>
            Gets the order of the axes rotations for this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.ThirdAxis(AGI.Foundation.Coordinates.YawPitchRollIndicator)">
      <summary>
            Determines the third axis indicator from the provided <see cref="T:AGI.Foundation.Coordinates.YawPitchRollIndicator" />.
            </summary>
      <param name="sequence">The order of the axes of rotation.</param>
      <returns>The third axis indicator.</returns>
    </member>
    <member name="P:AGI.Foundation.Coordinates.YawPitchRoll.ThirdRotation">
      <summary>
            Gets the third rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.YawPitchRoll.ToString">
      <summary>
            Returns the value of this set of <see cref="T:AGI.Foundation.Coordinates.YawPitchRoll" /> coordinates in the form "first rotation, second rotation, third rotation"
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="T:AGI.Foundation.Coordinates.YawPitchRollIndicator">
      <summary>
            Indicates the order of the axes rotations in a yaw-pitch-roll sequence.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.YPR">
      <summary>
            The third axes, followed by the second and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.YRP">
      <summary>
            The third axes, followed by the first and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.PRY">
      <summary>
            The second axes, followed by the first and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.PYR">
      <summary>
            The second axes, followed by the third and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.RYP">
      <summary>
            The first axes, followed by the third and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.RPY">
      <summary>
            The first axes, followed by the second and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.YPY">
      <summary>
            The third axes, followed by the second and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.YRY">
      <summary>
            The third axes, followed by the first and then third axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.PRP">
      <summary>
            The second axes, followed by the first and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.PYP">
      <summary>
            The second axes, followed by the third and then second axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.RYR">
      <summary>
            The first axes, followed by the third and then first axes.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Coordinates.YawPitchRollIndicator.RPR">
      <summary>
            The first axes, followed by the second and then first axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Axes">
      <summary>
            A set of axes which may vary with time relative to another set of axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes at a given date.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            See <see cref="M:AGI.Foundation.Geometry.Axes.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for details.
            </summary>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.GetVectorElement(AGI.Foundation.Coordinates.CartesianElement)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Vector" /> representing the X, Y or Z of this axes. Note that the vector 
            returned will return trivial answers unless observed in some other axes.  Use the 
            <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" /> to properly observe the vector instead of getting an evaluator 
            directly.
            </summary>
      <param name="element">Specifies that the returned vector represents the X, Y or Z element 
            of this axes.</param>
      <returns>A <see cref="T:AGI.Foundation.Geometry.Vector" /> representing the X, Y or Z of this axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Axes.GetVectorElement(AGI.Foundation.Coordinates.CartesianElement,System.Int32)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Vector" /> representing the X, Y or Z of this axes. Note that the vector 
            returned will return trivial answers unless observed in some other axes.  Use the 
            <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" /> to properly observe the vector instead of getting an evaluator 
            directly.
            </summary>
      <param name="element">Specifies that the returned vector represents the X, Y or Z element 
            of this axes.</param>
      <param name="order">The order of derivative of the axes to represent with this object</param>
      <returns>A <see cref="T:AGI.Foundation.Geometry.Vector" /> representing the X, Y or Z of this axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Axes.Root">
      <summary>
            Gets the root axes, which is not defined in terms of any other axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesAlignedConstrained">
      <summary>
            A set of axes with the one axis aligned with the <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" /> direction vector and another axis
            constrained to minimize the angular separation from the <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference" /> vector.  These axes
            remain aligned and constrained as the <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" /> and <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference" /> vectors
            change with time.  By default, the principal axis is the x-axis and the reference axis is along the z-axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" /> and <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.#ctor(AGI.Foundation.Geometry.AxesAlignedConstrained,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Geometry.Vector,AGI.Foundation.Coordinates.AxisIndicator)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="principal">The principal direction vector with which the <paramref name="principalAxis" /> of this set of axes will be aligned.</param>
      <param name="principalAxis">The axis along which the <paramref name="principal" /> vector is aligned.</param>
      <param name="reference">The reference direction vector.  The <paramref name="referenceAxis" /> of this set of axes will be constrained to minimize the angular separation from this vector.</param>
      <param name="referenceAxis">The axis against which the <paramref name="reference" /> vector is constrained.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="principalAxis" /> and <paramref name="referenceAxis" /> are identical.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="principal">The principal direction vector with which the X-axis of this set of axes will be aligned.</param>
      <param name="reference">The reference direction vector.  The Z-axis of this set of axes will be constrained to minimize the angular separation from this vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.CheckForSameDefinition(AGI.Foundation.Geometry.AxesAlignedConstrained)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeTransformation(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.AxisIndicator)">
      <summary>
            Given a principal and reference vector expressed in the same set of axes, computes a transformation that
            will take a vector expressed in that set of axes and expresses it in the aligned-constrained axes.
            </summary>
      <param name="principal">The principal direction vector with which the <paramref name="principalAxis" /> will be aligned.</param>
      <param name="principalAxis">The axis along which the <paramref name="principal" /> vector is aligned.</param>
      <param name="reference">The reference direction vector.  The <paramref name="referenceAxis" /> will be constrained to 
            minimize the angular separation from this vector.</param>
      <param name="referenceAxis">The axis against which the <paramref name="reference" /> vector is constrained.</param>
      <returns>The transformation to the aligned-constrained axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeTransformation(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Given a principal and reference vector expressed in the same set of axes, computes a transformation that
            will take a vector expressed in that set of axes and expresses it in the aligned-constrained axes.
            </summary>
      <param name="principal">The principal direction vector with which the X-axis will be aligned.</param>
      <param name="reference">The reference direction vector.  The Z-axis will be constrained to minimize the angular separation from this vector.</param>
      <returns>The transformation to the aligned-constrained axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeTransformation(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.AxisIndicator,System.Int32)">
      <summary>
            Given a principal and reference vector expressed in the same set of axes, computes a transformation that
            will take a vector expressed in that set of axes and expresses it in the aligned-constrained axes.
            </summary>
      <param name="principal">The principal direction vector with which the <paramref name="principalAxis" /> will be aligned.</param>
      <param name="principalAxis">The axis along which the <paramref name="principal" /> vector is aligned.</param>
      <param name="reference">The reference direction vector.  The <paramref name="referenceAxis" /> will be constrained to 
            minimize the angular separation from this vector.</param>
      <param name="referenceAxis">The axis against which the <paramref name="reference" /> vector is constrained.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just the rotation, pass 0 for this value.  To compute rotational velocity as well, pass 1.</param>
      <returns>The transformation to the aligned-constrained axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeTransformation(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Given a principal and reference vector expressed in the same set of axes, computes a transformation that
            will take a vector expressed in that set of axes and expresses it in the aligned-constrained axes.
            </summary>
      <param name="principal">The principal direction vector with which the X-axis will be aligned.</param>
      <param name="reference">The reference direction vector.  The Z-axis will be constrained to minimize the angular separation from this vector.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just the rotation, pass 0 for this value.  To compute rotational velocity as well, pass 1.</param>
      <returns>The transformation to the aligned-constrained axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeTransformation(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.AxisIndicator,AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.AxisIndicator,System.Int32)">
      <summary>
            Given a principal and reference vector expressed in the same set of axes, computes a transformation that
            will take a vector expressed in that set of axes and expresses it in the aligned-constrained axes.
            </summary>
      <param name="principal">The principal direction vector with which the <paramref name="principalAxis" /> will be aligned.</param>
      <param name="principalAxis">The axis along which the <paramref name="principal" /> vector is aligned.</param>
      <param name="reference">The reference direction vector.  The <paramref name="referenceAxis" /> will be constrained to 
            minimize the angular separation from this vector.</param>
      <param name="referenceAxis">The axis against which the <paramref name="reference" /> vector is constrained.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just the rotation, pass 0 for this value.  To compute rotational velocity as well, pass 1.</param>
      <returns>The transformation to the aligned-constrained axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.ComputeTransformation(AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Given a principal and reference vector expressed in the same set of axes, computes a transformation that
            will take a vector expressed in that set of axes and expresses it in the aligned-constrained axes.
            </summary>
      <param name="principal">The principal direction vector with which the X-axis will be aligned.</param>
      <param name="reference">The reference direction vector.  The Z-axis will be constrained to minimize the angular separation from this vector.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just the rotation, pass 0 for this value.  To compute rotational velocity as well, pass 1.</param>
      <returns>The transformation to the aligned-constrained axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesAlignedConstrained.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" />'s <see cref="T:AGI.Foundation.Geometry.Axes" /> to
            a new <see cref="T:AGI.Foundation.Geometry.Axes" /> defined by the <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" /> and <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference" /> vectors 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" />.  Derivative information is provided if
            <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" /> and <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference" /> provide their derivatives.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal">
      <summary>
            Gets or sets the principal direction vector with which the X-axis of this set of axes will be aligned.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesAlignedConstrained.PrincipalAxis">
      <summary>
            Gets or sets the axis along which the <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Principal" /> vector is aligned.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference">
      <summary>
            Gets or sets the reference direction vector.  The Z-axis of this set of axes will be constrained
            to minimize the angular separation from this vector.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesAlignedConstrained.ReferenceAxis">
      <summary>
            Gets or sets the axis against which the <see cref="P:AGI.Foundation.Geometry.AxesAlignedConstrained.Reference" /> vector is constrained.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesEvaluator">
      <summary>
            Evaluates an <see cref="T:AGI.Foundation.Geometry.Axes" /> over time.
            <para>
            The product of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate date, int order)</see>
            method will be a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            representation of the orientation and rotation of these axes at the specified <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            The AxesEvaluator will attempt to provide rotational rate information up to the requested order.
            </para><para>
            The rotation reported by this evaluator represents the rotational transformation from the original
            axes to these axes.  By calling <see cref="M:AGI.Foundation.Coordinates.Cartesian.Rotate(AGI.Foundation.Coordinates.UnitQuaternion)" /> with the reported <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />,
            it will transform the given cartesian vector from the original axes to be expressed in these axes.
            </para><para>
            The rotational rates reported by an AxesEvaluator are the rotational rates of these axes 
            with respect to and expressed in the base axes in which these axes are defined.  
            e.g. The "FirstDerivative" (if available) of a platform body axes defined in the fixed frame
            will represent the angular velocity of the body in the fixed frame.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEvaluator.#ctor(AGI.Foundation.Geometry.AxesEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEvaluator.CreateConstantDefinedIn(AGI.Foundation.Geometry.Axes)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> indicating that the Axes that this Axes is defined in is
            the same for all possible times.  This is useful for constructing the value of the
            <see cref="P:AGI.Foundation.Geometry.AxesEvaluator.DefinedInIntervals" /> property.
            </summary>
      <param name="definedIn">The axes that this axes is defined in for all time.</param>
      <returns>The time interval collection indicated the axes this axes is defined in.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesEvaluator.DefinedInIntervals">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> where the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property of
            each interval is the Axes in which this Axes is defined over the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEvaluator.SimplifyIfNotTimeVarying(AGI.Foundation.EvaluatorGroup)">
      <summary>
            If this evaluator is not time varying, this method evaluates its value and constructs an evaluator
            from an <see cref="T:AGI.Foundation.Geometry.AxesFixedOffset" /> representing the fixed value.  If this evaluator is time varying,
            this method does nothing and returns the evaluator on which it is called.
            </summary>
      <param name="group">The evaluator group in which to construct the new evaluator, if applicable.</param>
      <returns>A simpler evaluator representing the fixed axes, or this if this axes is not fixed.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesFixedAtJulianDate">
      <summary>
            An axes which is defined by the instantaneous orientation of another axes at a fixed 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  These axes do not change over time with respect to the axes in 
            which they are fixed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAxes" /> and <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAt" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes,AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="fixedAxes">The axes which is fixed to define this axes.</param>
      <param name="fixedWithRespectTo">The axes with respect to which the <paramref name="fixedAxes" /> is fixed.  If this is null, the new instance will represent <paramref name="fixedAxes" /> fixed with respect to its parent.</param>
      <param name="fixedAt">The Julian date at which the <paramref name="fixedAxes" /> is fixed.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.#ctor(AGI.Foundation.Geometry.AxesFixedAtJulianDate,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.CheckForSameDefinition(AGI.Foundation.Geometry.AxesFixedAtJulianDate)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAt">
      <summary>
            Gets or sets the Julian date at which the axes is fixed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAxes">
      <summary>
            Gets or sets the axes which is fixed to define this axes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedWithRespectTo">
      <summary>
            Gets or sets the axes with respect to which this axes is fixed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedAtJulianDate.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that provides a constant transformation from the <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedWithRespectTo" /> axes to
            the <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAxes" /> based on their orientations at <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAt" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" /> and their derivative information at <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAt" />
            regardless of the <see cref="T:AGI.Foundation.Time.JulianDate" /> specified.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAxes" /> is null. To get an evaluator for this type,
            <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAxes" /> must be defined.
            </exception>
      <exception cref="T:AGI.Foundation.DataUnavailableException">
            Thrown when the axes in which these <see cref="T:AGI.Foundation.Geometry.AxesFixedAtJulianDate" /> are defined are not available 
            at the date specified by <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAt" />.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.AxesFixedAtJulianDate.FixedAxes" /> is not initialized.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesFixedOffset">
      <summary>
            An axes whose orientation does not change with respect to the axes in which it is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesFixedOffset.ReferenceAxes" />. <see cref="P:AGI.Foundation.Geometry.AxesFixedOffset.Offset" />
            is initialized to <see cref="P:AGI.Foundation.Coordinates.UnitQuaternion.Identity" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Coordinates.UnitQuaternion)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="referenceAxes">The axes from which this axes is offset.</param>
      <param name="offset">The offset, specified as a rotation from the <paramref name="referenceAxes" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.#ctor(AGI.Foundation.Geometry.AxesFixedOffset,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.CheckForSameDefinition(AGI.Foundation.Geometry.AxesFixedOffset)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFixedOffset.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the <see cref="P:AGI.Foundation.Geometry.AxesFixedOffset.ReferenceAxes" /> to
            to a new <see cref="T:AGI.Foundation.Geometry.Axes" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" /> and any derivative information requested
            will be <see cref="P:AGI.Foundation.Coordinates.Cartesian.Zero" />.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the <see cref="P:AGI.Foundation.Geometry.AxesFixedOffset.ReferenceAxes" /> is not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFixedOffset.Offset">
      <summary>
            Gets or sets the offset of this axes, specified as a rotation from the <see cref="P:AGI.Foundation.Geometry.AxesFixedOffset.ReferenceAxes" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFixedOffset.ReferenceAxes">
      <summary>
            Gets or sets the axes from which this axes is offset.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesInAxes">
      <summary>
            An axes which is effectively equivalent to another axes but is defined in a third axes.
            In other words, evaluating an instance of this type finds the transformation that takes a vector
            expressed in <see cref="P:AGI.Foundation.Geometry.AxesInAxes.InAxes" /> and expresses it in <see cref="P:AGI.Foundation.Geometry.AxesInAxes.AxesToObserve" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesInAxes.AxesToObserve" /> and <see cref="P:AGI.Foundation.Geometry.AxesInAxes.InAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="axesToObserve">The axes to find in another axes.</param>
      <param name="inAxes">The axes in which to find the axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.#ctor(AGI.Foundation.Geometry.AxesInAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInAxes.AxesToObserve">
      <summary>
            Gets or sets the axes to observe in another axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.CheckForSameDefinition(AGI.Foundation.Geometry.AxesInAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesInAxes.InAxes" /> to
        the <see cref="P:AGI.Foundation.Geometry.AxesInAxes.AxesToObserve" />.  The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
        &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
        If both axes provide derivative information, the derivative information will be transformed
        accordingly for the new axes.        
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to evaluate the transformation that must be applied to a vector expressed in the <see cref="P:AGI.Foundation.Geometry.AxesInAxes.InAxes" /> axes in order to express that vector in the <see cref="P:AGI.Foundation.Geometry.AxesInAxes.AxesToObserve" /> axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.Geometry.AxesInAxes.AxesToObserve" /> or the <see cref="P:AGI.Foundation.Geometry.AxesInAxes.InAxes" /> is not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInAxes.InAxes">
      <summary>
            Gets or sets the axes in which to find the axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesInPointsAxes">
      <summary>
            An axes observed in the axes in which a point is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesInPointsAxes.AxesToObserve" /> and <see cref="P:AGI.Foundation.Geometry.AxesInPointsAxes.Point" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="axesToObserve">The axes to observe.</param>
      <param name="point">The axes is observed in the axes in which this point is defined.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when point is the <see cref="P:AGI.Foundation.Geometry.Point.Root" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.#ctor(AGI.Foundation.Geometry.AxesInPointsAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInPointsAxes.AxesToObserve">
      <summary>
            Gets or sets the axes to observe.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.AxesInPointsAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInPointsAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesInPointsAxes.Point" />'s <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> to
        the <see cref="P:AGI.Foundation.Geometry.AxesInPointsAxes.AxesToObserve" />.  The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
        &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the <see cref="P:AGI.Foundation.Geometry.AxesInPointsAxes.Point" /> or the <see cref="P:AGI.Foundation.Geometry.AxesInPointsAxes.AxesToObserve" /> is not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInPointsAxes.Point">
      <summary>
            Gets or sets the point.  The axes is observed in the axes in which this point is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesInterpolator">
      <summary>
            A set of Axes that is defined with respect to a set of reference axes by an interpolator which
            can evaluate the Axes over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.Interpolator" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceAxes">The reference frame in which the axes are defined.</param>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the axes.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceAxes">The reference frame in which the axes are defined.</param>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the axes.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceAxes">The reference frame in which the axes are defined.</param>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the axes.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceAxes">The reference frame in which the axes are defined.</param>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the axes.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.RotationalMotionInterpolator)">
      <summary>
            Initializes a new instance from the provided parameters.
            </summary>
      <param name="referenceAxes">The reference axes in which this axes is defined.</param>
      <param name="interpolator">The interpolator to retrieve the transformation from <paramref name="referenceAxes" /> for a given Julian date.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.#ctor(AGI.Foundation.Geometry.AxesInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.AxesInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.ReferenceAxes" />
            to the orientation produced by the <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.Interpolator" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />. 
            The orientation is represented by a
            <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;, including derivative information
            if available from <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.Interpolator" />.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.Interpolator" /> is not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInterpolator.Interpolator">
      <summary>
            Gets or sets the interpolator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInterpolator.ReferenceAxes">
      <summary>
            Gets or sets the reference axes in which this axes is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesInVectorsAxes">
      <summary>
            An axes observed in the axes in which a vector is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.AxesInVectorsAxes.AxesToObserve" /> and <see cref="P:AGI.Foundation.Geometry.AxesInVectorsAxes.Vector" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="axesToObserve">The axes to observe.</param>
      <param name="vector">The axes is observed in the axes in which this vector is defined.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.#ctor(AGI.Foundation.Geometry.AxesInVectorsAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInVectorsAxes.AxesToObserve">
      <summary>
            Gets or sets the axes to observe.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.AxesInVectorsAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesInVectorsAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesInVectorsAxes.Vector" />'s <see cref="T:AGI.Foundation.Geometry.Axes" /> to
        the <see cref="P:AGI.Foundation.Geometry.AxesInVectorsAxes.AxesToObserve" />.  The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
        &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.AxesInVectorsAxes.AxesToObserve" /> or <see cref="P:AGI.Foundation.Geometry.AxesInVectorsAxes.Vector" /> is not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesInVectorsAxes.Vector">
      <summary>
            Gets or sets the vector.  The axes is observed in the axes in which this vector is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesLinearRate">
      <summary>
            An axes whose orientation changes change with respect to the axes in which it is defined
            by rotating at a linearly increasing or decreasing rate about a defined spin axis.  An
            initial rotational offset and rotational velocity at a reference epoch, and a constant
            rotational acceleration are used to define the motion over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceAxes" />. <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceEpoch" /> 
            is initialized to zero. <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.SpinAxis" /> is initialized to a <see cref="T:AGI.Foundation.Coordinates.UnitCartesian" /> whose 
            coordinates are zero.
            <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.InitialRotation" /> is initialized to <see cref="P:AGI.Foundation.Coordinates.UnitQuaternion.Identity" />. <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.InitialRotationalVelocity" /> and
            <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.RotationalAcceleration" /> are both initialized to 0.0.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.UnitCartesian,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="referenceAxes">The axes from which this axes is offset.</param>
      <param name="epoch">The reference epoch at which the initial rotational displacement and velocity are defined.</param>
      <param name="initialRotation">The rotational displacement of this axes with respect to the reference axes at the reference epoch.</param>
      <param name="spinAxis">The spin axis with respect to the reference axis.</param>
      <param name="initialRotationalVelocity">The magnitude of the rotational velocity with respect to the reference axes at the reference epoch.</param>
      <param name="rotationalAcceleration">The magnitude of the rotational acceleration with respect to the reference axes at the reference epoch.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.#ctor(AGI.Foundation.Geometry.AxesLinearRate,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.CheckForSameDefinition(AGI.Foundation.Geometry.AxesLinearRate)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLinearRate.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceAxes" /> at the 
            specified <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceEpoch" /> to a new set of axes which spins about the
            <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.SpinAxis" /> with rates defined by <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.InitialRotationalVelocity" /> and
            <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.RotationalAcceleration" />. The new orientation is represented by a 
            <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceAxes" /> is not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLinearRate.InitialRotation">
      <summary>
            Gets or sets the rotational displacement of this axes with respect to the reference axes at the reference epoch.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLinearRate.InitialRotationalVelocity">
      <summary>
            Gets or sets the magnitude of the rotational velocity with respect to the reference axes at the reference epoch.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceAxes">
      <summary>
            Gets or sets the axes from which this axes is offset.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLinearRate.ReferenceEpoch">
      <summary>
            Gets or sets the reference epoch at which the initial rotational displacement and velocity are defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLinearRate.RotationalAcceleration">
      <summary>
            Gets or sets the rotational acceleration or rate of change of the rotational velocity.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLinearRate.SpinAxis">
      <summary>
            Gets or sets the spin axis with respect to the reference axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesTargetingLink">
      <summary>
            An <see cref="T:AGI.Foundation.Geometry.Axes" /> which orients itself so that its Z-axis is aligned along a link, pointing
            from one platform to another, and its X-axis is constrained toward a reference vector.
            This is useful for pointing sensors and antennas toward their intended targets.
            <seealso cref="T:AGI.Foundation.Geometry.AxesAlignedConstrained" /></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.#ctor(AGI.Foundation.Geometry.AxesTargetingLink,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance specifying all parameters.
            </summary>
      <param name="link">The link to target.</param>
      <param name="observer">The end of the link that is being oriented. If <see cref="F:AGI.Foundation.Access.LinkRole.Transmitter" />
            the Z-axis of this Axes will be along the vector to the Receiver, if equal to <see cref="F:AGI.Foundation.Access.LinkRole.Receiver" />
            the Z-axis of this Axes will be along the vector to the Transmitter.</param>
      <param name="reference">The reference direction vector.  The X-axis of this
            set of axes will be constrained to minimize the angular separation from this vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.CheckForSameDefinition(AGI.Foundation.Geometry.AxesTargetingLink)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesTargetingLink.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesTargetingLink.Link">
      <summary>
            Gets or sets the link along which the axes is oriented.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesTargetingLink.Observer">
      <summary>
            Gets or sets the end of the link that is being oriented.  
            By default, this is set to orient the axes from the <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter">Transmitter</see>
            to the <see cref="P:AGI.Foundation.Access.ILinkService.Receiver">Receiver</see>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesTargetingLink.Reference">
      <summary>
            Gets or sets the reference direction vector.  The X-axis of this set of axes will be constrained
            to minimize the angular separation from this vector.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.CartesianParameter">
      <summary>
            Represents a <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> and its derivatives as a parameter.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.CartesianParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.CartesianParameter" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.CartesianParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.CartesianParameter.Instance">
      <summary>
            Gets the default instance of this parameter used by the <see cref="T:AGI.Foundation.EvaluatorGroup" /> to identify
            objects which are parameterized on the position.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.CompositeAxes">
      <summary>
            A Axes that is defined by a collection of intervals, where the data
            associated with each interval is a another Axes representing the
            orientation for that interval.  When using this class for analysis, the
            resulting Axes must be continuous; otherwise any analysis results will
            be incorrect.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.#ctor(AGI.Foundation.Geometry.CompositeAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.#ctor(AGI.Foundation.Time.TimeIntervalCollection{AGI.Foundation.Geometry.Axes})">
      <summary>
            Initializes a new instance with the provided intervals.
            </summary>
      <param name="intervals">The collection of axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.CheckForSameDefinition(AGI.Foundation.Geometry.CompositeAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositeAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.CompositeAxes.Intervals">
      <summary>
            Gets the collection of intervals where the data for a given interval represents the Axes for that time.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.CompositePoint">
      <summary>
            A Point that is defined by a collection of intervals, where the data
            associated with each interval is a another Point representing the
            location for that interval.  When using this class for analysis, the
            resulting Point must be continuous; otherwise any analysis results will
            be incorrect.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.#ctor(AGI.Foundation.Geometry.CompositePoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.#ctor(AGI.Foundation.Time.TimeIntervalCollection{AGI.Foundation.Geometry.Point})">
      <summary>
            Initializes a new instance with the provided intervals.
            </summary>
      <param name="intervals">The collection of points.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.CheckForSameDefinition(AGI.Foundation.Geometry.CompositePoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.CompositePoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.CompositePoint.Intervals" /> is empty or contains intervals with null data.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.CompositePoint.Intervals">
      <summary>
            Gets the collection of intervals where the data for a given interval represents the Point for that time.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ConstantCovariance3By3">
      <summary>
            Represents position covariance with standard deviations which remain constant in the given axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.ConstantCovariance3By3.OrientationAxes" /> with <see cref="M:AGI.Foundation.Geometry.ConstantCovariance3By3.SetOrientationAxes(AGI.Foundation.Geometry.Axes)" />.
            <see cref="P:AGI.Foundation.Geometry.ConstantCovariance3By3.Sigmas" /> is initialized to <see cref="P:AGI.Foundation.Coordinates.Cartesian.Zero" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.#ctor(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Geometry.Axes)">
      <summary>
            Creates a new instance from the specified constant size and the orientation axes.
            </summary>
      <param name="standardDeviations">The standard deviation, or sigmas, of the covariance ellipsoid axes.</param>
      <param name="orientationAxes">The orientation axes of the body axes of the covariance ellipsoid.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.#ctor(AGI.Foundation.Geometry.ConstantCovariance3By3,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.CheckForSameDefinition(AGI.Foundation.Geometry.ConstantCovariance3By3)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.CheckForSameDefinition(AGI.Foundation.Geometry.DynamicCovariance3By3)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.GetEvaluator(AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <param name="definedIn">The reference axes the results will be defined in. The evaluated
            <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation">Covariance3By3SizeAndOrientation's </see><see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">Rotation</see>Property is the rotation from
            the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" /> to this axes.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ConstantCovariance3By3.OrientationAxes">
      <summary>
            Gets the time-varying axes of the covariance ellipsoid. This property can be set with <see cref="M:AGI.Foundation.Geometry.ConstantCovariance3By3.SetOrientationAxes(AGI.Foundation.Geometry.Axes)" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ConstantCovariance3By3.SetOrientationAxes(AGI.Foundation.Geometry.Axes)">
      <summary>
            Sets the <see cref="P:AGI.Foundation.Geometry.ConstantCovariance3By3.OrientationAxes" />.
            </summary>
      <param name="orientationAxes"></param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ConstantCovariance3By3.Sigmas">
      <summary>
            Gets or sets the Cartesian representing the constant <see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Sigmas" /> for the location point
            uncertainty described by this instance. These are equal to the square root of the standard deviation of the covariances,
            and are the semi-axes lengths of the covariance ellipsoid at one standard deviation of uncertainty.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Covariance3By3Evaluator">
      <summary>
            Evaluates the position covariance of an object over time.
            <para>When calling <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate date, int order)</see>
            the evaluator will attempt to provide derivatives of the covariance up to the requested order. If there is a discrepancy
            between the available order of the standard deviation and orientation of the covariance then results of the higher order will be returned,
            and <see cref="P:AGI.Foundation.Coordinates.Cartesian.Undefined" /> will be used as the unknown results of the lower order data.</para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Covariance3By3Evaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Covariance3By3Evaluator.#ctor(AGI.Foundation.Geometry.Covariance3By3Evaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.Covariance3By3Evaluator.DefinedIn">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Geometry.Axes" /> that the covariance information is defined in. The
            <see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">Rotation</see> property of the resulting <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" />
            is the transformation from the covariance ellipsoid body axes to these <see cref="P:AGI.Foundation.Geometry.Covariance3By3Evaluator.DefinedIn" /> Axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Covariance3By3Evaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.DisplacementVectorParticipant">
      <summary>
            Identifies a participant in a <see cref="T:AGI.Foundation.Geometry.VectorDisplacement" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.DisplacementVectorParticipant.InitialPoint">
      <summary>
            The <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.DisplacementVectorParticipant.FinalPoint">
      <summary>
            The <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.DoubleParameter">
      <summary>
            Represents a double and its derivatives as a parameter.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DoubleParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.DoubleParameter" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DoubleParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.DoubleParameter.Instance">
      <summary>
            Gets the default instance of this parameter used by the <see cref="T:AGI.Foundation.EvaluatorGroup" /> to identify
            objects which are parameterized on the double.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.DynamicCovariance3By3">
      <summary>
            Holds the time-varying positional variance and covariance information for an object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.#ctor(AGI.Foundation.Geometry.DynamicCovariance3By3,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.CheckForSameDefinition(AGI.Foundation.Geometry.DynamicCovariance3By3)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEllipsoidSizeEvaluator(AGI.Foundation.Geometry.Scalar)">
      <summary>
        <para>Constructs an evaluator that calculates dimensions of the ellipsoid containing the uncertainty of a position
            over time. This is created from the standard deviation (or sigma) of the position variance over time, as well as the given
            <see cref="T:AGI.Foundation.Geometry.Scalar" /> factor of how many standard deviations of uncertainty to use.</para>
        <para>These sigmas correspond to the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" />.</para>
      </summary>
      <param name="sigmaFactor">The number of standard deviations to use to determine the ellipsoid dimensions.
            Use <see cref="M:AGI.Foundation.GaussianStatistics.MultiDimensionalStandardDeviationFactor(System.Int32,System.Double)" /> to determine the factor necessary
            for the desired confidence interval.</param>
      <returns>The sigma evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEllipsoidSizeEvaluator(AGI.Foundation.Geometry.Scalar,AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Constructs an evaluator that calculates dimensions of the ellipsoid containing the uncertainty of a position
            over time. This is created from the standard deviation (or sigma) of the position variance over time, as well as the given
            <see cref="T:AGI.Foundation.Geometry.Scalar" /> factor of how many standard deviations of uncertainty to use.</para>
        <para>These sigmas correspond to the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" />.</para>
      </summary>
      <param name="sigmaFactor">The number of standard deviations to use to determine the ellipsoid dimensions.
            Use <see cref="M:AGI.Foundation.GaussianStatistics.MultiDimensionalStandardDeviationFactor(System.Int32,System.Double)" /> to determine the factor necessary
            for the desired confidence interval.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The sigma evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEvaluator">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEvaluator(AGI.Foundation.Geometry.Axes)">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <param name="definedIn">The reference axes the results will be defined in. The evaluated
            <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation">Covariance3By3SizeAndOrientation's </see><see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">Rotation</see>Property is the rotation from
            the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" /> to this axes.</param>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEvaluator(AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <param name="definedIn">The reference axes the results will be defined in. The evaluated
            <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation">Covariance3By3SizeAndOrientation's </see><see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">Rotation</see>Property is the rotation from
            the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" /> to this axes.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetStandardDeviationEvaluator">
      <summary>
        <para>Constructs an evaluator that calculates the standard deviation (or sigma) of the position variance over time.
            These sigmas correspond to the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" />.</para>
        <para>This is equivalent to calling <see cref="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEllipsoidSizeEvaluator(AGI.Foundation.Geometry.Scalar)" /> with a sigma factor of 1.0.</para>
      </summary>
      <returns>The sigma evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetStandardDeviationEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Constructs an evaluator that calculates the standard deviation (or sigma) of the position variance over time.
            These sigmas correspond to the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" />.</para>
        <para>This is equivalent to calling <see cref="M:AGI.Foundation.Geometry.DynamicCovariance3By3.GetEllipsoidSizeEvaluator(AGI.Foundation.Geometry.Scalar,AGI.Foundation.EvaluatorGroup)" /> with a sigma factor of 1.0.</para>
      </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The sigma evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes">
      <summary>
            Gets the time-varying axes of the covariance ellipsoid.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.DynamicMatrix">
      <summary>
            Represents a real valued, time varying function of a <see cref="T:AGI.Foundation.Coordinates.Matrix" /> and its derivatives.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.#ctor(AGI.Foundation.Geometry.DynamicMatrix,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.CheckForSameDefinition(AGI.Foundation.Geometry.DynamicMatrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the values of this DynamicMatrix function at a given date.  
            See <see cref="M:AGI.Foundation.Geometry.DynamicMatrix.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for more details.
            </summary>
      <returns>An evaluator for this DynamicMatrix.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrix.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;Matrix&gt;
            of this dynamic matrix at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.DynamicMatrixEvaluator">
      <summary>
            Evaluates a <see cref="T:AGI.Foundation.Geometry.DynamicMatrix" /> over time.
            <para>
            The product of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(<see cref="T:AGI.Foundation.Time.JulianDate">JulianDate</see> date, int order)</see>
            method will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Matrix&gt;</see> representation of this 
            scalar at the specified <see cref="T:AGI.Foundation.Time.JulianDate" />.  The <see cref="T:AGI.Foundation.Geometry.DynamicMatrixEvaluator" /> will attempt to provide 
            derivatives of the scalar up to the requested order. 
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixEvaluator.#ctor(AGI.Foundation.Geometry.DynamicMatrixEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixEvaluator.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance that will evaluate matrices of the specified dimensions.
            </summary>
      <param name="rowDimension">The number of rows in the evaluated matrices.</param>
      <param name="columnDimension">The number of columns in the evaluated matrices.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">
      <summary>
            Gets the <see cref="P:AGI.Foundation.Coordinates.Matrix.ColumnDimension">ColumnDimension</see> of the <see cref="T:AGI.Foundation.Coordinates.Matrix" />
            object produced by the evaluation calls.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">
      <summary>
            Gets the <see cref="P:AGI.Foundation.Coordinates.Matrix.RowDimension">RowDimension</see> of the <see cref="T:AGI.Foundation.Coordinates.Matrix" />
            object produced by the evaluation calls.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements">
      <summary>
            Represents a time varying function of <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.OrbitalPoint" />, <see cref="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.GravitationalParameter" />, 
            and the <see cref="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.Frame" /> properties.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.#ctor(AGI.Foundation.Geometry.DynamicModifiedKeplerianElements,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.#ctor(AGI.Foundation.Geometry.Point,System.Double,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point" /> to use to compute the elements from.</param>
      <param name="gravitationalParameter">The gravitational parameter to use when creating the elements.</param>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to observe the <paramref name="location" /> in when 
            evaluating the elements.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.CheckForSameDefinition(AGI.Foundation.Geometry.DynamicModifiedKeplerianElements)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.Frame">
      <summary>
            Gets or sets the frame to observe the <see cref="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.OrbitalPoint" /> in. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to compute the <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" /> of the 
            <see cref="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.OrbitalPoint" /> at a given date.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.IEvaluator">evaluator</see> for this <see cref="T:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to compute the <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" /> of the 
            <see cref="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.OrbitalPoint" /> at a given date..
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use in creating this evaluator.</param>
      <returns>An <see cref="T:AGI.Foundation.IEvaluator">evaluator</see> for this <see cref="T:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.GravitationalParameter">
      <summary> 
            Gets or sets the gravitational parameter to use when computing the elements.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements.OrbitalPoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to use to compute the elements.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.GeometryTransformer">
      <summary>
            Provides evaluators that can transform between axes, observe a point in any frame, etc.  These
            evaluators evaluate the requested geometry as it varies with time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.GetAxesTransformation(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes)">
      <summary>
            Gets an evaluator that can be used to find the transformation from one axes to another.  If both axes provide
            derivative information, the derivative information will be transformed accordingly for the new axes.
            </summary>
      <param name="from">The Axes that the returned evaluator should transform from.</param>
      <param name="to">The Axes that the returned evaluator should transform to.</param>
      <returns>An evaluator to evaluate the transformation that must be applied to a vector expressed in the <paramref name="from" /> axes in order to express that vector in the <paramref name="to" /> axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.GetAxesTransformation(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from one axes to another.  If both axes provide
            derivative information, the derivative information will be transformed accordingly for the new axes.
            </summary>
      <param name="from">The Axes that the returned evaluator should transform from.</param>
      <param name="to">The Axes that the returned evaluator should transform to.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to evaluate the transformation that must be applied to a vector expressed in the <paramref name="from" /> axes in order to express that vector in the <paramref name="to" /> axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.GetReferenceFrameTransformation(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Gets an evaluator that can evaluate the transformation between two reference frames.
            </summary>
      <param name="from">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the returned evaluator should transform from.</param>
      <param name="to">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the returned evaluator should transform to.</param>
      <returns>An evaluator to evaluate the transformation that must be applied to a point expressed in the <paramref name="from" /> reference frame in order to express that point in the <paramref name="to" /> reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="from" /> or <paramref name="to" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.GetReferenceFrameTransformation(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can evaluate the transformation between two reference frames.
            </summary>
      <param name="from">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the returned evaluator should transform from.</param>
      <param name="to">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the returned evaluator should transform to.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to evaluate the transformation that must be applied to a point expressed in the <paramref name="from" /> reference frame in order to express that point in the <paramref name="to" /> reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when any of the parameters, <paramref name="from" />, <paramref name="to" />, or <paramref name="group" />, are null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.ObservePoint(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
        Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
        of this point in the new <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame">ReferenceFrame</see> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
        The motion will also express any derivatives in the new frame if requested.
      </summary>
      <param name="point">The point to observe.</param>
      <param name="inFrame">The reference frame in which to observe the point.</param>
      <returns>An evaluator to find the motion of the point in the specified reference frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.ObservePoint(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
        of this point in the new <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame">ReferenceFrame</see> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
        The motion will also express any derivatives in the new frame if requested.
      </summary>
      <param name="point">The point to observe.</param>
      <param name="inFrame">The reference frame in which to observe the point.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of the point in the specified reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="point" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.ObserveVector(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Axes)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in a given axes at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  Note that this will not account for any
            translational effects and the axes are considered to be the vector's basis.  So if the vector is representing 
            a velocity or boresight vector, observing the vector in the axes of a reference frame which is rotating and translating
            with respect to the vector's axes will only take into account the relative rotation as if the two basis axes were colocated
            when computing the vector's derivatives.  To obtain a vector and its derivatives in a different frame, 
            the vector needs to be created in that frame.
            </summary>
      <param name="vector">The vector to observe.</param>
      <param name="inAxes">The axes in which to observe the vector.</param>
      <returns>An evaluator to find the motion of the vector in the specified axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.ObserveVector(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in a given axes at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  Note that this will not account for any
            translational effects and the axes are considered to be the vector's basis.  So if the vector is representing 
            a velocity or boresight vector, observing the vector in the axes of a reference frame which is rotating and translating
            with respect to the vector's axes will only take into account the relative rotation as if the two basis axes were colocated
            when computing the vector's derivatives.  To obtain a vector and its derivatives in a different frame, 
            the vector needs to be created in that frame.
            </summary>
      <param name="vector">The vector to observe.</param>
      <param name="inAxes">The axes in which to observe the vector.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of the vector in the specified axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="vector" /> is null.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.GeometryTransformer.Advanced">
      <summary>
            Contains methods to obtain evaluators for less common situations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.GetTransformationFromPointsAxes(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Axes)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the axes in which a point is defined to a given axes.
            The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="fromPoint">The evaluator finds the transformation from the axes in which this point is defined.</param>
      <param name="to">The evaluator finds the transformation to this axes.</param>
      <returns>An evaluator to find the transformation from the axes in which a point is defined to another axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="fromPoint" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.GetTransformationFromPointsAxes(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the axes in which a point is defined to a given axes.
            The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="fromPoint">The evaluator finds the transformation from the axes in which this point is defined.</param>
      <param name="to">The evaluator finds the transformation to this axes.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the transformation from the axes in which a point is defined to another axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="fromPoint" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.GetTransformationFromVectorsAxes(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Axes)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the axes in which a vector is defined to
            a given axes.  The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="fromVector">The evaluator finds the transformation from the axes in which this vector is defined.</param>
      <param name="to">The evaluator finds the transformation to this axes.</param>
      <returns>An evaluator to find the transformation from the axes in which a vector is defined to another axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="fromVector" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.GetTransformationFromVectorsAxes(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from the axes in which a vector is defined to
            a given axes.  The transformation is represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="fromVector">The evaluator finds the transformation from the axes in which this vector is defined.</param>
      <param name="to">The evaluator finds the transformation to this axes.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the transformation from the axes in which a vector is defined to another axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="fromVector" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.ObservePointInOtherPointsFrame(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator that can be used to observe the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of a point at a given <see cref="T:AGI.Foundation.Time.JulianDate" /> in the reference frame in which another point is defined.
            </summary>
      <param name="pointToObserve">The point to observe.</param>
      <param name="frameOwner">The point is observed in the reference frame in which this point is defined.</param>
      <returns>An evaluator to find the motion of a point in another point's reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="frameOwner" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.ObservePointInOtherPointsFrame(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to observe the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of a point at a given <see cref="T:AGI.Foundation.Time.JulianDate" /> in the reference frame in which another point is defined.
            </summary>
      <param name="pointToObserve">The point to observe.</param>
      <param name="frameOwner">The point is observed in the reference frame in which this point is defined.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of a point in another point's reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="frameOwner" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.ObserveVectorInOtherVectorsAxes(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Gets an evaluator to observe the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; of a vector
            in the axes in which another vector is defined.  Note that this will not account for any
            translational effects and the axes are considered to be the vector's basis.  So if the vector is representing 
            a velocity or boresight vector, observing the vector in the axes of a reference frame which is rotating and translating
            with respect to the vector's axes will only take into account the relative rotation as if the two basis axes were colocated
            when computing the vector's derivatives.  To obtain a vector and its derivatives in a different frame, 
            the vector needs to be created in that frame.
            </summary>
      <param name="vectorToObserve">The vector to observe.</param>
      <param name="axesOwner">The vector is observed in the axes in which this vector is defined.</param>
      <returns>An evaluator to find the motion of a vector in another vector's axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="axesOwner" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.ObserveVectorInOtherVectorsAxes(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to observe the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; of a vector
            in the axes in which another vector is defined.  Note that this will not account for any
            translational effects and the axes are considered to be the vector's basis. So if the vector is representing 
            a velocity or boresight vector, observing the vector in the axes of a reference frame which is rotating and translating
            with respect to the vector's axes will only take into account the relative rotation as if the two basis axes were colocated
            when computing the vector's derivatives.  To obtain a vector and its derivatives in a different frame, 
            the vector needs to be created in that frame.
            </summary>
      <param name="vectorToObserve">The vector to observe.</param>
      <param name="axesOwner">The vector is observed in the axes in which this vector is defined.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of a vector in another vector's axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="axesOwner" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.ObserveVectorInPointsAxes(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator to observe the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; representation
            of a vector in the axes in which a point is defined.  Note that this will not account for any
            translational effects and the axes are considered to be the vector's basis. So if the vector is representing 
            a velocity or boresight vector, observing the vector in the axes of a reference frame which is rotating and translating
            with respect to the vector's axes will only take into account the relative rotation as if the two basis axes were colocated
            when computing the vector's derivatives.  To obtain a vector and its derivatives in a different frame, 
            the vector needs to be created in that frame.
            </summary>
      <param name="vector">The vector to observe</param>
      <param name="point">The vector is observed in the axes in which this point is defined.</param>
      <returns>An evaluator to find the motion of a vector in a point's axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="point" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.ObserveVectorInPointsAxes(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to observe the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; representation
            of a vector in the axes in which a point is defined.  Note that this will not account for any
            translational effects and the axes are considered to be the vector's basis.  So if the vector is representing 
            a velocity or boresight vector, observing the vector in the axes of a reference frame which is rotating and translating
            with respect to the vector's axes will only take into account the relative rotation as if the two basis axes were colocated
            when computing the vector's derivatives.  To obtain a vector and its derivatives in a different frame, 
            the vector needs to be created in that frame.
            </summary>
      <param name="vector">The vector to observe</param>
      <param name="point">The vector is observed in the axes in which this point is defined.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of a vector in a point's axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="point" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.Unwrap(AGI.Foundation.Geometry.Axes)">
      <summary>
            Unwraps an <see cref="T:AGI.Foundation.Geometry.AxesInAxes" />, <see cref="T:AGI.Foundation.Geometry.AxesInVectorsAxes" />, or <see cref="T:AGI.Foundation.Geometry.AxesInPointsAxes" />,
            returning the simple underlying <see cref="T:AGI.Foundation.Geometry.Axes" />.  If the specified <paramref name="axes" /> is not
            one of these types, it is returned unmodified.
            </summary>
      <param name="axes">The axes to unwrap.</param>
      <returns>The unwrapped axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.Unwrap(AGI.Foundation.Geometry.Point)">
      <summary>
            Unwraps a <see cref="T:AGI.Foundation.Geometry.PointInReferenceFrame" /> or <see cref="T:AGI.Foundation.Geometry.PointInPointsFrame" />,
            returning the simple underlying <see cref="T:AGI.Foundation.Geometry.Point" />.  If the specified <paramref name="point" />
            is not one of these types, it is returned unmodified.
            </summary>
      <param name="point">The point to unwrap.</param>
      <returns>The unwrapped point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.Unwrap(AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Unwraps both the <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Origin" /> and <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> of
            a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />, returning a reference frame composed of the simple underlying
            <see cref="T:AGI.Foundation.Geometry.Point" /> and <see cref="T:AGI.Foundation.Geometry.Axes" />.
            </summary>
      <param name="frame">The reference frame to unwrap.</param>
      <returns>The unwrapped reference frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.GeometryTransformer.Advanced.Unwrap(AGI.Foundation.Geometry.Vector)">
      <summary>
            Unwraps a <see cref="T:AGI.Foundation.Geometry.VectorInAxes" />. <see cref="T:AGI.Foundation.Geometry.VectorInPointsAxes" />, or <see cref="T:AGI.Foundation.Geometry.VectorInVectorsAxes" />,
            returning the simple underlying <see cref="T:AGI.Foundation.Geometry.Vector" />.  If the specified <paramref name="vector" />
            is not one of these types, it is returned unmodified.
            </summary>
      <param name="vector">The vector to unwrap.</param>
      <returns>The unwrapped vector.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.IKinematicStateService">
      <summary>
            A service that provides a <see cref="P:AGI.Foundation.Geometry.IKinematicStateService.ReferenceFrame" /> describing a complete
            kinematic state (position and orientation) of an object as it moves over time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.IKinematicStateService.ReferenceFrame">
      <summary>
            Gets the reference frame that describes both the position and orientation of this object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ILocationPointCovarianceService">
      <summary>
            A service that provides the size and orientation of the covriance ellipsoid over time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ILocationPointCovarianceService.LocationPointCovariance">
      <summary>
            Gets the description of the axes lengths and orientation of the covariance ellipsoid.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ILocationPointService">
      <summary>
            A service that provides the position of an object over time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ILocationPointService.LocationPoint">
      <summary>
            Gets the point that describes the position of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.IOrientationAxesService">
      <summary>
            A service that provides the orientation (rotation) of an object over time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.IOrientationAxesService.OrientationAxes">
      <summary>
            Gets the axes that describes the orientation of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ISetOrientationAxesService">
      <summary>
            A service that sets the orientation (rotation) of an object over time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ISetOrientationAxesService.OrientationAxes">
      <summary>
            Sets the axes that describes the orientation of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.IVectorService">
      <summary>
            A service which returns a vector.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.IVectorService.Vector">
      <summary>
            Gets the vector.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.LinkDelayEvaluator">
      <summary>
            An evaluator for computing the delay along a link.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.#ctor(AGI.Foundation.Geometry.LinkDelayEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.AdjustDate(AGI.Foundation.Time.JulianDate,System.Boolean)">
      <summary>
            Adjusts a date according to the link delay.
            </summary>
      <param name="date">The date to adjust.</param>
      <param name="remember">
            true if this adjustment should be remembered so that it can be reversed
            without loss of precision.  false if this adjustment will not be reversed.
            </param>
      <returns>The adjusted date.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.AdjustInterval(AGI.Foundation.Time.TimeInterval,System.Boolean)">
      <summary>
            Adjusts an interval according to the link delay.
            </summary>
      <param name="interval">The interval to adjust.</param>
      <param name="remember">
            true if this adjustment should be remembered so that it can be reversed
            without loss of precision.  false if this adjustment will not be reversed.
            </param>
      <returns>The adjusted interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.AdjustIntervals(AGI.Foundation.Time.TimeIntervalCollection,System.Boolean)">
      <summary>
            Adjusts an interval collection according to the link delay.
            </summary>
      <param name="intervals">The intervals to adjust.</param>
      <param name="remember">
            true if this adjustment should be remembered so that it can be reversed
            without loss of precision.  false if this adjustment will not be reversed.
            </param>
      <returns>The adjusted intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.EvaluateAndRemember(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates the link delay and remembers it so that it can later be reversed.
            </summary>
      <param name="date">The date at which to evaluate the link delay.</param>
      <returns>The link delay.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.GetAvailability(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Computes the intervals when this evaluator is available given the intervals when the final point
            is available.
            </summary>
      <param name="consideredIntervals">
            The intervals over which availability information is needed.  Note that the returned availability
            intervals may indicate availability outside of these intervals of consideration.
            </param>
      <param name="finalPointAvailability">The intervals when the final point is available.  These intervals are expressed on the final point.</param>
      <returns>The intervals when the link delay is available.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.PopAdjustmentCache">
      <summary>
            Pops the topmost set of cached adjustments off the stack.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.LinkDelayEvaluator.PushAdjustmentCache">
      <summary>
            Pushes the a set of cached adjustments onto the stack.
            </summary>
      <returns>An instance that can be disposed in order to pop the stack.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ParameterizedPoint">
      <summary>
            A point that is defined by a parameter at the time of evaluation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.#ctor(AGI.Foundation.Geometry.CartesianParameter,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="parameter">The cartesian parameter used to parameterize this point.</param>
      <param name="referenceFrame">The reference frame this point is described in.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.#ctor(AGI.Foundation.Geometry.ParameterizedPoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.CheckForSameDefinition(AGI.Foundation.Geometry.ParameterizedPoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedPoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ParameterizedPoint.Parameter">
      <summary>
            Gets or sets the state parameter to use to parameterize this point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ParameterizedPoint.ReferenceFrame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> used to define the state during integration.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ParameterizedScalar">
      <summary>
            A scalar that is defined by a parameter at the time of evaluation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.#ctor(AGI.Foundation.Geometry.DoubleParameter)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="parameter">The double parameter used to parameterize this Scalar.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.#ctor(AGI.Foundation.Geometry.ParameterizedScalar,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.CheckForSameDefinition(AGI.Foundation.Geometry.ParameterizedScalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedScalar.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ParameterizedScalar.Parameter">
      <summary>
            Gets or sets the double parameter to use to parameterize this Scalar.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ParameterizedVector">
      <summary>
            A vector that is defined by a parameter at the time of evaluation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.#ctor(AGI.Foundation.Geometry.CartesianParameter,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="parameter">The cartesian parameter used to parameterize this point.</param>
      <param name="definedInAxes">The axes this vector is described in.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.#ctor(AGI.Foundation.Geometry.ParameterizedVector,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.CheckForSameDefinition(AGI.Foundation.Geometry.ParameterizedVector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ParameterizedVector.DefinedInAxes">
      <summary>
            Gets or sets the axes in which the Vector is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ParameterizedVector.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the 
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" />
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ParameterizedVector.Parameter">
      <summary>
            Gets or sets the state parameter to use to parameterize this point.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Point">
      <summary>
            A point which may vary with time, defined relative to a given reference frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.CreateVectorAcceleration(AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Constructs a vector which represents the second derivative of this point's position.
            </summary>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the resultant <see cref="T:AGI.Foundation.Geometry.Vector">Vector's</see>
            results will be in.</param>
      <returns>The acceleration vector in the requested frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.CreateVectorDerivative(AGI.Foundation.Geometry.ReferenceFrame,System.Int32)">
      <summary>
            Constructs a vector which represents the requested order of the derivative of this point's position.
            </summary>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the resultant <see cref="T:AGI.Foundation.Geometry.Vector">Vector's</see>
            results will be in.</param>
      <param name="order">The order of derivative the constructed vector will represent.</param>
      <returns>The vector of the specified derivative in the requested frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.CreateVectorVelocity(AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Constructs a vector which represents the derivative of this point's position.
            </summary>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the resultant <see cref="T:AGI.Foundation.Geometry.Vector">Vector's</see>
            results will be in.</param>
      <returns>The velocity vector in the requested frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the motion of this point in its parent reference frame
            at a given date.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            See <see cref="M:AGI.Foundation.Geometry.Point.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for more details.
            </summary>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.GetScalarElement(AGI.Foundation.Coordinates.CartesianElement,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude 
            of this point.
            </summary>
      <param name="element">Specifies that the returned scalar represents the X, Y, Z or magnitude.</param>
      <param name="referenceFrame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to view this point in.</param>
      <returns>Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude 
            of this point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Point.GetScalarElement(AGI.Foundation.Coordinates.CartesianElement,AGI.Foundation.Geometry.ReferenceFrame,System.Int32)">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude, or any derivative of 
            those elements of this point.
            </summary>
      <param name="element">Specifies that the returned scalar represents the X, Y, Z or magnitude.</param>
      <param name="referenceFrame">The axes to view this point in.</param>
      <param name="order">The order of derivative of the point to represent with this object</param>
      <returns>Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude 
            of this point.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Point.Root">
      <summary>
            Gets the root point, which is not defined in terms of any reference frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointDifferentiator">
      <summary>
            A Point that can provide higher-order derivatives by finite-differencing another point.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.DifferentiatedPoint" />. <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.Increment" />
            is initialized to 0.0.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.#ctor(AGI.Foundation.Geometry.Point,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="point">The point to wrap and finite difference.</param>
      <param name="increment">The increment, in seconds, used to compute the finite difference.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.#ctor(AGI.Foundation.Geometry.Point,System.Double,System.Int32)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="point">The point to wrap and finite difference.</param>
      <param name="increment">The increment, in seconds, used to compute the finite difference.</param>
      <param name="derivativeToCompute">
            The derivative to compute, or 0 to specify that the next unavailable derivative should
            be computed.  See the documentation for <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.DerivativeToCompute" /> for more
            information.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.#ctor(AGI.Foundation.Geometry.PointDifferentiator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.CheckForSameDefinition(AGI.Foundation.Geometry.PointDifferentiator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointDifferentiator.DerivativeToCompute">
      <summary>
            Gets or sets the derivative to compute by finite-differencing.  For example, a value of
            1 for this property indicates that the first derivative (or velocity) should be computed.
            A value of 0 (the default) will cause the first derivative that is not supplied directly by
            <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.DifferentiatedPoint" /> to be computed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointDifferentiator.DifferentiatedPoint">
      <summary>
            Gets or sets the point whose highest order derivative is being differentiated
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointDifferentiator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point in its parent <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator
            can represent derivatives of the given <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.DifferentiatedPoint" /> using finite difference.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.DifferentiatedPoint" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Geometry.PointDifferentiator.Increment" /> is set to zero.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointDifferentiator.Increment">
      <summary>
            Gets or sets the increment used to calculate finite differences
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointEvaluator">
      <summary>
            Evaluates a <see cref="T:AGI.Foundation.Geometry.Point" /> over time.
            <para>
            The product of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate date, int order)</see>
            method will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> representation the position of this 
            point at the specified <see cref="T:AGI.Foundation.Time.JulianDate" />.  The PointEvaluator will attempt to provide 
            derivatives of the position up to the requested order. 
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointEvaluator.#ctor(AGI.Foundation.Geometry.PointEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointEvaluator.CreateConstantDefinedIn(AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> indicating that the ReferenceFrame that this Point is
            defined in is the same for all possible times.  This is useful for constructing the value of the
            <see cref="P:AGI.Foundation.Geometry.PointEvaluator.DefinedInIntervals" /> property.
            </summary>
      <param name="definedIn">The reference frame that this point is defined in for all time.</param>
      <returns>The time interval collection indicated the reference frame this point is defined in.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointEvaluator.DefinedInIntervals">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> where the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property of
            each interval is the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> in which this Point is defined over the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointEvaluator.SimplifyIfNotTimeVarying(AGI.Foundation.EvaluatorGroup)">
      <summary>
            If this evaluator is not time varying, this method evaluates its value and constructs an evaluator
            from a <see cref="T:AGI.Foundation.Geometry.PointFixedOffset" /> representing the fixed value.  If this evaluator is time varying,
            this method does nothing and returns the evaluator on which it is called.
            </summary>
      <param name="group">The evaluator group in which to construct the new evaluator, if applicable.</param>
      <returns>A simpler evaluator representing the fixed point, or this if this point is not fixed.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointFixedOffset">
      <summary>
            A Point whose position does not change with respect to the reference frame in which it is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointFixedOffset.Frame" />. <see cref="P:AGI.Foundation.Geometry.PointFixedOffset.Offset" /> is 
            initialized to <see cref="P:AGI.Foundation.Coordinates.Cartesian.Zero" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.#ctor(AGI.Foundation.Geometry.PointFixedOffset,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.PointFixedOffset" /> class using the
            provided <paramref name="offset" /> with respect to the provided <paramref name="frame" />.
            </summary>
      <param name="frame">The reference frame in which this point is defined.</param>
      <param name="offset">The displacement of this point from the origin of the defining reference frame.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.CheckForSameDefinition(AGI.Foundation.Geometry.PointFixedOffset)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointFixedOffset.Frame">
      <summary>
            Gets or sets the reference frame in which the point is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFixedOffset.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            of this point in the specified <see cref="P:AGI.Foundation.Geometry.PointFixedOffset.Frame">ReferenceFrame</see> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            If derivatives are requested, the motion will contain <see cref="P:AGI.Foundation.Coordinates.Cartesian.Zero" /> for the derivatives.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointFixedOffset.Frame" /> is not initialized.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointFixedOffset.Offset">
      <summary>
            Gets or sets the displacement of this point from the origin of the defining reference frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointInPointsFrame">
      <summary>
            A point observed in another point's reference frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.FrameOwner" /> and <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.ObservedPoint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="observedPoint">The point that is observed in the <paramref name="frameOwner" />'s reference frame.</param>
      <param name="frameOwner">The point in whose <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> the <paramref name="observedPoint" /> will be observed.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="frameOwner" /> is <see cref="P:AGI.Foundation.Geometry.Point.Root" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.#ctor(AGI.Foundation.Geometry.PointInPointsFrame,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.CheckForSameDefinition(AGI.Foundation.Geometry.PointInPointsFrame)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInPointsFrame.FrameOwner">
      <summary>
            Gets or sets the point in whose <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> the <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.ObservedPoint" /> will be observed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInPointsFrame.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
        of this <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.ObservedPoint" /> in the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> of the <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.FrameOwner" />
        at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
        The motion will also express derivatives of <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.ObservedPoint" />in the new frame.
        Also, if the <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.FrameOwner" /> is defined in different frames at different times, this
        evaluator will account for those changes.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of a point in another point's reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.FrameOwner" /> or <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.ObservedPoint" /> is 
            null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInPointsFrame.ObservedPoint">
      <summary>
            Gets or sets the point that is observed in the <see cref="P:AGI.Foundation.Geometry.PointInPointsFrame.FrameOwner" />'s reference frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointInReferenceFrame">
      <summary>
            A time varying point observed in a particular reference frame.  Instances of this class will
            report that they are defined in the specified reference frame
            and will <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)" /> to the position, velocity, etc.
            of the point relative to the specified reference frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.ObservedPoint" /> and <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="point">The point to observe.</param>
      <param name="frame">The frame in which to observe the point.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.#ctor(AGI.Foundation.Geometry.PointInReferenceFrame,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.CheckForSameDefinition(AGI.Foundation.Geometry.PointInReferenceFrame)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInReferenceFrame.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> in which the <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.ObservedPoint" /> is observed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
        of this point in the new <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame">ReferenceFrame</see> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
        The motion will also express any derivatives in the new frame if requested.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame" /> or <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.ObservedPoint" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInReferenceFrame.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates an evaluator that calculates the partial derivatives of a point in reference frame
            with respect to any valid members of the given state.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInReferenceFrame.ObservedPoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> that is observed in the <see cref="P:AGI.Foundation.Geometry.PointInReferenceFrame.Frame" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointInterpolator">
      <summary>
            A point with its position, velocity, etc. determined by an interpolator based on a time dependent
            data set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointInterpolator.Interpolator" /> and <see cref="P:AGI.Foundation.Geometry.PointInterpolator.ReferenceFrame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor(AGI.Foundation.Geometry.PointInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.PointInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceFrame">The reference frame in which the point is defined.</param>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the point.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.PointInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceFrame">The reference frame in which the point is defined.</param>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the point.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.PointInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceFrame">The reference frame in which the point is defined.</param>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the point.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.PointInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceFrame">The reference frame in which the point is defined.</param>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the point.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.PointInterpolator" /> class from the provided parameters.
            </summary>
      <param name="referenceFrame">The reference frame in which the point is defined.</param>
      <param name="interpolator">The interpolator to use to interpolate the point.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.PointInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            of this point defined in the given <see cref="P:AGI.Foundation.Geometry.PointInterpolator.ReferenceFrame" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointInterpolator.Interpolator" /> or <see cref="P:AGI.Foundation.Geometry.PointInterpolator.ReferenceFrame" />
            is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInterpolator.Interpolator">
      <summary>
            Gets or sets the interpolator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointInterpolator.ReferenceFrame">
      <summary>
            Gets or sets the reference frame in which the interpolated point is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointVectorToPoint">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Point" /> formed by displacing another <see cref="T:AGI.Foundation.Geometry.Point" /> with a <see cref="T:AGI.Foundation.Geometry.Vector" />.
            The vector is added to the point.  Both the vector and the point may vary with time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.BasePoint" /> and <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.DisplacementVector" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.#ctor(AGI.Foundation.Geometry.PointVectorToPoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="displacementVector">The vector with which to displace the point.</param>
      <param name="basePoint">The point to which the vector is added.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointVectorToPoint.BasePoint">
      <summary>
            Gets or sets the point to which the <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.DisplacementVector" /> is added.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.CheckForSameDefinition(AGI.Foundation.Geometry.PointVectorToPoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointVectorToPoint.DisplacementVector">
      <summary>
            Gets or sets the vector with which to displace the <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.BasePoint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointVectorToPoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            of the new point in <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.BasePoint" />'s <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  If requested, the motion will contain derivative information
            consisting of the <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.BasePoint" />'s derivatives plus the <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.DisplacementVector" />'s 
            derivatives.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.DisplacementVector" /> or <see cref="P:AGI.Foundation.Geometry.PointVectorToPoint.BasePoint" /> 
            is null.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.ReferenceFrame">
      <summary>
            A reference frame, defined by an origin and an axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Origin" /> and <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance with the specified origin and axes.
            </summary>
      <param name="origin">The origin of the reference frame.</param>
      <param name="axes">The axes of the reference frame.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ReferenceFrame.Axes">
      <summary>
            Gets or sets the axes of the reference frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the motion of this reference frame relative to its parent
            reference frame at a given date.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            See <see cref="M:AGI.Foundation.Geometry.ReferenceFrame.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for more details.
            </summary>
      <returns>An evaluator for this reference frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrame.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find a <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> representing
            the motion of this reference frame relative to its parent
            reference frame at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this reference frame.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> or <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Origin" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ReferenceFrame.Origin">
      <summary>
            Gets or sets the origin of the reference frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ReferenceFrameEvaluator">
      <summary>
            Evaluates a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> over time.
            <para>
            The product of the 
            <see cref="M:AGI.Foundation.IEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">Evaluate(JulianDate date)</see>
            method will be a <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> for the specified <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            This <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> can transform motion data into this 
            <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> from the frame in which this frame is defined.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ReferenceFrameEvaluator.DefinedInIntervals">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" /> where the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property of
            each interval is the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> in which this <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> is defined over the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Gets the transformation that will transform a point expressed in the frame in which
            this frame is defined and express it in this frame.  This method is equivalent to calling
            <see cref="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)" /> with an order of 0.
            </summary>
      <param name="date">The instant at which to get the transformation.</param>
      <returns>
            The transformation that will transform a point expressed in the frame in which this frame
            is defined and express it in this frame.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Gets the transformation that will transform a point expressed in the frame in which
            this frame is defined and express it in this frame.
            </summary>
      <param name="date">The instant at which to get the transformation.</param>
      <param name="order">The order of highest required derivative.  To retrieve just the position, pass 0 for this value.  To retrieve the velocity as well, pass 1.  etc.</param>
      <returns>
            The transformation that will transform a point expressed in the frame in which this frame
            is defined and express it in this frame.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ReferenceFrameEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ReferenceFrameEvaluator.IsTimeVarying">
      <summary>
            Gets a value indicating whether this frame is fixed with respect to its parent reference frame.  If true,
            <see cref="M:AGI.Foundation.MotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)" /> is assumed to return the same value for any input date.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ReferenceFrameEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Geometry.Scalar">
      <summary>
            A scalar, representing a real valued, time varying function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.#ctor(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Add(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Adds another scalar to this one.
            </summary>
      <param name="scalar">The other scalar to add.</param>
      <returns>A scalar representing the sum of the two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Add(System.Double)">
      <summary>
            Adds a fixed scalar to this one.
            </summary>
      <param name="scalar">The other scalar to add.</param>
      <returns>A scalar representing the sum of the two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.CreateScalarDerivative(System.Int32)">
      <summary>
            Constructs a scalar which represents a derivative of this scalar.
            </summary>
      <param name="order">The order of derivative represented by the resultant scalar.</param>
      <returns>The derivative scalar of the specified order.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Divide(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Divides this scalar (numerator) by another one (denominator).
            </summary>
      <param name="scalar">The other scalar to divide (denominator).</param>
      <returns>A scalar representing the quotient of two scalars with this as the numerator
            and the other scalar as denominator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Divide(System.Double)">
      <summary>
            Divides this scalar (numerator) by a fixed value (denominator).
            </summary>
      <param name="scalar">The fixed scalar to divide (denominator).</param>
      <returns>A scalar representing the quotient of two scalars with this as the numerator
            and the fixed scalar as denominator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the values of this Scalar function at a given date.  
            See <see cref="M:AGI.Foundation.Geometry.Scalar.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for more details.
            </summary>
      <returns>An evaluator for this Scalar.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Multiply(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Multiplies another scalar with this one.
            </summary>
      <param name="scalar">The other scalar to multiply.</param>
      <returns>A scalar representing the product of the two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Multiply(System.Double)">
      <summary>
            Multiplies this scalar with a fixed value.
            </summary>
      <param name="scalar">The fixed value to multiply.</param>
      <returns>A scalar representing the product of the two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Addition(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Adds two scalars together.
            </summary>
      <param name="left">The left hand scalar to add.</param>
      <param name="right">The right hand scalar to add.</param>
      <returns>The sum of two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Addition(AGI.Foundation.Geometry.Scalar,System.Double)">
      <summary>
            Adds two scalars together.
            </summary>
      <param name="left">The left hand scalar to add.</param>
      <param name="right">The right hand scalar to add.</param>
      <returns>The sum of two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Addition(System.Double,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Adds two scalars together.
            </summary>
      <param name="left">The left hand scalar to add.</param>
      <param name="right">The right hand scalar to add.</param>
      <returns>The sum of two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Division(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Divides one scalar from another (left/right).
            </summary>
      <param name="left">The numerator in the quotient.</param>
      <param name="right">The denominator in the quotient.</param>
      <returns>The quotient of two scalars: (left / right).</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Division(AGI.Foundation.Geometry.Scalar,System.Double)">
      <summary>
            Divides one scalar from another (left/right).
            </summary>
      <param name="left">The numerator in the quotient.</param>
      <param name="right">The denominator in the quotient.</param>
      <returns>The quotient of two scalars: (left / right).</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Division(System.Double,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Divides one scalar from another (left/right).
            </summary>
      <param name="left">The numerator in the quotient.</param>
      <param name="right">The denominator in the quotient.</param>
      <returns>The quotient of two scalars: (left / right).</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Implicit(System.Double)~AGI.Foundation.Geometry.Scalar">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Scalar" /> object representing a constant scalar value.
            </summary>
      <param name="fixedValue">The constant scalar value.</param>
      <returns>The <see cref="T:AGI.Foundation.Geometry.Scalar" /> object representing the constant scalar value.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Multiply(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Multiplies two scalars together.
            </summary>
      <param name="left">The first scalar term to multiply.</param>
      <param name="right">The second scalar term to multiply.</param>
      <returns>The product of two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Multiply(AGI.Foundation.Geometry.Scalar,System.Double)">
      <summary>
            Multiplies two scalars together.
            </summary>
      <param name="left">The first scalar term to multiply.</param>
      <param name="right">The second scalar term to multiply.</param>
      <returns>The product of two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Multiply(System.Double,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Multiplies two scalars together.
            </summary>
      <param name="left">The first scalar term to multiply.</param>
      <param name="right">The second scalar term to multiply.</param>
      <returns>The product of two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Subtraction(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Subtracts one scalar from another.
            </summary>
      <param name="left">The left hand scalar from which to subtract.</param>
      <param name="right">The right hand scalar to subtract from the left.</param>
      <returns>The difference of the two scalars: left - right.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Subtraction(AGI.Foundation.Geometry.Scalar,System.Double)">
      <summary>
            Subtracts one scalar from another.
            </summary>
      <param name="left">The left hand scalar from which to subtract.</param>
      <param name="right">The right hand scalar to subtract from the left.</param>
      <returns>The difference of the two scalars: left - right.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.op_Subtraction(System.Double,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Subtracts one scalar from another.
            </summary>
      <param name="left">The left hand scalar from which to subtract.</param>
      <param name="right">The right hand scalar to subtract from the left.</param>
      <returns>The difference of the two scalars: left - right.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Power(System.Double)">
      <summary>
            Raises this scalar to the given fixed exponent.
            </summary>
      <param name="exponent">The exponent in the power term.</param>
      <returns>This scalar raised to the given exponent.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Subtract(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Subtracts another scalar from this one.
            </summary>
      <param name="scalar">The other scalar to subtract.</param>
      <returns>A scalar representing the difference between the two scalars.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Scalar.Subtract(System.Double)">
      <summary>
            Subtracts a fixed scalar from this one.
            </summary>
      <param name="scalar">The fixed scalar to subtract.</param>
      <returns>A scalar representing the difference between the two scalars.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarAngleBetweenVectors">
      <summary>
            A scalar representing the instantaneous angle between two vectors which may vary over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorOne" /> and <see cref="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorTwo" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.#ctor(AGI.Foundation.Geometry.ScalarAngleBetweenVectors,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Constructs the angle between the two given angles.
            </summary>
      <param name="one">First vector.</param>
      <param name="two">Second vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Determines if this scalar function is the same as another scalar function.
            </summary>
      <param name="other">The other scalar to compare.</param>
      <returns>Returns true if this Scalar is the same instance as the <paramref name="other" /> scalar, 
            or if it is definitionally equivalent, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarAngleBetweenVectors)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the angle between two vectors represented as a 
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            The first and second derivative of the angle are also provided if the two vectors can provide their
            derivatives.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorOne" /> or <see cref="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorTwo" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorOne">
      <summary>
            Gets or sets the vector which forms an angle with <see cref="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorTwo" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorTwo">
      <summary>
            Gets or sets the vector which forms an angle with <see cref="P:AGI.Foundation.Geometry.ScalarAngleBetweenVectors.VectorOne" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarCosine">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the Cosine of another scalar.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Geometry.ScalarCosine.Argument" /> must be set prior to creating an evaluator;
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.#ctor(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Constructs a function which represents the reciprocal of a given value.
            </summary>
      <param name="argument">The argument to the Cosine function.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.#ctor(AGI.Foundation.Geometry.ScalarCosine,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarCosine.Argument">
      <summary>
            Gets or sets the argument to the Cosine function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarCosine)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarCosine.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that represents the Cosine of the <see cref="P:AGI.Foundation.Geometry.ScalarCosine.Argument" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCosine.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that calculates the partial derivatives of this <see cref="T:AGI.Foundation.Geometry.ScalarExponent" />
            with respect to the <paramref name="independentVariables" />.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarDelayedByLink">
      <summary>
            A scalar which wraps another scalar while delaying it by a time specified by a 
            <see cref="T:AGI.Foundation.Geometry.LinkDelayEvaluator" /> obtained from a <see cref="T:AGI.Foundation.Access.LinkPath" />.  
            When evaluating this scalar at a given time,
            the resulting value will represent the value of the wrapped scalar at the delayed time.  The
            time delay is either positive or negative, depending on the <see cref="T:AGI.Foundation.Access.LinkRole" /> of this scalar.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.#ctor(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Access.LinkPath,AGI.Foundation.Access.LinkRole)">
      <summary>
            Initialize a new instance based on the given scalar delayed by the given link.
            </summary>
      <param name="scalarToDelay">The scalar to evaluate at a delayed time.</param>
      <param name="linkPath">The link path which provides the delay.</param>
      <param name="roleOfScalar">An enumeration indicating at which end of the link the scalar is to be evaluated.
            If the scalar is at the receiving end, the <paramref name="scalarToDelay" /> will be evaluated after
            this scalar.  If the scalar is at the transmitting end, the <paramref name="scalarToDelay" /> will
            be evaluated before this scalar.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.#ctor(AGI.Foundation.Geometry.Scalar,System.IServiceProvider,AGI.Foundation.Access.LinkRole)">
      <summary>
            Initialize a new instance based on the given scalar delayed by the given link.
            </summary>
      <param name="scalarToDelay">The scalar to evaluate at a delayed time.</param>
      <param name="link">The link which provides the delay.</param>
      <param name="roleOfScalar">An enumeration indicating at which end of the link this scalar is to be evaluated.
            If this scalar is at the receiving end, the <paramref name="scalarToDelay" /> will be evaluated before
            this scalar.  If this scalar is at the transmitting end, the <paramref name="scalarToDelay" /> will
            be evaluated after this scalar.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDelayedByLink.DirectionOfDelay">
      <summary>
            Gets or sets an enumeration indicating the direction of the delay to apply to <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.ScalarToDelay" />.
            If the direction is receiving, the <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.ScalarToDelay" /> will be evaluated
            at a time prior to this scalar, representing the offset to the time of transmission.  If the role is transmitting, the 
            <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.ScalarToDelay" /> will be evaluated at a time after this scalar, representing the offset
            to the time of reception.  By default, the value is: receiving.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDelayedByLink.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Get an evaluator which evaluates the <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.ScalarToDelay" /> by applying the delay from the
            <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.PathForTimeDelay" /> which will be positive or negative depending on the <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.DirectionOfDelay" />.
            </summary>
      <param name="group">The group in which to create evaluators.</param>
      <returns>An evaluator for the delayed scalar.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDelayedByLink.PathForTimeDelay">
      <summary>
            Gets or sets the path from which to obtain the link delay.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDelayedByLink.ScalarToDelay">
      <summary>
            Gets or sets the scalar which is delayed by the <see cref="P:AGI.Foundation.Geometry.ScalarDelayedByLink.PathForTimeDelay" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarDerivative">
      <summary>
            A <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Scalar" /> representing the derivative of the specified <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Order" /> of a given <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Scalar" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Scalar" />;
            <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Order" /> is set to 0 by default.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.#ctor(AGI.Foundation.Geometry.Scalar,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.ScalarDerivative" /> class to represent the
            derivative of a given scalar.
            </summary>
      <param name="scalar">The original scalar.  The new scalar will represent the derivative of this scalar.</param>
      <param name="order">The order of derivative of the scalar to represent with this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.#ctor(AGI.Foundation.Geometry.ScalarDerivative,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarDerivative)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDerivative.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see>
            representing the derivative of the given <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Scalar" /> at the specified <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Order" />
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator throws
            a <see cref="T:AGI.Foundation.DataUnavailableException" /> if <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Scalar" /> cannot provide enough derivative information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if the <see cref="T:AGI.Foundation.Geometry.Vector" /> was not initialized, or
            if the <see cref="P:AGI.Foundation.Geometry.ScalarDerivative.Order" /> is less than zero..</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDerivative.Order">
      <summary>
            Gets or sets the order.  The order of the derivative this object will represent will be equal to this value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDerivative.Scalar">
      <summary>
            Gets or sets the scalar.  This <see cref="T:AGI.Foundation.Geometry.ScalarDerivative" /> will represent the derivative of the scalar represented by this property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarDihedralAngle">
      <summary>
            A scalar representing the angle between two vectors measured about a given axis.  The resulting
            angle lies between 0 and <see cref="F:AGI.Foundation.Constants.TwoPi" />.  Both the axis and the two vectors may
            vary over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorFrom" />, <see cref="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorTo" />, and
            <see cref="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorAxis" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.#ctor(AGI.Foundation.Geometry.ScalarDihedralAngle,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Constructs the angle between the two given angles about the given axis.
            </summary>
      <param name="from">Vector to measure the angle from.</param>
      <param name="to">Vector to measure the angle to.</param>
      <param name="axis">The axis about which to measure the angle.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarDihedralAngle)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDihedralAngle.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the scalar representing the angle between 
            two vectors measured about a given axis.  The evaluator returns a 
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt; at the given
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  If the given vectors provide derivatives, the first and second derivative 
            of dihedral angle are provided except where they are undefined.
            If either vector is zero or colinear with the dihedral axis, the dihedral angle is assumed to be zero and no derivatives 
            are provided.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorAxis" />, <see cref="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorFrom" />, <see cref="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorTo" />
            is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorAxis">
      <summary>
            Gets or sets the axis about which to measure the dihedral angle.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorFrom">
      <summary>
            Gets or sets the vector to measure the angle from.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDihedralAngle.VectorTo">
      <summary>
            Gets or sets the vector to measure the angle to.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarDotProduct">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> defined by the dot product of two vectors which may vary over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.ScalarDotProduct.VectorOne" /> and <see cref="P:AGI.Foundation.Geometry.ScalarDotProduct.VectorTwo" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.#ctor(AGI.Foundation.Geometry.ScalarDotProduct,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Constructs the dot product from two existing vectors.
            </summary>
      <param name="one">First vector.</param>
      <param name="two">Second vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarDotProduct)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDotProduct.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the scalar dot product of two vectors expressed as 
            a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt; including derivatives up to the 
            requested order.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.ScalarDotProduct.VectorOne" /> or 
            <see cref="P:AGI.Foundation.Geometry.ScalarDotProduct.VectorTwo" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDotProduct.VectorOne">
      <summary>
            Gets or sets the first vector in the dot product.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDotProduct.VectorTwo">
      <summary>
            Gets or sets the second vector in the dot product.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarEvaluator">
      <summary>
            Evaluates a <see cref="T:AGI.Foundation.Geometry.Scalar" /> over time.
            <para>
            The product of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(<see cref="T:AGI.Foundation.Time.JulianDate" /> date, int order)</see>
            method will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see> representation of this 
            scalar at the specified <see cref="T:AGI.Foundation.Time.JulianDate" />.  The <see cref="T:AGI.Foundation.Geometry.ScalarEvaluator" /> will attempt to provide 
            derivatives of the scalar up to the requested order. 
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarEvaluator.#ctor(AGI.Foundation.Geometry.ScalarEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarExponent">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing another scalar raised to the power of a scalar exponent,
            along with up to the second derivative.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Geometry.ScalarExponent.Base" />
            and <see cref="P:AGI.Foundation.Geometry.ScalarExponent.Exponent" /> must be set prior to creating an evaluator;
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.#ctor(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Constructs a function which represents the reciprocal of a given value.
            </summary>
      <param name="value">The value to raise to the given exponent.</param>
      <param name="exponent">The exponent of the power term.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.#ctor(AGI.Foundation.Geometry.ScalarExponent,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarExponent.Base">
      <summary>
            Gets or sets the value to raise to the given <see cref="P:AGI.Foundation.Geometry.ScalarExponent.Exponent" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarExponent)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarExponent.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarExponent.Exponent">
      <summary>
            Gets or sets the exponent for the <see cref="P:AGI.Foundation.Geometry.ScalarExponent.Base" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that represents the power term.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarExponent.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that calculates the partial derivatives of this <see cref="T:AGI.Foundation.Geometry.ScalarExponent" />
            with respect to the <paramref name="independentVariables" />.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarFixed">
      <summary>
            A fixed scalar, representing a constant real valued function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Geometry.ScalarFixed.Value" /> is initialized to zero.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.#ctor(AGI.Foundation.Geometry.ScalarFixed,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.#ctor(System.Double)">
      <summary>
            Constructs a function which represents a constant real value.
            </summary>
      <param name="fixedValue">The real value.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarFixed)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarFixed.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that represents a constant scalar value.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarFixed.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            This type does not have derivatives or partial derivatives with respect to any object with the exception of itself.
            Because of that the created <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" /> has a
            <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">ColumnDimension</see> of zero if this <see cref="T:AGI.Foundation.Geometry.ScalarFixed" />
            is not in the generalized state, and if it is in the generalized state it returns a 1x1 identity matrix.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> that will contain the created evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarFixed.Value">
      <summary>
            Gets or sets the constant real value.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarInterpolator">
      <summary>
            A Scalar with its value, derivative, etc. determined by an interpolator based on a time dependent
            data set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.ScalarInterpolator.Interpolator" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor(AGI.Foundation.Geometry.ScalarInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.ScalarInterpolator" /> class from the provided parameters.
            </summary>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the scalar.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{System.Double},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.ScalarInterpolator" /> class from the provided parameters.
            </summary>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the scalar.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor(AGI.Foundation.NumericalMethods.DoubleMotionInterpolator)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.ScalarInterpolator" /> class from the provided parameters.
            </summary>
      <param name="interpolator">The interpolator to use to interpolate the scalar.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.ScalarInterpolator" /> class from the provided parameters.
            </summary>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the scalar.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{System.Double},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.ScalarInterpolator" /> class from the provided parameters.
            </summary>
      <param name="algorithmType">The interpolation algorithm to use to interpolate the scalar.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:System.Double" />&gt; 
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.ScalarInterpolator.Interpolator" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarInterpolator.Interpolator">
      <summary>
            Gets or sets the interpolator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> that computes a given element from a <see cref="T:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.OrbitalPoint" />, <see cref="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.Element" /> ,
            <see cref="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.GravitationalParameter" /> and the <see cref="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.Frame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.#ctor(AGI.Foundation.Geometry.ScalarModifiedKeplerianElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.#ctor(System.Double,AGI.Foundation.Geometry.Point,AGI.Foundation.Coordinates.KeplerianElement,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="gravitationalParameter">The gravitational parameter.</param>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point" /> whose position and velocity will be used to compute the element.</param>
      <param name="element">The specific <see cref="T:AGI.Foundation.Coordinates.KeplerianElement" /> to compute.</param>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to observe the <paramref name="location" /> in.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarModifiedKeplerianElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.DynamicElements">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.DynamicModifiedKeplerianElements" /> to use.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.Element">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Coordinates.KeplerianElement" /> to compute
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.Frame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to compute the point in.  This is 
            stored in the <see cref="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.DynamicElements" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter to use to compute the elements. 
            This is stored in the <see cref="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.DynamicElements" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarModifiedKeplerianElement.OrbitalPoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to compute.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarPointElement">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> that returns one element of a <see cref="T:AGI.Foundation.Geometry.Point">Points</see> evaluated motion.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.#ctor">
      <summary>
            Initializes a new instance.  All properties need to be set before <see cref="M:AGI.Foundation.Geometry.ScalarPointElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Coordinates.CartesianElement,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point" /> whose element will be reported.</param>
      <param name="element">X, Y, Z, or magnitude of the <paramref name="location">locations</paramref> evaluated
            <see cref="T:AGI.Foundation.Motion`1">Motion{Cartesian}</see>.</param>
      <param name="frameOfPoint">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the <paramref name="location" /> should be 
            observed in.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.#ctor(AGI.Foundation.Geometry.ScalarPointElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarPointElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarPointElement.Element">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Coordinates.CartesianElement" /> to use.  Note that if using 
            <see cref="F:AGI.Foundation.Coordinates.CartesianElement.Magnitude" />, the first derivative will be the derivative of the 
            Magnitude, not the magnitude of the velocity.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarPointElement.Frame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to observe the <see cref="P:AGI.Foundation.Geometry.ScalarPointElement.ReferencePoint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarPointElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarPointElement.ReferencePoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to use.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarProduct">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> defined by the multiplication of a list of scalars which may vary over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.#ctor">
      <summary>
            Initializes a new instance.  The user must add <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> to
            the list of <see cref="P:AGI.Foundation.Geometry.ScalarProduct.ScalarsToMultiply" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.#ctor(AGI.Foundation.Geometry.Scalar[])">
      <summary>
            Constructs the product of the given <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see>.
            </summary>
      <param name="scalars">A set of scalars to add together.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.#ctor(AGI.Foundation.Geometry.ScalarProduct,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.#ctor(System.Collections.Generic.IList{AGI.Foundation.Geometry.Scalar})">
      <summary>
            Constructs the product of the list of <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see>.
            </summary>
      <param name="scalars">A set of scalars to add together.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarProduct)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarProduct.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Gets an evaluator that can be used to find the product of the scalars, 
            including derivatives up to the requested order.</para>
        <para>In an effort to avoid excessively large call stacks the resulting evaluator will
            recursively collapse any child scalar that is also a <see cref="T:AGI.Foundation.Geometry.ScalarProduct" /> into
            the parent evaluator. For example, (a * (b * c)) will become (a * b * c).</para>
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.ScalarProduct.ScalarsToMultiply" /> 
            contains zero elements.</exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if any scalars in <b>ScalarsToMultiply</b>
            are not initialized, or if 'this' scalar exists in <b>ScalarsToMultiply</b>.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarProduct.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that calculates the partial derivatives of this scalar product
            with respect to any of the <paramref name="independentVariables" /> parameters that apply.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarProduct.ScalarsToMultiply">
      <summary>
            Gets the list of scalars to multiply together.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarSine">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the sine of another scalar.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Geometry.ScalarSine.Argument" /> must be set prior to creating an evaluator;
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.#ctor(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Constructs a function which represents the reciprocal of a given value.
            </summary>
      <param name="argument">The argument to the sine function.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.#ctor(AGI.Foundation.Geometry.ScalarSine,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSine.Argument">
      <summary>
            Gets or sets the argument to the sine function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarSine)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSine.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that represents the sine of the <see cref="P:AGI.Foundation.Geometry.ScalarSine.Argument" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSine.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that calculates the partial derivatives of this <see cref="T:AGI.Foundation.Geometry.ScalarExponent" />
            with respect to the <paramref name="independentVariables" />.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarSphericalElement">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing one of the three values of a <see cref="T:AGI.Foundation.Coordinates.Spherical" /> coordinate.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Geometry.ScalarSphericalElement.ReferencePoint" />, <see cref="P:AGI.Foundation.Geometry.ScalarSphericalElement.Frame" /> must be set prior to creating an evaluator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.SphericalElement)">
      <summary>
            Initializes a new instance.  
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point" /> to use to compute the <see cref="T:AGI.Foundation.Coordinates.Spherical" /> value 
            from.</param>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to observe the <paramref name="location" /> in.</param>
      <param name="element">The <see cref="T:AGI.Foundation.Coordinates.SphericalElement" /> to compute.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.#ctor(AGI.Foundation.Geometry.ScalarSphericalElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarSphericalElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSphericalElement.Element">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Coordinates.SphericalElement" /> that this <see cref="T:AGI.Foundation.Geometry.Scalar" /> should compute.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSphericalElement.Frame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to observe the <see cref="P:AGI.Foundation.Geometry.ScalarSphericalElement.ReferencePoint" /> in.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSphericalElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSphericalElement.ReferencePoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to use to compute the <see cref="T:AGI.Foundation.Coordinates.Spherical" /> element of.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarSum">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> defined by the addition of multiple scalars which may vary over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.#ctor">
      <summary>
            Initializes a new instance.  The user must add <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> to
            the list of <see cref="P:AGI.Foundation.Geometry.ScalarSum.ScalarsToAdd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.#ctor(AGI.Foundation.Geometry.Scalar[])">
      <summary>
            Constructs the sum of the given <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see>.
            </summary>
      <param name="scalars">A set of scalars to add together.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.#ctor(AGI.Foundation.Geometry.ScalarSum,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.#ctor(System.Collections.Generic.IList{AGI.Foundation.Geometry.Scalar})">
      <summary>
            Constructs the sum of a list of <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see>.
            </summary>
      <param name="scalars">A set of scalars to add together.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarSum)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSum.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Gets an evaluator that can be used to find the sum of the scalars, 
            including derivatives up to the requested order.</para>
        <para>In an effort to avoid excessively large callstacks the resulting evaluator will
            recursively collapse any child scalar that is also a <see cref="T:AGI.Foundation.Geometry.ScalarSum" /> into
            the parent evaluator. For example, (a + (b + c)) will become (a + b + c).</para>
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.ScalarSum.ScalarsToAdd" /> 
            contains zero elements.</exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if any scalars in <b>ScalarsToAdd</b>
            are not initialized, or if 'this' scalar exists in <b>ScalarsToAdd</b>.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarSum.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that calculates the partial derivatives of this scalar sum
            with respect to any of the <paramref name="independentVariables" /> parameters that apply.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarSum.ScalarsToAdd">
      <summary>
            Gets the list of scalars to add together.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarVectorElement">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> that returns one element of a <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see> evaluated motion.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.#ctor">
      <summary>
            Initializes a new instance.  All properties need to be set before <see cref="M:AGI.Foundation.Geometry.ScalarVectorElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.#ctor(AGI.Foundation.Geometry.ScalarVectorElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Coordinates.CartesianElement,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="vector">The <see cref="T:AGI.Foundation.Geometry.Vector" /> whose element will be reported.</param>
      <param name="element">X, Y, Z, or magnitude of the <paramref name="vector">vectors</paramref> evaluated
            <see cref="T:AGI.Foundation.Motion`1">Motion{Cartesian}</see>.</param>
      <param name="referenceAxes">The <see cref="T:AGI.Foundation.Geometry.Axes" /> that the <paramref name="vector" /> is in.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarVectorElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarVectorElement.Element">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Coordinates.CartesianElement" /> to use.  Note that if using 
            <see cref="F:AGI.Foundation.Coordinates.CartesianElement.Magnitude" />, the first derivative will be the derivative of 
            the Magnitude, not the magnitude of the velocity.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarVectorElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarVectorElement.ReferenceAxes">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Axes" /> to observe the <see cref="P:AGI.Foundation.Geometry.ScalarVectorElement.ReferenceVector" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarVectorElement.ReferenceVector">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Vector" /> to use.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ServiceProviderAxes">
      <summary>
            An Axes that can be used to refer to the current <see cref="P:AGI.Foundation.Geometry.IOrientationAxesService.OrientationAxes" /> of an <see cref="T:System.IServiceProvider" />,
            whatever it is at the time that this axes is evaluated.  All method and properties on this class simply pass the
            call to the service provider's current <see cref="P:AGI.Foundation.Geometry.IOrientationAxesService.OrientationAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.#ctor(AGI.Foundation.Geometry.ServiceProviderAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.#ctor(System.IServiceProvider)">
      <summary>
            Initializes a new instance using the specified <see cref="T:System.IServiceProvider" /></summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> that will provide <see cref="T:AGI.Foundation.Geometry.IOrientationAxesService" />.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ServiceProviderAxes.AxesProvider">
      <summary>
            Gets or sets the <see cref="T:System.IServiceProvider" /> that will provide <see cref="T:AGI.Foundation.Geometry.IOrientationAxesService" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.CheckForSameDefinition(AGI.Foundation.Geometry.ServiceProviderAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.ServiceProviderPoint">
      <summary>
            A Point that can be used to refer to the current <see cref="P:AGI.Foundation.Geometry.ILocationPointService.LocationPoint" /> of an <see cref="T:System.IServiceProvider" />,
            whatever it is at the time that this point is evaluated.  All method and properties on this class simply pass the
            call to the service provider's current <see cref="P:AGI.Foundation.Geometry.ILocationPointService.LocationPoint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.#ctor(AGI.Foundation.Geometry.ServiceProviderPoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.#ctor(System.IServiceProvider)">
      <summary>
            Initializes a new instance using the specified <see cref="T:System.IServiceProvider" /></summary>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> which will implement <see cref="T:AGI.Foundation.Geometry.ILocationPointService" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.CheckForSameDefinition(AGI.Foundation.Geometry.ServiceProviderPoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ServiceProviderPoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ServiceProviderPoint.PointProvider">
      <summary>
            Gets or sets the <see cref="T:System.IServiceProvider" /> that will provide <see cref="T:AGI.Foundation.Geometry.ILocationPointService" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Vector">
      <summary>
            A vector relative to a set of basis axes.  The vector may change over time with respect to its axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Add(AGI.Foundation.Geometry.Vector)">
      <summary>
            Add a vector to this one.
            </summary>
      <param name="vector">The vector to add.</param>
      <returns>A new vector representing the sum of the two vectors.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.CreateVectorDerivative(System.Int32,AGI.Foundation.Geometry.Axes)">
      <summary>
            Constructs a vector which represents a derivative of this vector.
            </summary>
      <param name="order">The order of derivative represented by the resultant vector.</param>
      <param name="axes">The <see cref="T:AGI.Foundation.Geometry.Axes" /> that the resultant <see cref="T:AGI.Foundation.Geometry.Vector">Vector's</see>
            results will be in.</param>
      <returns>The derivative vector of the specified order in the requested frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Cross(AGI.Foundation.Geometry.Vector)">
      <summary>
            Produce the vector cross product between this vector and another one.
            </summary>
      <param name="vector">The vector to cross with this one.</param>
      <returns>The vector cross product between the two vectors.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Divide(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Divide this vector by a scale factor.
            </summary>
      <param name="factor">The factor to divide.</param>
      <returns>A new vector representing the division of this vector and the scale factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Divide(System.Double)">
      <summary>
            Divide this vector by a scale factor.
            </summary>
      <param name="factor">The factor to divide.</param>
      <returns>A new vector representing the division of this vector and the scale factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Dot(AGI.Foundation.Geometry.Vector)">
      <summary>
            Produce the vector dot product between this vector and another one.
            </summary>
      <param name="vector">The vector to dot with this one.</param>
      <returns>The vector dot product between the two vectors.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector at a given date with respect to the axes in which it is defined.
            See <see cref="M:AGI.Foundation.Geometry.Vector.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for details.
            </summary>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the 
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" />
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.GetScalarElement(AGI.Foundation.Coordinates.CartesianElement,AGI.Foundation.Geometry.Axes)">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude 
            of this vector.
            </summary>
      <param name="element">Specifies that the returned scalar represents the X, Y, Z or magnitude.</param>
      <param name="referenceAxes">The axes to view this vector in.</param>
      <returns>Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude 
            of this vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.GetScalarElement(AGI.Foundation.Coordinates.CartesianElement,AGI.Foundation.Geometry.Axes,System.Int32)">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude, or any derivative of 
            those elements of this vector.
            </summary>
      <param name="element">Specifies that the returned scalar represents the X, Y, Z or magnitude.</param>
      <param name="referenceAxes">The axes to view this vector in.</param>
      <param name="order">The order of derivative of the vector to represent with this object</param>
      <returns>Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> representing the X, Y, Z, or Magnitude 
            of this vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Multiply(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Multiply this vector by a scale factor.
            </summary>
      <param name="factor">The factor to multiply.</param>
      <returns>A new vector representing the product of this vector and the scale factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Multiply(System.Double)">
      <summary>
            Multiply this vector by a scale factor.
            </summary>
      <param name="factor">The factor to multiply.</param>
      <returns>A new vector representing the product of this vector and the scale factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Addition(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Add two vectors together.
            </summary>
      <param name="left">The left hand vector to add.</param>
      <param name="right">The right hand vector to add.</param>
      <returns>A new vector representing the sum of the two vectors.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Division(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Divide a vector by a scalar.
            </summary>
      <param name="vector">The vector to scale.</param>
      <param name="factor">The scale factor.</param>
      <returns>A new vector representing the old vector divided by the given factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Division(AGI.Foundation.Geometry.Vector,System.Double)">
      <summary>
            Divide a vector by a scalar.
            </summary>
      <param name="vector">The vector to scale.</param>
      <param name="factor">The scale factor.</param>
      <returns>A new vector representing the old vector divided by the given factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Multiply(AGI.Foundation.Geometry.Scalar,AGI.Foundation.Geometry.Vector)">
      <summary>
            Multiply a vector by a scalar.
            </summary>
      <param name="vector">The vector to scale.</param>
      <param name="factor">The scale factor.</param>
      <returns>A new vector representing the old vector multiplied by the given factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Multiply(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Multiply a vector by a scalar.
            </summary>
      <param name="vector">The vector to scale.</param>
      <param name="factor">The scale factor.</param>
      <returns>A new vector representing the old vector multiplied by the given factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Multiply(AGI.Foundation.Geometry.Vector,System.Double)">
      <summary>
            Multiply a vector by a scalar.
            </summary>
      <param name="vector">The vector to scale.</param>
      <param name="factor">The scale factor.</param>
      <returns>A new vector representing the old vector multiplied by the given factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Multiply(System.Double,AGI.Foundation.Geometry.Vector)">
      <summary>
            Multiply a vector by a scalar.
            </summary>
      <param name="vector">The vector to scale.</param>
      <param name="factor">The scale factor.</param>
      <returns>A new vector representing the old vector multiplied by the given factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.op_Subtraction(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Subtract one vector from another.
            </summary>
      <param name="left">The left hand vector from which to subtract the right hand vector.</param>
      <param name="right">The right hand vector to subtract from the left hand vector.</param>
      <returns>A new vector representing the difference of the two vectors.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Vector.Subtract(AGI.Foundation.Geometry.Vector)">
      <summary>
            Subtract a vector from this one.
            </summary>
      <param name="vector">The vector to subtract.</param>
      <returns>A new vector representing the difference of the two vectors.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorAcceleration">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Vector" /> representing the acceleration of a given <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.Point" /> derived in a given 
            <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.ReferenceFrame" />.  Be careful when observing this vector in different <see cref="T:AGI.Foundation.Geometry.Axes" /> as <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" /> and
            <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> assume that the zeroth order of a vector corresponds to a heading or other
            similar value, not the second derivative of another instance. The resulting values will not properly account for the dynamics of the relative
            rotation of the two axes.  To obtain the second derivative represented in a different axes, create a new instance
            defined in a different axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.Point" /> and <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.ReferenceFrame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorAcceleration" /> class to represent the
            acceleration of a given point in a given reference frame.
            </summary>
      <param name="point">The point.  The new vector will represent the acceleration of this point.</param>
      <param name="frame">The reference frame.  The new vector will represent the acceleration of the point in this frame.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.#ctor(AGI.Foundation.Geometry.VectorAcceleration,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.CheckForSameDefinition(AGI.Foundation.Geometry.VectorAcceleration)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAcceleration.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            representing the acceleration of the given <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.Point" /> 
            in the given <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.ReferenceFrame" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator throws
            a <see cref="T:AGI.Foundation.DataUnavailableException" /> if <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.Point" /> cannot provide sufficient derivative information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown when <see cref="P:AGI.Foundation.Geometry.VectorAcceleration.Point" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorAcceleration.Point">
      <summary>
            Gets or sets the point.  The vector will represent the acceleration of this point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorAcceleration.ReferenceFrame">
      <summary>
            Gets or sets the reference frame.  The vector will represent the acceleration of the point in this frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorAngularAcceleration">
      <summary>
            A Vector defined as the angular acceleration of a given set of axes as the axes rotate with time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorAngularAcceleration.RotatingAxes" /> and <see cref="P:AGI.Foundation.Geometry.VectorAngularAcceleration.ReferenceAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorAngularAcceleration" /> class using the
            provided axes.
            </summary>
      <param name="rotatingAxes">The rotating axes.  The new vector will represent the angular acceleration of this axes.</param>
      <param name="referenceAxes">The reference axes.  The new vector will represent the angular acceleration of the rotating axes with respect to this axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.#ctor(AGI.Foundation.Geometry.VectorAngularAcceleration,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.CheckForSameDefinition(AGI.Foundation.Geometry.VectorAngularAcceleration)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularAcceleration.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the angular acceleration of the <see cref="P:AGI.Foundation.Geometry.VectorAngularAcceleration.RotatingAxes" />
            relative to the <see cref="P:AGI.Foundation.Geometry.VectorAngularAcceleration.ReferenceAxes" />
            expressed as a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The evaluator throws a <see cref="T:AGI.Foundation.DataUnavailableException" /> if
            <see cref="P:AGI.Foundation.Geometry.VectorAngularAcceleration.RotatingAxes" /> cannot provide sufficient derivative information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.VectorAngularAcceleration.RotatingAxes" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorAngularAcceleration.ReferenceAxes">
      <summary>
            Gets or sets the reference axes.  The new vector will represent the angular acceleration of the rotating axes with respect to this axes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorAngularAcceleration.RotatingAxes">
      <summary>
            Gets or sets the rotating axes.  The vector will represent the angular acceleration of this axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorAngularVelocity">
      <summary>
            A Vector defined as the angular velocity of a given set of axes as the axes rotate with time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorAngularVelocity.RotatingAxes" /> and <see cref="P:AGI.Foundation.Geometry.VectorAngularVelocity.ReferenceAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorAngularVelocity" /> class using the
            provided axes.
            </summary>
      <param name="rotatingAxes">The rotating axes.  The new vector will represent the angular velocity of this axes.</param>
      <param name="referenceAxes">The reference axes.  The new vector will represent the angular velocity of the rotating axes with respect to this axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.#ctor(AGI.Foundation.Geometry.VectorAngularVelocity,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.CheckForSameDefinition(AGI.Foundation.Geometry.VectorAngularVelocity)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorAngularVelocity.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the angular velocity of the <see cref="P:AGI.Foundation.Geometry.VectorAngularVelocity.RotatingAxes" />
            relative to the <see cref="P:AGI.Foundation.Geometry.VectorAngularVelocity.ReferenceAxes" />
            expressed as a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  The evaluator throws a <see cref="T:AGI.Foundation.DataUnavailableException" /> if
            <see cref="P:AGI.Foundation.Geometry.VectorAngularVelocity.RotatingAxes" /> cannot provide derivative information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.VectorAngularVelocity.RotatingAxes" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorAngularVelocity.ReferenceAxes">
      <summary>
            Gets or sets the reference axes.  The new vector will represent the angular velocity of the rotating axes with respect to this axes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorAngularVelocity.RotatingAxes">
      <summary>
            Gets or sets the rotating axes.  The vector will represent the angular velocity of this axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorApparentDisplacement">
      <summary>
            A vector representing the apparent directed displacement from an initial point to a final point as 
            the points move over time. The apparent displacement accounts for light travel time given the 
            <see cref="T:AGI.Foundation.SignalDirection" /> and optionally can account for aberration caused by the motion
            of the observer's frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.VectorApparentDisplacement.InertialFrame" />, 
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />, <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" /> so that the
            apparent displacement accounting for light travel time can be modelled.
            Optionally, the user must set the <see cref="P:AGI.Foundation.Geometry.VectorApparentDisplacement.VelocityOfMovingFrame" /> in order to model the affect of aberration
            on the apparent displacement.
            <see cref="P:AGI.Foundation.Geometry.VectorApparentDisplacement.LightTravelTimeConvergenceTolerance" /> is initialized to 5E-5.
            <see cref="P:AGI.Foundation.Geometry.VectorApparentDisplacement.Direction" /> is initialized to <see cref="F:AGI.Foundation.SignalDirection.Receive" />.
            <see cref="P:AGI.Foundation.Geometry.VectorApparentDisplacement.VelocityOfMovingFrame" /> is uninitialized.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorApparentDisplacement" /> class which only accounts for light travel time.
            </summary>
      <param name="initialPoint">The initial point.</param>
      <param name="finalPoint">The final point.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modelled.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.VectorVelocity)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorApparentDisplacement" /> class which accounts for aberration in addition to light travel time.
            </summary>
      <param name="initialPoint">The initial point.</param>
      <param name="finalPoint">The final point.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modelled.</param>
      <param name="velocityOfMovingFrame">The velocity of the moving frame in which the affect of aberration is to be determined.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.SignalDirection,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorApparentDisplacement" /> class which only accounts for light travel time.
            </summary>
      <param name="initialPoint">The initial point.</param>
      <param name="finalPoint">The final point.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modelled.</param>
      <param name="direction">The direction in which the signal travels with respect to the initial point.</param>
      <param name="lightTravelTimeConvergenceTolerance">The tolerance required to indicate convergence of the light travel time adjustment.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.SignalDirection,System.Double,AGI.Foundation.Geometry.VectorVelocity)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorApparentDisplacement" /> class which accounts for aberration in addition to light travel time.
            </summary>
      <param name="initialPoint">The initial point.</param>
      <param name="finalPoint">The final point.</param>
      <param name="inertialFrame">The inertial frame in which the light path is modelled.</param>
      <param name="direction">The direction in which the signal travels with respect to the initial point.</param>
      <param name="lightTravelTimeConvergenceTolerance">The tolerance required to indicate convergence of the light travel time adjustment.</param>
      <param name="velocityOfMovingFrame">The velocity of the moving frame in which the affect of aberration is to be determined.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.#ctor(AGI.Foundation.Geometry.VectorApparentDisplacement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.CheckForSameDefinition(AGI.Foundation.Geometry.VectorApparentDisplacement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.CheckForSameDefinition(AGI.Foundation.Geometry.VectorDisplacement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorApparentDisplacement.ConserveDistanceForAberration">
      <summary>
            Gets or sets a value indicating whether to only correct for the direction of the vector
            and not its magnitude when computing the aberration due to relative motion of the observer
            with respect to the target.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.VectorApparentDisplacement.DefaultLightTimeConvergenceTolerance">
      <summary>
            The default tolerance required to indicate convergence of the light travel time adjustment.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorApparentDisplacement.Direction">
      <summary>
            Gets or sets the direction in which the signal travels with respect to the initial point.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the relative
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; between the 
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" /> and <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" /> 
            in <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />'s <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> at a given 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when a property <see cref="P:AGI.Foundation.Geometry.VectorApparentDisplacement.InertialFrame" />, <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />, 
            or <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" /> is not initialized.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.GetLightTravelTimeEvaluator">
      <summary>
            Gets an evaluator that evaluates the light travel time between the two points involved in this displacement vector.
            If the input <see cref="T:AGI.Foundation.Time.JulianDate" /> to the evaluator represents the moment of an event at the
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />, the returned <see cref="T:AGI.Foundation.Time.Duration" /> is the time until the event will be observed at the
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" />.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorApparentDisplacement.GetLightTravelTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that evaluates the light travel time between the two points involved in this displacement vector.
            If the input <see cref="T:AGI.Foundation.Time.JulianDate" /> to the evaluator represents the moment of an event at the
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />, the returned <see cref="T:AGI.Foundation.Time.Duration" /> is the time until the event will be observed at the
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorApparentDisplacement.InertialFrame">
      <summary>
            Gets or sets the inertial frame in which the light path is modelled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorApparentDisplacement.LightTravelTimeConvergenceTolerance">
      <summary>
            Gets or sets the tolerance required to indicate convergence of the light travel time adjustment.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorApparentDisplacement.VelocityOfMovingFrame">
      <summary>
            Gets or sets the velocity of the moving frame in which the affect of aberration is to be determined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorCrossProduct">
      <summary>
            A Vector defined by the cross product of two vectors which may vary with time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorOne" /> and <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorTwo" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorCrossProduct" /> class using the
            provided vectors.  <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorOne" /> cross <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorTwo" />.
            </summary>
      <param name="vectorOne">The vector with which to cross.</param>
      <param name="vectorTwo">The vector which is crossed.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.#ctor(AGI.Foundation.Geometry.VectorCrossProduct,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.CheckForSameDefinition(AGI.Foundation.Geometry.VectorCrossProduct)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorCrossProduct.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the cross product of two vectors represented by
            a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at the given
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  The motion contains derivatives up to the requested order.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorOne" /> or 
            <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorTwo" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorOne">
      <summary>
            Gets or sets the vector to cross with <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorTwo" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorTwo">
      <summary>
            Gets or sets the vector with which <see cref="P:AGI.Foundation.Geometry.VectorCrossProduct.VectorOne" /> is crossed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorDerivative">
      <summary>
            A <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Vector" /> representing the derivative of the specified <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Order" /> of a given <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Vector" /> derived in a given 
            <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Axes" />.  Be careful when observing this vector in different <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Axes" /> as <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" /> and
            <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> assume that the zeroth order of a vector corresponds to a heading or other
            similar value, not the rate of another instance. The resulting values will not properly account for the dynamics of the relative rotation
            of the two axes.  To obtain the derivative represented in a different axes, create a new instance
            defined in a different axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Vector" /> and <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Axes" />;
            <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Order" /> is set to 0 by default.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.#ctor(AGI.Foundation.Geometry.Vector,System.Int32,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorVelocity" /> class to represent the
            velocity of a given point in a given reference frame.
            </summary>
      <param name="vector">The original vector.  The new vector will represent the derivative of this vector.</param>
      <param name="order">The order of derivative of the vector to represent with this object.</param>
      <param name="axes">The axes.  The new vector will represent the derivative of the vector in this axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.#ctor(AGI.Foundation.Geometry.VectorDerivative,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDerivative.Axes">
      <summary>
            Gets or sets the axes.  The vector will represent the derivative of the vector in this axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.CheckForSameDefinition(AGI.Foundation.Geometry.VectorDerivative)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDerivative.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            representing the derivative of the given <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Vector" /> 
            in the given <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Axes" /> at the specified <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Order" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator throws
            a <see cref="T:AGI.Foundation.DataUnavailableException" /> if <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Vector" /> cannot provide enough derivative information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if the <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Vector" /> or <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Axes" /> was not initialized, or
            if the <see cref="P:AGI.Foundation.Geometry.VectorDerivative.Order" /> is less than zero..</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDerivative.Order">
      <summary>
            Gets or sets the order.  The order of the derivative this object will represent will be equal to this value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDerivative.Vector">
      <summary>
            Gets or sets the vector.  This <see cref="T:AGI.Foundation.Geometry.VectorDerivative" /> will represent the derivative of the vector represented by this property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorDifferentiator">
      <summary>
            A Vector that can provide higher-order derivatives by finite-differencing another vector.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.#ctor">
      <summary>
            Initializes a new instance.  The user must set both <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.DifferentiatedVector" /> and
            <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.Increment" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.#ctor(AGI.Foundation.Geometry.Vector,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="vector">The vector to wrap and finite difference.</param>
      <param name="increment">The increment, in seconds, used to compute the finite difference.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.#ctor(AGI.Foundation.Geometry.Vector,System.Double,System.Int32)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="vector">The vector to wrap and finite difference.</param>
      <param name="increment">The increment, in seconds, used to compute the finite difference.</param>
      <param name="derivativeToCompute">
            The derivative to compute, or 0 to specify that the next unavailable derivative should
            be computed.  See the documentation for <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.DerivativeToCompute" /> for more
            information.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.#ctor(AGI.Foundation.Geometry.VectorDifferentiator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.CheckForSameDefinition(AGI.Foundation.Geometry.VectorDifferentiator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDifferentiator.DerivativeToCompute">
      <summary>
            Gets or sets the derivative to compute by finite-differencing.  For example, a value of
            1 for this property indicates that the first derivative (or vector rate) should be computed.
            A value of 0 (the default) will cause the first derivative that is not supplied directly by
            <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.DifferentiatedVector" /> to be computed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDifferentiator.DifferentiatedVector">
      <summary>
            Gets or sets the point whose highest order derivative is being differentiated
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDifferentiator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator
            can represent derivatives of the given <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.DifferentiatedVector" /> using finite difference.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.Increment" /> or 
            <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.DifferentiatedVector" /> was not initialized.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Geometry.VectorDifferentiator.Increment" /> is zero.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDifferentiator.Increment">
      <summary>
            Gets or sets the increment used to calculate finite differences
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorDisplacement">
      <summary>
            The base class for a vector representing the directed displacement from an initial point to a 
            final point as the two points move over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="initialPoint">The point which defines the beginning of the displacement vector.</param>
      <param name="finalPoint">The point which defines the ending of the displacement vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.#ctor(AGI.Foundation.Geometry.VectorDisplacement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.CheckForSameDefinition(AGI.Foundation.Geometry.VectorDisplacement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorDisplacement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint">
      <summary>
            Gets or sets the point which defines the ending of the displacement vector.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint">
      <summary>
            Gets or sets the point which defines the beginning of the displacement vector.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal">
      <summary>
            A vector representing the surface normal at a point projected onto an ellipsoid surface as the 
            point moves through time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Ellipsoid" />,
            <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.EllipsoidFixedFrame" />, and <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Point" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.#ctor(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the surface normal is computed.</param>
      <param name="ellipsoidFixedFrame">A reference frame fixed to the ellipsoid.  If the ellipsoid is the Earth's shape model, this property should be Earth's fixed frame.</param>
      <param name="point">The point to be projected onto the ellipsoid surface.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.#ctor(AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.CheckForSameDefinition(AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Ellipsoid">
      <summary>
            Gets or sets the ellipsoid on which the surface normal is computed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.EllipsoidFixedFrame">
      <summary>
            Gets or sets a reference frame fixed to the ellipsoid.  If the ellipsoid is the Earth's shape model,
            this property should be Earth's fixed frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This 
            evaluator will also provide derivative information if <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Point" /> provides its derivatives. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Ellipsoid" />,
            <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Point" />, or <see cref="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.EllipsoidFixedFrame" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorEllipsoidSurfaceNormal.Point">
      <summary>
            Gets or sets the point to be projected onto the ellipsoid surface.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorEvaluator">
      <summary>
            Evaluates a <see cref="T:AGI.Foundation.Geometry.Vector" /> over time.
            <para>
            The product of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate date, int order)</see>
            method will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> representation of this 
            vector at the specified <see cref="T:AGI.Foundation.Time.JulianDate" />.  The VectorEvaluator will attempt to provide 
            derivatives of the vector up to the requested order. 
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEvaluator.#ctor(AGI.Foundation.Geometry.VectorEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEvaluator.CreateConstantDefinedIn(AGI.Foundation.Geometry.Axes)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> indicating that the Axes that this Vector is defined in is
            the same for all possible times.  This is useful for constructing the value of the
            <see cref="P:AGI.Foundation.Geometry.VectorEvaluator.DefinedInIntervals" /> property.
            </summary>
      <param name="definedIn">The axes that this vector is defined in for all time.</param>
      <returns>The time interval collection indicated the axes this vector is defined in.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorEvaluator.DefinedInIntervals">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> where the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property of
            each interval is the <see cref="T:AGI.Foundation.Geometry.Axes" /> in which this Vector is defined over the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorEvaluator.SimplifyIfNotTimeVarying(AGI.Foundation.EvaluatorGroup)">
      <summary>
            If this evaluator is not time varying, this method evaluates its value and constructs an evaluator
            from a <see cref="T:AGI.Foundation.Geometry.VectorFixed" /> representing the fixed value.  If this evaluator is time varying,
            this method does nothing and returns the evaluator on which it is called.
            </summary>
      <param name="group">The evaluator group in which to construct the new evaluator, if applicable.</param>
      <returns>A simpler evaluator representing the fixed vector, or this if this vector is not fixed.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorFixed">
      <summary>
            A Vector whose components do not change with respect to the axes in which it is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorFixed.DefinedInAxes" />.
            <see cref="P:AGI.Foundation.Geometry.VectorFixed.Components" /> is initialized to zero.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorFixed" /> class using the
            provided vector components with respect to the provided <see cref="T:AGI.Foundation.Geometry.Axes" />.
            </summary>
      <param name="axes">The axes in which this Vector is defined.</param>
      <param name="components">The components of this Vector resolved in the defining axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.#ctor(AGI.Foundation.Geometry.VectorFixed,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.CheckForSameDefinition(AGI.Foundation.Geometry.VectorFixed)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorFixed.Components">
      <summary>
            Gets or sets the components of this Vector resolved in the defining reference axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorFixed.DefinedInAxes">
      <summary>
            Gets or sets the axes in which the Vector is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorFixed.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  If the user
            requests derivative information, the Motion will contain zero vectors up to the requested order.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.VectorFixed.DefinedInAxes" />
            was not initialized.</exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorInAxes">
      <summary>
            A vector that is observed in a given axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorInAxes.VectorToObserve" /> and <see cref="P:AGI.Foundation.Geometry.VectorInAxes.InAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="vectorToObserve">The vector to observe.</param>
      <param name="inAxes">The axes in which to observe the <paramref name="vectorToObserve" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.#ctor(AGI.Foundation.Geometry.VectorInAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.CheckForSameDefinition(AGI.Foundation.Geometry.VectorInAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
        of this vector in a given axes at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorInAxes.InAxes" /> or 
            <see cref="P:AGI.Foundation.Geometry.VectorInAxes.VectorToObserve" /> was not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInAxes.InAxes">
      <summary>
            Gets or sets the axes in which to observe the vector.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInAxes.VectorToObserve">
      <summary>
            Gets or sets the vector to observe.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorInPointsAxes">
      <summary>
            A vector observed in the axes in which a point is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorInPointsAxes.VectorToObserve" /> and 
            <see cref="P:AGI.Foundation.Geometry.VectorInPointsAxes.Point" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes an instance.
            </summary>
      <param name="vector">The vector to observe.</param>
      <param name="point">The vector is observed in the axes in which this point is defined.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="point" /> is <see cref="P:AGI.Foundation.Geometry.Point.Root" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.#ctor(AGI.Foundation.Geometry.VectorInPointsAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.VectorInPointsAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInPointsAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator to observe
        the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; representation
        of the <see cref="P:AGI.Foundation.Geometry.VectorInPointsAxes.VectorToObserve" /> in the <see cref="T:AGI.Foundation.Geometry.Axes" /> in which <see cref="P:AGI.Foundation.Geometry.VectorInPointsAxes.Point" />
        is defined.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of a vector in a point's axes.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorInPointsAxes.VectorToObserve" />
            or <see cref="P:AGI.Foundation.Geometry.VectorInPointsAxes.Point" /> was not initialized.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInPointsAxes.Point">
      <summary>
            Gets or sets the point.  The vector is observed in the axes in which this point is defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInPointsAxes.VectorToObserve">
      <summary>
            Gets or sets the vector to observe.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorInterpolator">
      <summary>
            A vector with its value, derivative, etc. determined by an interpolator based on a time dependent
            data set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.VectorInterpolator.Interpolator" /> and <see cref="P:AGI.Foundation.Geometry.VectorInterpolator.DefinedInAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorInterpolator" /> class from the provided parameters.
            </summary>
      <param name="definedInAxes">The axes in which the vector is defined.</param>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the vector.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorInterpolator" /> class from the provided parameters.
            </summary>
      <param name="definedInAxes">The axes in which the vector is defined.</param>
      <param name="interpolationAlgorithm">The interpolation algorithm to use to interpolate the vector.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorInterpolator" /> class from the provided parameters.
            </summary>
      <param name="definedInAxes">The axes in which the vector is defined.</param>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the vector.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorInterpolator" /> class from the provided parameters.
            </summary>
      <param name="definedInAxes">The axes in which the vector is defined.</param>
      <param name="algorithmType">The type of interpolation algorithm to use to interpolate the vector.</param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorInterpolator" /> class from the provided parameters.
            </summary>
      <param name="definedInAxes">The axes in which the vector is defined.</param>
      <param name="interpolator">The interpolator to use to interpolate the vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.#ctor(AGI.Foundation.Geometry.VectorInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.VectorInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInterpolator.DefinedInAxes">
      <summary>
            Gets or sets the axes in which the interpolated vector is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            of this vector defined in the given <see cref="P:AGI.Foundation.Geometry.VectorInterpolator.DefinedInAxes" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.VectorInterpolator.Interpolator" /> or <see cref="P:AGI.Foundation.Geometry.VectorInterpolator.DefinedInAxes" />
            is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInterpolator.Interpolator">
      <summary>
            Gets or sets the interpolator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorInVectorsAxes">
      <summary>
            A vector observed in the axes in which another vector is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.ObservedVector" /> and <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.AxesOwner" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="observedVector">The vector observed in the <paramref name="axesOwner" />'s axes.</param>
      <param name="axesOwner">The vector whose axes will be used to observe the <paramref name="observedVector" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.#ctor(AGI.Foundation.Geometry.VectorInVectorsAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInVectorsAxes.AxesOwner">
      <summary>
            Gets or sets the vector whose axes will be used to observe the <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.ObservedVector" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.CheckForSameDefinition(AGI.Foundation.Geometry.VectorInVectorsAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInVectorsAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        Gets an evaluator to observe
        the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; representation
        of the <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.ObservedVector" /> in the <see cref="T:AGI.Foundation.Geometry.Axes" /> in which <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.AxesOwner" />
        is defined.
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the motion of a vector in another vector's axes.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.AxesOwner" /> or 
            <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.ObservedVector" /> was not initialized.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInVectorsAxes.ObservedVector">
      <summary>
            Gets or sets the vector observed in the <see cref="P:AGI.Foundation.Geometry.VectorInVectorsAxes.AxesOwner" />'s axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorInverted">
      <summary>
            A vector which inverts another vector.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.#ctor(AGI.Foundation.Geometry.Vector)">
      <summary>Initializes a new instance.</summary>
      <param name="vectorToInvert">The vector to invert.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.#ctor(AGI.Foundation.Geometry.VectorInverted,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.CheckForSameDefinition(AGI.Foundation.Geometry.VectorInverted)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorInverted.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" />
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorInverted.VectorToInvert">
      <summary>
            Gets or sets the vector to invert.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorMagnitude">
      <summary>
            A scalar representing the magnitude of a vector as the vector changes over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorMagnitude.Vector" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.#ctor(AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance based on a given vector.
            </summary>
      <param name="vector">The vector of which to calculate the magnitude.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.#ctor(AGI.Foundation.Geometry.VectorMagnitude,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.CheckForSameDefinition(AGI.Foundation.Geometry.VectorMagnitude)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorMagnitude.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the value and derivatives
            of this Scalar function as a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>A <see cref="T:AGI.Foundation.Geometry.ScalarEvaluator" /> that evaluates the magnitude of the vector.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.VectorMagnitude.Vector" /> was not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorMagnitude.Vector">
      <summary>
            Gets or sets vector of which to calculate the magnitude.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorNormalized">
      <summary>
            A vector representing a normalized version of another vector.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.#ctor">
      <summary>
            Initialize a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorNormalized.VectorToNormalize" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Construct a new unit vector based on a direction and an axes.
            </summary>
      <param name="axes">The axes in which this unit vector is expressed.</param>
      <param name="direction">The direction of the unit vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.#ctor(AGI.Foundation.Geometry.Axes,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Construct a new unit vector based on a direction and an axes.
            </summary>
      <param name="axes">The axes in which this unit vector is expressed.</param>
      <param name="direction">The direction of the unit vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.#ctor(AGI.Foundation.Geometry.Vector)">
      <summary>
            Construct a new unit vector based on an existing vector.
            </summary>
      <param name="vectorToNormalize">The vector to normalize.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.#ctor(AGI.Foundation.Geometry.VectorNormalized,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.CheckForSameDefinition(AGI.Foundation.Geometry.VectorNormalized)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorNormalized.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the normalized <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this <see cref="P:AGI.Foundation.Geometry.VectorNormalized.VectorToNormalize" /> in its parent <see cref="T:AGI.Foundation.Geometry.Axes" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.VectorNormalized.VectorToNormalize" /> was not initialized.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorNormalized.VectorToNormalize">
      <summary>
            Gets or sets the vector to be normalized.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorScaled">
      <summary>
            A vector which represents another vector scaled by a given factor which can change over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.VectorScaled.Vector" /> and <see cref="P:AGI.Foundation.Geometry.VectorScaled.ScaleFactor" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.#ctor(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Scalar)">
      <summary>
            Construct a new vector scaled by the given factor.
            </summary>
      <param name="vectorToScale">The vector to scale.</param>
      <param name="scaleFactor">The factor by which to scale the vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.#ctor(AGI.Foundation.Geometry.Vector,System.Double)">
      <summary>
            Construct a new vector scaled by the given factor.
            </summary>
      <param name="vectorToScale">The vector to scale.</param>
      <param name="scaleFactor">The constant factor by which to scale the vector.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.#ctor(AGI.Foundation.Geometry.VectorScaled,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.CheckForSameDefinition(AGI.Foundation.Geometry.VectorScaled)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorScaled.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector scaled by the given <see cref="P:AGI.Foundation.Geometry.VectorScaled.ScaleFactor" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorScaled.Vector" /> or
            <see cref="P:AGI.Foundation.Geometry.VectorScaled.ScaleFactor" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorScaled.ScaleByInverse">
      <summary>
            Gets or sets a value indicating whether to scale by the reciprocal of the
            <see cref="P:AGI.Foundation.Geometry.VectorScaled.ScaleFactor" /> rather than by the factor itself.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorScaled.ScaleFactor">
      <summary>
            Gets or sets the factor by which to scale the <see cref="P:AGI.Foundation.Geometry.VectorScaled.Vector" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorScaled.Vector">
      <summary>
            Gets or sets the vector which is scaled by <see cref="P:AGI.Foundation.Geometry.VectorScaled.ScaleFactor" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorSum">
      <summary>
            Represents the addition of a number of independent <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>, 
            summed together and observed in a common <see cref="T:AGI.Foundation.Geometry.Axes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.#ctor(AGI.Foundation.Geometry.Vector[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="vectors">A set of vectors to sum together.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.#ctor(AGI.Foundation.Geometry.VectorSum,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.#ctor(System.Collections.Generic.IList{AGI.Foundation.Geometry.Vector})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="vectors">A list of vectors to sum together.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.CheckForSameDefinition(AGI.Foundation.Geometry.VectorSum)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorSum.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Gets an evaluator that can be used to find the sum of the vectors, 
            including derivatives up to the requested order.</para>
        <para>In an effort to avoid excessively large callstacks the resulting evaluator will
            recursively collapse any child vector that is also a <see cref="T:AGI.Foundation.Geometry.VectorSum" /> into
            the parent evaluator. For example, (a + (b + c)) will become (a + b + c).</para>
      </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.VectorSum.VectorsToAdd" /> 
            contains zero elements.</exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if any vectors in <b>VectorsToAdd</b>
            are not initialized, or if 'this' vector exists in <b>VectorsToAdd</b>.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorSum.ObservedAxes">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Axes" /> in which the resultant vector sum 
            will be observed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorSum.VectorsToAdd">
      <summary>
            Gets the list of vectors to sum together.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorTrueDisplacement">
      <summary>
            A vector representing the true directed displacement from an initial point to a final point as
            both points move over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" /> and <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorTrueDisplacement" /> class using the provided points.
            </summary>
      <param name="initialPoint">The initial point.</param>
      <param name="finalPoint">The final point.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.#ctor(AGI.Foundation.Geometry.VectorTrueDisplacement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.CheckForSameDefinition(AGI.Foundation.Geometry.VectorDisplacement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.CheckForSameDefinition(AGI.Foundation.Geometry.VectorTrueDisplacement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorTrueDisplacement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the relative 
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; between the 
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" /> and <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" /> 
            in <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" />'s <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> at a given 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.InitialPoint" /> or 
            <see cref="P:AGI.Foundation.Geometry.VectorDisplacement.FinalPoint" /> was not initialized.</exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorVelocity">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Vector" /> representing the velocity of a given <see cref="P:AGI.Foundation.Geometry.VectorVelocity.Point" /> derived in a given 
            <see cref="P:AGI.Foundation.Geometry.VectorVelocity.ReferenceFrame" />.  Be careful when observing this vector in different frames as the
            values will not account for the dynamics of the position at the origin of the velocity or the relative translation
            of the two frames.  To obtain the velocity represented in a different frame, create a new instance
            defined in a different frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.VectorVelocity.Point" /> and <see cref="P:AGI.Foundation.Geometry.VectorVelocity.ReferenceFrame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.VectorVelocity" /> class to represent the
            velocity of a given point in a given reference frame.
            </summary>
      <param name="point">The point.  The new vector will represent the velocity of this point.</param>
      <param name="frame">The reference frame.  The new vector will represent the velocity of the point in this frame.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.#ctor(AGI.Foundation.Geometry.VectorVelocity,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.CheckForSameDefinition(AGI.Foundation.Geometry.VectorVelocity)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorVelocity.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            representing the velocity of the given <see cref="P:AGI.Foundation.Geometry.VectorVelocity.Point" /> 
            in the given <see cref="P:AGI.Foundation.Geometry.VectorVelocity.ReferenceFrame" /> at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator throws
            a <see cref="T:AGI.Foundation.DataUnavailableException" /> if <see cref="P:AGI.Foundation.Geometry.VectorVelocity.Point" /> cannot provide derivative information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if the <see cref="P:AGI.Foundation.Geometry.VectorVelocity.Point" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorVelocity.Point">
      <summary>
            Gets or sets the point.  The vector will represent the velocity of this point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorVelocity.ReferenceFrame">
      <summary>
            Gets or sets the reference frame.  The vector will represent the velocity of the point in this frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.ComplexConic">
      <summary>
            A sensor volume defined by inner and outer half angles, minimum and maximum clock angles,
            and a radial range limit. The half angles define the outer boundary of the volume, while the
            clock angles restrict the volume to a sector of the annular cross section, and the 
            radial range closes the volume.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.#ctor">
      <summary>
            Constructs a volume with a default definition. Default parameters are: the <see cref="P:AGI.Foundation.Geometry.Shapes.ComplexConic.InnerHalfAngle" />
            equals 0 radians, the <see cref="P:AGI.Foundation.Geometry.Shapes.ComplexConic.OuterHalfAngle" /> equals one-fourth pi radians, the <see cref="P:AGI.Foundation.Geometry.Shapes.ComplexConic.MinimumClockAngle" /> 
            equals negative one-fourth pi radians, and the <see cref="P:AGI.Foundation.Geometry.Shapes.ComplexConic.MaximumClockAngle" /> equals one-fourth pi radians.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a volume of infinite radius with the provided parameters.
            </summary>
      <param name="innerHalfAngle">The angle between the principal direction and the boundary of the
            interior conical volume of exclusion. Defines the interior conical volume of exclusion.</param>
      <param name="outerHalfAngle">The angle between the principal direction and the external boundary of the 
            volume of the sensor. Defines the conical volume of the sensor.</param>
      <param name="minimumClockAngle">The angle between the positive x-axis and the opening edge of the 
            restricted annular cross-section. The angle is measured clockwise when looking in the direction of the positive
            z axis. In conjuction with the <paramref name="maximumClockAngle" />, restricts sensor volume to a portion of the
            annular cross section of a cone.</param>
      <param name="maximumClockAngle">The angle between the positive x-axis and the closing edge of the
            restricted annular cross-section. The angle is measured clockwise when looking in the direction of the positive z axis.
            In conjunction with the <paramref name="minimumClockAngle" />, restricts the sensor volume to a portion of the annular
            cross section of a cone.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a volume of limited radius with the provided parameters.
            </summary>
      <param name="innerHalfAngle">The angle between the principal direction and the boundary of the
            interior conical volume of exclusion. Defines the interior conical volume of exclusion.</param>
      <param name="outerHalfAngle">The angle between the principal direction and the external boundary of the 
            volume of the sensor. Defines the conical volume of the sensor.</param>
      <param name="minimumClockAngle">The angle between the positive x-axis and the opening edge of the 
            restricted annular cross-section. The angle is measured clockwise when looking in the direction of the positive
            z axis. In conjuction with the <paramref name="maximumClockAngle" />, restricts 
            sensor volume to a portion of the annular cross section of a cone.</param>
      <param name="maximumClockAngle">The angle between the positive x-axis and the closing edge of the
            restricted annular cross-section. The angle is measured clockwise when looking in the direction of the positive
            z axis. In conjunction with the <paramref name="minimumClockAngle" />, restricts the
            sensor volume to a portion of the annular cross section of a cone.</param>
      <param name="radius">The radial limit of the volume.  This is the maximum range at which the sensor can detect a target.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.Encloses(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Indicates if the provided point is inside the volume.
            </summary>
      <param name="point">The point to evaluate.</param>
      <returns>
            true if the point is inside the volume and false
            if the point lies on the boundary or outside of the volume.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.GetEnclosureDescriptions">
      <summary>
            Gets the list of descriptions for the enclosure functions for this solid.
            </summary>
      <returns>The list of enclosure descriptions.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets the projection of the sensor onto the front surface of a specified ellipsoid and onto a plane at a
            specified distance in space.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the sensor is to be projected.</param>
      <param name="ellipsoidToSensorTransformation">The transformation from the reference frame of the ellipsoid to the reference frame of the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>The sensor projection.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.ComplexConic.InnerHalfAngle">
      <summary>
            Gets the inner half angle used to define the interior conical volume of exclusion.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.ComplexConic.MaximumClockAngle">
      <summary>
            Gets the maximum clock angle. In conjuction with <see cref="P:AGI.Foundation.Geometry.Shapes.ComplexConic.MinimumClockAngle" />, this restricts
            volume to only a wedge-shaped portion of the annular cross-section of the sensor cone. The angle is
            measured clockwise when looking in the direction of the positive z axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.ComplexConic.MinimumClockAngle">
      <summary>
            Gets the minimum clock angle. In conjuction with <see cref="P:AGI.Foundation.Geometry.Shapes.ComplexConic.MaximumClockAngle" />, this restricts
            volume to only a wedge-shaped portion of the annular cross-section of the sensor cone. The angle is
            measured clockwise when looking in the direction of the positive z axis.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.OnRadiusChanged">
      <summary>
            Called after the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius" /> property changes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.ComplexConic.OuterHalfAngle">
      <summary>
            Gets the outer half angle used to define the exterior conical boundary of the volume.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.SetClockAngles(System.Double,System.Double)">
      <summary>
            Sets the clock angles, which restrict the volume to a wedge-shaped portion of the annular cross section.
            </summary>
      <param name="minimum">The angle between the positive x-axis and the opening edge of the 
            restricted annular cross-section. The angle is measured clockwise when looking in the direction of
            the positive z axis. In conjuction with the <paramref name="maximum" />, restricts 
            sensor volume to a portion of the annular cross section of a cone.</param>
      <param name="maximum">The angle between the positive x-axis and the closing edge of the
            restricted annular cross-section. The angle is measured clockwise when looking in the direction of
            the positive z axis. In conjunction with the <paramref name="minimum" />, restricts the
            sensor volume to a portion of the annular cross section of a cone.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="minimum" /> and <paramref name="maximum" /> clock angles must be in the range from -2pi to 2pi radians.
            </exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="minimum" /> clock angle must be less than the <paramref name="maximum" /> clock angle.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.ComplexConic.SetHalfAngles(System.Double,System.Double)">
      <summary>
            Sets the inner and outer half angles of a sensor volume, which are used to define inner and outer
            conical volumes.
            </summary>
      <param name="inner">The angle between the principal direction and the boundary of the
            interior conical volume of exclusion. Defines the interior conical volume of exclusion.</param>
      <param name="outer">The angle between the principal direction and the external boundary of the 
            volume of the sensor. Defines the conical volume of the sensor.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The inner and outer half angles must be in the range from zero to pi radians, not inclusive.
            </exception>
      <exception cref="T:System.ArgumentException">
            The inner half angle must be less than the outer half angle.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.Curve">
      <summary>
            A 1-dimensional geometric figure.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Curve.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.Curve" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Curve.ArcLength">
      <summary>
          Gets the length of the curve.
        </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Curve.FinalPoint">
      <summary>
          Gets the final point of the curve.
        </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Curve.GetPoints(System.Double)">
      <summary>
          Provides a collection of points along the curve at the requested granularity.
        </summary>
      <param name="granularity">
          The increment of <see cref="P:AGI.Foundation.Geometry.Shapes.Curve.ArcLength" /> used to generate
          the intermediate points between the initial and final points.
        </param>
      <returns>
          The collection of points.  The points will be ordered in creasing order
          by <see cref="P:AGI.Foundation.Geometry.Shapes.PointOnCurve.Fraction" /></returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Curve.InitialPoint">
      <summary>
          Gets the initial point of the curve.
        </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Curve.InterpolateUsingArcLength(System.Double)">
      <summary>
          Provides the location of a point on the curve that is the indicated arc length of the
          distance between the <see cref="P:AGI.Foundation.Geometry.Shapes.Curve.InitialPoint" /> and <see cref="P:AGI.Foundation.Geometry.Shapes.Curve.FinalPoint" />.
        </summary>
      <param name="arcLength">The distance along the curve.</param>
      <returns>The point at the indicated position along the curve.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Curve.InterpolateUsingFraction(System.Double)">
      <summary>
          Provides the location of a point on the curve that is the indicated fraction of the
          distance between the <see cref="P:AGI.Foundation.Geometry.Shapes.Curve.InitialPoint" /> and <see cref="P:AGI.Foundation.Geometry.Shapes.Curve.FinalPoint" />.
        </summary>
      <param name="fraction">The portion of the distance along the curve.</param>
      <returns>The point at the indicated position along the curve.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.CurveCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Geometry.Shapes.Curve" /> instances;
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CurveCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.CurveCollection" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.CustomSensorPattern">
      <summary>
            A custom <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> defined by a list of directions defining the outer
            perimeter of the field of view.  See the Remarks section for more information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.Directions" /> must be set before the new
            instance can be used.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.#ctor(System.Collections.Generic.IList{AGI.Foundation.Coordinates.UnitSpherical})">
      <summary>
            Initializes a new instance with the specified list of directions defining the
            custom sensor pattern.
            </summary>
      <param name="directions">
            The list of directions that define the custom sensor pattern.  The directions
            are vectors originating from the sensor's origin and expressed in the sensor's axes.
            See the Remarks section of the <see cref="T:AGI.Foundation.Geometry.Shapes.CustomSensorPattern" /> reference documentation
            for more information.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.#ctor(System.Collections.Generic.IList{AGI.Foundation.Coordinates.UnitSpherical},System.Double)">
      <summary>
            Initializes a new instance with the specified list of directions defining the
            custom sensor pattern.
            </summary>
      <param name="directions">
            The list of directions that define the custom sensor pattern.  The directions
            are vectors originating from the sensor's origin and expressed in the sensor's axes.
            See the Remarks section of the <see cref="T:AGI.Foundation.Geometry.Shapes.CustomSensorPattern" /> reference documentation
            for more information.
            </param>
      <param name="radius">The radial limit of the volume.  This is the maximum range at 
            which the sensor can detect a target.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.Directions">
      <summary>
            Gets or sets the list of directions that define the custom sensor pattern.  The directions
            are vectors originating from the sensor's origin and expressed in the sensor's axes.
            See the Remarks section of the <see cref="T:AGI.Foundation.Geometry.Shapes.CustomSensorPattern" /> reference documentation
            for more information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.Encloses(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Indicates if the provided point is inside the volume.
            </summary>
      <param name="point">The point to evaluate.</param>
      <returns>
            true if the point is inside the volume and false
            if the point lies on the boundary or outside of the volume.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.GetEnclosureDescriptions">
      <summary>
            Gets the list of descriptions for the enclosure functions for this solid.
            </summary>
      <returns>The list of enclosure descriptions.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets the projection of the sensor onto the front surface of a specified ellipsoid and onto a plane at a
            specified distance in space.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the sensor is to be projected.</param>
      <param name="ellipsoidToSensorTransformation">The transformation from the reference frame of the ellipsoid to the reference frame of the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>The sensor projection.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.CustomSensorPattern.IsConnected">
      <summary>
          Gets a value indicating if the figure is connected.
        </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView">
      <summary>
            A sensor field-of-view volume that can change shape with time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.#ctor(AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.CheckForSameDefinition(AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetEvaluator">
      <summary>
            Gets an evaluator that can be used to find the shape of the sensor field-of-view volume
            at a given date.  While this evaluator is allowed to return completely different types of sensors
            at different times, some clients of this class, such as
            <see cref="T:AGI.Foundation.Access.Constraints.SensorVolumeConstraint">SensorVolumeConstraint</see>,
            require more consistency.  See <see cref="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetRepresentativeFieldOfView" /> for more information.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the shape of the sensor field-of-view volume
            at a given date.  While this evaluator is allowed to return completely different types of sensors
            at different times, some clients of this class, such as
            <see cref="T:AGI.Foundation.Access.Constraints.SensorVolumeConstraint">SensorVolumeConstraint</see>,
            require more consistency.  See <see cref="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetRepresentativeFieldOfView" /> for more information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetRepresentativeFieldOfView">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> that is representative of the ones that are produced by
            evaluating the <see cref="T:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator" /> returned by
            <see cref="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetEvaluator" />.  In many cases, this property can be null.
            However, when using this sensor with
            <see cref="T:AGI.Foundation.Access.Constraints.SensorVolumeConstraint">SensorVolumeConstraint</see>
            to constrain access over an interval, this property must return a representative instance so that
            access can be set up properly.  The representative instance must by the same type (such as
            <see cref="T:AGI.Foundation.Geometry.Shapes.ComplexConic" /> or <see cref="T:AGI.Foundation.Geometry.Shapes.RectangularPyramid" />) as the instances returned by
            the evaluator.  Furthermore, the general shape of the sensor must be the same.  For example,
            if the representative sensor has a hole, then all sensors returned by the evaluator must have
            holes as well.  The size of the hole is still allowed to change with time, however.  To be precise,
            this method must return a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> with the exact same number of items in the
            collection returned by <see cref="M:AGI.Foundation.Geometry.Shapes.Solid.GetEnclosureDescriptions" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator">
      <summary>
            Evaluates a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> that changes with time.  Instances of this type are
            created by <see cref="T:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator.#ctor(AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">The context in which to perform the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.Ellipsoid">
      <summary>
            A quadratic surface defined in Cartesian coordinates by the equation
            <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code></summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor">
      <summary>
            Initializes an ellipsoid as a unit sphere.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes an ellipsoid as a scalene ellipsoid.
            </summary>
      <param name="semiaxisLengths">The semiaxis lengths along the x, y, and z axes of the ellipsoid.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameter <paramref name="semiaxisLengths" /> has an
            <see cref="P:AGI.Foundation.Coordinates.Cartesian.X" />, <see cref="P:AGI.Foundation.Coordinates.Cartesian.Y" />, or <see cref="P:AGI.Foundation.Coordinates.Cartesian.Z" /> component that
            is less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(AGI.Foundation.Coordinates.Cartesian,System.Double,System.Double)">
      <summary>
            Initializes an ellipsoid as a scalene ellipsoid.
            </summary>
      <param name="semiaxisLengths">The semiaxis lengths along the x, y, and z axes of the ellipsoid.</param>
      <param name="centerTolerance">The numerical tolerance used to determine if a point is located
            at the center of the ellipsoid.</param>
      <param name="surfaceTolerance">The numerical tolerance used to determine if a point is located
            on the surface of the ellipsoid.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameter <paramref name="semiaxisLengths" /> has an
            <see cref="P:AGI.Foundation.Coordinates.Cartesian.X" />, <see cref="P:AGI.Foundation.Coordinates.Cartesian.Y" />, or <see cref="P:AGI.Foundation.Coordinates.Cartesian.Z" /> component that
            is less than or equal to 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="centerTolerance" /> or <paramref name="surfaceTolerance" />
            are less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(System.Double)">
      <summary>
            Initializes an ellipsoid as a sphere.
            </summary>
      <param name="radius">The radius of the sphere.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameter <paramref name="radius" /> is less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(System.Double,System.Double)">
      <summary>
            Initializes an ellipsoid as a unit sphere.
            </summary>
      <param name="centerTolerance">The numerical tolerance used to determine if a point is located
            at the center of the ellipsoid.</param>
      <param name="surfaceTolerance">The numerical tolerance used to determine if a point is located
            on the surface of the ellipsoid.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="centerTolerance" /> or <paramref name="surfaceTolerance" />
            are less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(System.Double,System.Double,AGI.Foundation.Coordinates.AxisIndicator)">
      <summary>
            Initializes an ellipsoid as a spheroid.
            </summary>
      <param name="equatorialRadius">The lengths of the two equal semiaxis.</param>
      <param name="polarRadius">The length of the semiaxis which is unequal to the rest.</param>
      <param name="polarAxis">The axis which corresponds to the semiaxis which is unequal to the rest.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="equatorialRadius" /> or <paramref name="polarRadius" /> are
            less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(System.Double,System.Double,AGI.Foundation.Coordinates.AxisIndicator,System.Double,System.Double)">
      <summary>
            Initializes an ellipsoid as a spheroid.
            </summary>
      <param name="equatorialRadius">The lengths of the two equal semiaxis.</param>
      <param name="polarRadius">The length of the semiaxis which is unequal to the rest.</param>
      <param name="polarAxis">The axis which corresponds to the semiaxis which is unequal to the rest.</param>
      <param name="centerTolerance">The numerical tolerance used to determine if a point is located
            at the center of the ellipsoid.</param>
      <param name="surfaceTolerance">The numerical tolerance used to determine if a point is located
            on the surface of the ellipsoid.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="equatorialRadius" /> or <paramref name="polarRadius" /> are
            less than or equal to 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="centerTolerance" /> or <paramref name="surfaceTolerance" />
            are less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes an ellipsoid as a scalene ellipsoid.
            </summary>
      <param name="x">The semiaxis length along the x-axis of the ellipsoid.</param>
      <param name="y">The semiaxis length along the y-axis of the ellipsoid.</param>
      <param name="z">The semiaxis length along the z-axis of the ellipsoid.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="x" />, <paramref name="y" />, or <paramref name="z" />
            are less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes an ellipsoid as a scalene ellipsoid.
            </summary>
      <param name="x">The semiaxis length along the x-axis of the ellipsoid.</param>
      <param name="y">The semiaxis length along the y-axis of the ellipsoid.</param>
      <param name="z">The semiaxis length along the z-axis of the ellipsoid.</param>
      <param name="centerTolerance">The numerical tolerance used to determine if a point is located
            at the center of the ellipsoid.</param>
      <param name="surfaceTolerance">The numerical tolerance used to determine if a point is located
            on the surface of the ellipsoid.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="x" />, <paramref name="y" />, or <paramref name="z" />
            are less than or equal to 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameters <paramref name="centerTolerance" /> or <paramref name="surfaceTolerance" />
            are less than or equal to 0.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.ApparentAngularSize(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Provides the minimum and maximum apparent angular size of the ellipsoid, as
            viewed from the provided point.  The point must be exterior to the ellipsoid.
            </summary>
      <param name="point">The position exterior to the ellipsoid.</param>
      <returns>The smallest and largest apparent angular separation, respectively.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartesianToCartographic(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Converts the motion given in terms of cartesian coordinates to motion in cartographic coordinates.
            </summary>
      <param name="cartesian">The cartesian coordinates to convert.</param>
      <returns>The cartographic equivalent of the specified cartesian coordinates.</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="cartesian" /> parameter is near the center of the ellipsoid.
            Use the <see cref="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtCenter(AGI.Foundation.Coordinates.Cartesian)" /> member to test any such points if they will exist in the domain
            of the calling function.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartesianToCartographic(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Converts the motion given in terms of cartesian coordinates to motion in cartographic coordinates.
            </summary>
      <param name="cartesianMotion">The cartesian motion to convert.</param>
      <param name="order">The order of the highest derivative to convert.  To convert just the position, pass 0 for this value.  To convert velocity as well, pass 1.</param>
      <returns>The cartographic equivalent of the specified cartesian motion.</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;Cartesian&gt;.Value</see> is near the center of the ellipsoid.
            Use the <see cref="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtCenter(AGI.Foundation.Coordinates.Cartesian)" /> member to test any such points if they will exist in the domain
            of the calling function.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToCartesian(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Converts the motion given in terms of planetodetic cartographic coordinates to motion in cartesian coordinates.
            </summary>
      <param name="cartographic">The planetodetic cartographic coordinates to convert.</param>
      <returns>The cartesian equivalent of the specified cartographic coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToCartesian(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartographic},System.Int32)">
      <summary>
            Converts the motion given in terms of planetodetic cartographic coordinates to motion in cartesian coordinates.
            </summary>
      <param name="cartographicMotion">The planetodetic cartographic motion to convert.</param>
      <param name="order">The order of the highest derivative to convert.  To convert just the position, pass 0 for this value.  To convert velocity as well, pass 1.</param>
      <returns>The cartesian equivalent of the specified cartographic motion.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToCartesian(System.Double,System.Double)">
      <summary>
            Converts the specified planetodetic surface location into a cartesian vector in the fixed frame of the ellipsoid.
            </summary>
      <param name="longitude">The planetodetic longitude, in radians.</param>
      <param name="latitude">The planetodetic latitude, in radians.</param>
      <returns>The fixed surface position at the given planetodetic location.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToUniversalPolarStereographic(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Converts the location given in terms of planetodetic cartographic coordinates to Universal Polar Stereographic (UPS) coordinates.
            </summary>
      <param name="coordinates">The planetodetic cartographic coordinates to convert.</param>
      <returns>The UPS equivalent of the specified planetodetic cartographic coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToUniversalPolarStereographic(System.Double,System.Double)">
      <summary>
            Converts the location given in terms of planetodetic longitude and latitude to Universal Polar Stereographic (UPS) coordinates.
            </summary>
      <param name="longitude">The planetodetic longitude in radians.</param>
      <param name="latitude">The planetodetic latitude in radians.</param>
      <returns>The UPS equivalent of the specified planetodetic coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToUniversalTransverseMercator(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Converts the location given in terms of planetodetic cartographic coordinates to Universal Transverse Mercator (UTM) coordinates.
            </summary>
      <param name="coordinates">The planetodetic cartographic coordinates to convert.</param>
      <returns>The UTM equivalent of the specified planetodetic cartographic coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.CartographicToUniversalTransverseMercator(System.Double,System.Double)">
      <summary>
            Converts the location given in terms of planetodetic longitude and latitude to Universal Transverse Mercator (UTM) coordinates.
            </summary>
      <param name="longitude">The planetodetic longitude in radians.</param>
      <param name="latitude">The planetodetic latitude in radians.</param>
      <returns>The UTM equivalent of the specified planetodetic coordinates.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.CenterTolerance">
      <summary>
            Gets the numerical tolerance used to determine if a point is located near the center of the ellipsoid.
            The value is expressed as a percentage with respect to the unit sphere representing the scaled ellipsoid.
            By default, the value is approximately 30%.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.ComputeApproximateHeight(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Compute an approximate value of the height above the surface.  
            </summary>
      <param name="position">The position in the fixed frame of the shape.</param>
      <returns>The approximate height above the surface.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.ComputeSurfaceArea(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Computes an approximation of the surface area of a given cartographic extent on the surface of this ellipsoid
            using Gauss Legendre 10th order quadrature.
            </summary>
      <param name="extent">The extent of the region to compute.</param>
      <returns>The area of the extent.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.ComputeSurfaceArea(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Computes an approximation of the surface area of a given section of the surface of an ellipsoid using
            Gauss Legendre 10th order quadrature.
            </summary>
      <param name="minLongitude">The west most longitude which bounds the region.</param>
      <param name="minLatitude">The south most longitude which bounds the region.</param>
      <param name="maxLongitude">The east most longitude which bounds the region.</param>
      <param name="maxLatitude">The north most longitude which bounds the region.</param>
      <returns>The approximate area of the section on the surface of this ellipsoid.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.EastNorthUpTransformation(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Returns the quaternion transformation between the x-y-z axes of the ellipsoid to the axes oriented to the cartographic
            east-north-up axes at the given position on the surface.
            </summary>
      <param name="surfacePosition">The position of interest on the surface of the ellipsoid.</param>
      <returns>The transformation from x-y-z coordinates to east-north-up coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.EllipsoidSeparationDistance(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Matrix3By3)">
      <summary>
            If the given <see cref="T:AGI.Foundation.Geometry.Shapes.Ellipsoid" /> does not intersect with this ellipsoid this method returns the minimum separation 
            between the surfaces of the two ellipsoids. If the ellipsoids do intersect, the resulting negative separation is the 
            depth that the other ellipsoid intersects into this ellipsoid (calculated as the distance between the two points on the ellipsoid 
            chosen in the same manner as in the non-intersecting case).
            </summary>
      <param name="other">The method finds the separation from the calling ellipsoid and this parameter ellipsoid.</param>
      <param name="centerPointsDisplacement">The vector from the center of this ellipsoid to the center of the <paramref name="other" /> ellipsoid,
            in the local frame of this ellipsoid.</param>
      <param name="thisToOtherRotation">The rotation matrix which represents the orientation of the <paramref name="other" /> ellipsoid with respect to this one,
            corresponding to the result of <see cref="M:AGI.Foundation.Geometry.GeometryTransformer.GetAxesTransformation(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes)">GetAxesTransformation</see>
            where this is the 'from' axes and the other axes is 'to'.</param>
      <returns>The separation between the closest point of this ellipsoid and the closest point of the given ellipsoid.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.EllipsoidSeparationDistance(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Matrix3By3,AGI.Foundation.Coordinates.Cartesian@,AGI.Foundation.Coordinates.Cartesian@)">
      <summary>
            If the given <see cref="T:AGI.Foundation.Geometry.Shapes.Ellipsoid" /> does not intersect with this ellipsoid this method returns the minimum separation 
            between the surfaces of the two ellipsoids. If the ellipsoids do intersect, the resulting negative separation is the 
            depth that the other ellipsoid intersects into this ellipsoid (calculated as the distance between the two points on the ellipsoid 
            chosen in the same manner as in the non-intersecting case).
            </summary>
      <param name="other">The method finds the separation from the calling ellipsoid and this parameter ellipsoid.</param>
      <param name="centerPointsDisplacement">The vector from the center of this ellipsoid to the center of the <paramref name="other" /> ellipsoid,
            in the local frame of this ellipsoid.</param>
      <param name="thisToOtherRotation">The rotation matrix which represents the orientation of the <paramref name="other" /> ellipsoid with respect to this one,
            corresponding to the result of <see cref="M:AGI.Foundation.Geometry.GeometryTransformer.GetAxesTransformation(AGI.Foundation.Geometry.Axes,AGI.Foundation.Geometry.Axes)">GetAxesTransformation</see>
            where this is the 'from' axes and the other axes is 'to'.</param>
      <param name="pointOnThisSurface">The location on this ellipsoid's surface, in its body frame, which was determined to be the closest
            point to the other ellipsoid.</param>
      <param name="pointOnOtherSurface">The location on the other ellipsoid's surface, in its body frame, which was determined to be the closest
            point to the this ellipsoid.</param>
      <returns>The separation between the closest point of this ellipsoid and the closest point of the given ellipsoid.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.EllipsoidType">
      <summary>
            Gets the type of the ellipsoid based on the semiaxis lengths.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GetDefinitionHashCode">
      <summary>
        Gets a hash code representing the definition of this object.
      </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GetDegreeOfObstruction(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Gets the obstruction value given two positions.
            </summary>
      <param name="thisFixed">The first position in a reference frame fixed to the shape.</param>
      <param name="otherFixed">The second position in a reference frame fixed to the shape.</param>
      <returns>The degree of obstruction. Values above zero indicate that the view is not obstructed. Values below zero indicate that it is obstructed.
            The magnitude of the value has no physical meaning, but it is a continuous function.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GetDegreeOfObstruction(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Double@)">
      <summary>
            Gets the obstruction value given two positions.
            </summary>
      <param name="thisFixed">The first position in a reference frame fixed to the shape.</param>
      <param name="otherFixed">The second position in a reference frame fixed to the shape.</param>
      <param name="nearDistance">Outputs the distance along the relative vector at which that vector is closest to this <see cref="T:AGI.Foundation.Geometry.Shapes.Ellipsoid" />.</param>
      <returns>The degree of obstruction. Values above zero indicate that the view is not obstructed. Values below zero indicate that it is obstructed.
            The magnitude of the value has no physical meaning, but it is a continuous function.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.Gradient(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            The gradient of the ellipsoid evaluated at the provided position.
            </summary>
      <param name="position">The position.</param>
      <returns>The gradient.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GrazingAltitude(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Provides the point on the line segment between the initial and final points
            which is nearest to the ellipsoid.
            The line segment is considered to be finite in length.
            This means that possibly closer points which are not between the
            initial and final points are not reported.
            </summary>
      <param name="initial">The initial planetodetic point of the line segment.</param>
      <param name="final">The final planetodetic point of the line segment.</param>
      <returns>The nearest distance.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GrazingAltitude(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Provides the nearest distance between the ellipsoid and the line segment
            from the provided location and along the indicated direction.
            The line segment is considered to be infinite in length but starting at
            the provided location.  This means that possibly smaller grazing altitudes
            along the opposite direction are not reported.
            </summary>
      <param name="location">The planetodetic position exterior to the ellipsoid.</param>
      <param name="direction">The reference direction.</param>
      <returns>The nearest distance.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GrazingAltitudeLocation(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Provides the nearest distance between the ellipsoid and the line segment
            between the initial and final points.
            The line segment is considered to be finite in length.
            This means that possibly closer points which are not between the
            initial and final points are not reported.
            </summary>
      <param name="initial">The initial planetodetic point of the line segment.</param>
      <param name="final">The final planetodetic point of the line segment.</param>
      <returns>The nearest planetodetic point on the line segment.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GrazingAltitudeLocation(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Provides the point on the line segment from the provided location and along
            the indicated direction which is nearest to the ellipsoid.
            The line segment is considered to be infinite in length but starting at
            the provided location.
            This means that possibly closer points in the opposite direction are not reported.
            </summary>
      <param name="location">The planetodetic position exterior to the ellipsoid.</param>
      <param name="direction">The reference direction.</param>
      <returns>The nearest planetodetic point on the line segment.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GrazingAngleLocations(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Provides the two points on the limb of the ellipsoid with the smallest and largest apparent
            angular separation with respect to the indicated direction, as viewed from the provided
            point.  The point must be exterior to the ellipsoid.
            </summary>
      <param name="point">The position exterior to the ellipsoid.</param>
      <param name="direction">The reference direction.</param>
      <returns>The locations of the two points on the ellipsoid with the smallest and largest
            apparent angular separation, respectively.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.GrazingAngles(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Provides the angles from the indicated direction to the two points on the limb
            of the ellipsoid with the smallest and largest apparent angular separation, as
            viewed from the provided point.  The point must be exterior to the ellipsoid.
            </summary>
      <param name="point">The position exterior to the ellipsoid.</param>
      <param name="direction">The reference direction.</param>
      <returns>The smallest and largest apparent angular separation, respectively.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.Intersections(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            Computes the intersection of the line of sight vector emanating from a given external point with the ellipsoid.
            </summary>
      <param name="position">The reference point for the direction.</param>
      <param name="direction">The direction along which the intersections are to be determined.</param>
      <returns>If intersections exist, the distances along the direction to the points of intersection.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtCenter(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Gets a value indicating if the provided position is within the <see cref="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.CenterTolerance" /> of the center of the ellipsoid.
            The <see cref="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.CenterTolerance" /> is expressed as a percentage with respect to the unit sphere representing the scaled ellipsoid.
            </summary>
      <param name="position">The position.</param>
      <returns>
            Returns true if the position is within tolerance of the center of the ellipsoid.
            Otherwise, returns false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtOrBeneathSurface(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Gets a value indicating if the provided position is within the <see cref="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceTolerance" /> of the surface of the ellipsoid,
            or is beneath the surface of the ellipsoid.
            </summary>
      <param name="position">The position.</param>
      <returns>
            Returns true if the position is within tolerance of the surface of the ellipsoid, or beneath it.
            Otherwise, returns false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtSurface(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Gets a value indicating if the provided position is within the <see cref="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceTolerance" /> of the surface of the ellipsoid.
            </summary>
      <param name="position">The position.</param>
      <returns>
            Returns true if the position is within tolerance of the surface of the ellipsoid.
            Otherwise, returns false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsSameDefinition(AGI.Foundation.Geometry.Shapes.Ellipsoid)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsSameDefinition(System.Object)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.Norm(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            The ellipsoid norm evaluated at the provided position.
            </summary>
      <param name="position">The position.</param>
      <returns>The norm.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.NormSquared(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            The square of the ellipsoid <see cref="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.Norm(AGI.Foundation.Coordinates.Cartesian)" /> evaluated at the provided position.
            </summary>
      <param name="position">The position.</param>
      <returns>The square of the norm.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.NorthEastDownTransformation(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Returns the quaternion transformation between the x-y-z axes of the ellipsoid to the axes oriented to the cartographic
            north-east-down axes at the given position on the surface. 
            </summary>
      <param name="surfacePosition">The position of interest on the surface of the ellipsoid.</param>
      <returns>The transformation from x-y-z coordinates to north-east-down coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.PointSeparationDistance(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            If the given <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> does not lie within this ellipsoid this method returns the minimum separation 
            between the this ellipsoid on the given point. If the point is within the ellipsoid do intersect, the resulting negative separation is the 
            depth that the point lies within this ellipsoid's surface.
            </summary>
      <param name="centerToPoint">The vector from the center of this ellipsoid to the point,
            in the local frame of this ellipsoid.</param>
      <returns>The minimum separation between the surface of this ellipsoid and the given point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.PointSeparationDistance(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian@)">
      <summary>
            If the given <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> does not lie within this ellipsoid this method returns the minimum separation 
            between the this ellipsoid on the given point. If the point is within the ellipsoid do intersect, the resulting negative separation is the 
            depth that the point lies within this ellipsoid's surface.
            </summary>
      <param name="centerToPoint">The vector from the center of this ellipsoid to the point,
            in the local frame of this ellipsoid.</param>
      <param name="pointOnSurface">The location on this ellipsoid's surface, in its body frame, which was determined to be
            closest to the given point.</param>
      <returns>The minimum separation between the surface of this ellipsoid and the given point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.RadialProjection(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Computes the radial projection of the position vector onto the surface of the ellipsoid.
            </summary>
      <param name="position">The position vector.</param>
      <returns>The Cartesian position of the surface point.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.SemiaxisLengths">
      <summary>
            Gets the semiaxis lengths.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.SemimajorAxisLength">
      <summary>
            Gets the largest semiaxis length.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.SemiminorAxisLength">
      <summary>
            Gets the smallest semiaxis length.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceDistance(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Computes the shortest distance as measured on the surface of the ellipsoid between two planetodetic cartographic positions.
            </summary>
      <param name="first">The initial planetodetic cartographic position.</param>
      <param name="second">The final planetodetic cartographic position.</param>
      <returns>The surface distance.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            The scalene case of a geodesic ellipsoid is not currently modeled and will be in a future release.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceNormal(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            The unit Cartesian vector directed along the surface normal at the provided cartographic position.
            </summary>
      <param name="position">The cartographic (planetodetic) position.</param>
      <returns>The motion of the normal.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceNormal(System.Double,System.Double)">
      <summary>
            The unit Cartesian vector directed along the surface normal at the provided cartographic longitude and latitude.
            </summary>
      <param name="longitude">The longitude coordinate measured from the prime meridian about the z-axis.</param>
      <param name="latitude">The planetodetic latitude coordinate measured from the x-y plane to the surface normal.</param>
      <returns>The motion of the normal.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceNormalMotion(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Converts the position given in terms of a surface point to the surface normal vector.
            </summary>
      <param name="surfacePosition">The position of the surface point.</param>
      <returns>The surface normal vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceNormalMotion(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Converts the motion given in terms of a surface point to motion of the surface normal vector.
            </summary>
      <param name="surfaceMotion">The motion of the surface point.</param>
      <param name="order">The order of the highest derivative to convert.  To convert just the position, pass 0 for this value.  To convert velocity as well, pass 1.</param>
      <returns>The motion of the surface normal vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfacePosition(AGI.Foundation.Coordinates.Cartographic,System.Double,System.Double)">
      <summary>
            Computes the location of a second surface point along the geodesic passing through the provided
            surface point having the indicated heading at the provided surface point and located at the
            specified distance from the provided surface point.
            </summary>
      <param name="initial">The initial planetodetic surface point.</param>
      <param name="heading">The initial heading.</param>
      <param name="distance">The surface distance separating the two surface points.</param>
      <returns>The planetodetic location of the second surface coordinate.</returns>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            The scalene case of a geodesic ellipsoid is not currently modeled and will be in a future release.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceProjection(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Computes the projection of the cartesian position onto the ellipsoid surface.
            </summary>
      <param name="position">The cartesian position.</param>
      <returns>The cartesian position of the surface projection.</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="position" /> parameter is near the center of the ellipsoid.
            Use the <see cref="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtCenter(AGI.Foundation.Coordinates.Cartesian)" /> member to test any such points if they will exist in the domain
            of the calling function.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceProjection(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Computes the projection of the cartographic position onto the ellipsoid surface.
            </summary>
      <param name="cartographic">The planetodetic cartographic position.</param>
      <returns>The cartesian motion of the surface projection.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceProjection(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Computes the projection of the cartesian motion onto the ellipsoid surface.
            </summary>
      <param name="motion">The cartesian motion.</param>
      <param name="order">The order of the highest derivative to project.  To project just the position, pass 0 for this value.  To project velocity as well, pass 1.</param>
      <returns>The cartesian motion of the surface projection.</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;Cartesian&gt;.Value</see> is near the center of the ellipsoid.
            Use the <see cref="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.IsAtCenter(AGI.Foundation.Coordinates.Cartesian)" /> member to test any such points if they will exist in the domain
            of the calling function.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceProjection(AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartographic},System.Int32)">
      <summary>
            Computes the projection of the cartographic motion onto the ellipsoid surface.
            </summary>
      <param name="cartographicMotion">The planetodetic cartographic motion.</param>
      <param name="order">The order of the highest derivative to project.  To project just the position, pass 0 for this value.  To convert velocity as well, pass 1.</param>
      <returns>The cartesian motion of the surface projection.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.SurfaceTolerance">
      <summary>
            Gets the numerical tolerance used to determine if a point is located on the surface of the ellipsoid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.Tangents(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian)">
      <summary>
            From the indicated position, provides the points of tangency on an ellipsoid which also lie in
            the plane defined by the indicated normal.
            </summary>
      <param name="position">The reference point.</param>
      <param name="normal">The normal to the plane passing through the reference point.</param>
      <returns>
            The points of tangency on the ellipsoid.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.Tangents(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian,System.Double)">
      <summary>
            From the indicated position, provides the points of tangency on an ellipsoid which also lie on an
            axisymmetric cone defined by the indicated axis and half angle.
            </summary>
      <param name="position">The reference point.</param>
      <param name="axis">The axis of the cone.</param>
      <param name="halfAngle">The half angle of the cone.</param>
      <returns>
            The points of tangency on the ellipsoid.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.TangentTotal(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.UnitCartesian,System.Double)">
      <summary>
            Determines whether the cone emanating from sensor at the given position and with the given
            heading and half angle lies completely tangent to the Ellipsoid.
            </summary>
      <param name="sensorPosition">The position of the sensor.</param>
      <param name="sensorHeading">The heading of the sensor.</param>
      <param name="halfAngle">The half angle of the sensor cone.</param>
      <returns>True if the sensor cone is tangent, false if it is not.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.UniversalPolarStereographicToCartographic(AGI.Foundation.Coordinates.PoleIndicator,System.Double,System.Double)">
      <summary>
            Converts the location given in terms of Universal Polar Stereographic (UPS) hemisphere, easting, and northing
            to planetodetic cartographic coordinates.
            </summary>
      <param name="hemisphere">The hemisphere indicator.</param>
      <param name="easting">The eastward distance of the location into the zone.</param>
      <param name="northing">The northward distance of the location into the zone.</param>
      <returns>The planetodetic cartographic equivalent of the specified UPS coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.UniversalPolarStereographicToCartographic(AGI.Foundation.Coordinates.UniversalPolarStereographic)">
      <summary>
            Converts the location given in terms of Universal Polar Stereographic (UPS) coordinates
            to planetodetic cartographic coordinates.
            </summary>
      <param name="coordinates">The UPS coordinates to convert.</param>
      <returns>The planetodetic cartographic equivalent of the specified UPS coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.UniversalTransverseMercatorToCartographic(AGI.Foundation.Coordinates.UniversalTransverseMercator)">
      <summary>
            Converts the location given in terms of Universal Transverse Mercator (UTM) coordinates
            to planetodetic cartographic coordinates.
            </summary>
      <param name="coordinates">The UTM coordinates to convert.</param>
      <returns>The planetodetic cartographic equivalent of the specified UTM coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.UniversalTransverseMercatorToCartographic(System.Int32,AGI.Foundation.Coordinates.PoleIndicator,System.Double,System.Double)">
      <summary>
            Converts the location given in terms of Universal Transverse Mercator (UTM) zone, hemisphere, easting, and northing
            to planetodetic cartographic coordinates.
            </summary>
      <param name="zone">The longitude zone indicator.</param>
      <param name="hemisphere">The hemisphere indicator.</param>
      <param name="easting">The eastward distance of the location into the zone.</param>
      <param name="northing">The northward distance of the location into the zone.</param>
      <returns>The planetodetic cartographic equivalent of the specified UTM coordinates.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Ellipsoid.UpEastNorthTransformation(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Returns the quaternion transformation between the x-y-z axes of the ellipsoid to the axes oriented to the cartographic
            up-east-north axes at the given position on the surface. 
            </summary>
      <param name="surfacePosition">The position of interest on the surface of the ellipsoid.</param>
      <returns>The transformation from x-y-z coordinates to up-east-north coordinates.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Ellipsoid.Volume">
      <summary>
            Gets the volume of the ellipsoid.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve">
      <summary>
            Represents a curve comprised of several connected curves on the surface of an ellipsoid
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.ComputeCartographicExtent">
      <summary>
            Computes the cartographic bounding box which completely contains all of the constituent curves.
            </summary>
      <returns>An object representing the bounding box.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.CreateCurve(AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve[])">
      <summary>
            Constructs a complex curve based on a given set of constituent curves.
            </summary>
      <param name="curves">The set of constituent curves.</param>
      <returns>The constructed curve.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.CreateGeodesic(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Creates a complex curve made up of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic">EllipsoidGeodesics</see> which connect the given set of 
            <paramref name="nodes" /> on the surface of the ellipsoid <paramref name="shape" />.
            </summary>
      <param name="shape">The ellipsoid reference surface.</param>
      <param name="nodes">The set of points forming the nodes of the complex curve.</param>
      <returns>A complex curve connecting the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.CreateRhumbLine(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Creates a complex curve made up of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine">EllipsoidRhumbLines</see> which connect the given set of 
            <paramref name="nodes" /> on the surface of the ellipsoid <paramref name="shape" />.
            </summary>
      <param name="shape">The ellipsoid reference surface.</param>
      <param name="nodes">The set of points forming the nodes of the complex curve.</param>
      <returns>A complex curve connecting the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.Curves">
      <summary>
            Gets a set of the constituent curves which comprise the overall curve.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.Ellipsoid">
      <summary>
            Gets the ellipsoid reference surface on which the curve lies.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.FinalPoint">
      <summary>
            Gets the final planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.GetDiscretePoints(System.Double)">
      <summary>
            Get a set of points which discretely represent the overall curve.  
            </summary>
      <param name="granularity">The maximum angular distance between the discrete points with respect to the center of
            the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid" />.  A small granularity will yield a more precise representation
            of the curve.</param>
      <returns>A list of discrete planetodetic points which can approximate the overall curve as linear segments.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The granularity must be positive and non zero.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.InitialPoint">
      <summary>
            Gets the initial planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.InterpolateUsingFraction(System.Double)">
      <summary>
            Provides the location of a point at the indicated portion along the curve.
            </summary>
      <param name="fraction">The portion of the distance between the initial and final points.</param>
      <returns>The planetodetic location of the point along the curve.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.InterpolateUsingSurfaceDistance(System.Double)">
      <summary>
            Provides the location of a point at the indicated distance along the curve.
            </summary>
      <param name="surfaceDistance">The distance from the initial point to the point of interest along the rhumb line.</param>
      <returns>The planetodetic location of the point along the curve.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidComplexSurfaceCurve.SurfaceDistance">
      <summary>
            Gets the total distance along the curve to the location of the final point.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic">
      <summary>
            A minimum length path on the surface of an ellipsoid connecting two planetodetic surface points. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.#ctor(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the geodesic lies.</param>
      <param name="initial">The initial planetodetic point on the path.</param>
      <param name="final">The final planetodetic point on the path.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="ellipsoid" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown when there is no unique geodesic curve connecting the <paramref name="initial" /> and
            <paramref name="final" /> points.  This usually occurs when the two points are in opposition.
            </exception>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            The scalene case of a geodesic ellipsoid is not currently modeled and will be in a future release.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.#ctor(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartographic,System.Double,System.Double)">
      <summary>
            Initializes a geodesic on the ellipsoid starting at the provided point and which
            has the indicated heading at that point and ends at a point located at the provided
            distance from the starting point.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the geodesic lies.</param>
      <param name="initial">The initial planetodetic point on the path.</param>
      <param name="heading">The heading at the initial point.</param>
      <param name="distance">The distance along the geodesic to the location of the final point.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="ellipsoid" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            The scalene case of a geodesic ellipsoid is not currently modeled and will be in a future release.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.ComputeCartographicExtent">
      <summary>
            Computes the cartographic bounding box which contains the surface curve.  This includes
            looking for the minimum and maximum latitudes which may lie above or below the initial and
            final points due to oblateness in the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.Ellipsoid" />.
            </summary>
      <returns>An object representing the bounding box.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.Ellipsoid">
      <summary>
            Gets the ellipsoid on which the geodesic lies.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.FinalHeading">
      <summary>
            Gets the heading at the final point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.FinalPoint">
      <summary>
            Gets the final planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.Heading(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Provides the heading at a location on the geodesic.
            </summary>
      <param name="location">The planetodetic location of interest.</param>
      <returns>The heading.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.HeadingMotion(AGI.Foundation.Coordinates.Cartographic,System.Double)">
      <summary>
            Provides the heading and rate of change of heading at a location on the geodesic.
            </summary>
      <param name="location">The planetodetic location of interest.</param>
      <param name="groundSpeed">The speed on the geodesic (ground speed) at the indicated location.</param>
      <returns>The motion of the heading angle.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.InitialHeading">
      <summary>
            Gets the heading at the initial point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.InitialPoint">
      <summary>
            Gets the initial planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.InterpolateUsingFraction(System.Double)">
      <summary>
            Provides the location of a point at the indicated portion along the geodesic.
            </summary>
      <param name="fraction">The portion of the distance between the initial and final points.</param>
      <returns>The planetodetic location of the point along the geodesic.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.InterpolateUsingSurfaceDistance(System.Double)">
      <summary>
            Provides the location of a point at the indicated distance along the geodesic.
            </summary>
      <param name="surfaceDistance">The distance from the initial point to the point of interest along the geodesic.</param>
      <returns>The planetodetic location of the point along the geodesic.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.SurfaceDistance">
      <summary>
             Gets the total distance along the geodesic to the location of the final point.
             </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.SurfaceMotion(System.Double)">
      <summary>
            Converts the motion given in terms of motion on the geodesic curve to motion of the surface point.
            </summary>
      <param name="distance">The distance from the initial point to the point of interest along the geodesic.</param>
      <returns>The distance from the initial point to the location of the surface point.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic.SurfaceMotion(System.Double,System.Double,System.Double)">
      <summary>
            Converts the motion given in terms of motion on the geodesic curve to motion of the surface point.
            </summary>
      <param name="distance">The distance from the initial point to the point of interest along the geodesic.</param>
      <param name="groundSpeed">The velocity on the geodesic.</param>
      <param name="groundAcceleration">The acceleration on the geodesic.</param>
      <returns>The motion of the surface point.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine">
      <summary>
            A path of constant heading on the surface of an ellipsoid connecting two planetodetic surface points. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.#ctor(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Initializes a rhumb line (a line of constant heading) on the ellipsoid connecting the two provided planetodetic points.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the rhumb line lies.</param>
      <param name="initial">The initial planetodetic point on the path.</param>
      <param name="final">The final planetodetic point on the path.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="ellipsoid" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            The scalene case of a rhumb line is not currently modeled and will be in a future release.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.#ctor(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartographic,System.Double,System.Double)">
      <summary>
            Initializes a rhumb line (a line of constant heading) on the ellipsoid starting at the provided planetodetic point which
            has the indicated heading at that point and ends at a point located at the provided
            distance from the starting point.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the rhumb line lies.</param>
      <param name="initial">The initial planetodetic point on the path.</param>
      <param name="heading">The heading at the initial point.</param>
      <param name="distance">The distance along the rhumb line to the location of the final point.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="ellipsoid" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">
            The scalene case of a rhumb line is not currently modeled and will be in a future release.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.ComputeCartographicExtent">
      <summary>
            Computes the cartographic bounding box which completely contains the surface curve.
            </summary>
      <returns>An object representing the bounding box.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.Ellipsoid">
      <summary>
            Gets the ellipsoid on which the rhumb line lies.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.FinalPoint">
      <summary>
            Gets the final planetodetic point on the path.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.Heading">
      <summary>
            Gets the heading of the rhumb line.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.InitialPoint">
      <summary>
            Gets the initial planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.InterpolateUsingFraction(System.Double)">
      <summary>
            Provides the location of a point at the indicated portion along the rhumb line.
            </summary>
      <param name="fraction">The portion of the distance between the initial and final points.</param>
      <returns>The planetodetic location of the point along the rhumb line.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.InterpolateUsingSurfaceDistance(System.Double)">
      <summary>
            Provides the location of a point at the indicated distance along the rhumb line.
            </summary>
      <param name="surfaceDistance">The distance from the initial point to the point of interest along the rhumb line.</param>
      <returns>The planetodetic location of the point along the rhumb line.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.SurfaceDistance">
      <summary>
             Gets the total distance along the rhumb line to the location of the final point.
             </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine.SurfaceMotion(System.Double,System.Double,System.Double)">
      <summary>
            Converts the motion given in terms of motion on the rhumb line curve to motion of the surface point.
            </summary>
      <param name="distance">The distance from the initial point to the point of interest along the rhumb line.</param>
      <param name="groundSpeed">The velocity on the rhumb line.</param>
      <param name="groundAcceleration">The acceleration on the rhumb line.</param>
      <returns>The motion of the surface point.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve">
      <summary>
            Represents a curve on the surface of an ellipsoid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.ComputeCartographicExtent">
      <summary>
            Computes the cartographic bounding box which completely contains the surface curve.
            </summary>
      <returns>An object representing the bounding box.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid">
      <summary>
            Gets the ellipsoid reference surface on which the curve lies.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.FinalPoint">
      <summary>
            Gets the final planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.GetDiscretePoints(System.Double)">
      <summary>
            Get a set of points which represent the curve discretely based on a given granularity.
            </summary>
      <param name="granularity">The maximum angular distance between the discrete points with respect to the center of
            the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid" />.  A small granularity will yield a more precise representation
            of the curve.</param>
      <returns>A list of discrete planetodetic points which can approximate the curve as linear segments.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The granularity must be positive and non zero.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.InitialPoint">
      <summary>
            Gets the initial planetodetic point on the path.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.InterpolateUsingFraction(System.Double)">
      <summary>
            Provides the location of a point at the indicated portion along the curve.
            </summary>
      <param name="fraction">The portion of the distance between the initial and final points.</param>
      <returns>The planetodetic location of the point along the curve.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.InterpolateUsingSurfaceDistance(System.Double)">
      <summary>
            Provides the location of a point at the indicated distance along the curve.
            </summary>
      <param name="surfaceDistance">The distance from the initial point to the point of interest along the rhumb line.</param>
      <returns>The planetodetic location of the point along the curve.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.SurfaceDistance">
      <summary>
            Gets the total distance along the curve to the location of the final point.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion">
      <summary>
            This class represents a region of the surface of an <see cref="T:AGI.Foundation.Geometry.Shapes.Ellipsoid" /> bounded by a closed surface curve.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.BoundaryCurve">
      <summary>
            Gets the closed curve defining the boundary of the surface region.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.Centroid">
      <summary>
            Gets the point which represents a single planetodetic location for the overall area of the region.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CheckPointInsideRegion(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Checks to see if the given planetodetic point lies inside the boundary and returns a heuristic measure 
            of how close the point is to the boundary.
            </summary>
      <param name="point">The planetodetic point to check.</param>
      <returns>Returns a positive value if the point lies inside the boundary and negative if it is outside.  
            The value represents the distance between the point and the nearest point on the boundary directly in between the given point
            and the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.Centroid" />.  This can be used as a heuristic measure of how close the point is to the boundary.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.ComputeCartographicExtent">
      <summary>
            Computes the cartographic bounding box which completely contains the surface region.  If the 
            region contains either pole, the extent will reflect that in the north and south latitude values.
            </summary>
      <returns>An object representing the bounding box containing the region.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteCurves(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve)">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="curve">A closed curve representing the boundary of the surface region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the initial and final points of the boundary <paramref name="curve" />
            are not equal.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteCurves(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve)">
      <summary>
            Create a region using a set of surface curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="granularity">The maximum angular distance between the discrete points with respect to the center of
            the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid" />.  A small granularity will yield a more precise representation
            of the boundary.</param>
      <param name="curve">A closed curve representing the boundary of the surface region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the initial and final points of the boundary <paramref name="curve" />
            are not equal.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteCurves(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve,AGI.Foundation.Coordinates.Cartographic,System.Boolean)">
      <summary>
            Create a region using a set of surface curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="granularity">The maximum angular distance between the discrete points with respect to the center of
            the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid" />.  A small granularity will yield a more precise representation
            of the boundary.</param>
      <param name="curve">A closed curve representing the boundary of the surface region.</param>
      <param name="referencePoint">A reference point to manually specify as inside or outside the region, to allow for cases like regions
            larger than half the globe since the default behavior always selects the smaller portion of the ellipsoid as the region.</param>
      <param name="referencePointInsideRegion">The specification for whether the <paramref name="referencePoint" /> is inside
            or outside the region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the initial and final points of the boundary <paramref name="curve" />
            are not equal.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteGeodesics(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="nodes">The nodes defining the corners of the surface region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteGeodesics(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="granularity">The maximum angular distance to use when discretizing the boundary.
            See <see cref="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.GetDiscretePoints(System.Double)" /></param>
      <param name="nodes">The planetodetic nodes defining the corners of the surface region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteGeodesics(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic},AGI.Foundation.Coordinates.Cartographic,System.Boolean)">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="granularity">The maximum angular distance to use when discretizing the boundary.
            See <see cref="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.GetDiscretePoints(System.Double)" /></param>
      <param name="nodes">The planetodetic nodes defining the corners of the surface region.</param>
      <param name="referencePoint">A reference point to manually specify as inside or outside the region, to allow for cases like regions
            larger than half the globe since the default behavior always selects the smaller portion of the ellipsoid as the region.</param>
      <param name="referencePointInsideRegion">The specification for whether the <paramref name="referencePoint" /> is inside
            or outside the region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteRhumbLines(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="nodes">The planetodetic nodes defining the corners of the surface region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteRhumbLines(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="granularity">The maximum angular distance to use when discretizing the boundary.
            See <see cref="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.GetDiscretePoints(System.Double)" /></param>
      <param name="nodes">The nodes defining the corners of the surface region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingDiscreteRhumbLines(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic},AGI.Foundation.Coordinates.Cartographic,System.Boolean)">
      <summary>
            Create a region using a set of <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine" /> curves to connect the nodes and
            project the points onto a plane tangent to the centroid when computing intersections.
            </summary>
      <param name="shape">The reference surface.</param>
      <param name="granularity">The maximum angular distance to use when discretizing the boundary.
            See <see cref="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.GetDiscretePoints(System.Double)" /></param>
      <param name="nodes">The nodes defining the corners of the surface region.</param>
      <param name="referencePoint">A reference point to manually specify as inside or outside the region, to allow for cases like regions
            larger than half the globe since the default behavior always selects the smaller portion of the ellipsoid as the region.</param>
      <param name="referencePointInsideRegion">The specification for whether the <paramref name="referencePoint" /> is inside
            or outside the region.</param>
      <returns>A region which is defined by the given set of points.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the number of nodes is less than 2.</exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingExtent(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Create a region using a <see cref="T:AGI.Foundation.Coordinates.CartographicExtent" /> to define vertices for four <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine" /> curves
            forming the boundary of the region inside the extent.
            </summary>
      <param name="shape">The underlying shape defining the geodetic coordinates of the extent.</param>
      <param name="extent">The extent forming the boundary of the region.</param>
      <returns>A surface region made up of rhumbline curves encircling the cartographic extent.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.CreateRegionUsingExtent(AGI.Foundation.Geometry.Shapes.Ellipsoid,System.Double,AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Create a region using a <see cref="T:AGI.Foundation.Coordinates.CartographicExtent" /> to define vertices for four <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidRhumbLine" /> curves
            forming the boundary of the region inside the extent.
            </summary>
      <param name="shape">The underlying shape defining the geodetic coordinates of the extent.</param>
      <param name="granularity">The maximum angular distance between the discrete points with respect to the center of
            the <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid" />.  A small granularity will yield a more precise representation
            of the boundary.</param>
      <param name="extent">The extent forming the boundary of the region.</param>
      <returns>A surface region made up of rhumbline curves encircling the cartographic extent.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.IsPointInsideRegion(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Determines whether the given planetodetic point lies inside the region.  
            </summary>
      <param name="point">The planetodetic point to test.</param>
      <returns>True if the point lies inside the boundary, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.ReferenceSurface">
      <summary>
            Gets the reference surface on which the region is represented by a closed boundary curve.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EllipsoidType">
      <summary>
            The type of an ellipsoid.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EllipsoidType.Sphere">
      <summary>
            The ellipsoid is a sphere.
            The semiaxis lengths are all equal.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EllipsoidType.OblateSpheroid">
      <summary>
            The ellipsoid is an oblate spheroid.
            The equatorial semiaxis lengths are equal and greater than the polar semiaxis length.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EllipsoidType.ProlateSpheroid">
      <summary>
            The ellipsoid is a prolate spheroid.
            The equatorial semiaxis lengths are equal and smaller than the polar semiaxis length.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EllipsoidType.Scalene">
      <summary>
            The ellipsoid is a scalene ellipsoid.
            The semiaxis lengths are unequal.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EnclosureDescription">
      <summary>
            Describes an enclosure, as returned by <see cref="M:AGI.Foundation.Geometry.Shapes.Solid.GetEnclosureDescriptions" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EnclosureDescription.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunction{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Geometry.Shapes.EnclosureFunctionType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">
            The enclosure function.  If all enclosure functions return a value greater than
            0.0 for a given position, then that position is inside the volume.
            </param>
      <param name="functionType">
            The type of value returned by the <paramref name="function" />.
            </param>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EnclosureDescription.Function">
      <summary>
            Gets the enclosure function.  If all enclosure functions return a value greater than
            0.0 for a given position, then that position is inside the volume.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EnclosureDescription.FunctionType">
      <summary>
            Gets the type of value returned by the <see cref="P:AGI.Foundation.Geometry.Shapes.EnclosureDescription.Function" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EnclosureDescriptionCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Geometry.Shapes.EnclosureDescription" /> instances.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EnclosureDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.EnclosureDescriptionCollection" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EnclosureDescriptionCollection.AddRange(System.Collections.Generic.IEnumerable{AGI.Foundation.Geometry.Shapes.EnclosureDescription})">
      <summary>
            Adds an enumerable collection of descriptions to the end of this collection.
            </summary>
      <param name="collection">The collection of descriptions to add.</param>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EnclosureFunctionType">
      <summary>
            Describes the nature of an enclosure function returned by <see cref="M:AGI.Foundation.Geometry.Shapes.Solid.GetEnclosureDescriptions" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EnclosureFunctionType.Other">
      <summary>
            The enclosure function is of some other type.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EnclosureFunctionType.ConeAngle">
      <summary>
            The enclosure function acts like a cone angle.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EnclosureFunctionType.ClockAngle">
      <summary>
            The enclosure function acts like a clock angle.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.EnclosureFunctionType.RadialLimit">
      <summary>
            The enclosure function acts like a radial limit.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.Figure">
      <summary>
            A geometric figure.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Figure.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.Figure" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.Figure.IsConnected">
      <summary>
          Gets a value indicating if the figure is connected.
        </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.IDynamicFieldOfViewService">
      <summary>
            A service that provides a time-dynamic sensor field of view volume.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.IDynamicFieldOfViewService.FieldOfViewVolume">
      <summary>
            Gets the dynamic volume of the sensor's field of view defined in the sensor's reference frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.IFieldOfViewService">
      <summary>
            A service that provides a sensor volume.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.IFieldOfViewService.FieldOfViewVolume">
      <summary>
            Gets the volume defining the sensor's field of view.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.PointOnCurve">
      <summary>
            Represents a specific point on a <see cref="T:AGI.Foundation.Geometry.Shapes.Curve" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.PointOnCurve.#ctor(System.Double,System.Double,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="fraction">The fractional distance along the curve at which this point occurs.</param>
      <param name="arcDistance">The real distance along the curve at which this point occurs.</param>
      <param name="point">The location of the point.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.PointOnCurve.ArcDistance">
      <summary>
            Gets the actual distance along the curve at which this point occurs.
            This value is between 0.0 and the <see cref="P:AGI.Foundation.Geometry.Shapes.Curve.ArcLength" /> of the curve.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.PointOnCurve.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.PointOnCurve.Fraction">
      <summary>
            Gets the fractional distance along the curve at which this point occurs.
            This value is between 0.0 and 1.0.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.PointOnCurve.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.PointOnCurve.op_Equality(AGI.Foundation.Geometry.Shapes.PointOnCurve,AGI.Foundation.Geometry.Shapes.PointOnCurve)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.PointOnCurve.op_Inequality(AGI.Foundation.Geometry.Shapes.PointOnCurve,AGI.Foundation.Geometry.Shapes.PointOnCurve)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.PointOnCurve.Point">
      <summary>
            Gets the coordinates of the point on the curve.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.RectangularPyramid">
      <summary>
            A sensor volume with a rectangular cross section and a radial range limit. The half angles define 
            the outer boundaries of the volume, and the radial range closes the volume, forming a sensor volume 
            in the shape of a rectangular pyramid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.#ctor">
      <summary>
            Constructs a volume with a default definition, in which the <see cref="P:AGI.Foundation.Geometry.Shapes.RectangularPyramid.XHalfAngle" /> and the 
            <see cref="P:AGI.Foundation.Geometry.Shapes.RectangularPyramid.YHalfAngle" /> are equal to <see cref="F:AGI.Foundation.Constants.HalfPi" /> radians.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.#ctor(System.Double,System.Double)">
      <summary>
            Constructs a volume of infinite radius with the provided parameters.
            </summary>
      <param name="xHalfAngle">The half angle measured from the principal direction and in the direction of the x-axis.</param>
      <param name="yHalfAngle">The half angle measured from the principal direction and in the direction of the y-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Construcs a volume of limited radius with the provided parameters.
            </summary>
      <param name="xHalfAngle">The half angle measured from the principal direction and in the direction of the x-axis.</param>
      <param name="yHalfAngle">The half angle measured from the principal direction and in the direction of the y-axis.</param>
      <param name="radius">The radial limit of the volume. This is the maximum range at which the sensor can detect a target.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.Encloses(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Indicates if the provided point is inside the volume.
            </summary>
      <param name="point">The point to evaluate.</param>
      <returns>
            true if the point is inside the volume and false
            if the point lies on the boundary or outside of the volume.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.GetEnclosureDescriptions">
      <summary>
            Gets the list of descriptions for the enclosure functions for this solid.
            </summary>
      <returns>The list of enclosure descriptions.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets the projection of the sensor onto the front surface of a specified ellipsoid and onto a plane at a
            specified distance in space.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the sensor is to be projected.</param>
      <param name="ellipsoidToSensorTransformation">The transformation from the reference frame of the ellipsoid to the reference frame of the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>The sensor projection.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.RectangularPyramid.OnRadiusChanged">
      <summary>
            Called after the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius" /> property changes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.RectangularPyramid.XHalfAngle">
      <summary>
            Gets or sets the half angle measured from the principal direction and in the direction of the x-axis.        
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the half angle is less than or equal to zero or greater than <see cref="F:AGI.Foundation.Constants.HalfPi" /> radians.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.RectangularPyramid.YHalfAngle">
      <summary>
            Gets or sets the half angle measured from the principal direction and in the direction of the y-axis.        
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The half angle must be greater than zero and less than or equal to <see cref="F:AGI.Foundation.Constants.HalfPi" /> radians.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView">
      <summary>
            A sensor field of view volume.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation)">
      <summary>
            Gets the projection of the sensor onto the front surface of a specified ellipsoid and into space.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the sensor is to be projected.</param>
      <param name="ellipsoidToSensorTransformation">The transformation from the reference frame of the ellipsoid to the reference frame of the sensor.</param>
      <returns>The sensor projection.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets the projection of the sensor onto the front surface of a specified ellipsoid and onto a plane at a
            specified distance in space.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the sensor is to be projected.</param>
      <param name="ellipsoidToSensorTransformation">The transformation from the reference frame of the ellipsoid to the reference frame of the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>The sensor projection.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.OnRadiusChanged">
      <summary>
            Called after the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius" /> property changes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius">
      <summary>
            Gets or sets the radial limit of the volume.  This is the maximum range at which the sensor
            can detect a target.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the radius is less than or equal to zero.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorProjection">
      <summary>
            A projection of a sensor onto the surface of an ellipsoid and into space.  In addition,
            boundaries that fall on the horizon between the ellipsoid and space are also included
            in both collections and the correspondence between them is made available.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjection.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjection.#ctor(AGI.Foundation.Geometry.Shapes.SensorProjectionBoundaryCollection,AGI.Foundation.Geometry.Shapes.SensorProjectionBoundaryCollection)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="surfaceBoundaries">The sensor projection boundaries on the surface.</param>
      <param name="spaceBoundaries">The sensor projection boundaries in space.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjection.EllipsoidToSensorTransformation">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Coordinates.KinematicTransformation" /> used to transform from the ellipsoid to the sensor reference frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjection.ProjectionOptions">
      <summary>
            Gets or sets the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjection.ProjectionOptions" /> used to generate this sensor projection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjection.SensorFieldOfView">
      <summary>
            Gets or sets the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjection.SensorFieldOfView" /> definition.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjection.SpaceBoundaries">
      <summary>
            Gets the boundaries of the projection of the sensor in space.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjection.SurfaceBoundaries">
      <summary>
            Gets the boundaries of the projection of the sensor onto the surface.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary">
      <summary>
            The boundary of a sensor projection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurve">
      <summary>
            Gets the closed, connected curve definining the boundary.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurveSegments">
      <summary>
            Gets the collection of segments comprising the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurve" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.Holes">
      <summary>
            Gets the collection of boundaries representing holes in the sensor projection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.Horizons">
      <summary>
            Gets the collection of horizons along this boundary.  Horizons are segments of the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurve" />
            that are part of the ellipsoid horizon as viewed from the sensor's origin.  Horizons have two parts: one part is
            on the ellipsoid, and the other is the same curve projected into space.  The horizons are guaranteed to be
            sorted by their <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.BoundaryCurveSegmentIndex" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundaryCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary">SensorProjectionBoundaries</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundaryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundaryCollection" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon">
      <summary>
            Describes a portion of a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary" /> that
            occurs at the limb of the central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.AdjacentHorizon">
      <summary>
            The adjacent horizon.  For example, if this horizon occurs on one of the
            <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjection.SurfaceBoundaries" />, then the
            adjacent horizon is the same segment on a boundary in the
            <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjection.SpaceBoundaries" /> collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.Boundary">
      <summary>
            Gets or sets the boundary of which this horizon is a part.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.BoundaryCurveSegmentIndex">
      <summary>
            Gets or sets the index of the horizon segment in the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.Boundary">Boundary's</see><see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurveSegments" /> collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.EndArcLength">
      <summary>
            Gets or sets the arc length on the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.Boundary">Boundary's</see><see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurve" /> at which the horizon
            segment ends.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.StartArcLength">
      <summary>
            Gets or sets the arc length on the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon.Boundary">Boundary's</see><see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionBoundary.BoundaryCurve" /> at which the horizon
            segment begins.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizonCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizon" /> instances.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizonCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.SensorProjectionHorizonCollection" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions">
      <summary>
            Specifies options to the <see cref="M:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)" /> method.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.#ctor(AGI.Foundation.Geometry.Shapes.SensorProjectionOptions,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">The context controlling the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.#ctor(AGI.Foundation.Geometry.Shapes.SensorSpaceProjection,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="spaceProjection">
            The type of space projection to use.  When a portion of a sensor does not intersect
            the ellipsoid, that portion can be projected either to a radial limit or into a plane.
            </param>
      <param name="spaceProjectionDistance">
            The distance to which to project the portions of the sensor that do not intersect
            the ellipsoid.  If <paramref name="spaceProjection" /> is <see cref="F:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection.ProjectToRadius" />,
            this is the radial limit of the sensor.  If it is <see cref="F:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection.ProjectToPlane" />, it
            is the distance from the sensor origin to the closest point on the plane.  The actual projection distance
            depends on the value of this property and the value of the sensor's <see cref="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius" />
            property.  See the documentation for the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.SpaceProjectionDistance" /> property for
            more information.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.CheckForSameDefinition(AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.SpaceProjectionDistance">
      <summary>
            Gets or sets the distance to which to project the portions of the sensor that do not intersect
            the ellipsoid.  If <see cref="P:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.SpaceProjectionType" /> is <see cref="F:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection.ProjectToRadius" />,
            this is the radial limit of the sensor.  If it is <see cref="F:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection.ProjectToPlane" />, it
            is the distance from the sensor origin to the closest point on the plane.  The actual projection distance
            depends on the value of this property and the value of the sensor's <see cref="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius" />
            property.  This property does NOT affect the portion of the sensor that intersects with the central body,
            even if its value is less than the distance to the central body.
            See the Remarks section for details.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SensorProjectionOptions.SpaceProjectionType">
      <summary>
            Gets or sets the type of space projection to use.  When a portion of a sensor does not intersect
            the ellipsoid, that portion can be projected either to a radial limit or into a plane.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection">
      <summary>
            Specifies the type of projection to use when projecting a sensor into space.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection.ProjectToRadius">
      <summary>
            The sensor is projected to a radial limit from the sensor origin.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Geometry.Shapes.SensorSpaceProjection.ProjectToPlane">
      <summary>
            The sensor is projected into a plane orthogonal to the sensor boresight axis.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.Solid">
      <summary>
            A 3-dimensional geometric figure.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Solid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Geometry.Shapes.Solid" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Solid.Encloses(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Indicates if the provided point is inside the volume.
            </summary>
      <param name="point">The point to evaluate.</param>
      <returns>
            true if the point is inside the volume and false
            if the point lies on the boundary or outside of the volume.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.Solid.GetEnclosureDescriptions">
      <summary>
            Gets the list of descriptions for the enclosure functions for this solid.
            </summary>
      <returns>The list of enclosure descriptions.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume">
      <summary>
            A sensor volume defined by inner and outer half angles, fore and aft exclusion angles,
            and a radial range limit. The outer half angle defines the outer boundary of the volume, and
            the other half angles define exclusion boundaries for the sensor volume.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.#ctor">
      <summary>
            Constructs a sensor volume with a default definition, in which the <see cref="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.InnerHalfAngle" /> has a value of 
            one-fourth pi radians, the <see cref="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.OuterHalfAngle" /> has a value of <see cref="F:AGI.Foundation.Constants.HalfPi" /> radians,
            the <see cref="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.ForeHalfAngle" /> and <see cref="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.AftHalfAngle" /> are both equal to zero, and the radius is equal to positive infinity.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a volume of infinite radius with the provided parameters.
            </summary>
      <param name="innerHalfAngle">The angle between the principal direction and the outermost boundary of the interior conical 
            volume of exclusion. Defines the interior conical volume of exclusion.</param>
      <param name="outerHalfAngle">The angle between the principal direction and the outermost boundary of the sensor volume. 
            Defines the exterior conical boundary of volume. </param>
      <param name="aftHalfAngle">Defines the conical volume of exclusion about the negative x-axis.</param>
      <param name="foreHalfAngle">Defines the conical volume of exclusion about the positive x-axis.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a volume of limited radius with the provided parameters.
            </summary>
      <param name="innerHalfAngle">The angle between the principal direction and the outermost boundary of the interior conical 
            volume of exclusion. Defines the interior conical volume of exclusion.</param>
      <param name="outerHalfAngle">The angle between the principal direction and the outermost boundary of the sensor volume. 
            Defines the exterior conical boundary of volume.</param>
      <param name="aftHalfAngle">Defines the conical volume of exclusion about the negative x-axis.</param>
      <param name="foreHalfAngle">Defines the conical volume of exclusion about the positive x-axis.</param>
      <param name="radius">The radial limit of the volume.  This is the maximum range at which the sensor can detect a target.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.AftHalfAngle">
      <summary>
            Gets or sets the aft half angle defining the conical volume of exclusion about the negative x-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the provided aft half angle is less than zero or greater than or equal 
            to <see cref="F:AGI.Foundation.Constants.HalfPi" /> radians.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.Encloses(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Indicates if the provided point is inside the volume.
            </summary>
      <param name="point">The point to evaluate.</param>
      <returns>
            true if the point is inside the volume and false
            if the point lies on the boundary or outside of the volume.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.ForeHalfAngle">
      <summary>
            Gets or sets the fore half angle defining the conical volume of exclusion about the positive x-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the provided fore half angle is less than zero or greater than or equal 
            to <see cref="F:AGI.Foundation.Constants.HalfPi" /> radians.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.GetEnclosureDescriptions">
      <summary>
            Gets the list of descriptions for the enclosure functions for this solid.
            </summary>
      <returns>The list of enclosure descriptions.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.GetProjection(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.KinematicTransformation,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets the projection of the sensor onto the front surface of a specified ellipsoid and onto a plane at a
            specified distance in space.
            </summary>
      <param name="ellipsoid">The ellipsoid on which the sensor is to be projected.</param>
      <param name="ellipsoidToSensorTransformation">The transformation from the reference frame of the ellipsoid to the reference frame of the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>The sensor projection.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.InnerHalfAngle">
      <summary>
            Gets the inner half angle used to define the interior conical volume of exclusion.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.OnRadiusChanged">
      <summary>
            Called after the <see cref="P:AGI.Foundation.Geometry.Shapes.SensorFieldOfView.Radius" /> property changes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.OuterHalfAngle">
      <summary>
            Gets the outer half angle used to define the exterior conical boundary of the volume.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.SyntheticApertureRadarVolume.SetInnerOuterHalfAngles(System.Double,System.Double)">
      <summary>
            Sets the inner and outer half angles of a sensor, which define part of the sensor volume.
            </summary>
      <param name="inner">The angle between the principal direction and the outermost boundary of the interior conical 
            volume of exclusion. Defines the interior conical volume of exclusion.</param>
      <param name="outer">The angle between the principal direction and the outermost boundary of the sensor volume. 
            Defines the exterior conical boundary of volume.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either the <paramref name="inner" /> or <paramref name="outer" /> half angle is outside of the 
            range from zero to pi radians.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="inner" /> half angle is greater than or equal to the 
            <paramref name="outer" /> half angle.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.AccessQueryReplacementCopyContext">
      <summary>
            Copies an AccessQuery while replacing all references of a specified
            instance with a new specified instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.AccessQueryReplacementCopyContext.#ctor(System.IServiceProvider,System.IServiceProvider)">
      <summary>
            Constructs a new instance with the specified parameters.
            </summary>
      <param name="newObject">The new reference to use.</param>
      <param name="oldObject">The reference to be replaced.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.AccessQueryReplacementCopyContext.UpdateReference``1(``0)">
      <summary>
            Updates a given reference, returning a reference to use in its place.
            </summary>
      <param name="oldObject">The old reference to update.</param>
      <typeparam name="T">The type of the object reference.</typeparam>
      <returns>The updated reference.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.AverageSubCalculationProgress">
      <summary>
            An implementation of <see cref="T:AGI.Foundation.ITrackCalculationProgress" /> that averages the progress of a number of sub-calculations and
            reports the result to another <see cref="T:AGI.Foundation.ITrackCalculationProgress" /> instance.  The return value of <see cref="M:AGI.Foundation.Infrastructure.AverageSubCalculationProgress.ForSubCalculation(System.Double)" />
            should be passed to each sub-calculation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.AverageSubCalculationProgress.#ctor(AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="parentProgress">The parent instance to which to report progress.</param>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.AverageSubCalculationProgress.CancellationPending">
      <summary>
            Gets a value indicating whether cancellation of the calculation is requested.
            If this returns true, the calculation will stop as soon as possible.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.AverageSubCalculationProgress.ForSubCalculation(System.Double)">
      <summary>
            Gets an <see cref="T:AGI.Foundation.ITrackCalculationProgress" /> instance for a sub-calculation.
            </summary>
      <param name="weight">The weight of this sub-calculation relative to other sub-calculations.</param>
      <returns>The progress instance to pass to a sub-calculation.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.AverageSubCalculationProgress.GetSubCalculationProgress">
      <summary>
            Gets the set of progress values, each representing the progress of a sub-calculation.
            </summary>
      <returns>The progress values.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.AverageSubCalculationProgress.LastProgress">
      <summary>
            Gets the last value of the overall progress, averaged over the sub-calculations.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CachingEvaluator`1">
      <summary>
            A wrapper for any <see cref="T:AGI.Foundation.IEvaluator`1" /> that caches the last evaluated result.  This way, if a
            second evaluation is requested for the same date, the value is returned without recomputing it.
            This class is intended to be returned by <see cref="M:AGI.Foundation.IEvaluator.GetCachingWrapper" />.
            </summary>
      <typeparam name="T">The type of the evaluator.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.#ctor(AGI.Foundation.IEvaluator{`0})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="evaluator">The evaluator to be wrapped.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.ClearCache">
      <summary>
            Clears any values cached by this evaluator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates the function.
            </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CachingEvaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CachingEvaluator`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1">
      <summary>
            A wrapper for any <see cref="T:AGI.Foundation.MotionEvaluator`1" /> that caches the last evaluated result.  This way, if a
            second evaluation is requested for the same date, the value is returned without recomputing it.
            This class is intended to be returned by <see cref="M:AGI.Foundation.IEvaluator.GetCachingWrapper" />.
            </summary>
      <typeparam name="T">The type of motion returned by evaluation.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.#ctor(AGI.Foundation.MotionEvaluator{`0})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="evaluator">The evaluator to be wrapped.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.ClearCache">
      <summary>
            Clears any values cached by this evaluator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates the function.
            </summary>
      <param name="date">The value with which to evaluate the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Evaluates the function, first checking for a cached result corresponding to <paramref name="x" />
            and <paramref name="order" />.
            </summary>
      <param name="x">The value with which to evaluate the function.</param>
      <param name="order">The maximum order to evaluate.  Passing 0 evaluates the value only.
            Passing 1 evaluates the value and its derivative, etc.</param>
      <returns>
            The value of the function and additional derivatives, if requested.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.GetNextSampleSuggestion(AGI.Foundation.Time.JulianDate)">
      <summary>
            Gets a suggestion for the next <see cref="T:AGI.Foundation.Time.JulianDate" /> value at which to sample this function.
            </summary>
      <param name="x">The previous <see cref="T:AGI.Foundation.Time.JulianDate" /> sample value.</param>
      <returns>
            A suggestion for the <see cref="T:AGI.Foundation.Time.JulianDate" /> sample value, or <paramref name="x" /> if this function has no suggestion.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CachingMotionEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CalculationContext">
      <summary>
            The context in which calculations are performed.  This holds a number of facets which
            describe the problem.  Facets can include things like central bodies and leap seconds.  To
            use a facet, call the facet's static method that returns the context.  Avoid calling 
            <see cref="M:AGI.Foundation.Infrastructure.CalculationContext.GetFacet(System.Int32)" /> directly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContext.#ctor">
      <summary>
            Initializes a new calculation context with default facets.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContext.#ctor(AGI.Foundation.Infrastructure.CalculationContext,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContext.AddFacet(System.Int32,AGI.Foundation.Infrastructure.CalculationContextFacet)">
      <summary>
            Adds a facet to the context.
            </summary>
      <param name="facetId">The Id of the facet to add.</param>
      <param name="facet">The facet to add.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="facetId" /> has not been allocated to any facet type.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CalculationContext.CalculationContextStorageStrategy">
      <summary>
            Gets or sets the strategy that is used to store calculation contexts.  The default strategy
            ensures that each thread has its own context.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContext.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CalculationContext.DefaultForNewContexts">
      <summary>
            Gets or sets the calculation context to use for contexts that do not yet have a calculation
            context.  When using the default <see cref="P:AGI.Foundation.Infrastructure.CalculationContext.CalculationContextStorageStrategy" />, a context
            is a thread so this property specifies the calculation context that will be used for new
            threads that do not yet have a <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContext.GetFacet(System.Int32)">
      <summary>
            Gets the facet with the given Id.
            </summary>
      <param name="facetId">The Id of the facet to get.</param>
      <returns>The requested facet, or null if that facet does not currently exist in the context.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContext.GetNextFacetId(AGI.Foundation.Infrastructure.CreateCalculationContextFacetCallback)">
      <summary>
            Gets the next available facet ID.  Each time this method is called a unique ID is returned.
            It is safe to call this method from multiple threads simultaneously.
            </summary>
      <param name="creationCallback">A callback to use to create a default instance of this facet.</param>
      <returns>The next facet ID.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CalculationContext.Instance">
      <summary>
            Gets or sets the current calculation context.
            By default, each thread has its own context.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CalculationContext.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CalculationContextFacet">
      <summary>
            A facet of a <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContextFacet.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContextFacet.#ctor(AGI.Foundation.Infrastructure.CalculationContextFacet,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContextFacet.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.CalculationContextFacet.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CalculationContextFacet.UseInCurrentContext">
      <summary>
      Adds this instance to the current context, making it the official instance of this
      facet type in the context.
    </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ChildrenExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> which can provide a list of children 
            for a given <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" />.
            These children can either be separate objects which are related to
            the parent or subcomponents which provide completely separate sets
            of services in conjunction with the parent.  For example,
            a spacecraft (parent) may have several sensors (children) which
            are each located and pointed separately with respect to the spacecraft.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.#ctor(AGI.Foundation.Infrastructure.ChildrenExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.#ctor(System.Collections.Generic.IEnumerable{System.IServiceProvider})">
      <summary>
            Initializes a new instance based on a collection of children.
            </summary>
      <param name="children">A collection of the children of the Owner of this extension.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ChildrenExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ChildrenExtension.Children">
      <summary>
            Gets the collection of children for the owner of this extension.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ChildrenExtension.Descendants">
      <summary>
            Gets the collection of all descendants for the owner of this extension.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ChildrenExtension.FindDescendents(System.IServiceProvider)">
      <summary>
            Finds the descendents of a given object that has <see cref="T:AGI.Foundation.Infrastructure.IChildrenService" />.
            </summary>
      <param name="owner">The owner of the <see cref="T:AGI.Foundation.Infrastructure.IChildrenService" />.</param>
      <returns>An enumerable list of the descendents.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CollectionAlgorithms">
      <summary>
            Contains algorithms that operate on collections.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
      <summary>
            Uses a binary search algorithm to locate a specific element in the sorted
            <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="item">The item to find.</param>
      <typeparam name="T">The type of item in the collection.</typeparam>
      <returns>
            The zero-based index of item in the sorted IList, if <paramref name="item" /> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that is larger than
            <paramref name="item" /> or, if there is no larger element, the bitwise complement of
            <see cref="P:System.Collections.Generic.ICollection`1.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Uses a binary search algorithm to locate a specific element in the sorted
            <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="item">The item to find.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</param>
      <typeparam name="T">The type of item in the collection.</typeparam>
      <returns>
            The zero-based index of item in the sorted IList, if <paramref name="item" /> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that is larger than
            <paramref name="item" /> or, if there is no larger element, the bitwise complement of
            <see cref="P:System.Collections.Generic.ICollection`1.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
      <summary>
            Uses a binary search algorithm to locate a specific element in the sorted
            <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="item">The item to find.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</param>
      <param name="startIndex">The index of the first item to consider in the search.</param>
      <param name="length">The number of items to consider in the search, starting with <paramref name="startIndex" />.</param>
      <typeparam name="T">The type of item in the collection.</typeparam>
      <returns>
            The zero-based index of item in the sorted IList, if <paramref name="item" /> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that is larger than
            <paramref name="item" /> or, if there is no larger element, the bitwise complement of
            <see cref="P:System.Collections.Generic.ICollection`1.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.BinarySearch``2(System.Collections.Generic.IList{``0},``1,AGI.Foundation.Infrastructure.CollectionAlgorithms.ComparisonOfDifferentTypes{``0,``1})">
      <summary>
            Uses a binary search algorithm to locate a specific element in the sorted
            <see cref="T:System.Collections.Generic.IList`1" />.  The element to search for can be a different type from the items
            in the collection.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="item">The item to find.</param>
      <param name="comparer">The comparison to use to compare items in the collection to the <paramref name="item" /> to search for.</param>
      <typeparam name="TListItem">The type of item in the collection.</typeparam>
      <typeparam name="TMatchItem">The type of item to search for.</typeparam>
      <returns>
            The zero-based index of item in the sorted IList, if <paramref name="item" /> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that is larger than
            <paramref name="item" /> or, if there is no larger element, the bitwise complement of
            <see cref="P:System.Collections.Generic.ICollection`1.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.BinarySearch``2(System.Collections.Generic.IList{``0},``1,AGI.Foundation.Infrastructure.CollectionAlgorithms.ComparisonOfDifferentTypes{``0,``1},System.Int32,System.Int32)">
      <summary>
            Uses a binary search algorithm to locate a specific element in the sorted
            <see cref="T:System.Collections.Generic.IList`1" />.  The element to search for can be a different type from the items
            in the collection.
            </summary>
      <param name="collection">The collection to search.</param>
      <param name="item">The item to find.</param>
      <param name="comparer">The comparison to use to compare items in the collection to the <paramref name="item" /> to search for.</param>
      <param name="startIndex">The index of the first item to consider in the search.</param>
      <param name="length">The number of items to consider in the search, starting with <paramref name="startIndex" />.</param>
      <typeparam name="TListItem">The type of item in the collection.</typeparam>
      <typeparam name="TMatchItem">The type of item to search for.</typeparam>
      <returns>
            The zero-based index of item in the sorted IList, if <paramref name="item" /> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that is larger than
            <paramref name="item" /> or, if there is no larger element, the bitwise complement of
            <see cref="P:System.Collections.Generic.ICollection`1.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.CreateJaggedDoubleArray(System.Int32,System.Int32)">
      <summary>
            Creates a two-dimensional, jagged double array of the specified dimensions.
            </summary>
      <param name="n">The dimension of the outer array.</param>
      <param name="m">The dimension of the inner array.</param>
      <returns>The new jagged array.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CollectionAlgorithms.Reverse``1(System.Collections.Generic.IList{``0})">
      <summary>
            Reverses the sequences of elements in a collection.
            </summary>
      <param name="collection">The collection to reverse.</param>
      <typeparam name="T">The type of the element in the collection to reverse.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CollectionAlgorithms.ComparisonOfDifferentTypes`2">
      <summary>
            Represents a method that compares two objects of different types.
            </summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <typeparam name="T1">The type of the first object to compare.</typeparam>
      <typeparam name="T2">The type of the second object to compare.</typeparam>
      <returns>
            Less than zero if <paramref name="x" /> is less than <paramref name="y" />, greater than zero if
            <paramref name="x" /> is greater than <paramref name="y" />, and zero if <paramref name="x" />
            equals <paramref name="y" />.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CopyContext">
      <summary>
            A context that identifies a complete copy operation.  It is used to map old references to new references when
            doing a deep copy of a hierarchy of objects.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.AddObjectMapping``1(``0,``0)">
      <summary>
            Adds a mapping between an old object reference and a new one. The default implementation of 
            <see cref="M:AGI.Foundation.Infrastructure.CopyContext.UpdateReference``1(``0)" /> will substitute
            <paramref name="newObject" /> everywhere it encounters <paramref name="oldObject" />.
            </summary>
      <param name="oldObject">The old object reference.</param>
      <param name="newObject">The new object reference.</param>
      <typeparam name="T">The type of object to map.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.ClearObjectMapping">
      <summary>
            Clears the list of mappings that has been created with calls to <see cref="M:AGI.Foundation.Infrastructure.CopyContext.AddObjectMapping``1(``0,``0)" />. This is
            useful if you want to reuse a <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> instance for a separate copy operation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.Clone``1(``0)">
      <summary>
            Copies the specified object using the <see cref="T:AGI.Foundation.Infrastructure.ICloneWithContext" /> interface or the 
            <see cref="T:System.ICloneable" /> interface, with a preference on 
            <see cref="T:AGI.Foundation.Infrastructure.ICloneWithContext" />.
            </summary>
      <param name="oldObject">The object to clone.</param>
      <typeparam name="T">The type of the object to clone.</typeparam>
      <returns>The newly-cloned object.</returns>
      <exception cref="T:System.InvalidOperationException">
            The object does not implement <see cref="T:AGI.Foundation.Infrastructure.ICloneWithContext" /> or 
            <see cref="T:System.ICloneable" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.CloneIfNotMapped``1(``0)">
      <summary>
            Looks for a mapping for this object that was added with <see cref="M:AGI.Foundation.Infrastructure.CopyContext.AddObjectMapping``1(``0,``0)" />.  If one is found,
            the object to which the specified one is mapped is returned.  If one is not found, this method clones the 
            given object by calling <see cref="M:AGI.Foundation.Infrastructure.CopyContext.Clone``1(``0)" />. Derived classes can override this default behavior.
            </summary>
      <param name="oldObject">The old object reference for which to look for a mapping or clone.</param>
      <typeparam name="T">The type of the object to clone.</typeparam>
      <returns>
            The object that the specified object is mapped to, or a cloned object if the specified object was not
            mapped.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The object does not implement <see cref="T:AGI.Foundation.Infrastructure.ICloneWithContext" /> or 
            <see cref="T:System.ICloneable" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.GetObjectMapping``1(``0)">
      <summary>
            Gets the mapping for the specified object.
            </summary>
      <param name="oldObject">The old object reference for which to look for a mapping.</param>
      <typeparam name="T">The type of object to map.</typeparam>
      <returns>
            The object that the specified object is mapped to, or null if the specified object is not mapped.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyContext.UpdateReference``1(``0)">
      <summary>
            Updates a given reference, returning a reference to use in its place.  The default implementation of this
            method looks for a mapping for this object that was added with <see cref="M:AGI.Foundation.Infrastructure.CopyContext.AddObjectMapping``1(``0,``0)" />.  If one is
            found, the object to which the specified one is mapped is returned.  If one is not found, this method
            returns the object that was passed to it.  Derived classes can override this default behavior.
            </summary>
      <param name="oldObject">The old reference to update.</param>
      <typeparam name="T">The type of the object reference.</typeparam>
      <returns>The updated reference.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CopyForAnotherThread">
      <summary>
            Enables copying of <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> objects for use in another thread.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyForAnotherThread.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyForAnotherThread.Copy``1(``0)">
      <summary>
            Copies an object for use in another thread.
            </summary>
      <param name="oldObject">The object to copy.</param>
      <typeparam name="T">The type of the object to copy.</typeparam>
      <returns>
            A copy of <paramref name="oldObject" /> that can be used simultaneously with <paramref name="oldObject" />from
            two different threads.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.CopyForAnotherThread.UpdateReference``1(``0)">
      <summary>
            Updates a given reference, returning a reference to use in its place.
            </summary>
      <param name="oldObject">The old reference to update.</param>
      <typeparam name="T">The type of the object reference.</typeparam>
      <returns>The updated reference.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.CreateCalculationContextFacetCallback">
      <summary>
            A delegate for a function that creates a <see cref="T:AGI.Foundation.Infrastructure.CalculationContextFacet" />.
            </summary>
      <returns>The created facet.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.DefinitionalObject">
      <summary>
            The base class for all definitional objects.  A definitional object has a few characteristics:
            <list type="bullet"><item>
                It can be made read-only by calling the <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> method.  Attempts to modify a frozen
                object will result in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </item><item>
                It can be copied to a user-controllable depth using the <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Clone(AGI.Foundation.Infrastructure.CopyContext)" /> method.
            </item><item>
                It can be compared to another definitional object to determine if both are defined
                equivalently by calling the <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.IsSameDefinition(System.Object)" /> method.  Definitional objects also
                have a hash code based on their definition that can be retrieved by calling
                <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode" />.  This hash code is guaranteed not to change during
                the lifetime of the object, even if properties of the object change.  As a result, not
                all equivalent objects will have the same hash code, but objects that are <em>created</em>
                in the same way <em>will</em> have the same hash code.  This is useful in many situations, and
                is better than the alternative of allowing an object to get lost in a dictionary when its
                hash code changes.
            </item><item>
                It can safely be used from multiple threads simultaneously as long as none of the threads
                are making modifications to the object.
            </item></list></summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.#ctor(AGI.Foundation.Infrastructure.DefinitionalObject,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.AreSameDefinition(AGI.Foundation.Infrastructure.IEquatableDefinition,System.Object)">
      <summary>
            Determines if two objects have the same definition or are both null.
            </summary>
      <param name="first">The first object, which may be null.</param>
      <param name="second">The second object, which may be null.</param>
      <returns>true if the two objects have the same definition, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.AreSameDefinition(System.Boolean,System.Boolean)">
      <summary>
            Determines if two booleans have the same definition.  This overload simply checks equality and is provided for convenience.
            </summary>
      <param name="first">The first boolean.</param>
      <param name="second">The second boolean.</param>
      <returns>true if the two booleans have the same definition, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.AreSameDefinition(System.Double,System.Double)">
      <summary>
            Determines if two doubles have the same definition.  This overload simply checks equality and is provided for convenience.
            </summary>
      <param name="first">The first double.</param>
      <param name="second">The second double.</param>
      <returns>true if the two doubles have the same definition, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.AreSameDefinition(System.Int32,System.Int32)">
      <summary>
            Determines if two integers have the same definition.  This overload simply checks equality and is provided for convenience.
            </summary>
      <param name="first">The first integer.</param>
      <param name="second">The second integer.</param>
      <returns>true if the two integers have the same definition, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.AreSameDefinition(System.Object,System.Object)">
      <summary>
            Determines if two objects have the same definition or are both null.
            </summary>
      <param name="first">The first object, which may be null.</param>
      <param name="second">The second object, which may be null.</param>
      <returns>true if the two objects have the same definition, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.CollectionItemsAreSameDefinition``1(AGI.Foundation.Time.TimeIntervalCollection{``0},AGI.Foundation.Time.TimeIntervalCollection{``0})">
      <summary>
            Determines if two interval collections contain items with the same definition and in the same order,
            or are both null.
            </summary>
      <param name="first">The first collection, which may be null.</param>
      <param name="second">The second collection, which may be null.</param>
      <typeparam name="T">The type of the data in the interval collections.</typeparam>
      <returns>true if the two collections contain items with the same definition and in the
            same order, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.CollectionItemsAreSameDefinition``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines if two collections contain items with the same definition and in the same order,
            or are both null.
            </summary>
      <param name="first">The first collection, which may be null.</param>
      <param name="second">The second collection, which may be null.</param>
      <typeparam name="T">The type of the items in the collections.</typeparam>
      <returns>true if the two collections contain items with the same definition and in the
            same order, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.DictionaryItemsAreSameDefinition``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
      <summary>
            Determines if two dictionaries contain items with the same definition, or are both null.
            </summary>
      <param name="first">The first dictionary, which may be null.</param>
      <param name="second">The second dictionary, which may be null.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>
            true if the two dictionaries contain items with the same definition, otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze">
      <summary>
            Freezes this object.  Further attempts to modify it will result
            in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Computes a hash code from the items in an enumerable collection.  The hash code computed is order dependent.
            That is, another collection with the same items in a different order will have a different hash code.
            </summary>
      <param name="collection">The collection containing the items for which to compute the hash code.</param>
      <typeparam name="T">The type of item in the collection.</typeparam>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode">
      <summary>
        Gets a hash code representing the definition of this object.
      </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode(AGI.Foundation.Infrastructure.IEquatableDefinition)">
      <summary>
            Gets a hash code safely.  If the specified object is null, a valid hash code is still returned.
            </summary>
      <param name="o">The object for which to obtain the hash code.</param>
      <returns>The hash code of the object, or a default value if <paramref name="o" /> is null.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode(System.Boolean)">
      <summary>
            Gets a hash code safely.  This overload simply calls <see cref="M:System.Boolean.GetHashCode" /> and is provided for convenience.
            </summary>
      <param name="o">The boolean for which to obtain the hash code.</param>
      <returns>The hash code of the boolean.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode(System.Double)">
      <summary>
            Gets a hash code safely.  This overload simply calls <see cref="M:System.Double.GetHashCode" /> and is provided for convenience.
            </summary>
      <param name="o">The double for which to obtain the hash code.</param>
      <returns>The hash code of the double.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode(System.Int32)">
      <summary>
            Gets a hash code safely.  This overload simply calls <see cref="M:System.Int32.GetHashCode" /> and is provided for convenience.
            </summary>
      <param name="o">The integer for which to obtain the hash code.</param>
      <returns>The hash code of the integer.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDefinitionHashCode``1(``0)">
      <summary>
            Gets a hash code safely.  If the specified object is null, a valid hash code is still returned.
            </summary>
      <param name="o">The object for which to obtain the hash code.</param>
      <typeparam name="T">The type of <paramref name="o" />.</typeparam>
      <returns>The hash code of the object, or a default value if <paramref name="o" /> is null.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.GetDictionaryHashCode``2(System.Collections.Generic.Dictionary{``0,``1})">
      <summary>
            Computes a hash code from the items in a dictionary.
            </summary>
      <param name="dictionary">The dictionary containing the items for which to compute the hash code.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.DefinitionalObject.IsFrozen">
      <summary>
            Gets a value indicating whether this object is frozen.  A frozen object cannot be modified and an
            <see cref="T:AGI.Foundation.ObjectFrozenException" /> will be thrown if an attempt is made to do so.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.IsSameDefinition(System.Object)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObject.ThrowIfFrozen">
      <summary>
            Throws <see cref="T:AGI.Foundation.ObjectFrozenException" /> if this object <see cref="P:AGI.Foundation.Infrastructure.DefinitionalObject.IsFrozen" />.
            This method should be called from any method or property that modifies this object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObject" /> objects.
            </summary>
      <typeparam name="T">The <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObject" /> type.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.#ctor(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.#ctor(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0},AGI.Foundation.Infrastructure.CopyContext,System.Boolean)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <param name="copyContainedObjects">Indicates whether objects in the collection should be copied to a new instance.</param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance wrapping an existing list.
            </summary>
      <param name="list">The list to wrap.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the elements of the specified collection to the end of the DefinitionalObjectCollection.
            </summary>
      <param name="values">The collection whose elements should be added to the end of the DefinitionalObjectCollection.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1" /></summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.Freeze">
      <summary>
            Freezes this object.  Further attempts to modify it will result
            in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.GetDefinitionHashCode">
      <summary>
        Gets a hash code representing the definition of this object.
      </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts an element into the <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.  The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="index" /> is less than
            zero, or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.IsFrozen">
      <summary>
            Gets a value indicating whether this object is frozen.  A frozen object cannot be modified and an
            <see cref="T:AGI.Foundation.ObjectFrozenException" /> will be thrown if an attempt is made to do so.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.IsSameDefinition(System.Object)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="index" /> is less than
            zero, or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the element at the specified <paramref name="index" />.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.  The value can be null
            for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="index" /> is less than
            zero, or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.ThrowIfFrozen">
      <summary>
            Throws <see cref="T:AGI.Foundation.ObjectFrozenException" /> if this object <see cref="P:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.IsFrozen" />.
            This method should be called from any method or property that modifies this object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.DependencyEnumerator">
      <summary>
            Enumerates the dependencies of an object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.DependencyEnumerator" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)">
      <summary>
            Called by the object for each of its dependencies.
            </summary>
      <param name="dependency">The dependency being enumerated.</param>
      <typeparam name="T">The type of the dependency being enumerated.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.EnumerateAnyObject(System.Object)">
      <summary>
            Called by the object for each of its dependencies.
            </summary>
      <param name="dependency">The dependency being enumerated.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.EnumerateAnyObjectCollection(System.Collections.IEnumerable)">
      <summary>
            Calls <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each of the objects in an enumerable list.
            This is convenient when an object's dependencies are already in a list.
            </summary>
      <param name="dependencies">An enumerable list of dependencies.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.EnumerateCollection``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Calls <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each of the <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObject" /> objects
            in an enumerable list.  This is convenient when an object's dependencies are already in a list.
            </summary>
      <param name="dependencies">An enumerable list of dependencies.</param>
      <typeparam name="T">The type of the dependencies being enumerated.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.EnumerateDefinitionalObject(System.Object)">
      <summary>
            Called by the object for each of its dependencies that are <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObject" /> types.
            </summary>
      <param name="dependency">The <see cref="T:AGI.Foundation.Infrastructure.DefinitionalObject" /> being enumerated.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.DependencyEnumerator.EnumerateNonDefinitionalObject(System.Object)">
      <summary>
            Called by the object for each of its dependencies.
            </summary>
      <param name="dependency">The dependency being enumerated.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.EndianBitConverter">
      <summary>
        <see cref="T:System.BitConverter" /> assumes that the byte arrays given to it are always in 
            the system's native byte order.  If you want to convert bytes that come from a file 
            that is always in the same byte order regardless of the system's endianness, this class will 
            do the byte reordering for you.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.EndianBitConverter.BigEndian">
      <summary>
            Obtain an <see cref="T:AGI.Foundation.Infrastructure.EndianBitConverter" /> that assumes all bytes are in Big Endian byte order.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.EndianBitConverter.LittleEndian">
      <summary>
            Obtain an <see cref="T:AGI.Foundation.Infrastructure.EndianBitConverter" /> that assumes all bytes are in Little Endian byte order.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.EvaluatorHelper">
      <summary>
            A collection of methods that are helpful when writing evaluators.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.AvailabilityIntervals(AGI.Foundation.Time.IAvailability)">
      <summary>
            Determines availability for a specified evaluator.
            </summary>
      <param name="evaluator">The evaluator.</param>
      <returns>The intervals when the evaluator is available, or <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" /> if <paramref name="evaluator" /> is null</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.AvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.IAvailability)">
      <summary>
            Determines availability for a specified evaluator.
            </summary>
      <param name="consideredIntervals">
            The intervals over which availability information is needed.  Note that the returned availability
            intervals may indicate availability outside of these intervals of consideration.
            </param>
      <param name="evaluator">The evaluator.</param>
      <returns>The intervals when the evaluator is available, or <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" /> if <paramref name="evaluator" /> is null</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.AvailabilityIntervals``1(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection{``0})">
      <summary>
            Computes availability intervals as the intersection of the availability of each evaluator in
            a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" />.
            </summary>
      <param name="consideredIntervals">
            The intervals over which availability information is needed.  Note that the returned availability
            intervals may indicate availability outside of these intervals of consideration.
            </param>
      <param name="evaluators">The list of evaluators.</param>
      <typeparam name="T">The type of evaluator in the list.</typeparam>
      <returns>The availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.AvailabilityIntervals``1(AGI.Foundation.Time.TimeIntervalCollection,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Computes availability intervals as the intersection of the availability of each evaluator in
            an enumerable list.
            </summary>
      <param name="consideredIntervals">
            The intervals over which availability information is needed.  Note that the returned availability
            intervals may indicate availability outside of these intervals of consideration.
            </param>
      <param name="evaluators">The list of evaluators.</param>
      <typeparam name="T">The type of evaluator in the list.</typeparam>
      <returns>The availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.AvailabilityIntervals``1(AGI.Foundation.Time.TimeIntervalCollection{``0})">
      <summary>
            Computes availability intervals as the intersection of the availability of each evaluator in
            a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" />.
            </summary>
      <param name="evaluators">The list of evaluators.</param>
      <typeparam name="T">The type of evaluator in the list.</typeparam>
      <returns>The availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.AvailabilityIntervals``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Computes availability intervals as the intersection of the availability of each evaluator in
            an enumerable list.
            </summary>
      <param name="evaluators">The list of evaluators.</param>
      <typeparam name="T">The type of evaluator in the list.</typeparam>
      <returns>The availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.CollectionsAreSame``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
      <summary>
            Determines if two collections are the same.  To be considered the same,
            both collections must have the same number of elements and each element in the first collection
            must be equal to the object at the same position in the second collection.
            </summary>
      <param name="left">The first collection of elements.</param>
      <param name="right">The second collection of elements.</param>
      <typeparam name="T">The type of the elements.</typeparam>
      <returns>true if the collections are the same, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.Dispose``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
            A helper method to use to dispose of a collection of evaluators.
            </summary>
      <param name="collection">A collection of evaluators.</param>
      <param name="disposing">A flag indicating whether to dispose of the evaluators.</param>
      <typeparam name="T">The type of evaluator in the collection.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.EvaluatorCollectionIsThreadSafe``1(AGI.Foundation.Time.TimeIntervalCollection{``0})">
      <summary>
            Determines if every evaluator in a time interval collection is thread safe.
            </summary>
      <param name="collection">The collection.</param>
      <typeparam name="T">The type of evaluator.</typeparam>
      <returns>true if every evaluator in the collection is thread safe, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.EvaluatorCollectionIsThreadSafe``1(System.Collections.Generic.IList{``0})">
      <summary>
            Determines if every evaluator in a collection is thread safe.
            </summary>
      <param name="collection">The collection.</param>
      <typeparam name="T">The type of evaluator.</typeparam>
      <returns>true if every evaluator in the collection is thread safe, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.EvaluatorCollectionIsTimeVarying``1(System.Collections.Generic.IList{``0})">
      <summary>
            Determines if any of the evaluators in the collection are time varying.
            </summary>
      <param name="collection">The collection.</param>
      <typeparam name="T">The type of evaluator.</typeparam>
      <returns>true if any evaluator in the collection is time varying, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.IsAvailable(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.IAvailability)">
      <summary>
            Determines availability for a specified evaluator.
            </summary>
      <param name="date">The date at which to determine availability.</param>
      <param name="evaluator">The evaluator.</param>
      <returns>true if <paramref name="evaluator" /> is available, or if it is null.  Otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.IsAvailable``1(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.TimeIntervalCollection{``0})">
      <summary>
            Determines availability from the availability of each evaluator in a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" />.
            </summary>
      <param name="date">The date at which to determine availability.</param>
      <param name="evaluators">The list of evaluators.</param>
      <typeparam name="T">The type of evaluator in the list.</typeparam>
      <returns>true if all evaluators in the collection are available for the given date, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.IsAvailable``1(AGI.Foundation.Time.JulianDate,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines availability from the availability of each evaluator in an enumerable list.
            </summary>
      <param name="date">The date at which to determine availability.</param>
      <param name="evaluators">The list of evaluators.</param>
      <typeparam name="T">The type of evaluator in the list.</typeparam>
      <returns>true if all evaluators in the collection are available for the given date, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.TimeIntervalCollectionIsTimeVarying``1(AGI.Foundation.Time.TimeIntervalCollection{``0})">
      <summary>
            Determines if any of the evaluators in the collection are time varying.
            </summary>
      <param name="collection">The collection.</param>
      <typeparam name="T">The type of evaluator.</typeparam>
      <returns>true if any evaluator in the collection is time varying, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.EvaluatorHelper.UpdateCollectionReferences``1(System.Collections.Generic.IList{``0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Updates the references in the collection using the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
            <see cref="M:AGI.Foundation.Infrastructure.CopyContext.UpdateReference``1(``0)" /> is called for each element in the collection and the
            result is assigned back to the same location in the collection.
            </summary>
      <param name="collection">The collection.</param>
      <param name="context">The context to use to update the references.</param>
      <typeparam name="T">The type of element in the collection.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ExtensibleObject">
      <summary>
            An object that can be extended at run-time with various <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> instances in order to add
            additional properties and behaviors.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.#ctor(AGI.Foundation.Infrastructure.ExtensibleObject,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.#ctor(AGI.Foundation.Infrastructure.ExtensionCollection)">
      <summary>
            Initializes a new instance using a specific instance to hold extensions.
            </summary>
      <param name="extensions">The collection instance in which to hold extensions.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.ExtensibleObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ExtensibleObject.Extensions">
      <summary>
            Gets the collection of extensions attached to this object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObject.GetService(System.Type)">
      <summary>
        Gets the service object of the specified type.
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>
        The found service, or null  if the service does not exist.
      </returns>
      <exception cref="T:System.ArgumentNullException">
        Thrown when the <paramref name="serviceType" /> is null.
      </exception>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ExtensibleObjectCollection">
      <summary>
            A collection of instances that implement <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObjectCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObjectCollection.#ctor(AGI.Foundation.Infrastructure.ExtensibleObjectCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObjectCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{AGI.Foundation.Infrastructure.ExtensibleObject})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObjectCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.ExtensibleObjectCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObjectCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensibleObjectCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ExtensionCollection">
      <summary>
            A collection of extensions to an <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.Infrastructure.ExtensionCollection.Owner" /> property must be set explicitly
            after using this constructor.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.#ctor(AGI.Foundation.Infrastructure.ExtensibleObject)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="owner">The <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" /> that owns this collection and the extensions within it.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.#ctor(AGI.Foundation.Infrastructure.ExtensionCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{AGI.Foundation.Infrastructure.ObjectExtension})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.ExtensionCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.GetByType``1">
      <summary>
            Gets the first extension of the specified type that is in this collection.
            </summary>
      <typeparam name="T">The type of the extension to get.</typeparam>
      <returns>The extension, or null if an extension of the specified type is not contained in this collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.InsertItem(System.Int32,AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
            Inserts an element in the collection at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The element.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the adding an <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> instance to more
            than one <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ExtensionCollection.Owner">
      <summary>
            Gets the owner of this collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ExtensionCollection.SetItem(System.Int32,AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The new element.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the adding an <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> instance to more
            than one <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" />.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.FileStreamFactory">
      <summary>
            A factory that can produce <see cref="T:System.IO.FileStream" /> instances on demand.  This type is used by
            classes that need to work with data from a stream from multiple threads simultaneously.
            They can use it to open the stream in each thread.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The 'path' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The 'mode' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The 'path' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The 'mode' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="access">The 'access' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The 'path' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The 'mode' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="access">The 'access' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="share">The 'share' parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The <paramref name="path" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The <paramref name="mode" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="access">The <paramref name="access" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="share">The <paramref name="share" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="bufferSize">The <paramref name="bufferSize" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The <paramref name="path" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The <paramref name="mode" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="access">The <paramref name="access" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="share">The <paramref name="share" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="bufferSize">The <paramref name="bufferSize" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="useAsync">The <paramref name="useAsync" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The <paramref name="path" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The <paramref name="mode" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="access">The <paramref name="access" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="share">The <paramref name="share" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="bufferSize">The <paramref name="bufferSize" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="options">The <paramref name="options" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The <paramref name="path" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The <paramref name="mode" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="rights">The <paramref name="rights" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="share">The <paramref name="share" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="bufferSize">The <paramref name="bufferSize" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="options">The <paramref name="options" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
      <summary>
            Initializes a new instance of the factory that constructs a new <see cref="T:System.IO.FileStream" /> with
            <see cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)" /> when <see cref="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream" />
            is called.
            </summary>
      <param name="path">The <paramref name="path" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="mode">The <paramref name="mode" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="rights">The <paramref name="rights" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="share">The <paramref name="share" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="bufferSize">The <paramref name="bufferSize" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="options">The <paramref name="options" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
      <param name="fileSecurity">The <paramref name="fileSecurity" /> parameter passed to the <see cref="T:System.IO.FileStream" /> constructor.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenFileStream">
      <summary>
            Opens a new <see cref="T:System.IO.FileStream" />.
            </summary>
      <returns>The opened stream.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FileStreamFactory.OpenStream">
      <summary>
        Opens a new <see cref="T:System.IO.Stream" />.
      </summary>
      <returns>The opened stream.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.FormatConversionCallback`2">
      <summary>
            A delegate to convert a <typeparamref name="T" /> from one format to another.
            </summary>
      <param name="from">
            The instance of <typeparamref name="T" /> to convert.
            </param>
      <param name="targetFormat">
            The <typeparamref name="TFormatType" /> to convert to.
            </param>
      <typeparam name="T">
            The type of object that this delegate converts the format of.
            </typeparam>
      <typeparam name="TFormatType">
            The class of the format object itself.  This can be a base class.
            </typeparam>
      <returns>
            An instance of <typeparamref name="T" /> equivalent to <paramref name="from" />,
            in the new <typeparamref name="TFormatType" /><paramref name="targetFormat" />.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.FormatConverter`2">
      <summary>
            Converts between different formats of a given type, where a format is specified
            as an indexed format object.  This class can chain conversions in cases where a
            direct conversion is not possible.
            </summary>
      <typeparam name="T">
            The type of object that this class converts the format of.
            </typeparam>
      <typeparam name="TFormatType">
            The class of the format object itself.  This can be a base class.
            </typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:AGI.Foundation.Infrastructure.FormatConverter`2" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.Convert(`1,`1,`0)">
      <summary>
            Converts the specified instance from one format to another.
            </summary>
      <param name="from">The source <typeparamref name="TFormatType" />.</param>
      <param name="to">The destination <typeparamref name="TFormatType" />.</param>
      <param name="instance">
            The instance of <typeparamref name="T" /> to convert.
            </param>
      <returns>
            An instance of <typeparamref name="T" /> equivalent to <paramref name="from" />,
            in the new <typeparamref name="TFormatType" /><paramref name="to" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            Thrown when there is no conversion defined from <paramref name="from" /> to 
            <paramref name="to" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.GetConversionCallback(`1,`1)">
      <summary>
            Gets the callback that converts from one format to another.
            </summary>
      <param name="from">The source format.</param>
      <param name="to">The destination format.</param>
      <returns>
            The callback to convert from <paramref name="from" /> to <paramref name="to" />, or null
            if a conversion does not exist.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.GetConversionDistance(`1,`1)">
      <summary>
            Gets the number of intermediate conversions that must be done to convert from
            <paramref name="from" /> to <paramref name="to" />.  For example, if a conversion
            function is defined to directly convert between the types, 1 will be returned.
            If the two types are identical, 0 will be returned.  If no conversion exists
            at all, <see cref="F:System.Int32.MaxValue" /> will be returned.
            </summary>
      <param name="from">The source format.</param>
      <param name="to">The destination format.</param>
      <returns>The number of conversion functions that must be invoked to convert between the formats.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.RegisterConversion(`1,`1,AGI.Foundation.Infrastructure.FormatConversionCallback{`0,`1})">
      <summary>
            Registers a conversion between formats.
            </summary>
      <param name="from">The source format.</param>
      <param name="to">The destination format.</param>
      <param name="conversion">
            A delegate referring to a function to convert from <paramref name="from" /> to 
            <paramref name="to" />.
            </param>
      <exception cref="T:System.ArgumentException">
            Thrown when registering a conversion between identical formats. The parameters 
            <paramref name="from" /> and <paramref name="to" /> cannot be equal.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.RegisterConversion(`1,`1,AGI.Foundation.Infrastructure.FormatConversionCallback{`0,`1},AGI.Foundation.Infrastructure.TryFormatConversionCallback{`0,`1})">
      <summary>
            Registers a conversion between formats.
            </summary>
      <param name="from">The source format.</param>
      <param name="to">The destination format.</param>
      <param name="conversion">
            A delegate referring to a function to convert from <paramref name="from" /> to 
            <paramref name="to" />.
            </param>
      <param name="tryConversion">
            A delegate referring to a function to try converting from 
            <paramref name="from" /> to <paramref name="to" />, returning success or failure.
            </param>
      <exception cref="T:System.ArgumentException">
            Thrown when registering a conversion between identical formats. The parameters 
            <paramref name="from" /> and <paramref name="to" /> cannot be equal.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.FormatConverter`2.TryConvert(`1,`1,`0,`0@)">
      <summary>
            Tries to convert the specified instance from one format to another, returning
            success or failure.
            </summary>
      <param name="from">The source <typeparamref name="TFormatType" />.</param>
      <param name="to">The destination <typeparamref name="TFormatType" />.</param>
      <param name="instance">
            The instance of <typeparamref name="T" /> to convert.
            </param>
      <param name="result">
            
            On return,
            the resulting instance of <typeparamref name="T" />
            equivalent to <paramref name="from" />, in the new 
            <typeparamref name="TFormatType" /><paramref name="to" />.
            </param>
      <returns> 
            true if <paramref name="from" /> could be converted to the
            requested <typeparamref name="TFormatType" /><paramref name="to" />, otherwise
            false.
            </returns>
      <exception cref="T:System.ArgumentException">
            Thrown when there is no conversion defined from <paramref name="from" /> to 
            <paramref name="to" />.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.HashCode">
      <summary>
            Contains static methods for working with hash codes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32,System.Int32)">
      <summary>
            Combines two hash codes.
            </summary>
      <param name="hash1">The first hash code.</param>
      <param name="hash2">The second hash code.</param>
      <returns>The combined hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32,System.Int32,System.Int32)">
      <summary>
            Combines three hash codes.
            </summary>
      <param name="hash1">The first hash code.</param>
      <param name="hash2">The second hash code.</param>
      <param name="hash3">The third hash code.</param>
      <returns>The combined hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Combines four hash codes.
            </summary>
      <param name="hash1">The first hash code.</param>
      <param name="hash2">The second hash code.</param>
      <param name="hash3">The third hash code.</param>
      <param name="hash4">The fourth hash code.</param>
      <returns>The combined hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Combines five hash codes.
            </summary>
      <param name="hash1">The first hash code.</param>
      <param name="hash2">The second hash code.</param>
      <param name="hash3">The third hash code.</param>
      <param name="hash4">The fourth hash code.</param>
      <param name="hash5">The fifth hash code.</param>
      <returns>The combined hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32[])">
      <summary>
            Combines an arbitrary number of hash codes.
            </summary>
      <param name="hashes">The hash codes.</param>
      <returns>The combined hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.FinalizeHash(System.Int32)">
      <summary>
            Finalizes a combined hash code.
            </summary>
      <param name="hashCode">The hash code to finalize.</param>
      <returns>The finalized hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.GetHashCode``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Gets a hash code for the items in the specified sequence.  The hash code is computed by using
            <see cref="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32[])" /> to combine the hash codes of the items in the sequence. If 
            <paramref name="items" /> is null, the returned hash code is zero.
            </summary>
      <param name="items">The sequence of items for which to get the hash code.</param>
      <typeparam name="T">The type of item in the sequence.</typeparam>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.GetHashCode``1(System.Collections.Generic.IEnumerable{``0},AGI.Foundation.Infrastructure.HashCode.GetHashCodeFunction{``0})">
      <summary>
            Gets a hash code for the items in the specified sequence.  The hash code is computed by using
            <see cref="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32[])" /> to combine the hash codes of the items in the sequence. If 
            <paramref name="items" /> is null, the returned hash code is zero.
            </summary>
      <param name="items">The sequence of items for which to get the hash code.</param>
      <param name="hashCodeFunction">
            A function for computing the hash code for a given item in the collection.
            </param>
      <typeparam name="T">The type of item in the sequence.</typeparam>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.GetHashCode(System.Object)">
      <summary>
            Gets a hash code for a specified object, or zero if the object is null.
            </summary>
      <param name="o">The object for which to get the hash code.</param>
      <returns>The hash code of the object, or zero if the object is null.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.GetHashCode(System.String)">
      <summary>
            Gets a hash code for a specified string, or zero if the string is null.
            </summary>
      <param name="s">The string for which to get the hash code.</param>
      <returns>The hash code of the string, or zero if the string is null.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HashCode.GetHashCode``1(``0[])">
      <summary>
            Gets a hash code for the items in the specified array.  The hash code is computed by using
            <see cref="M:AGI.Foundation.Infrastructure.HashCode.Combine(System.Int32[])" /> to combine the hash codes of the items in the array. If the array is null, the
            returned hash code is zero.
            </summary>
      <param name="array">The array for which to get the hash code.</param>
      <typeparam name="T">The type of item in the array.</typeparam>
      <returns>The hash code.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.HashCode.GetHashCodeFunction`1">
      <summary>
            A delegate that obtains a hash code for a given item.
            </summary>
      <param name="item">The item.</param>
      <typeparam name="T">The type of item.</typeparam>
      <returns>A hash code for the given item.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.HierarchicalLogger">
      <summary>
            A simple hierarchical logging mechanism.  Multiple sub-tasks (indicated by a call to
            <see cref="M:AGI.Foundation.Infrastructure.HierarchicalLogger.Push" />) can log simultaneously from different threads and the output will be
            serialized in the log file.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.#ctor(System.IO.TextWriter)">
      <summary>
            Initializes a new instance to log to a specified <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="writer">The stream to which to log.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.#ctor(System.String)">
      <summary>
            Initializes a new instance to log to a specified file.
            </summary>
      <param name="fileName">The name of the file to which to log.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.Pop">
      <summary>
            Finishes logging for this sub-task and writes its output to either the
            log file or its parent sub-task.
            </summary>
      <returns>The logged for the parent sub-task.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.Push">
      <summary>
            Begins a new sub-task.  Multiple sub-tasks can log in parallel and their
            output will be serialized in the log file.  In other words, the log file will contain
            the entire output from one sub-task followed by the entire output from the next sub-task.
            You must call <see cref="M:AGI.Foundation.Infrastructure.HierarchicalLogger.Pop" /> or <see cref="M:AGI.Foundation.Infrastructure.HierarchicalLogger.Dispose" /> on the returned
            instance when the sub-task completes.
            </summary>
      <returns>A new logger than can be used to log data for the sub-task.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.HierarchicalLogger.ReportFunctionExplorerDetails">
      <summary>
            When true, will report details from the Function Explorers as well.  Default is false.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.WriteLine(System.String)">
      <summary>
            Writes a line of text to the log.
            </summary>
      <param name="line">The line to write to the log.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.HierarchicalLogger.WriteLine(System.String,System.Object[])">
      <summary>
            Writes a line of text to the log.
            </summary>
      <param name="line">The line to write to the log, is the dame format as string.Format() would take.</param>
      <param name="arg">List of arguments agreeing with the formatting in <paramref name="line" />.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ICachingEvaluator">
      <summary>
            An interface to an evaluator that caches values between evaluations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ICachingEvaluator.ClearCache">
      <summary>
            Clears any values cached by this evaluator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ICalculationContextStorageStrategy">
      <summary>
            A strategy for getting the current <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" /> instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ICalculationContextStorageStrategy.GetContext">
      <summary>
            Gets the current <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </summary>
      <returns>The calculation context.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ICalculationContextStorageStrategy.SetContext(AGI.Foundation.Infrastructure.CalculationContext)">
      <summary>
            Sets the current <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IChildrenService">
      <summary>
            A service that defines a collection of children for a given parent.
            These children can either be separate objects which are related to
            the parent or subcomponents which provide completely separate sets
            of services in conjunction with the parent.  For example,
            a spacecraft (parent) may have several sensors (children) which
            are each located and pointed separately with respect to the spacecraft.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IChildrenService.Children">
      <summary>
            Gets a collection of children for a given parent.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IChildrenService.Descendants">
      <summary>
            Gets all descendants for a given parent.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ICloneWithContext">
      <summary>
            An interface for an object that can make a copy of itself that is guided by a
            <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> instance.  Objects that implement this interface enable
            a great deal of flexibility in how "deeply" they are copied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ICloneWithContext.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IdentifierExtension">
      <summary>
            An extension that defines a unique identifier for an object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.#ctor">
      <summary>
            Initializes a new instance with a null identifier.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.#ctor(AGI.Foundation.Infrastructure.IdentifierExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.#ctor(System.String)">
      <summary>
            Initializes a new instance with the provided identifier.
            </summary>
      <param name="identifier">The identifier of the object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.IdentifierExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IdentifierExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IdentifierExtension.Identifier">
      <summary>
            Gets or sets the unique identifier of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IEnumerateDependencies">
      <summary>
            An interface to an object that can identify its dependencies.  See <see cref="M:AGI.Foundation.Infrastructure.IEnumerateDependencies.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)" /> for
            more information on implementing this interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IEnumerateDependencies.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
            Enumerates the dependencies of this object by calling
            <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" />
             
            for each object that this object directly depends upon.
            </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IEquatableDefinition">
      <summary>
            An interface to an object that can compare its definition to other objects.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IEquatableDefinition.GetDefinitionHashCode">
      <summary>
        Gets a hash code representing the definition of this object.
      </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IEvaluatorParameter`1">
      <summary>
            A placeholder for a parameter within an evaluator.
            </summary>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IEvaluatorParameter`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IFreezable">
      <summary>
            An interface to an object that can be frozen such that no further changes to the object can be made.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.IFreezable.Freeze">
      <summary>
            Freezes this object.  Further attempts to modify it will result
            in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IFreezable.IsFrozen">
      <summary>
            Gets a value indicating whether this object is frozen.  A frozen object cannot be modified and an
            <see cref="T:AGI.Foundation.ObjectFrozenException" /> will be thrown if an attempt is made to do so.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IIdentifierService">
      <summary>
            A service that defines a unique identifier for an object.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IIdentifierService.Identifier">
      <summary>
            Gets the unique identifier of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IIndexedFormat">
      <summary>
            This interface must be implemented on any format type used with the
            <see cref="T:AGI.Foundation.Infrastructure.FormatConverter`2" /> class.  It allows efficient lookup of conversions.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IIndexedFormat.Index">
      <summary>
            Gets the index associated the format.  All formats used with a specific
            <see cref="T:AGI.Foundation.Infrastructure.FormatConverter`2" />  instance must have unique, sequential indices.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IIsTimeVarying">
      <summary>
            An interface to an object that can specify whether or not it varies with time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IIsTimeVarying.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.INameService">
      <summary>
            A service that provides the name to either a platform or link.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.INameService.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IParentService">
      <summary>
            A service that identifies the parent of this object.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IParentService.Parent">
      <summary>
            Gets the parent of this object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IPlaceHolderService">
      <summary>
            A service that denotes this object as a place holder 
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.IThreadAware">
      <summary>
            An interface to an instance that is thread-aware.  A thread-aware instance can report
            whether or not its instance methods are thread safe.  It also offers the option to make
            a copy of itself that can simultaneously be used with this instance from two different
            threads.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ObjectExtension">
      <summary>
            The base class for extensions that can be added at run-time to <see cref="T:AGI.Foundation.Infrastructure.ExtensibleObject" /> instances in order to
            give them additional properties and behaviors.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.#ctor(AGI.Foundation.Infrastructure.ObjectExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ObjectExtension.GetService(System.Type)">
      <summary>
        Gets the service object of the specified type.
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>
        The found service, or null  if the service does not exist.
      </returns>
      <exception cref="T:System.ArgumentNullException">
        Thrown when the <paramref name="serviceType" /> is null.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner">
      <summary>
            Gets the owner of this extension.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterAction">
      <summary>
            Indicates the action taken by the <see cref="T:AGI.Foundation.EvaluatorGroup" /> when an evaluator is
            parameterized with a parameter on which it does not actually depend
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.ParameterAction.ThrowForAllSpecialCases">
      <summary>
            Indicates that both unused and extra parameters are treated as an error.  If an evaluator is parameterized
            with more or less parameters than it actually uses, an exception is thrown.  This is the
            default.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.ParameterAction.AllowSurplusParameters">
      <summary>
            Indicates that unused parameters are allowed.  If an evaluator is parameterized with
            more parameters than it actually uses, the unused parameters are simply ignored.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.ParameterAction.AllowMissingParameters">
      <summary>
            Indicates that an evaluator can be parameterized with fewer parameters than the evaluator depends on.
            Use this only if you are partially parameterizing an evaluator which will be fully-parameterized later.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterEvaluator`1">
      <summary>
            A placeholder for a parameter in an evaluator.  Rather than computing something itself, this
            parameter evaluator allows the evaluator's parameter to be specified externally.  It is not
            usually necessary to interact with instances of this type directly.  See
            <see cref="M:AGI.Foundation.EvaluatorGroup.Parameterize``2(AGI.Foundation.IEvaluator{``1},AGI.Foundation.Infrastructure.IEvaluatorParameter{``0})" /> 
            for more information.
            </summary>
      <typeparam name="T">The type returned by the evaluator.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.#ctor(AGI.Foundation.Infrastructure.ParameterEvaluator{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.#ctor(`0)">
      <summary>
            Initializes a new instance with the supplied default value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterEvaluator`1.DefaultValue">
      <summary>
            Gets the default value provided by this parameter.  This value is only valid if <see cref="P:AGI.Foundation.Infrastructure.ParameterEvaluator`1.HasDefaultValue" /> is true.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Throws <see cref="T:System.InvalidOperationException" />.  This parameter needs to be
            parameterized using an <see cref="T:AGI.Foundation.EvaluatorGroup" /> before it can be used.
            </summary>
      <param name="date">This parameter is ignored.</param>
      <returns>Does not return</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterEvaluator`1.HasDefaultValue">
      <summary>
            Gets a value indicating if this parameter has a default value and is therefore optional.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterEvaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterEvaluator`1.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1">
      <summary>
            An evaluator that has been parameterized to take no additional parameters.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2">
      <summary>
            An evaluator that has been parameterized with one parameter.
            </summary>
      <typeparam name="TParameter">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.Evaluate(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter">The value of the parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator1`2.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3">
      <summary>
            An evaluator that has been parameterized with two parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator2`3.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4">
      <summary>
            An evaluator that has been parameterized with three parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator3`4.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5">
      <summary>
            An evaluator that has been parameterized with four parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2,`3)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator4`5.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6">
      <summary>
            An evaluator that has been parameterized with five parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2,`3,`4)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <param name="parameter5">The value of the fifth parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedEvaluator5`6.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`1" /> that has been parameterized
            to take no additional parameters.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator`1.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`1" /> that has been parameterized with one parameter.
            </summary>
      <typeparam name="TParameter">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter">The value of the parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.Evaluate(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter">The value of the parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator1`2.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`1" /> that has been parameterized with two parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator2`3.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4">
      <summary>
            An evaluator that has been parameterized with three parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1,`2)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator3`4.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`1" /> that has been parameterized with four parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1,`2,`3)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2,`3)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator4`5.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`1" /> that has been parameterized with five parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1,`2,`3,`4)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <param name="parameter5">The value of the fifth parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2,`3,`4)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <param name="parameter5">The value of the fifth parameter.</param>
      <returns>The result of evaluating with the parameters.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluator5`6.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`2" /> that has been 
            parameterized to take no additional parameters.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType`2.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`2" /> that has been 
            parameterized with one parameter.
            </summary>
      <typeparam name="TParameter">The type of the parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter">The value of the parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.Evaluate(AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter">The value of the parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType1`3.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`2" /> that has been 
            parameterized with two parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType2`4.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`2" /> that has been 
            parameterized with three parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1,`2)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType3`5.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`2" /> that has been 
            parameterized with four parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1,`2,`3)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2,`3)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType4`6.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7">
      <summary>
            A <see cref="T:AGI.Foundation.MotionEvaluator`2" /> that has been 
            parameterized with five parameters.
            </summary>
      <typeparam name="TParameter1">The type of the first parameter.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter.</typeparam>
      <typeparam name="TParameter3">The type of the third parameter.</typeparam>
      <typeparam name="TParameter4">The type of the fourth parameter.</typeparam>
      <typeparam name="TParameter5">The type of the fifth parameter.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <typeparam name="TResultDerivative">The type of the derivatives.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.Dispose">
      <summary>
            Releases any resources associated with this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32,`0,`1,`2,`3,`4)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="order">The order at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <param name="parameter5">The value of the fifth parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.Evaluate(AGI.Foundation.Time.JulianDate,`0,`1,`2,`3,`4)">
      <summary>
            Evaluates this parameterized evaluator.
            </summary>
      <param name="date">The date at which to evaluate.</param>
      <param name="parameter1">The value of the first parameter.</param>
      <param name="parameter2">The value of the second parameter.</param>
      <param name="parameter3">The value of the third parameter.</param>
      <param name="parameter4">The value of the fourth parameter.</param>
      <param name="parameter5">The value of the fifth parameter.</param>
      <returns>The result of evaluating with the parameter.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParameterizedMotionEvaluatorWithDerivativeType5`7.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ParentExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> which can provide a reference to the parent
            of the owner of this extension.
            The parent tends to be an object that has services at a higher level than
            the child or services which are used implicitly to define the child's services.  
            For example, a spacecraft (parent) may have several sensors (children) which
            are each located and pointed separately with respect to the spacecraft (parent).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.#ctor(AGI.Foundation.Infrastructure.ParentExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.#ctor(System.IServiceProvider)">
      <summary>
            Initializes a new instance based on a given parent.
            </summary>
      <param name="parent">The parent object for the owner of this extension.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ParentExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ParentExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.ParentExtension.Parent">
      <summary>
            Gets or sets the parent of the owner of this extension.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ServiceHelper">
      <summary>
            Contains helpful methods for working with services and <see cref="T:System.IServiceProvider" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ServiceHelper.GetService``1(System.IServiceProvider)">
      <summary>
            Gets a service from a given service provider, throwing a <see cref="T:AGI.Foundation.ServiceNotAvailableException" />
            if the service is not available.
            </summary>
      <param name="serviceProvider">The service provider from which to obtain the service.</param>
      <typeparam name="T">The type of service to obtain.</typeparam>
      <returns>The requested service.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ServiceHelper.GetService``1(System.IServiceProvider,System.Boolean)">
      <summary>
            Gets a service from a given service provider.
            </summary>
      <param name="serviceProvider">The service provider from which to obtain the service.</param>
      <param name="throwIfNotAvailable">
            true if this method should throw a <see cref="T:AGI.Foundation.ServiceNotAvailableException" /> if
            the requested service is not available from the service provider.  false if this
            method should simply return null if the service does not exist.
            </param>
      <typeparam name="T">The type of service to obtain.</typeparam>
      <returns>The requested service.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ServiceHelper.GetService``1(System.IServiceProvider,System.String)">
      <summary>
            Gets a service from a given service provider, throwing a <see cref="T:AGI.Foundation.ServiceNotAvailableException" />
            if the service is not available.
            </summary>
      <param name="serviceProvider">The service provider from which to obtain the service.</param>
      <param name="exceptionMessage">An error message to include in the exception if the service is unavailable.</param>
      <typeparam name="T">The type of service to obtain.</typeparam>
      <returns>The requested service.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.StreamFactory">
      <summary>
            The base class for a factory that can produce streams on demand.  This type is used by
            classes that need to work with data from a stream from multiple threads simultaneously.
            They can use it to open the stream in each thread.  Consider using
            <see cref="T:AGI.Foundation.Infrastructure.FileStreamFactory" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.StreamFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.StreamFactory" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.StreamFactory.OpenStream">
      <summary>
        Opens a new <see cref="T:System.IO.Stream" />.
      </summary>
      <returns>The opened stream.</returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.ThreadStaticCalculationContextStorageStrategy">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ICalculationContextStorageStrategy" /> that gets the context from a
            thread static member variable.  Thus, each thread has its own context.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ThreadStaticCalculationContextStorageStrategy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.ThreadStaticCalculationContextStorageStrategy" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ThreadStaticCalculationContextStorageStrategy.GetContext">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" /> for the current thread.
            </summary>
      <returns>The calculation context.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.ThreadStaticCalculationContextStorageStrategy.SetContext(AGI.Foundation.Infrastructure.CalculationContext)">
      <summary>
            Sets the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" /> for the current thread.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.TryFormatConversionCallback`2">
      <summary>
            A delegate to try converting a <typeparamref name="T" /> from one format to
            another.
            </summary>
      <param name="from">
            The instance of <typeparamref name="T" /> to convert.
            </param>
      <param name="targetFormat">
            The <typeparamref name="TFormatType" /> to convert to.
            </param>
      <param name="result">
            
            On return,
            the resulting instance of <typeparamref name="T" />
            equivalent to <paramref name="from" />, in the new 
            <typeparamref name="TFormatType" /><paramref name="targetFormat" />.
            </param>
      <typeparam name="T">
            The type of object that this delegate converts the format of.
            </typeparam>
      <typeparam name="TFormatType">
            The class of the format object itself.  This can be a base class.
            </typeparam>
      <returns>
            true if <paramref name="from" /> could be converted to the
            requested <typeparamref name="TFormatType" /><paramref name="targetFormat" />,
            otherwise false.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.WeakReference`1">
      <summary>
            This class is simple a generic version of the .NET Framework <see cref="T:System.WeakReference" /> type.
            </summary>
      <typeparam name="T">The type of the reference.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.WeakReference`1.#ctor(System.Object,System.Boolean)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="target">The object to track.</param>
      <param name="trackResurrection">
            Indicates when to stop tracking the object. If true, the object is tracked after finalization; if false,
            the object is only tracked until finalization.
            </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.WeakReference`1.#ctor(`0)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="target">The object to track.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.WeakReference`1.Equals(AGI.Foundation.Infrastructure.WeakReference{`0})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.WeakReference`1.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="obj">An object to compare with this object.</param>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.WeakReference`1.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.WeakReference`1.IsAlive">
      <summary>
            Gets an indication whether the object referenced by the current <see cref="T:AGI.Foundation.Infrastructure.WeakReference`1" /> object has been garbage collected.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.WeakReference`1.Target">
      <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:AGI.Foundation.Infrastructure.WeakReference`1" /> object. 
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.WeakReference`1.TrackResurrection">
      <summary>
            Gets an indication whether the object referenced by the current <see cref="T:AGI.Foundation.Infrastructure.WeakReference`1" /> object is
            tracked after it is finalized.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation">
      <summary>
            Used to perform a computation in the background.  This is modeled after
            <see cref="T:System.ComponentModel.BackgroundWorker" />, with a few important differences.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.#ctor">
      <summary>
            Initializes a new instance.  Also captures the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" /> from the
            thread constructing the new instance in order to pass the context to the new thread when
            <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.  To capture the context again
            later, call <see cref="M:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.CaptureCalculationContext" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.AsyncWaitHandle">
      <summary>
            Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for the operation to complete.
            When the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler has finished, this event will be signaled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.CancellationPending">
      <summary>
            Gets a value indicating whether the application has requested cancellation of a background operation. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.CaptureCalculationContext">
      <summary>
            Captures the calculation context of the calling thread.  This is the context that
            will be passed to the new thread when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.  This method cannot
            be called after <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the background computation has already been started. The calculation context
            cannot be captured after this point.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>
            Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.BackgroundCalculation.ReportProgress(System.Int32,System.Object)">
      <summary>
            Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.
            </summary>
      <param name="percentProgress">The percentage, from 0 to 100, of the background operation that is complete.</param>
      <param name="additionalInformation">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.MessageEventArgs">
      <summary>
            Arguments for use with the <see cref="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageReceived" /> event
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageEventArgs.#ctor(System.Object)">
      <summary>
            Creates a new instance of <see cref="T:AGI.Foundation.Infrastructure.Threading.MessageEventArgs" />.
            </summary>
      <param name="message">Message to send to any subscribers of the <see cref="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageReceived" /> event.</param>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.MessageEventArgs.Message">
      <summary>
            Gets the message created as part of the event
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.MessageQueue">
      <summary>
            A message queue used for passing messages between threads
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.#ctor">
      <summary>
            Initializes a new instance of this synchronization context
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.MessageQueue.MaximumQueueLength">
      <summary>
            Gets or sets the maximum number of items that is allowed in the queue.
            If a thread attempts to add an item to a full queue, it will block
            until room is available in the queue.
            </summary>
    </member>
    <member name="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageQueueStarted">
      <summary>
            Event that indicates <see cref="T:AGI.Foundation.Infrastructure.Threading.MessageQueue" /> has started to receive messages. If <see cref="T:AGI.Foundation.Infrastructure.Threading.MessageQueue" /> was
            started with a call to <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInAnotherThread" />, this event will be raised in that other thread.
            </summary>
    </member>
    <member name="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageQueueStopped">
      <summary>
            Event that indicates <see cref="T:AGI.Foundation.Infrastructure.Threading.MessageQueue" /> has been stopped by a call to <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate" />. If <see cref="T:AGI.Foundation.Infrastructure.Threading.MessageQueue" /> was
            started with a call to <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInAnotherThread" />, this event will be raised in that other thread.
            </summary>
    </member>
    <member name="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageReceived">
      <summary>
            Event that indicates a generic message object was received. If <see cref="T:AGI.Foundation.Infrastructure.Threading.MessageQueue" /> was
            started with a call to <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInAnotherThread" />, this event will be raised in that other thread.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Post(System.Object)">
      <summary>
            Adds a generic message that is asynchronously sent to any functions that 
            subscribe to <see cref="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageReceived" />.
            </summary>
      <param name="message">Message to send</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Adds a delegate to the message queue and immediately returns
            </summary>
      <param name="callbackMethod">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Send(System.Object)">
      <summary>
            Adds a generic message to the message queue 
            that is synchronously sent to any functions that subscribe to <see cref="E:AGI.Foundation.Infrastructure.Threading.MessageQueue.MessageReceived" />.
            </summary>
      <param name="message">Message to send</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Adds a delegate to the message queue and waits until all currently
            queued delegates and the recently added delegate are executed before
            returning.
            </summary>
      <param name="callbackMethod">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Start">
      <summary>
            Runs the message queue in the current thread and does not return until
            <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate" /> is called
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInAnotherThread">
      <summary>
            Runs the message queue in a separate thread and immediately returns.  This method calls
            <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInThreadPoolThread" /> or <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInNewThread" /> depending on the
            value of <see cref="P:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.ThreadSource" /> in the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInNewThread">
      <summary>
            Runs the message queue in a newly spawned worker thread and immediately returns. The worker thread 
            will not be terminated until <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate" /> is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInNewThread(System.String)">
      <summary>
            Runs the message queue in a newly spawned worker thread and immediately returns. The worker thread 
            will not be terminated until <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate" /> is called.
            </summary>
      <param name="name">
            The name of the thread.  Naming a thread can make it easier to identify while debugging.
            </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.StartInThreadPoolThread">
      <summary>
            Runs the message queue in a thread pool thread and immediately returns. The worker thread will not
            be released back to the thread pool until <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate" /> is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate">
      <summary>
            Terminates the message queue.  Any messages that are already in the queue when this method
            is called will be processed before the queue is terminated.  This method initiates the termination
            and returns immediately; it does NOT wait for the termination to complete
            before returning.   It is safe to call this method from any thread, including the thread that is
            processing the message queue.  To wait for termination to complete, call <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.TerminateAndWait" />
            instead.  If the queue is not running when this method is called, the termination request will
            still be posted.  That means that queue processing, once restarted, will terminate once it reaches
            this point in the queue.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.TerminateAndWait">
      <summary>
            Terminates the message queue and waits for termination to complete.  Any messages that are already
            in the queue when this method is called will be processed before the queue is terminated.  Unlike
            <see cref="M:AGI.Foundation.Infrastructure.Threading.MessageQueue.Terminate" />, this method does not return until the message queue is terminated.
            This method must not be called from the thread that is running the message queue.  Doing so will
            cause a dead-lock because this method cannot return until the message queue terminates and the
            queue cannot terminate until this method returns.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2">
      <summary>
            A dictionary that maps keys to values and is persistent.  Persistence means that an instance of this type,
            once created, cannot be changed.  Methods like <see cref="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Add(`0,`1)" /> return a new instance
            instead of modifying the one on which they are called.  The new instance shares much of its
            structure with the original, so modifications are still efficient.  This class is useful in
            multithreaded applications.  An instance of this type cannot be created directly.  The
            <see cref="F:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Empty" /> field contains an empty instance with which to start.
            </summary>
      <typeparam name="TKey">The type of the key in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the value in the dictionary.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Add(`0,`1)">
      <summary>
            Adds a specified key/value pair to the dictionary.  If a value with the specified
            key already exists, it is replaced.  This method does not modify the dictionary on
            which it is called but instead returns a new dictionary containing the added element.
            </summary>
      <param name="key">The key of the item to add to the dictionary.</param>
      <param name="value">The value of the item to add to the dictionary.</param>
      <returns>A new persistent dictionary containing the specified key/value pair.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Add(`0,`1,AGI.Foundation.Infrastructure.Threading.PersistentDictionaryAddResult@)">
      <summary>
            Adds a specified key/value pair to the dictionary, and returns a value indicating
            whether the key was newly added to the dictionary or it already existed and the value
            was replaced.  This method does not modify the dictionary on
            which it is called but instead returns a new dictionary containing the added element.
            </summary>
      <param name="key">The key of the item to add to the dictionary.</param>
      <param name="value">The value of the item to add to the dictionary.</param>
      <param name="result">
            
            On return,
            a value indicating whether the key was newly added to the dictionary or it already existed
            and the value was replaced.
            </param>
      <returns>A new persistent dictionary containing the specified key/value pair.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.ContainsKey(`0)">
      <summary>
            Determines if a specified key exists in the dictionary.
            </summary>
      <param name="key">The key to find in the dictionary.</param>
      <returns>true if the key exists in the dictionary; otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Count">
      <summary>
            Gets the number of elements in this dictionary.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Empty">
      <summary>
            An empty dictionary.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.GetEnumerator">
      <summary>
            Gets an enumerator for enumerating over the key/value pairs in the dictionary.
            </summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Item(`0)">
      <summary>
            Gets the value corresponding to the specified key.  Throws <see cref="T:System.Collections.Generic.KeyNotFoundException" />
            if the key does not exist in the dictionary.
            </summary>
      <param name="key">The key to find in the dictionary.</param>
      <returns>The value in the dictionary corresponding to the given <paramref name="key" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Keys">
      <summary>
            Gets a read-only collection of keys in the dictionary.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Remove(`0)">
      <summary>
            Removes an item with the specified key from the dictionary.  This method does not modify
            the instance on which it is called but instead returns a new instance with the element removed.
            If the key does not exist in the dictionary, this method returns the instance on which it is called.
            </summary>
      <param name="key">The key to remove from the dictionary.</param>
      <returns>
            A new instance without the specified <paramref name="key" />, or the same instance on
            which it is called if the key does not exist in the dictionary.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.TryGetValue(`0,`1@)">
      <summary>
            Gets the value in the dictionary corresponding to the given key.
            </summary>
      <param name="key">The key of the item to retrieve from the dictionary.</param>
      <param name="value">
            
            On return,
            the value corresponding to the <paramref name="key" />.
            </param>
      <returns>true if the key was found in the dictionary; otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2.Values">
      <summary>
            Gets a read-only collection of values in the dictionary.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionaryAddResult">
      <summary>
            Indicates the result of adding a key-value pair to a <see cref="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.Threading.PersistentDictionaryAddResult.ExistingKeyNewValue">
      <summary>
            Indicates that the collection already contained the specified key.  The 
            value has been replaced in the returned collection.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.Threading.PersistentDictionaryAddResult.NewKey">
      <summary>
            Indicates that the collection did not previously contain the specified key and it
            has been added.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionaryNode`2">
      <summary>
            A node in a <see cref="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionary`2" />.  This class is not intended to be used
            directly be user code.
            </summary>
      <typeparam name="TKey">The type of the key in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the value in the dictionary.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.PersistentDictionaryNode`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.Threading.PersistentDictionaryNode`2" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.RecurringTask">
      <summary>
            A task that is executed periodically by <see cref="T:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler">
      <summary>
            A scheduler for recurring tasks that attempts to run all of its tasks in
            a fair manner.  The number of threads to be used to run tasks can be specified.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.#ctor">
      <summary>
            Initializes a new instance.  The scheduler uses the number of threads indicated
            by the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.#ctor(System.Int32)">
      <summary>
            Initializes a new instance to use a specified number of threads.
            </summary>
      <param name="numberOfThreads">The number of threads to use to run tasks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value of <paramref name="numberOfThreads" />
            is less than 1.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.AddTask(AGI.Foundation.Time.Duration,AGI.Foundation.Infrastructure.Threading.RecurringTask)">
      <summary>
            Adds a task to be executed on a recurring basis.
            </summary>
      <param name="period">The period at which to execute the task.</param>
      <param name="task">The task to add.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="task" /> is null.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.GetTaskData(AGI.Foundation.Infrastructure.Threading.RecurringTask)">
      <summary>
            Gets a copy of the performance metrics associated with the given recurring task.
            </summary>
      <param name="task">The task to retrieve data for.</param>
      <returns>A copy of the performance metrics associated with the given recurring task.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="task" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> was never added to the scheduler.</exception>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.IsRunning">
      <summary>
            Gets a value indicating if the scheduler in running.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.NumberOfThreads">
      <summary>
            Gets the number of threads used to execute the recurring tasks.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.RemoveTask(AGI.Foundation.Infrastructure.Threading.RecurringTask)">
      <summary>
            Removes a task so that it is no longer executed on a recurring basis.
            </summary>
      <param name="task">The task to remove.</param>
      <returns>The final performance metrics associated with the removed task.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="task" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="task" /> was never added to the scheduler.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.Start">
      <summary>
            Starts running the scheduler.  This method returns once
            <see cref="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.NumberOfThreads" /> threads have been started.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the scheduler is already running.</exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.Stop">
      <summary>
            Stops running the scheduler.  This method does not return
            until all threads have stopped.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the scheduler is not running.</exception>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.TaskCount">
      <summary>
            Gets the number of tasks.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler.Tasks">
      <summary>
            Gets the list of tasks.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics">
      <summary>
            Contains information about the performance of a <see cref="T:AGI.Foundation.Infrastructure.Threading.RecurringTask" />
            being managed by a <see cref="T:AGI.Foundation.Infrastructure.Threading.RecurringTaskScheduler" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.AverageExecutionTime">
      <summary>
            Gets the average execution time of the task.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.IsExecuting">
      <summary>
            Gets a value indicating whether the task is currently executing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.LastFinish">
      <summary>
            Gets the number of ticks in the <see cref="T:System.Diagnostics.Stopwatch" /> timer mechanism
            at the time the task last finished execution.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.NextStart">
      <summary>
            Gets the number of ticks in the <see cref="T:System.Diagnostics.Stopwatch" /> timer mechanism
            at the time the task will next be executed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.Period">
      <summary>
            Gets the period at which the task is executed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.Task">
      <summary>
            Gets the recurring task.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.TimesExecuted">
      <summary>
            Gets the number of times the task has been executed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.RecurringTaskStatistics.TotalTicks">
      <summary>
            Gets the total number of ticks in the <see cref="T:System.Diagnostics.Stopwatch" /> timer mechanism
            that have elapsed while this task was executing.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation">
      <summary>
            Parallelizes calculations across multiple threads.  Most calculations can be parallelized using the
            static methods on this class.  Or, in more advanced scenarios, derive from this class to implement a
            multithreaded calculation.  Calculations are multithreaded according to the
            <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.ContinueExecution">
      <summary>
            Gets or sets a boolean value indicating whether a thread should continue its threaded execution.
            It is the responsibility of derived classes to check this value in their <see cref="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.ExecuteWorker(System.Int32)" />
            method and to stop their execution if it is false.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.ExecuteInOneThread">
      <summary>
            Starts the calculation using the calling thread as the one and only worker thread.
            This method does not return until the calculation is completed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.ExecuteWorker(System.Int32)">
      <summary>
            Implement this method to perform the calculation.  It is called <see cref="P:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.NumberOfThreads" /> times,
            each call in a separate thread.
            </summary>
      <param name="threadNumber">
            The number of the thread, starting at 0 and increasing to <see cref="P:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.NumberOfThreads" /> - 1.
            </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.Finish">
      <summary>
            This method is called after all worker threads have finished executing.
            It Does nothing if not overridden by the derived class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.For``1(System.Int32,System.Int32,``0,AGI.Foundation.ITrackCalculationProgress,AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallback{``0})">
      <summary>
            A 'for' loop that is parallelized among multiple threads according to the
            <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> active in the calling thread.
            The loop behaves as if written as <c>for (int i = start; i &lt; stop; ++i)</c>.
            Inside the <paramref name="body" /> callback, the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> will
            be configured to use only the calling thread for any further parallelizable operations.
            This usually improves performance by putting the parallelism where it is most useful:
            in the 'for' loop itself.  However, if you do wish to parallelize operations invoked
            inside the 'for' loop, you must explicitly set the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            inside the callback.
            </summary>
      <param name="start">The start of the loop.</param>
      <param name="stop">
            The end of the loop.  The body is NOT executed for this value.
            </param>
      <param name="parameter">
            A parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <param name="body">The body of the loop.</param>
      <typeparam name="TParameter">The type of an instance that is passed to the body of the loop.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.For``1(System.Int32,System.Int32,``0,AGI.Foundation.ITrackCalculationProgress,AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallbackWithProgress{``0})">
      <summary>
            A 'for' loop that is parallelized among multiple threads according to the
            <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> active in the calling thread.
            The loop behaves as if written as <c>for (int i = start; i &lt; stop; ++i)</c>.
            Inside the <paramref name="body" /> callback, the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> will
            be configured to use only the calling thread for any further parallelizable operations.
            This usually improves performance by putting the parallelism where it is most useful:
            in the 'for' loop itself.  However, if you do wish to parallelize operations invoked
            inside the 'for' loop, you must explicitly set the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            inside the callback.
            <para>
            The body of the 
            'for' loop is given an <see cref="T:AGI.Foundation.ITrackCalculationProgress" /> instance that can be used to report
            detailed information about the progress of individual loop iterations.  It is not recommended to use
            this overload when looping through a large number of iterations or when detailed information about
            the progress of individual iterations is not required, because there is some overhead to the
            detailed progress reporting.
            </para></summary>
      <param name="start">The start of the loop.</param>
      <param name="stop">
            The end of the loop.  The body is NOT executed for this value.
            </param>
      <param name="parameter">
            A parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <param name="body">The body of the loop.</param>
      <typeparam name="TParameter">The type of an instance that is passed to the body of the loop.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.For``2(System.Int32,System.Int32,``0,``1,AGI.Foundation.ITrackCalculationProgress,AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallback2{``0,``1})">
      <summary>
            A 'for' loop that is parallelized among multiple threads according to the
            <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> active in the calling thread.
            The loop behaves as if written as <c>for (int i = start; i &lt; stop; ++i)</c>.
            Inside the <paramref name="body" /> callback, the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> will
            be configured to use only the calling thread for any further parallelizable operations.
            This usually improves performance by putting the parallelism where it is most useful:
            in the 'for' loop itself.  However, if you do wish to parallelize operations invoked
            inside the 'for' loop, you must explicitly set the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            inside the callback.
            </summary>
      <param name="start">The start of the loop.</param>
      <param name="stop">
            The end of the loop.  The body is NOT executed for this value.
            </param>
      <param name="parameter1">
            The first parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="parameter2">
            The second parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <param name="body">The body of the loop.</param>
      <typeparam name="TParameter1">The type of the first parameter that is passed to the body of the loop.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter that is passed to the body of the loop.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.For``2(System.Int32,System.Int32,``0,``1,AGI.Foundation.ITrackCalculationProgress,AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallbackWithProgress2{``0,``1})">
      <summary>
            A 'for' loop that is parallelized among multiple threads according to the
            <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> active in the calling thread.
            The loop behaves as if written as <c>for (int i = start; i &lt; stop; ++i)</c>.
            Inside the <paramref name="body" /> callback, the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> will
            be configured to use only the calling thread for any further parallelizable operations.
            This usually improves performance by putting the parallelism where it is most useful:
            in the 'for' loop itself.  However, if you do wish to parallelize operations invoked
            inside the 'for' loop, you must explicitly set the <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            inside the callback.
            <para>
            The body of the 
            'for' loop is given an <see cref="T:AGI.Foundation.ITrackCalculationProgress" /> instance that can be used to report
            detailed information about the progress of individual loop iterations.  It is not recommended to use
            this overload when looping through a large number of iterations or when detailed information about
            the progress of individual iterations is not required, because there is some overhead to the
            detailed progress reporting.
            </para></summary>
      <param name="start">The start of the loop.</param>
      <param name="stop">
            The end of the loop.  The body is NOT executed for this value.
            </param>
      <param name="parameter1">
            The first parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="parameter2">
            The second parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <param name="body">The body of the loop.</param>
      <typeparam name="TParameter1">The type of the first parameter that is passed to the body of the loop.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter that is passed to the body of the loop.</typeparam>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.MultithreadSubCalculations">
      <summary>
            Gets or sets a boolean value indicating whether subcalculations should use the current <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />.
            By default, this is false, indicating that the subcalculations will see a 
            <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" /> specifying that further operations be executed in the thread that invoked those operations.
            New threads created for use by the threaded calculation will use the default threading policy that was previously configured by
            calling <see cref="M:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.UseCurrentAsDefault" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.NumberOfThreads">
      <summary>
        Gets the number of threads to be used to perform the calculation.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.Start">
      <summary>
            Starts the threaded calculation.  This method returns immediately after creating the appropriate
            number of threads.  It does not wait for the calculation to be completed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.WaitUntilDone">
      <summary>
            Blocks the calling thread until the calculation has completed.
            If an exception occurs (or has already occurred) in any of the calculation threads, this
            method will throw a <see cref="T:AGI.Foundation.ThreadException" /> wrapping the exception that was thrown
            by the calculation thread.  The actual exception that occurred can be found in the
            <see cref="P:System.Exception.InnerException" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallback`1">
      <summary>
            A delegate representing the body of a multithreaded 'for' loop.
            The execution of the callback will see a <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            with only one thread unless it is explicitly set inside the callback.
            </summary>
      <param name="parameter">
            A parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="i">The index to evaluate.</param>
      <typeparam name="TParameter">The type of an instance that is passed to the body of the loop.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallback2`2">
      <summary>
            A delegate representing the body of a multithreaded 'for' loop.
            The execution of the callback will see a <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            with only one thread unless it is explicitly set inside the callback.
            </summary>
      <param name="parameter1">
            The first parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="parameter2">
            The second parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="i">The index to evaluate.</param>
      <typeparam name="TParameter1">The type of the first parameter passed to the body of the loop.</typeparam>
      <typeparam name="TParameter2">The type of the second parameter passed to the body of the loop.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallbackWithProgress`1">
      <summary>
            A delegate representing the body of a multithreaded 'for' loop, where each iteration
            of the loop intends to provide detailed information about its progress.  This is useful when
            the parallel loop has too few iterations to accurately compute progress as the number of completed
            iterations divided by the total number of iterations.
            The execution of the callback will see a <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            with only one thread unless it is explicitly set inside the callback.
            </summary>
      <param name="parameter">
            A parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="i">The index to evaluate.</param>
      <param name="tracker">The instance to which to report progress.</param>
      <typeparam name="TParameter">The type of an instance that is passed to the body of the loop.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadedCalculation.BodyCallbackWithProgress2`2">
      <summary>
            A delegate representing the body of a multithreaded 'for' loop, where each iteration
            of the loop intends to provide detailed information about its progress.  This is useful when
            the parallel loop has too few iterations to accurately compute progress as the number of completed
            iterations divided by the total number of iterations.
            The execution of the callback will see a <see cref="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy" />
            with only one thread unless it is explicitly set inside the callback.
            </summary>
      <param name="parameter1">
            The first parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="parameter2">
            The second parameter that is passed to the body of the loop.  If this instance implements
            <see cref="T:AGI.Foundation.Infrastructure.IThreadAware" /> and <see cref="P:AGI.Foundation.Infrastructure.IThreadAware.IsThreadSafe" /> returns
            false, a copy of the parameter is made for each thread using
            <see cref="T:AGI.Foundation.Infrastructure.CopyForAnotherThread" />.
            </param>
      <param name="i">The index to evaluate.</param>
      <param name="tracker">The instance to which to report progress.</param>
      <typeparam name="TParameter1">The type of the first instance that is passed to the body of the loop.</typeparam>
      <typeparam name="TParameter2">The type of the second instance that is passed to the body of the loop.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy">
      <summary>
            Specifies how a parallelizable operation should utilize multithreading.  By default, the
            threading policy specifies that parallelizable operations should utilize one thread per logical
            processor on the system, and that the threads should be recruited from the
            <see cref="T:System.Threading.ThreadPool" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.ConfigureToUseAllLogicalProcessors">
      <summary>
            Configures the threading policy so that parallelizable operations use one thread for each
            logical processor on the system.  In some partial-trust environments, in may not be possible
            to determine the number of logical processors.  In that case, the threading policy will
            be configured to use two threads.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.ConfigureToUseCurrentThreadOnly">
      <summary>
            Configures the threading policy so that parallelizable operations are executed using only
            the thread that invoked them.  No additional threads are created.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.NumberOfThreads">
      <summary>
            Gets or sets the number of threads to use to execute parallelizable operations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.ResetCurrentToDefault">
      <summary>
            Resets the current threading policy to the default.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.ThreadSource">
      <summary>
            Gets or sets the source of new threads to be used to execute parallelizable operations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.ThreadingPolicy.UseCurrentAsDefault">
      <summary>
            Sets the current threading policy as the default policy to be used for new threads.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.ThreadSource">
      <summary>
            The source of a thread used to execute a parallelizable operation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.Threading.ThreadSource.ThreadPool">
      <summary>
            The thread is recruited from the <see cref="F:AGI.Foundation.Infrastructure.Threading.ThreadSource.ThreadPool" />.  It is generally much faster
            to recruit threads from the thread pool than to create new ones.  However, if a long-running
            operation monopolizes a thread pool thread, other parts of the application can be negatively impacted.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Infrastructure.Threading.ThreadSource.NewThread">
      <summary>
            The brand new thread is created and used.  This avoids monopolizing a thread pool thread with
            a potentially long-running operation.  However, it is much slower to create new threads than to
            recruit threads from the thread pool.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator">
      <summary>
            An adaptive numerical integrator which uses successive subdivisions of the specified
            step size in order to measure the relative error in order to update the step size.
            <para>
            Note that the <see cref="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Tolerance">Tolerance</see> will affect
            both how accurate the integrator will be as well as how small the step size will be
            to achieve the desired accuracy.  Having a really small tolerance in relation to large
            dependent variables may not be best, since it may drive the stepsize to values near zero
            over the course of the integration when a higher tolerance will still yield accurate results.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.#ctor">
      <summary>
            Initializes a new instance.  Be sure to set the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.SystemOfEquations" /> before integrating.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives)">
      <summary>
            Initializes a new instance. 
            </summary>
      <param name="system">The system of equations to integrate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.#ctor(AGI.Foundation.NumericalMethods.BulirschStoerIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.AdaptStep">
      <summary>
            This method updates the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> to account for error in the state and its derivatives.
            It returns true if the integrator should reintegrate with the updated step size or false if the integrator
            should continue to the next integration step (potentially with a different step size).
            </summary>
      <returns>True if the integrator should reintegrate. False if the integrator should continue to the next step.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Create a copy of this integrator.
            </summary>
      <param name="context">The context in which to create the copy.</param>
      <returns>The copy of this integrator.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.LastNumberOfSubdivisionsUsed">
      <summary>
            Gets the current maximum number of subdivisions used during the last iteration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Reintegrate(System.Double)">
      <summary>
            Repeats the last integration of the differential equations.
            <para>
            When overriding this method, note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.SafetyFactorOne">
      <summary>
            Gets or sets a safety factor used when analyzing roundoff error and determining the new stepsize.
            The equation for the stepsize update is: Hnew = S1 * H * (S2 / Error)^-(2k+1)
            where "H" is the stepsize, "Error" is the roundoff error, and "k" is the iteration index into the 
            <see cref="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Subdivisions" /> array.  The default value is 1/4.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.SafetyFactorTwo">
      <summary>
            Gets or sets a safety factor used when analyzing roundoff error and determining the new stepsize.
            The equation for the stepsize update is: Hnew = S1 * H * (S2 / Error)^-(2k+1)
            where "H" is the stepsize, "Error" is the roundoff error, and "k" is the iteration index into the 
            <see cref="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Subdivisions" /> array.  The default value is 7/10.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.StartNextStep">
      <summary>
            This performs the task of setting the Initial values to the previous Final values prior to taking the next step.
            This method is called prior to integrating the step but not called during re-integration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Subdivisions">
      <summary>
            Gets or sets the set of successive subdivisions used to take steps.  For each
            step the Bulirsch-Stoer integrator takes, it will divide the stepsize according
            to the subdivisions and analyze the error.  If the error doesn't converge, it
            will continue to subdivide until it either converges or decides that the stepsize
            itself is problematic and starts over with a new stepsize.
            <para>
            The default set is derived from the work of Deuflhard: { 2, 4, 6, 8, 10 }
            </para><para>
            When changing the set, make sure to check for stability as having too few or too 
            many subdivisions can change the behavior of the algorithm.
            </para></summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.BulirschStoerIntegrator.Tolerance">
      <summary>
            Gets or sets the value for the tolerance used to scale the error control,
            which will control both how accurate the integrator is and the stepsize used
            during integration.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator">
      <summary>
            Interpolates <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.#ctor">
      <summary>
        <para>Initializes a new instance.  The user must the set the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.CovarianceData" />
            and <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.DefinedInAxes" /> properties.
            The <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaDegree" /> and the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaDegree" /> properties are
            initialized to 1, the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaInterpolationAlgorithm" /> is set to a new instance of
            <see cref="T:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation" />, and the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationInterpolationAlgorithm" />
            is set to a new instance of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation" />.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.#ctor(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation,AGI.Foundation.Coordinates.Covariance3By3Derivative})">
      <summary>
            Initializes a new instance.
            The <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaDegree" /> and the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaDegree" /> properties are
            initialized to 1, the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaInterpolationAlgorithm" /> is set to a new instance of
            <see cref="T:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation" />, and the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationInterpolationAlgorithm" />
            is set to a new instance of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation" />.
            </summary>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation,AGI.Foundation.Coordinates.Covariance3By3Derivative})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="sigmaInterpolationAlgorithm">
            The interpolation algorithm to use to interpolate the sigma values of the matrices.
            </param>
      <param name="sigmaDegree">The degree of interpolation to perform on the sigma values.</param>
      <param name="rotationInterpolationAlgorithm">
            The interpolation algorithm to use to interpolate the rotation to the eigenspace of the covariance matrix.
            </param>
      <param name="rotationDegree">The degree of interpolation to perform on the rotations.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation,AGI.Foundation.Coordinates.Covariance3By3Derivative},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="sigmaInterpolationAlgorithm">
            The interpolation algorithm to use to interpolate the sigma values of the matrices.
            </param>
      <param name="sigmaDegree">The degree of interpolation to perform on the sigma values.</param>
      <param name="rotationInterpolationAlgorithm">
            The interpolation algorithm to use to interpolate the rotation to the eigenspace of the covariance matrix.
            </param>
      <param name="rotationDegree">The degree of interpolation to perform on the rotations.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.#ctor(AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.CheckForSameDefinition(AGI.Foundation.Geometry.DynamicCovariance3By3)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.CheckForSameDefinition(AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.CovarianceData">
      <summary>
            Gets or sets the data over which to interpolate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.DefinedInAxes">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Axes" /> that the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.CovarianceData" /> is defined in. The
            <see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">Rotation</see> property of the resulting <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" />
            is the transformation from the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.OrientationAxes" /> to these <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.DefinedInAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that interpolates <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation" /> information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the provided <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaInterpolationAlgorithm" />, <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationInterpolationAlgorithm" />,
            or <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.CovarianceData" /> properties are null. Also thrown when <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaDegree" />
            or <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationDegree" /> are less than 1.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaInterpolationAlgorithm" /> or 
            <see cref="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationInterpolationAlgorithm" /> require more derivatives
            than were provided.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.GetEvaluator(AGI.Foundation.Geometry.Axes,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Constructs an evaluator that calculates the size and orientation of the position covariance over time.
            </summary>
      <param name="definedIn">The reference axes the results will be defined in. The evaluated
            <see cref="T:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation">Covariance3By3SizeAndOrientation's </see><see cref="P:AGI.Foundation.Coordinates.Covariance3By3SizeAndOrientation.Rotation">Rotation</see>Property is the rotation from
            the <see cref="P:AGI.Foundation.Geometry.DynamicCovariance3By3.OrientationAxes" /> to this axes.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to contain this evaluator.</param>
      <returns>The covariance evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.OrientationAxes">
      <summary>
            Gets the time-varying axes of the covariance ellipsoid.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationDegree">
      <summary>
            Gets or sets the degree of interpolation to perform on the rotations.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.RotationInterpolationAlgorithm">
      <summary>
            Gets or sets the interpolation algorithm used to interpolate the rotations.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SegmentBoundaryTimes">
      <summary>
            Gets or sets the boundary times between segments that the interpolator should not interpolate over.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaDegree">
      <summary>
            Gets or sets the degree of interpolation to perform on the sigma values.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator.SigmaInterpolationAlgorithm">
      <summary>
            Gets or sets the interpolation algorithm used to interpolate the sigma values.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.CubicRealPolynomial">
      <summary>
            Represents a 3rd order polynomial function of one variable with only real coefficients.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.CubicRealPolynomial.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a cubic polynomial with the provided real coefficients.
            </summary>
      <param name="a">The coefficient of the 3rd order monomial.</param>
      <param name="b">The coefficient of the 2nd order monomial.</param>
      <param name="c">The coefficient of the 1st order monomial.</param>
      <param name="d">The coefficient of the 0th order monomial.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.CubicRealPolynomial.A">
      <summary>
            Gets the coefficient of the 3rd order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.CubicRealPolynomial.B">
      <summary>
            Gets the coefficient of the 2nd order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.CubicRealPolynomial.C">
      <summary>
            Gets the coefficient of the 1st order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.CubicRealPolynomial.D">
      <summary>
            Gets the coefficient of the 0th order monomial.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.CubicRealPolynomial.Discriminant">
      <summary>
            Provides the discriminant of the cubic equation from the supplied coefficients.
            </summary>
      <returns>The value of the discriminant.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.CubicRealPolynomial.Discriminant(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Provides the discriminant of the cubic equation from the supplied coefficients.
            </summary>
      <param name="a">The coefficient of the 3rd order monomial.</param>
      <param name="b">The coefficient of the 2nd order monomial.</param>
      <param name="c">The coefficient of the 1st order monomial.</param>
      <param name="d">The coefficient of the 0th order monomial.</param>
      <returns>The value of the discriminant.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.CubicRealPolynomial.RealRoots">
      <summary>
            Provides the real valued roots of the real polynomial.
            </summary>
      <returns>An array containing the real valued roots.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.CubicRealPolynomial.RealRoots(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compute real roots.
            </summary>
      <param name="a">The coefficient of the 3rd order monomial.</param>
      <param name="b">The coefficient of the 2nd order monomial.</param>
      <param name="c">The coefficient of the 1st order monomial.</param>
      <param name="d">The coefficient of the 0th order monomial.</param>
      <returns>An array containing the real valued roots.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DerivativeMode">
      <summary>
            An enumeration indicating the mode in which to calculate derivatives.
            This is used by certain integrators to optimize performance by only computing
            "principal" derivatives at points in an algorithm where approximations can be made
            without much error while improving performance.  "Perturbation" derivatives are then
            held constant instead of re-evaluating potentially expensive computations.  
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.DerivativeMode.FullEvaluation">
      <summary>
            Compute both fast and slow derivatives.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.DerivativeMode.PrincipalEvaluation">
      <summary>
            Compute only those derivatives that are most important and quick to compute.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.DerivativeMode.PerturbationEvaluation">
      <summary>
            Compute all remaining derivatives not included when computing the "fast" derivatives.
            These usually include derivatives which take longer to compute but don't account
            for as much of the dynamics as the "fast" derivatives.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult">
      <summary>
            The results evaluated in one iteration of a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.#ctor(System.Double[],AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="variableDelta">The change that should be applied to the state variables in the next iteration.</param>
      <param name="functionResults">The <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> evaluation results.  </param>
      <param name="derivativeResults">The results of this iteration of the the evaluation of the Jacobian of the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> being solved for.</param>
      <param name="converged">If the function solver converged on this iteration.</param>
      <param name="aborted">If the function solver was aborted during this iteration.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.Aborted">
      <summary>
            Gets if the differential solver has aborted.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.Converged">
      <summary>
            Gets if the differential solver converged on this iteration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.DerivativeResults">
      <summary>
            Gets the results of this iteration of the the evaluation of the derivative of the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> being solved for.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.Finished">
      <summary>
            Gets if the differential solver has finished, either because the evaluation was aborted or converged.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.FunctionValue">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> evaluation results.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.VariableDelta">
      <summary>
            Gets the change that should be applied to the state variables in the next iteration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DifferentialCorrectorStepResult.Warnings">
      <summary>
            Gets any warnings that may have been encountered during this evaluation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleExtremumFoundEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.LocalExtremumFound" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleExtremumFoundEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleExtremumFoundEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleExtremumIndicatedEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.LocalExtremumIndicated" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleExtremumIndicatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleExtremumIndicatedEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleFunctionDetails">
      <summary>
            Holds details of a function to be explored with <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.#ctor(AGI.Foundation.NumericalMethods.DoubleSimpleFunction)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function to explore.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.CurrentValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariable" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariable" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.CurrentValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.CurrentValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.CurrentValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.DebuggingLogger">
      <summary>
            Gets or sets the HierarchicalLogger, used to provide debugging output for the findings analysis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that is exploring this function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.ExtremumConvergenceCriteria">
      <summary>
            Gets or sets the criteria used for convergence when searching for a precise local
            extremum of this function.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />, the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExtremumVariableTolerance" /> is used.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function" />,
            the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.ExtremumValueTolerance" /> is used.  Convergence can also be allowed on
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either" /> criteria or
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both" /> criteria can be required.  By default, this property has
            the value <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.ExtremumValueTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on function value when finding
            a local extremum of this function.  By default, this property has the value 0.0, but it is
            ignored because <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.ExtremumConvergenceCriteria" /> is set to
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.Function">
      <summary>
            Gets or sets the function to explore.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousPreviousValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariable" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariable" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousPreviousValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousPreviousValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousPreviousValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariable" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariable" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.PreviousValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionDetails.Thresholds">
      <summary>
            Gets the collection of thresholds of interest.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer">
      <summary>
            Explores one or more functions where the independent variable is double
            and the dependent variable is double, looking for one or more threshold crossings
            or local extrema.  Interesting findings while exploring the function are reported
            via events.  A supplied callback is used to determine how the function is sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CrossingVariableTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on Variable when finding
            a precise crossing of a threshold.  By default, this property has the value
            0.005.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariable">
      <summary>
            Gets the current Variable, which is the Variable of the most recent sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current Variable is not available because the explorer has not yet been stepped for
            the first time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariableIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariable" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariable" /> is invalid before the explorer is stepped for the first time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.DebuggingLogger">
      <summary>
            Gets or sets a logger to which debugging information will be written.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double)">
      <summary>
            Explores the function, raising events for each finding.
            </summary>
      <param name="start">The Variable at which to start exploring the function.</param>
      <param name="stop">The Variable at which to stop exploring the function.</param>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Functions" /> is empty or <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.SampleSuggestionCallback" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.SampleSuggestionCallback" /> suggests a zero-length step.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Explores the function, raising events for each finding.
            </summary>
      <param name="start">The Variable at which to start exploring the function.</param>
      <param name="stop">The Variable at which to stop exploring the function.</param>
      <param name="tracker">The instance to which to report progress.  The instance can also be used to cancel exploration.</param>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Functions" /> is empty or <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.SampleSuggestionCallback" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.SampleSuggestionCallback" /> suggests a zero-length step.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExploreExtremaToFindCrossings">
      <summary>
            Gets or sets a value indicating whether extrema should be explored if exploring those extrema
            could lead to additional threshold crossings being identified.  Consider three sample points where
            the middle sampled value is higher than the other two so that the three points form two line
            segments with opposite slope.  This configuration indicates that a local maximum exists somewhere between
            the three points.  If all three points are below a threshold, it's possible that the local maximum, if
            found, will lie above the threshold.  When this property is true, that extremum is
            explored until it is found precisely, or it is determined based on <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExtremaCrossingUncertaintyFactor" />
            that the extremum is unlikely to cross any threshold values. Such an extrema is explored even if
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FindAllExtremaPrecisely" /> is false.
            By default, this property has the value true.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExtremaCrossingUncertaintyFactor">
      <summary>
            Gets or sets a value determining how finely to explore an extremum with the potential to cross a threshold.
            At each iteration exploring the extremum this factor is multiplied against that iteration's
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Error" /> to determine the tolerance to compare against the difference between the current
            guess of the extrema and the closest applicable threshold value. This property is only used if <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FindAllExtremaPrecisely" />
            is set to false and <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExploreExtremaToFindCrossings" /> is set to true.
            By default, this property has the value 20.0. If you desire to completely search all extrema with the potential to cross a threshold
            set this to <see cref="F:System.Double.PositiveInfinity" /></summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExtremumVariableTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on Variable when
            precisely finding a local extremum.  By default, this property has the value
            0.005.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FindAllCrossingsPrecisely">
      <summary>
            Gets or sets a value indicating whether all crossings should be
            found precisely.  If this property is false,
            precise crossings will only be found if
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.FindPreciseCrossing">DoubleFunctionThresholdCrossingIndicated.FindPreciseCrossing</see>
            is called during the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingIndicated" /> event.  By default, this property
            has the value false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FindAllExtremaPrecisely">
      <summary>
            Gets or sets a value indicating whether all extrema should be
            found precisely.  If this property is false,
            precise extrema will only be found if
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.FindPreciseExtremum">DoubleFunctionExtremumIndicated.FindPreciseExtremum</see>
            is called during the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingIndicated" /> event, or if
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExploreExtremaToFindCrossings" /> is true and the indicated extrema
            might cross the threshold.  By default, this property has the value false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Functions">
      <summary>
            Gets the collection of functions to be explored.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FunctionSampled">
      <summary>
            Raised each time a function is sampled.  Note that this NOT raised when the function is sampled
            for the purpose of precisely finding a threshold crossing or extremum.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.LocalExtremumFound">
      <summary>
            Raised when a precise local minimum or maximum has been found.  This event will
            only be raised if the local extremum is found precisely.  Local extrema are found
            precisely if:
            <list type="bullet"><item><see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FindAllExtremaPrecisely" /> is true.</item><item><see cref="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.FindPreciseExtremum">DoubleFunctionExtremumIndicated.FindPreciseExtremum</see>
            is called during the handling of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.LocalExtremumIndicated" /> event.</item><item><see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ExploreExtremaToFindCrossings" /> is true
            and the extrema could have lead to additional threshold crossings being indicated.</item><item><see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ReportExtremaAtEndpoints" /> is true and the function is not
            flat at the endpoints.</item></list></summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.LocalExtremumIndicated">
      <summary>
            Raised when three points are found that indicate the existence of a local extremum (minimum or maximum).
            When this event is raised, the exact extremum has not yet been identified.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariable">
      <summary>
            Gets the Variable of the previous, previous sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The previous previous Variable is not available because the explorer has not yet been stepped for
            the third time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariableIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariable" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariable" /> is invalid before the explorer is stepped for the third time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariable">
      <summary>
            Gets the Variable of the previous sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The previous Variable is not available because the explorer has not yet been stepped for
            the second time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariableIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariable" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariable" /> is invalid before the explorer is stepped for the second time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ReportExtremaAtEndpoints">
      <summary>
            Gets or sets a value indicating whether extrema should be reported at the start and stop times
            given to <see cref="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double)" /> when the function is not flat
            at those endpoints.  By default, this property has the value true.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Reset">
      <summary>
            Resets exploration.  After calling this method, <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CurrentVariableIsValid" />,
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousVariableIsValid" />, and <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.PreviousPreviousVariableIsValid" /> all
            return false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.SampleSuggestionCallback">
      <summary>
            Gets or sets the callback to use to determine the times at which to sample the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Functions" />
            when the <see cref="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double)" /> method is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Step(System.Double)">
      <summary>
            Explores the function through one step, raising events for any findings over the step.
            </summary>
      <param name="next">The Variable of the next step.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.StepInteractively(System.Double)">
      <summary>
            Steps exploration to a specified Variable.  Any findings during the step are reported in
            an enumerable collection of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionFinding">DoubleFunctionEvents</see>.
            Events are not raised for the findings unless the caller explicitly calls
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionFinding.Raise" /> on each finding.
            </summary>
      <param name="next">The Variable to which to step.</param>
      <returns>
            An enumerable collection of findings over the step.  This collection becomes invalid the next time
            the function explorer is stepped.
            </returns>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingFound">
      <summary>
            Raised when a precise threshold crossing has been found.  This event will
            only be raised if
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FindAllCrossingsPrecisely" /> is true or
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.FindPreciseCrossing">DoubleFunctionThresholdCrossingIndicated.FindPreciseCrossing</see>
            is called during the handling of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingIndicated" /> event.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingIndicated">
      <summary>
            Raised when two points are found that indicate a threshold was crossed.
            When this event is raised, the exact crossing has not yet been identified.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleFunctionSampledEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.FunctionSampled" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampledEventArgs.#ctor(AGI.Foundation.NumericalMethods.DoubleFunctionDetails,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function that was sampled.</param>
      <param name="sampleVariable">The Variable at which the function was sampled.</param>
      <param name="sampleValue">The value that was sampled from the function.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampledEventArgs.Function">
      <summary>
            Gets the function that was sampled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampledEventArgs.SampleValue">
      <summary>
            Gets the value that was sampled from the function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampledEventArgs.SampleVariable">
      <summary>
            Gets the Variable at which the function was sampled.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleFunctionSampling">
      <summary>
            Species how sampling of a function of <see cref="T:System.Double" /> should be performed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.#ctor(AGI.Foundation.NumericalMethods.DoubleFunctionSampling)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.DefaultStep">
      <summary>
            Gets or sets the default step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.Equals(AGI.Foundation.NumericalMethods.DoubleFunctionSampling)">
      <summary>
            Determines if this set of sampling parameters exactly equals another.
            </summary>
      <param name="other">The other set of sampling parameters to compare.</param>
      <returns>
            true if this set of sampling parameters exactly equals another;
            otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.Equals(System.Object)">
      <summary>
            Determines if this set of sampling parameters exactly equals another.
            </summary>
      <param name="obj">The other set of sampling parameters to compare.</param>
      <returns>
            true if this set of sampling parameters exactly equals another;
            otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.GetFunctionSampler">
      <summary>
            Creates a sampler that takes the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.DefaultStep" />.
            </summary>
      <returns>A sampler.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.GetFunctionSampler(AGI.Foundation.Function{System.Double,System.Double})">
      <summary>
            Creates a sampler that takes a step suggested by a given function, or
            the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.DefaultStep" /> if not step is suggested.
            </summary>
      <param name="function">The function that suggests the next sample.</param>
      <returns>A sampler.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.MaximumStep">
      <summary>
            Gets or sets the largest step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.MinimumStep">
      <summary>
            Gets or sets the smallest step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.Tolerance">
      <summary>
            Gets or sets the tolerance used for convergence in the independent variable.
            The default value is 0.005.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the user attempts to set a <see cref="T:System.Double" /> whose
            value is less than or equal to zero.</exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.TrendingStep">
      <summary>
            Gets or sets the size of a trending step that will be taken at the beginning and end
            of each interval of consideration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.UseFunctionSamplingSuggestion">
      <summary>
            Gets or sets a value indicating whether the sampling suggestion from the constraint should be used.
            If false, the constraint's suggestion is ignored and the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionSampling.DefaultStep" />
            is used.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails">
      <summary>
            Details of a threshold of interest in <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.#ctor(System.Double)">
      <summary>
            Initializes a new instance.  The threshold is initially enabled.
            </summary>
      <param name="value">The threshold value of interest.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.BehaviorWhenOnThreshold">
      <summary>
            Gets or sets the behavior when a function value is found to exactly equal the threshold.
            A function value exactly equal to the threshold can be treated either as above or as below the threshold.
            By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.BehaviorWhenOnThreshold.TreatAsAbove" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.ConvergenceCriteria">
      <summary>
            Gets or sets the criteria used for convergence when searching for a precise crossing
            of this threshold.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />, the
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.CrossingVariableTolerance" /> is used.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function" />,
            the <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.ValueTolerance" /> is used.  Convergence can also be allowed on
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either" /> criteria or
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both" />
            criteria can be required.  By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.SolutionType">
      <summary>
            Gets or sets the type of solution required when searching for a precise crossing
            of this threshold.  This controls whether the value of the function at the identified
            crossing is slightly above or slightly below the threshold when it is not precisely
            on the threshold.  By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType.OnOrAboveThreshold" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.Value">
      <summary>
            Gets or sets the threshold value of interest.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.ValueTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on value when finding
            a precise crossing of this threshold.  By default, this property has the value 0.0,
            but it is ignored because <see cref="P:AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails.ConvergenceCriteria" /> is set to
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator">
      <summary>
            Interpolates and extrapolates over <see cref="T:AGI.Foundation.Motion`1">Motions</see> of
            double values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.#ctor">
      <summary>
            Initializes a new instance.  The user must set the <see cref="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.InterpolationAlgorithm" /> and
            <see cref="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.Data" /> properties.  The <see cref="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.Degree" /> property is initialized to 5.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{System.Double})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="interpolationAlgorithm">
            The interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{System.Double},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="interpolationAlgorithm">
            The interpolation algorithm to use the interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.DoubleMotionInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{System.Double})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="algorithmType">
            The type of interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{System.Double},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="algorithmType">
            The type of interpolation algorithm to use the interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.CheckForSameDefinition(AGI.Foundation.NumericalMethods.DoubleMotionInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.Data">
      <summary>
            Gets or sets the data over which to interpolate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.Degree">
      <summary>
            Gets or sets the degree of interpolation to perform.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.GetEvaluator">
      <summary>
            Gets an evaluator that interpolates and extrapolates over
            <see cref="T:AGI.Foundation.Motion`1">Motions</see> of double values.
            </summary>
      <returns>The Evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that interpolates and extrapolates over
            <see cref="T:AGI.Foundation.Motion`1">Motions</see> of double values.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the provided <see cref="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.InterpolationAlgorithm" /> does not have derivative information up to the required order.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.InterpolationAlgorithm" /> requires more derivatives
            than were provided.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.InterpolationAlgorithm">
      <summary>
            Gets or sets the interpolation algorithm used to interpolate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleMotionInterpolator.SegmentBoundaryTimes">
      <summary>
            Gets or sets the boundary times between segments that the interpolator should not interpolate over.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleSampleSuggestionCallback">
      <summary>
            A callback that is invoked to determine the next Variable at which <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" />
            samples a function.
            </summary>
      <param name="intervalStart">The beginning of the overall interval being evaluated.</param>
      <param name="intervalStop">The end of the overall interval being evaluated.</param>
      <param name="lastSample">The last Variable that was sampled.</param>
      <returns>The next Variable to sample.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleSimpleFunction">
      <summary>
            A delegate that takes a double and returns a double.
            </summary>
      <param name="variable">The Variable.</param>
      <returns>The double.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleThresholdCrossingFoundEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingFound" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleThresholdCrossingFoundEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleThresholdCrossingFoundEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DoubleThresholdCrossingIndicatedEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.ThresholdCrossingIndicated" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DoubleThresholdCrossingIndicatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DoubleThresholdCrossingIndicatedEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationExtremumFoundEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.LocalExtremumFound" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationExtremumFoundEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationExtremumFoundEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationExtremumIndicatedEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.LocalExtremumIndicated" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationExtremumIndicatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationExtremumIndicatedEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationFunctionDetails">
      <summary>
            Holds details of a function to be explored with <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionDetails.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionDetails.#ctor(AGI.Foundation.NumericalMethods.DurationSimpleFunction)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function to explore.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.CurrentValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDuration" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDuration" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.CurrentValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.CurrentValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.CurrentValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDuration" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.DebuggingLogger">
      <summary>
            Gets or sets the HierarchicalLogger, used to provide debugging output for the findings analysis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that is exploring this function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.ExtremumConvergenceCriteria">
      <summary>
            Gets or sets the criteria used for convergence when searching for a precise local
            extremum of this function.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />, the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExtremumDurationTolerance" /> is used.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function" />,
            the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.ExtremumValueTolerance" /> is used.  Convergence can also be allowed on
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either" /> criteria or
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both" /> criteria can be required.  By default, this property has
            the value <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.ExtremumValueTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on function value when finding
            a local extremum of this function.  By default, this property has the value 0.0, but it is
            ignored because <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.ExtremumConvergenceCriteria" /> is set to
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.Function">
      <summary>
            Gets or sets the function to explore.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousPreviousValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDuration" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDuration" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousPreviousValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousPreviousValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousPreviousValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDuration" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDuration" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDuration" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.PreviousValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDuration" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionDetails.Thresholds">
      <summary>
            Gets the collection of thresholds of interest.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer">
      <summary>
            Explores one or more functions where the independent variable is <see cref="T:AGI.Foundation.Time.Duration" />
            and the dependent variable is double, looking for one or more threshold crossings
            or local extrema.  Interesting findings while exploring the function are reported
            via events.  A supplied callback is used to determine how the function is sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CrossingDurationTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on duration when finding
            a precise crossing of a threshold.  By default, this property has the value
            0.005 seconds (5 milliseconds).
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDuration">
      <summary>
            Gets the current duration, which is the duration of the most recent sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current duration is not available because the explorer has not yet been stepped for
            the first time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDurationIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDuration" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDuration" /> is invalid before the explorer is stepped for the first time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.DebuggingLogger">
      <summary>
            Gets or sets a logger to which debugging information will be written.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Explores the function, raising events for each finding.
            </summary>
      <param name="start">The duration at which to start exploring the function.</param>
      <param name="stop">The duration at which to stop exploring the function.</param>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Functions" /> is empty or <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.SampleSuggestionCallback" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.SampleSuggestionCallback" /> suggests a zero-length step.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Explores the function, raising events for each finding.
            </summary>
      <param name="start">The duration at which to start exploring the function.</param>
      <param name="stop">The duration at which to stop exploring the function.</param>
      <param name="tracker">The instance to which to report progress.  The instance can also be used to cancel exploration.</param>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Functions" /> is empty or <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.SampleSuggestionCallback" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.SampleSuggestionCallback" /> suggests a zero-length step.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExploreExtremaToFindCrossings">
      <summary>
            Gets or sets a value indicating whether extrema should be explored if exploring those extrema
            could lead to additional threshold crossings being identified.  Consider three sample points where
            the middle sampled value is higher than the other two so that the three points form two line
            segments with opposite slope.  This configuration indicates that a local maximum exists somewhere between
            the three points.  If all three points are below a threshold, it's possible that the local maximum, if
            found, will lie above the threshold.  When this property is true, that extremum is
            explored until it is found precisely, or it is determined based on <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExtremaCrossingUncertaintyFactor" />
            that the extremum is unlikely to cross any threshold values. Such an extrema is explored even if
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FindAllExtremaPrecisely" /> is false.
            By default, this property has the value true.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExtremaCrossingUncertaintyFactor">
      <summary>
            Gets or sets a value determining how finely to explore an extremum with the potential to cross a threshold.
            At each iteration exploring the extremum this factor is multiplied against that iteration's
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Error" /> to determine the tolerance to compare against the difference between the current
            guess of the extrema and the closest applicable threshold value. This property is only used if <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FindAllExtremaPrecisely" />
            is set to false and <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExploreExtremaToFindCrossings" /> is set to true.
            By default, this property has the value 20.0. If you desire to completely search all extrema with the potential to cross a threshold
            set this to <see cref="F:System.Double.PositiveInfinity" /></summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExtremumDurationTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on duration when
            precisely finding a local extremum.  By default, this property has the value
            0.005 seconds (5 milliseconds).
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FindAllCrossingsPrecisely">
      <summary>
            Gets or sets a value indicating whether all crossings should be
            found precisely.  If this property is false,
            precise crossings will only be found if
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.FindPreciseCrossing">DurationFunctionThresholdCrossingIndicated.FindPreciseCrossing</see>
            is called during the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingIndicated" /> event.  By default, this property
            has the value false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FindAllExtremaPrecisely">
      <summary>
            Gets or sets a value indicating whether all extrema should be
            found precisely.  If this property is false,
            precise extrema will only be found if
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.FindPreciseExtremum">DurationFunctionExtremumIndicated.FindPreciseExtremum</see>
            is called during the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingIndicated" /> event, or if
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExploreExtremaToFindCrossings" /> is true and the indicated extrema
            might cross the threshold.  By default, this property has the value false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Functions">
      <summary>
            Gets the collection of functions to be explored.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FunctionSampled">
      <summary>
            Raised each time a function is sampled.  Note that this NOT raised when the function is sampled
            for the purpose of precisely finding a threshold crossing or extremum.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.LocalExtremumFound">
      <summary>
            Raised when a precise local minimum or maximum has been found.  This event will
            only be raised if the local extremum is found precisely.  Local extrema are found
            precisely if:
            <list type="bullet"><item><see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FindAllExtremaPrecisely" /> is true.</item><item><see cref="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.FindPreciseExtremum">DurationFunctionExtremumIndicated.FindPreciseExtremum</see>
            is called during the handling of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.LocalExtremumIndicated" /> event.</item><item><see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ExploreExtremaToFindCrossings" /> is true
            and the extrema could have lead to additional threshold crossings being indicated.</item><item><see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ReportExtremaAtEndpoints" /> is true and the function is not
            flat at the endpoints.</item></list></summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.LocalExtremumIndicated">
      <summary>
            Raised when three points are found that indicate the existence of a local extremum (minimum or maximum).
            When this event is raised, the exact extremum has not yet been identified.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDuration">
      <summary>
            Gets the duration of the previous sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The previous duration is not available because the explorer has not yet been stepped for
            the second time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDurationIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDuration" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDuration" /> is invalid before the explorer is stepped for the second time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDuration">
      <summary>
            Gets the duration of the previous, previous sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The previous previous duration is not available because the explorer has not yet been stepped for
            the third time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDurationIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDuration" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDuration" /> is invalid before the explorer is stepped for the third time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ReportExtremaAtEndpoints">
      <summary>
            Gets or sets a value indicating whether extrema should be reported at the start and stop times
            given to <see cref="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)" /> when the function is not flat
            at those endpoints.  By default, this property has the value true.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Reset">
      <summary>
            Resets exploration.  After calling this method, <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CurrentDurationIsValid" />,
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousDurationIsValid" />, and <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.PreviousPreviousDurationIsValid" /> all
            return false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.SampleSuggestionCallback">
      <summary>
            Gets or sets the callback to use to determine the times at which to sample the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Functions" />
            when the <see cref="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)" /> method is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Step(AGI.Foundation.Time.Duration)">
      <summary>
            Explores the function through one step, raising events for any findings over the step.
            </summary>
      <param name="next">The duration of the next step.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.StepInteractively(AGI.Foundation.Time.Duration)">
      <summary>
            Steps exploration to a specified duration.  Any findings during the step are reported in
            an enumerable collection of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionFinding">DurationFunctionEvents</see>.
            Events are not raised for the findings unless the caller explicitly calls
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionFinding.Raise" /> on each finding.
            </summary>
      <param name="next">The duration to which to step.</param>
      <returns>
            An enumerable collection of findings over the step.  This collection becomes invalid the next time
            the function explorer is stepped.
            </returns>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingFound">
      <summary>
            Raised when a precise threshold crossing has been found.  This event will
            only be raised if
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FindAllCrossingsPrecisely" /> is true or
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.FindPreciseCrossing">DurationFunctionThresholdCrossingIndicated.FindPreciseCrossing</see>
            is called during the handling of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingIndicated" /> event.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingIndicated">
      <summary>
            Raised when two points are found that indicate a threshold was crossed.
            When this event is raised, the exact crossing has not yet been identified.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationFunctionSampledEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.FunctionSampled" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampledEventArgs.#ctor(AGI.Foundation.NumericalMethods.DurationFunctionDetails,AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function that was sampled.</param>
      <param name="sampleDuration">The duration at which the function was sampled.</param>
      <param name="sampleValue">The value that was sampled from the function.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampledEventArgs.Function">
      <summary>
            Gets the function that was sampled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampledEventArgs.SampleDuration">
      <summary>
            Gets the duration at which the function was sampled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampledEventArgs.SampleValue">
      <summary>
            Gets the value that was sampled from the function.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationFunctionSampling">
      <summary>
            Species how sampling of a function of <see cref="T:AGI.Foundation.Time.Duration" /> should be performed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.#ctor(AGI.Foundation.NumericalMethods.DurationFunctionSampling)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.DefaultStep">
      <summary>
            Gets or sets the default step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.Equals(AGI.Foundation.NumericalMethods.DurationFunctionSampling)">
      <summary>
            Determines if this set of sampling parameters exactly equals another.
            </summary>
      <param name="other">The other set of sampling parameters to compare.</param>
      <returns>
            true if this set of sampling parameters exactly equals another;
            otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.Equals(System.Object)">
      <summary>
            Determines if this set of sampling parameters exactly equals another.
            </summary>
      <param name="obj">The other set of sampling parameters to compare.</param>
      <returns>
            true if this set of sampling parameters exactly equals another;
            otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.GetFunctionSampler">
      <summary>
            Creates a sampler that takes the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.DefaultStep" />.
            </summary>
      <returns>A sampler.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.GetFunctionSampler(AGI.Foundation.Function{AGI.Foundation.Time.Duration,System.Double})">
      <summary>
            Creates a sampler that takes a step suggested by a given function, or
            the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.DefaultStep" /> if not step is suggested.
            </summary>
      <param name="function">The function that suggests the next sample.</param>
      <returns>A sampler.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionSampling.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.MaximumStep">
      <summary>
            Gets or sets the largest step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.MinimumStep">
      <summary>
            Gets or sets the smallest step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.Tolerance">
      <summary>
            Gets or sets the tolerance used for convergence in the independent variable.
            The default value is 0.005 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the user attempts to set a <see cref="T:AGI.Foundation.Time.Duration" /> whose
            <see cref="P:AGI.Foundation.Time.Duration.TotalSeconds">TotalSeconds</see> is less than or equal to zero.</exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.TrendingStep">
      <summary>
            Gets or sets the size of a trending step that will be taken at the beginning and end
            of each interval of consideration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.UseFunctionSamplingSuggestion">
      <summary>
            Gets or sets a value indicating whether the sampling suggestion from the constraint should be used.
            If false, the constraint's suggestion is ignored and the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionSampling.DefaultStep" />
            is used.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails">
      <summary>
            Details of a threshold of interest in <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.#ctor(System.Double)">
      <summary>
            Initializes a new instance.  The threshold is initially enabled.
            </summary>
      <param name="value">The threshold value of interest.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.BehaviorWhenOnThreshold">
      <summary>
            Gets or sets the behavior when a function value is found to exactly equal the threshold.
            A function value exactly equal to the threshold can be treated either as above or as below the threshold.
            By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.BehaviorWhenOnThreshold.TreatAsAbove" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.ConvergenceCriteria">
      <summary>
            Gets or sets the criteria used for convergence when searching for a precise crossing
            of this threshold.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />, the
            <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.CrossingDurationTolerance" /> is used.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function" />,
            the <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.ValueTolerance" /> is used.  Convergence can also be allowed on
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either" /> criteria or
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both" />
            criteria can be required.  By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.SolutionType">
      <summary>
            Gets or sets the type of solution required when searching for a precise crossing
            of this threshold.  This controls whether the value of the function at the identified
            crossing is slightly above or slightly below the threshold when it is not precisely
            on the threshold.  By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType.OnOrAboveThreshold" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.Value">
      <summary>
            Gets or sets the threshold value of interest.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.ValueTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on value when finding
            a precise crossing of this threshold.  By default, this property has the value 0.0,
            but it is ignored because <see cref="P:AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails.ConvergenceCriteria" /> is set to
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationSampleSuggestionCallback">
      <summary>
            A callback that is invoked to determine the next duration at which <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" />
            samples a function.
            </summary>
      <param name="intervalStart">The beginning of the overall interval being evaluated.</param>
      <param name="intervalStop">The end of the overall interval being evaluated.</param>
      <param name="lastSample">The last duration that was sampled.</param>
      <returns>The next duration to sample.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationSimpleFunction">
      <summary>
            A delegate that takes a <see cref="T:AGI.Foundation.Time.Duration" /> and returns a double.
            </summary>
      <param name="duration">The duration.</param>
      <returns>The double.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationThresholdCrossingFoundEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingFound" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationThresholdCrossingFoundEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationThresholdCrossingFoundEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.DurationThresholdCrossingIndicatedEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.ThresholdCrossingIndicated" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.DurationThresholdCrossingIndicatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.DurationThresholdCrossingIndicatedEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.ExtremumType">
      <summary>
            Indicates whether an extremum is a minimum or a maximum.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.ExtremumType.Minimum">
      <summary>
            Indicates that the extremum is a minimum.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.ExtremumType.Maximum">
      <summary>
            Indicates that the extremum is a maximum.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.FiniteDifferenceMethod">
      <summary>
            When numerically computing the derivative of a function, this will indicate if the 
            finite difference method should be forward, backwards or central.  
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.FiniteDifferenceMethod.Forward">
      <summary>
            A forward difference method will be performed.  When perturbing a variable, the perturbation 
            will be added to the current value of that variable. The total number of function evaluations 
            that will be performed to solve for the Jacobian of a multivariable function will be 1 plus 
            the number of variables.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.FiniteDifferenceMethod.Backward">
      <summary>
            A backwards difference method will be performed.  When perturbing a variable, the perturbation 
            will be subtracted to the current value of that variable.  The total number of function evaluations 
            that will be performed to solve for the Jacobian of a multivariable function will be 1 plus 
            the number of variables.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.FiniteDifferenceMethod.Signed">
      <summary>
            The difference will be the signed perturbation value.  The total number of function evaluations 
            that will be performed to solve for the Jacobian of a multivariable function will be 1 plus 
            the number of variables.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.FiniteDifferenceMethod.Central">
      <summary>
            A central difference method will be performed.  Two function evaluations will be performed 
            for each variable to determine the change of the function values.  One run will be done 
            where half of the perturbation value is subtracted from the nominal value of the variable, and a
            second run where half of the perturbation value is added to the variable.  The total number of function evaluations 
            that will be performed to solve for the Jacobian of a multivariable function will be 1 plus 
            twice the number of variables.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.FunctionSegmentSlope">
      <summary>
            Indicates the slope of a segment of a function.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.FunctionSegmentSlope.Increasing">
      <summary>
            Indicates that the value of the function is increasing.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.FunctionSegmentSlope.Decreasing">
      <summary>
            Indicates that the value of the function is decreasing.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.GaussJacksonCorrectionMode">
      <summary>
            Indicates whether to use the full derivative function when computing corrections
            or whether to use only "fast" derivatives when computing corrections.  For more
            details on "fast" and "slow" derivatives, see <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.GaussJacksonCorrectionMode.FullCorrection">
      <summary>
            Indicates full derivative information should be used to compute corrections.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.GaussJacksonCorrectionMode.PseudoCorrection">
      <summary>
            Indicates that only 'fast' derivatives should be used when computing corrections.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator">
      <summary>
            A multi-step second order integrator based on the Gauss-Jackson integration algorithm, using
            a <see cref="T:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator" /> to start the integration and a summed Adams first order integration algorithm.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.#ctor(AGI.Foundation.NumericalMethods.GaussJacksonIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Create a copy of this integrator.
            </summary>
      <param name="context">The context in which to create the copy.</param>
      <returns>The copy of this integrator.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.CurrentStepSize">
      <summary>
            Gets the current (positive) size of the step which the integrator will use for the next integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.SystemOfEquations" /> does not 
            represent a first or second order system (or mixed order of both first and second orders).</exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.Integrate">
      <summary>
            Perform an integration step moving the independent and dependent variables from their 
            initial (the final values of the previous step) to their new final values, 
            using the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" />.
            <para>
            When overriding this method, <see cref="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.StartNextStep" /> should be called prior to
            integration.  
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.Integrate(System.Double)">
      <summary>
            Perform an integration step moving the independent and dependent variables from their 
            initial (the final values of the previous step) to their new final values.
            <para>
            When overriding this method, <see cref="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.StartNextStep" /> should be called prior to
            integration.  Also note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.Reintegrate(System.Double)">
      <summary>
            Repeats the last integration of the differential equations.
            <para>
            When overriding this method, note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.StartNextStep">
      <summary>
            This performs the task of setting the Initial values to the previous Final values prior to taking the next step.
            This method is called prior to integrating the step but not called during re-integration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.GaussJacksonIntegrator.UpdateSavedDerivatives(System.Double[])">
      <summary>
            This method is used in order to update the last step's derivatives with any post integration corrections.
            </summary>
      <param name="derivativeCorrections">The corrections to the last step's derivatives.</param>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.IntegrationSense">
      <summary>
            Indicates whether the integration proceeds with the independent variable increasing or decreasing.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.IntegrationSense.Increasing">
      <summary>
            Apply the step forward so that the final independent variable value
            is greater than the initial independent variable value.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.IntegrationSense.Decreasing">
      <summary>
            Apply the step backward so that the final independent variable value 
            is less than the initial independent variable value.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.InterpolationAlgorithmType">
      <summary>
            Indicates a type of interpolation algorithm to use when interpolating data.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.InterpolationAlgorithmType.Lagrange">
      <summary>
            Indicates the use of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.InterpolationAlgorithmType.Hermite">
      <summary>
            Indicates the use of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.InterpolationAlgorithmType.Linear">
      <summary>
            Indicates the use of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateExtremumFoundEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.LocalExtremumFound" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateExtremumFoundEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateExtremumFoundEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateExtremumIndicatedEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.LocalExtremumIndicated" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateExtremumIndicatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateExtremumIndicatedEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails">
      <summary>
            Holds details of a function to be explored with <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.#ctor(AGI.Foundation.NumericalMethods.JulianDateSimpleFunction)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function to explore.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.CurrentValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDate" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDate" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.CurrentValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.CurrentValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.CurrentValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDate" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.DebuggingLogger">
      <summary>
            Gets or sets the HierarchicalLogger, used to provide debugging output for the findings analysis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that is exploring this function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.ExtremumConvergenceCriteria">
      <summary>
            Gets or sets the criteria used for convergence when searching for a precise local
            extremum of this function.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />, the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExtremumDateTolerance" /> is used.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function" />,
            the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.ExtremumValueTolerance" /> is used.  Convergence can also be allowed on
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either" /> criteria or
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both" /> criteria can be required.  By default, this property has
            the value <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.ExtremumValueTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on function value when finding
            a local extremum of this function.  By default, this property has the value 0.0, but it is
            ignored because <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.ExtremumConvergenceCriteria" /> is set to
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.Function">
      <summary>
            Gets or sets the function to explore.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousPreviousValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDate" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDate" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousPreviousValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousPreviousValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousPreviousValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDate" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousValue">
      <summary>
            Gets the value of the function at the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDate" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current value is not available because the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDate" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousValueIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousValue" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.PreviousValue" /> is invalid if the function was not sampled for the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDate" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionDetails.Thresholds">
      <summary>
            Gets the collection of thresholds of interest.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer">
      <summary>
            Explores one or more functions where the independent variable is <see cref="T:AGI.Foundation.Time.JulianDate" />
            and the dependent variable is double, looking for one or more threshold crossings
            or local extrema.  Interesting findings while exploring the function are reported
            via events.  A supplied callback is used to determine how the function is sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CrossingDateTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on date when finding
            a precise crossing of a threshold.  By default, this property has the value
            0.005 seconds (5 milliseconds).
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDate">
      <summary>
            Gets the current date, which is the date of the most recent sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The current date is not available because the explorer has not yet been stepped for
            the first time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDateIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDate" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDate" /> is invalid before the explorer is stepped for the first time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.DebuggingLogger">
      <summary>
            Gets or sets a logger to which debugging information will be written.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Explores the function, raising events for each finding.
            </summary>
      <param name="start">The date at which to start exploring the function.</param>
      <param name="stop">The date at which to stop exploring the function.</param>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Functions" /> is empty or <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.SampleSuggestionCallback" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.SampleSuggestionCallback" /> suggests a zero-length step.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Explores the function, raising events for each finding.
            </summary>
      <param name="start">The date at which to start exploring the function.</param>
      <param name="stop">The date at which to stop exploring the function.</param>
      <param name="tracker">The instance to which to report progress.  The instance can also be used to cancel exploration.</param>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Functions" /> is empty or <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.SampleSuggestionCallback" /> is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.SampleSuggestionCallback" /> suggests a zero-length step.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExploreExtremaToFindCrossings">
      <summary>
            Gets or sets a value indicating whether extrema should be explored if exploring those extrema
            could lead to additional threshold crossings being identified.  Consider three sample points where
            the middle sampled value is higher than the other two so that the three points form two line
            segments with opposite slope.  This configuration indicates that a local maximum exists somewhere between
            the three points.  If all three points are below a threshold, it's possible that the local maximum, if
            found, will lie above the threshold.  When this property is true, that extremum is
            explored until it is found precisely, or it is determined based on <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExtremaCrossingUncertaintyFactor" />
            that the extremum is unlikely to cross any threshold values. Such an extrema is explored even if
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FindAllExtremaPrecisely" /> is false.
            By default, this property has the value true.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExtremaCrossingUncertaintyFactor">
      <summary>
            Gets or sets a value determining how finely to explore an extremum with the potential to cross a threshold.
            At each iteration exploring the extremum this factor is multiplied against that iteration's
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Error" /> to determine the tolerance to compare against the difference between the current
            guess of the extrema and the closest applicable threshold value. This property is only used if <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FindAllExtremaPrecisely" />
            is set to false and <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExploreExtremaToFindCrossings" /> is set to true.
            By default, this property has the value 20.0. If you desire to completely search all extrema with the potential to cross a threshold
            set this to <see cref="F:System.Double.PositiveInfinity" /></summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExtremumDateTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on date when
            precisely finding a local extremum.  By default, this property has the value
            0.005 seconds (5 milliseconds).
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FindAllCrossingsPrecisely">
      <summary>
            Gets or sets a value indicating whether all crossings should be
            found precisely.  If this property is false,
            precise crossings will only be found if
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.FindPreciseCrossing">JulianDateFunctionThresholdCrossingIndicated.FindPreciseCrossing</see>
            is called during the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingIndicated" /> event.  By default, this property
            has the value false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FindAllExtremaPrecisely">
      <summary>
            Gets or sets a value indicating whether all extrema should be
            found precisely.  If this property is false,
            precise extrema will only be found if
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.FindPreciseExtremum">JulianDateFunctionExtremumIndicated.FindPreciseExtremum</see>
            is called during the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingIndicated" /> event, or if
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExploreExtremaToFindCrossings" /> is true and the indicated extrema
            might cross the threshold.  By default, this property has the value false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Functions">
      <summary>
            Gets the collection of functions to be explored.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FunctionSampled">
      <summary>
            Raised each time a function is sampled.  Note that this NOT raised when the function is sampled
            for the purpose of precisely finding a threshold crossing or extremum.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.LocalExtremumFound">
      <summary>
            Raised when a precise local minimum or maximum has been found.  This event will
            only be raised if the local extremum is found precisely.  Local extrema are found
            precisely if:
            <list type="bullet"><item><see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FindAllExtremaPrecisely" /> is true.</item><item><see cref="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.FindPreciseExtremum">JulianDateFunctionExtremumIndicated.FindPreciseExtremum</see>
            is called during the handling of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.LocalExtremumIndicated" /> event.</item><item><see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExploreExtremaToFindCrossings" /> is true
            and the extrema could have lead to additional threshold crossings being indicated.</item><item><see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ReportExtremaAtEndpoints" /> is true and the function is not
            flat at the endpoints.</item></list></summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.LocalExtremumIndicated">
      <summary>
            Raised when three points are found that indicate the existence of a local extremum (minimum or maximum).
            When this event is raised, the exact extremum has not yet been identified.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDate">
      <summary>
            Gets the date of the previous sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The previous date is not available because the explorer has not yet been stepped for
            the second time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDateIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDate" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDate" /> is invalid before the explorer is stepped for the second time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDate">
      <summary>
            Gets the date of the previous, previous sample.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The previous previous date is not available because the explorer has not yet been stepped for
            the third time.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDateIsValid">
      <summary>
            Gets a value indicating whether <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDate" /> is valid.
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDate" /> is invalid before the explorer is stepped for the third time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ReportExtremaAtEndpoints">
      <summary>
            Gets or sets a value indicating whether extrema should be reported at the start and stop times
            given to <see cref="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)" /> when the function is not flat
            at those endpoints.  By default, this property has the value true.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Reset">
      <summary>
            Resets exploration.  After calling this method, <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CurrentDateIsValid" />,
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousDateIsValid" />, and <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.PreviousPreviousDateIsValid" /> all
            return false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.SampleSuggestionCallback">
      <summary>
            Gets or sets the callback to use to determine the times at which to sample the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Functions" />
            when the <see cref="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)" /> method is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Step(AGI.Foundation.Time.JulianDate)">
      <summary>
            Explores the function through one step, raising events for any findings over the step.
            </summary>
      <param name="next">The date of the next step.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.StepInteractively(AGI.Foundation.Time.JulianDate)">
      <summary>
            Steps exploration to a specified date.  Any findings during the step are reported in
            an enumerable collection of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionFinding">JulianDateFunctionEvents</see>.
            Events are not raised for the findings unless the caller explicitly calls
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionFinding.Raise" /> on each finding.
            </summary>
      <param name="next">The date to which to step.</param>
      <returns>
            An enumerable collection of findings over the step.  This collection becomes invalid the next time
            the function explorer is stepped.
            </returns>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingFound">
      <summary>
            Raised when a precise threshold crossing has been found.  This event will
            only be raised if
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FindAllCrossingsPrecisely" /> is true or
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.FindPreciseCrossing">JulianDateFunctionThresholdCrossingIndicated.FindPreciseCrossing</see>
            is called during the handling of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingIndicated" /> event.
            </summary>
    </member>
    <member name="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingIndicated">
      <summary>
            Raised when two points are found that indicate a threshold was crossed.
            When this event is raised, the exact crossing has not yet been identified.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateFunctionSampledEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.FunctionSampled" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampledEventArgs.#ctor(AGI.Foundation.NumericalMethods.JulianDateFunctionDetails,AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function that was sampled.</param>
      <param name="sampleDate">The date at which the function was sampled.</param>
      <param name="sampleValue">The value that was sampled from the function.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampledEventArgs.Function">
      <summary>
            Gets the function that was sampled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampledEventArgs.SampleDate">
      <summary>
            Gets the date at which the function was sampled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampledEventArgs.SampleValue">
      <summary>
            Gets the value that was sampled from the function.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling">
      <summary>
            Species how sampling of a function of <see cref="T:AGI.Foundation.Time.JulianDate" /> should be performed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.DefaultStep">
      <summary>
            Gets or sets the default step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.Equals(AGI.Foundation.NumericalMethods.JulianDateFunctionSampling)">
      <summary>
            Determines if this set of sampling parameters exactly equals another.
            </summary>
      <param name="other">The other set of sampling parameters to compare.</param>
      <returns>
            true if this set of sampling parameters exactly equals another;
            otherwise false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.Equals(System.Object)">
      <summary>
            Determines if this set of sampling parameters exactly equals another.
            </summary>
      <param name="obj">The other set of sampling parameters to compare.</param>
      <returns>
            true if this set of sampling parameters exactly equals another;
            otherwise false.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.ExtremaCrossingUncertaintyFactor">
      <summary>
            Gets or sets a value determining how finely to explore an extremum with the potential to cross a threshold.
            This value is passed along to the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExtremaCrossingUncertaintyFactor">property of the same name</see>
            on the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> used to determine the satisfaction intervals of an
            <see cref="T:AGI.Foundation.Access.AccessConstraint" /> sampled by this sampler.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.GetFunctionSampler">
      <summary>
            Creates a sampler that takes the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.DefaultStep" />.
            </summary>
      <returns>A sampler.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.GetFunctionSampler(AGI.Foundation.Function{AGI.Foundation.Time.JulianDate,System.Double})">
      <summary>
            Creates a sampler that takes a step suggested by a given function, or
            the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.DefaultStep" /> if not step is suggested.
            </summary>
      <param name="function">The function that suggests the next sample.</param>
      <returns>A sampler.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.MaximumStep">
      <summary>
            Gets or sets the largest step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.MinimumStep">
      <summary>
            Gets or sets the smallest step that will be taken when sampling a function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.Tolerance">
      <summary>
            Gets or sets the tolerance used for convergence in the independent variable.
            The default value is 0.005 seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the user attempts to set a <see cref="T:AGI.Foundation.Time.Duration" /> whose
            <see cref="P:AGI.Foundation.Time.Duration.TotalSeconds">TotalSeconds</see> is less than or equal to zero.</exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.TrendingStep">
      <summary>
            Gets or sets the size of a trending step that will be taken at the beginning and end
            of each interval of consideration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.UseFunctionSamplingSuggestion">
      <summary>
            Gets or sets a value indicating whether the sampling suggestion from the constraint should be used.
            If false, the constraint's suggestion is ignored and the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.DefaultStep" />
            is used.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails">
      <summary>
            Details of a threshold of interest in <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.#ctor(System.Double)">
      <summary>
            Initializes a new instance.  The threshold is initially enabled.
            </summary>
      <param name="value">The threshold value of interest.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.BehaviorWhenOnThreshold">
      <summary>
            Gets or sets the behavior when a function value is found to exactly equal the threshold.
            A function value exactly equal to the threshold can be treated either as above or as below the threshold.
            By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.BehaviorWhenOnThreshold.TreatAsAbove" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.ConvergenceCriteria">
      <summary>
            Gets or sets the criteria used for convergence when searching for a precise crossing
            of this threshold.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />, the
            <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.CrossingDateTolerance" /> is used.  When set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function" />,
            the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.ValueTolerance" /> is used.  Convergence can also be allowed on
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either" /> criteria or
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both" />
            criteria can be required.  By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.SolutionType">
      <summary>
            Gets or sets the type of solution required when searching for a precise crossing
            of this threshold.  This controls whether the value of the function at the identified
            crossing is slightly above or slightly below the threshold when it is not precisely
            on the threshold.  By default, this property has the value
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType.OnOrAboveThreshold" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.Value">
      <summary>
            Gets or sets the threshold value of interest.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.ValueTolerance">
      <summary>
            Gets or sets the tolerance with which to converge on value when finding
            a precise crossing of this threshold.  By default, this property has the value 0.0,
            but it is ignored because <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails.ConvergenceCriteria" /> is set to
            <see cref="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateSampleSuggestionCallback">
      <summary>
            A callback that is invoked to determine the next date at which <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />
            samples a function.
            </summary>
      <param name="intervalStart">The beginning of the overall interval being evaluated.</param>
      <param name="intervalStop">The end of the overall interval being evaluated.</param>
      <param name="lastSample">The last date that was sampled.</param>
      <returns>The next date to sample.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateSimpleFunction">
      <summary>
            A delegate that takes a <see cref="T:AGI.Foundation.Time.JulianDate" /> and returns a double.
            </summary>
      <param name="date">The date.</param>
      <returns>The double.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateThresholdCrossingFoundEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingFound" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateThresholdCrossingFoundEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateThresholdCrossingFoundEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.JulianDateThresholdCrossingIndicatedEventArgs">
      <summary>
            Holds details of the <see cref="E:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ThresholdCrossingIndicated" />
            event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.JulianDateThresholdCrossingIndicatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="finding">The finding indicated by this event.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.JulianDateThresholdCrossingIndicatedEventArgs.Finding">
      <summary>
            Gets the finding indicated by this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.KindOfStepSize">
      <summary>
            Indicates what kind of behavior the step size will have during integration.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.KindOfStepSize.Fixed">
      <summary>
            Maintain a given stepsize from one step to the next.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.KindOfStepSize.Relative">
      <summary>
            Update the stepsize relative to the error in the process of integration.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver">
      <summary>
            An intermediate base class for <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver">MultivariableFunctionSolvers</see> that will solve a function 
            by iteration towards a solution.  In each iteration, the change of the variable values will be evaluated, applied to the previous 
            variable values and repeated in the next iteration.  
            An instance of a type derived from this will pass in values of <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" /> into a 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> to drive them to satisfy this <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints">solver's constraints</see>.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver.#ctor">
      <summary>
            Initializes a new instance.  You must add at least one <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">variable</see> to the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" /> and one <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">constraint</see> to the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints" />, as well as set the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver.#ctor(AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver.ComputeNextStep(System.Double[],AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Computes the next differential step that this differential corrector should take.  
            </summary>
      <param name="variableValues">The current values of the variables.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The step that the variables should take in this iteration.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionDifferentialSolver.FindSolution(System.Int32,System.Boolean,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Solves the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see>.  This method must increment <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.CurrentIteration" /> 
            as well as set <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults" /> before this method returns.
            </summary>
      <param name="numberOfIterations">The number of iterations that may be performed while 
            attempting to find a solution.</param>
      <param name="justFinalResult">Tells this method to only include the final results, or 
            the results of each iteration.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>If the solver converged on a solution.  See the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults" /> 
            for the results.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver">
      <summary>
            The abstract base class for <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver">MultivariableFunctionSolvers</see>.  
            An instance of a type derived from this will pass in values of <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" /> into a 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> to drive them to satisfy this <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints">solver's constraints</see>.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.#ctor">
      <summary>
            Initializes a new instance.  You must add at least one <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">variable</see> to the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" /> and one <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">constraint</see> to the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints" />, as well as set the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.#ctor(AGI.Foundation.NumericalMethods.MultivariableFunctionSolver,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.CheckConstraints(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.SolverConstraintSettings},System.Double[])">
      <summary>
            A helper method to determine if the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">constraints</see> are
            satisfied with the <paramref name="currentConstraintValues" /></summary>
      <param name="constraints">The <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> of the function.</param>
      <param name="currentConstraintValues">The values to check against the <see cref="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.DesiredValue" /> 
            of the <paramref name="constraints" />.</param>
      <returns>true if all of the constraints are satisfied, false otherwise.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">constraint settings</see> corresponding to the 
            results computed by the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" />. There must be at least one 
            <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">constraint</see> set for this solver to work.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.CurrentIteration">
      <summary>
            Gets the number of the current iteration.  This should be incremented in 
            the <see cref="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.FindSolution(System.Int32,System.Boolean,AGI.Foundation.ITrackCalculationProgress)" /> method.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.FindSolution(System.Int32)">
      <summary>
            Solves the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" />.  By default, the results of every iteration will be stored.  
            </summary>
      <param name="numberOfIterations">The number of iterations that may be performed while 
            attempting to find a solution.</param>
      <returns>If the solver converged on a solution.  See the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults" /> 
            for the results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.FindSolution(System.Int32,System.Boolean)">
      <summary>
            Solves the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see>.  
            </summary>
      <param name="numberOfIterations">The number of iterations that may be performed while 
            attempting to find a solution.</param>
      <param name="justFinalResult">Tells this method to only include the final results, or 
            the results of each iteration.</param>
      <returns>If the solver converged on a solution.  See the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults" /> 
            for the results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.FindSolution(System.Int32,System.Boolean,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Solves the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see>.  This method must increment <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.CurrentIteration" /> 
            as well as set <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults" /> before this method returns.
            </summary>
      <param name="numberOfIterations">The number of iterations that may be performed while 
            attempting to find a solution.</param>
      <param name="justFinalResult">Tells this method to only include the final results, or 
            the results of each iteration.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>If the solver converged on a solution.  See the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults" /> 
            for the results.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> to solve.  When 
            <see cref="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.FindSolution(System.Int32,System.Boolean,AGI.Foundation.ITrackCalculationProgress)">the solver converges</see>, this function must 
            have been run with the variable values that converged.  This behavior must be obeyed when 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Multithreaded" /> is either true or false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.LastRunsResults">
      <summary>
            Gets or sets the entire <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults">results</see>
            of the previous run.  This includes such information as if the solution converged, 
            all the iteration results (if asked for), if the run was aborted, and all other information computed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Multithreaded">
      <summary>
            Gets or sets a flag to tell this solver to evaluate with as many threads as the current threading policy facet and 
            solver algorithm will allow.  Note that derived types should copy this in their copy constructor.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Reset">
      <summary>
            Resets the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.  This base method should be 
            called in the overridden method.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> that will be used when computing this function.  
            The variables passed to the function will be in the same order as this list of settings.  There 
            must be at least one <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">variable</see> set for this solver to work.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults">
      <summary>
            The results of a single iteration of a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.  This includes 
            the unperturbed run of the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" /> and all of the perturbed 
            runs of the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" /> for one time through the 
            <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.#ctor(AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults,System.Int32,AGI.Foundation.NumericalMethods.SolverVariableSettings[],AGI.Foundation.NumericalMethods.SolverConstraintSettings[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="functionResult">The results of the computed <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.</param>
      <param name="derivativeResults">The <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults" /> that were computed 
            when the derivative of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> was evaluated.  This can be optional if 
            the derivative of the function was not evaluated in the iteration that made these results (as can happen on the final iteration).</param>
      <param name="iteration">The count of the iteration that produced these results.  This should be zero based.</param>
      <param name="variableSettings">The settings of the variables that were used to compute all of the function evaluations.</param>
      <param name="constraintSettings">The settings of the constraints that were computed in all of the function evaluations.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.#ctor(AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults[],System.Int32,AGI.Foundation.NumericalMethods.SolverVariableSettings[],AGI.Foundation.NumericalMethods.SolverConstraintSettings[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="functionResult">The results of the computed <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.</param>
      <param name="perturbedResults">The <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> of all of the 
            runs of the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" /> where a <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> 
            was perturbed.  This array should be in the same order as the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" />.  
            This can be empty if this is the final iteration that converged.</param>
      <param name="iteration">The count of the iteration that produced these results.  This should be zero based.</param>
      <param name="variableSettings">The settings of the variables that were used to compute all of the function evaluations.</param>
      <param name="constraintSettings">The settings of the constraints that were computed in all of the function evaluations.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.DerivativeResults">
      <summary>
            Gets the results of the evaluation of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">functions</see> derivative.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.FunctionResult">
      <summary>
            Gets the results from the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetConstraintSettings">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> that correspond to the 
            <see cref="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetConstraintValues">constraints computed by the function</see>.  
            The order of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> in this array matches the order of the computed values.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> that correspond to the values computed by all the 
            function evaluations in this set of results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetPerturbedResults(System.Int32)">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults">results</see> of the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" /> when the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">variable</see> 
            with the same <paramref name="index" /> in the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> was perturbed for this iteration.  
            Note that this may return null if the Jacobian of the function that made these results was computed 
            analytically or if <paramref name="index" /> is higher than the number of variables in the function.
            </summary>
      <param name="index">The index of the results to get.</param>
      <returns>The <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" /> when the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">variable</see> 
            with the same <paramref name="index" /> in the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> was perturbed for this iteration.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetVariableSettings">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> that correspond to the variable values used to compute 
            all of the function evaluations.  The order of the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> in this array matches 
            the order of the variable values.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> that correspond to the values used to compute all the 
            function evaluations in this set of results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.IndexOfConstraint(AGI.Foundation.NumericalMethods.SolverConstraintSettings)">
      <summary>
            Gets the index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> in the array that is returned by the 
            <see cref="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetConstraintSettings" /> method.  This index also corresponds to the evaluated value 
            in the array returned by the <see cref="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetConstraintValues" /> of 
            every <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this set of results.
            </summary>
      <param name="constraint">The <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> whose index is desired.</param>
      <returns>The index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> matching the <paramref name="constraint" /> 
            and constraint value in all of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this, or -1 if the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> is not stored in this set of results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.IndexOfConstraint(System.String)">
      <summary>
            Gets the index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> with the matching 
            <paramref name="constraintName" /> in the array that is returned by the 
            <see cref="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetConstraintSettings" /> method.  This index also corresponds to the evaluated value 
            in the array returned by the <see cref="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetConstraintValues" /> of 
            every <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this set of results.
            </summary>
      <param name="constraintName">The name of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> whose index is desired.</param>
      <returns>The index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> with the matching <paramref name="constraintName" /> 
            and constraint value in all of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this, or -1 if the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> is not stored in this set of results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.IndexOfVariable(AGI.Foundation.NumericalMethods.SolverVariableSettings)">
      <summary>
            Gets the index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> in the array that is returned by the 
            <see cref="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetVariableSettings" /> method.  This index also corresponds to the variable values 
            in the array returned by the <see cref="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetVariablesUsed" /> of 
            every <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this set of results.
            </summary>
      <param name="variable">The <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> whose index is desired.</param>
      <returns>The index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> matching the <paramref name="variable" /> 
            and variable value in all of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this, or -1 if the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> is not stored in this set of results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.IndexOfVariable(System.String)">
      <summary>
            Gets the index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> with the matching 
            <paramref name="variableName" /> in the array that is returned by the 
            <see cref="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.GetConstraintSettings" /> method.  This index also corresponds to the variable value 
            in the array returned by the <see cref="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetVariablesUsed" /> of 
            every <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this set of results.
            </summary>
      <param name="variableName">The name of the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> whose index is desired.</param>
      <returns>The index of the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> with the matching <paramref name="variableName" /> 
            and variable value in all of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> stored in this, or -1 if the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> is not stored in this set of results.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults.Iteration">
      <summary>
            Gets the iteration count of these results.  This is zero based.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults">
      <summary>
            A type storing the overall results of a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.  If requested, 
            this type will store all the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults" /> from an entire 
            run of a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults},System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="iterationResults">The results of each iteration.  This should contain at least one 
            <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults" />.</param>
      <param name="aborted">Indicated if the run of the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> was aborted 
            or not.</param>
      <param name="converged">Indicated if the run of the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> converged 
            or not.</param>
      <param name="warnings">Warning that the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> encountered.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults.Aborted">
      <summary>
            Gets if the run aborted.  This can happen either by the user canceling the computation, 
            or if some <see cref="T:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning">warning</see> was detected that 
            prevented the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> from running to completion.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults.Converged">
      <summary>
            Gets if the run converged.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults.FinalIteration">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverIterationResults" /> of the final iteration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults.IterationResults">
      <summary>
            Gets the results for each iteration of this run.  At the very least this must contain the 
            final iterations result.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolverResults.Warnings">
      <summary>
            Gets a list of warning that the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> encountered.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver">
      <summary>
        <para>A differential corrector for solving <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">SolvableMultivariableFunctions</see>.  
            This uses the Newton-Raphson method for solving a function with multiple variables.  
            </para>
        <para>
          <a href="../Programmer%27s%20Guide/Overview/SegmentedPropagator/FunctionSolver.html">See the Overview documentation for more 
            detail for how to use this and Function Solvers in general.</a>
        </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver.#ctor">
      <summary>
            Initializes a new instance.  You must add at least one <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">variable</see> to the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" /> and one <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">constraint</see> to the 
            <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints" />, as well as set the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Function" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver.#ctor(AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver.ComputeNextStep(System.Double[],AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Computes the next differential step that this differential corrector should take.  
            </summary>
      <param name="variableValues">The current values of the variables.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The step that the variables should take in this iteration.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NewtonRaphsonMultivariableFunctionSolver.Multithreaded">
      <summary>
            Gets or sets a flag to tell this solver to evaluate an iteration with as many threads as the current threading 
            policy facet will allow, or with as many <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" />
            as there are in the function plus 1; whichever is less. By default this is true.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.NumericalIntegrator">
      <summary>
            A numerical integrator which can be used to update a set of dependent variables over a given step 
            of an independent variable by using a differential equation defining the derivatives.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.#ctor(AGI.Foundation.NumericalMethods.NumericalIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Create a copy of this integrator.
            </summary>
      <param name="context">The context in which to create the copy.</param>
      <returns>The copy of this integrator.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize">
      <summary>
            Gets the current (positive) size of the step which the integrator will use for the next integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.Dimension">
      <summary>
            Gets the number of dependent variables based on the 
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.Dimension" /> of the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.SystemOfEquations" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.Direction">
      <summary>
            Gets or sets whether to integrate forward, increasing the independent variable, or backward,
            decreasing the independent variable.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalDependentVariableValues">
      <summary>
            Gets the values of the dependent variables resulting from the last integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue">
      <summary>
            Gets the value of the independent variable after an integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialDependentVariableValues">
      <summary>
            Gets the values of the dependent variables prior to an integration step.
            These values will be updated to the previous <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalDependentVariableValues" />
            at the beginning of each integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue">
      <summary>
            Gets the value of the independent variable prior to an integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialStepSize">
      <summary>
            Gets or sets the initial (positive) size of the step to add to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            when performing an integration.  By default, the initial value is one.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.Integrate">
      <summary>
            Perform an integration step moving the independent and dependent variables from their 
            initial (the final values of the previous step) to their new final values, 
            using the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" />.
            <para>
            When overriding this method, <see cref="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.StartNextStep" /> should be called prior to
            integration.  
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.Integrate(System.Double)">
      <summary>
            Perform an integration step moving the independent and dependent variables from their 
            initial (the final values of the previous step) to their new final values.
            <para>
            When overriding this method, <see cref="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.StartNextStep" /> should be called prior to
            integration.  Also note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.PreviousStepSize">
      <summary>
            Gets the size of the last step taken by the integrator.  This returns the difference between the
            <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" /> and the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.Reintegrate(System.Double)">
      <summary>
            Repeats the last integration of the differential equations.
            <para>
            When overriding this method, note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.StartNextStep">
      <summary>
            This performs the task of setting the Initial values to the previous Final values prior to taking the next step.
            This method is called prior to integrating the step but not called during re-integration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.StepSizeInformation">
      <summary>
            Gets a flag indicating whether the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> was changed from the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialStepSize" /> 
            and, if so, the nature of how it was changed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.SystemOfEquations">
      <summary>
            Gets or sets the system of differential equations corresponding to the derivatives of the
            dependent variables.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.NumericallyComputedMultivariableFunctionDerivativeResults">
      <summary>
            The results of an evaluation of the derivative of a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> when that evaluation 
            was done with a numerical algorithm.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.NumericallyComputedMultivariableFunctionDerivativeResults.#ctor(AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,System.Double[0:,0:],AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults[],System.Boolean,AGI.Foundation.NumericalMethods.FiniteDifferenceMethod)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="value">The value of the function at the nominal variable values.  This may be null 
            if the routine that computed these results did not compute the value of the function.</param>
      <param name="jacobian">The Jacobian of the function evaluated at the variables of the <paramref name="value" />.</param>
      <param name="perturbedResultsUsedToComputeDerivative">The evaluations of the function used to compute the <paramref name="jacobian" />.</param>
      <param name="validPerturbations">If the perturbations of the variables were are valid.  This may be 
            false if the results of the function changed by too small of a value when the perturbations 
            were applied to the variables.</param>
      <param name="differenceMethod">What difference method was used to compute these results.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericallyComputedMultivariableFunctionDerivativeResults.DifferenceMethod">
      <summary>
            Gets which difference method was used to compute these results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericallyComputedMultivariableFunctionDerivativeResults.FunctionResultsUsedToComputeDerivative">
      <summary>
            Gets the results of the function that were computed at the perturbed values of the variables.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericallyComputedMultivariableFunctionDerivativeResults.ValidPerturbations">
      <summary>
            Gets if the perturbations are valid.  If they are not then consider halting whatever operation 
            is evaluating these results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.NumericallyComputedMultivariableFunctionDerivativeResults.Value">
      <summary>
            Gets the results of the function at the nominal values of the variables.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial">
      <summary>
            Represents a 2nd order polynomial function of one variable with only real coefficients.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Constructs a quadratic polynomial with the provided real coefficients.
            </summary>
      <param name="a">The coefficient of the 2nd order monomial.</param>
      <param name="b">The coefficient of the 1st order monomial.</param>
      <param name="c">The coefficient of the 0th order monomial.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.A">
      <summary>
            Gets the coefficient of the 2nd order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.B">
      <summary>
            Gets the coefficient of the 1st order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.C">
      <summary>
            Gets the coefficient of the 0th order monomial.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.Discriminant">
      <summary>
            Provides the discriminant of the quadratic equation from the supplied coefficients.
            </summary>
      <returns>The value of the discriminant.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.Discriminant(System.Double,System.Double,System.Double)">
      <summary>
            Provides the discriminant of the quadratic equation from the supplied coefficients.
            </summary>
      <param name="a">The coefficient of the 2nd order monomial.</param>
      <param name="b">The coefficient of the 1st order monomial.</param>
      <param name="c">The coefficient of the 0th order monomial.</param>
      <returns>The value of the discriminant.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.RealRoots">
      <summary>
            Provides the real valued roots of the real polynomial.
            </summary>
      <returns>An array containing the real valued roots.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuadraticRealPolynomial.RealRoots(System.Double,System.Double,System.Double)">
      <summary>
            Provides the real valued roots of the real polynomial with the provided coefficients.
            </summary>
      <param name="a">The coefficient of the 2nd order monomial.</param>
      <param name="b">The coefficient of the 1st order monomial.</param>
      <param name="c">The coefficient of the 0th order monomial.</param>
      <returns>An array containing the real valued roots.</returns>
      <exception cref="T:System.ArithmeticException">
            Thrown when the polynomial does not have any real roots.
            </exception>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.QuarticRealPolynomial">
      <summary>
            Represents a 4th order polynomial function of one variable with only real coefficients.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructs a cubic polynomial with the provided real coefficients.
            </summary>
      <param name="a">The coefficient of the 4th order monomial.</param>
      <param name="b">The coefficient of the 3rd order monomial.</param>
      <param name="c">The coefficient of the 2nd order monomial.</param>
      <param name="d">The coefficient of the 1st order monomial.</param>
      <param name="e">The coefficient of the 0th order monomial.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.A">
      <summary>
            Gets the coefficient of the 4th order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.B">
      <summary>
            Gets the coefficient of the 3rd order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.C">
      <summary>
            Gets the coefficient of the 2nd order monomial.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.D">
      <summary>
            Gets the coefficient of the 1st order monomial.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.Discriminant">
      <summary>
            Provides the discriminant of the quartic equation from the supplied coefficients.
            </summary>
      <returns>The value of the discriminant.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.Discriminant(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Provides the discriminant of the quartic equation from the supplied coefficients.
            </summary>
      <param name="a">The coefficient of the 4th order monomial.</param>
      <param name="b">The coefficient of the 3rd order monomial.</param>
      <param name="c">The coefficient of the 2nd order monomial.</param>
      <param name="d">The coefficient of the 1st order monomial.</param>
      <param name="e">The coefficient of the 0th order monomial.</param>
      <returns>The value of the discriminant.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.E">
      <summary>
            Gets the coefficient of the 0th order monomial.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.RealRoots">
      <summary>
            Provides the real valued roots of the real polynomial.
            </summary>
      <returns>An array containing the real valued roots.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.QuarticRealPolynomial.RealRoots(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Compute real roots.
            </summary>
      <param name="a">The coefficient of the 4th order monomial.</param>
      <param name="b">The coefficient of the 3rd order monomial.</param>
      <param name="c">The coefficient of the 2nd order monomial.</param>
      <param name="d">The coefficient of the 1st order monomial.</param>
      <param name="e">The coefficient of the 0th order monomial.</param>
      <returns>An array containing the real valued roots.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.RealValuedScalarFunction">
      <summary>
            A univariate, real valued, scalar function of a variable of type double.
            </summary>
      <param name="x">The independent variable to the function.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.RealValuedScalarFunction`1">
      <summary>
            A real valued, scalar function of a variable of type T.  The function may be either univariate
            or multivariate, based on the dimensionality of T.
            </summary>
      <param name="x">The independent variable to the function.</param>
      <typeparam name="T">The type of the function's independent variable.</typeparam>
      <returns>The value of the function.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1">
      <summary>
            Adapts any <see cref="T:AGI.Foundation.NumericalMethods.RealValuedScalarFunction" /> to implement
            <see cref="T:AGI.Foundation.Function`2" />.
            </summary>
      <typeparam name="T">The type of the function's independent variable.</typeparam>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunction{`0})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="function">The function to adapt.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.Evaluate(`0)">
      <summary>
            Evaluates the function.
            </summary>
      <param name="x">The independent variable at which to evaluate.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.Evaluate(`0,System.Int32)">
      <summary>
            Evaluates the function.
            </summary>
      <param name="x">The independent variable at which to evaluate.</param>
      <param name="order">Ignored; this class does not evaluate derivatives.</param>
      <returns>The value of the function.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.Function">
      <summary>
            Gets or sets the function to adapt.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RealValuedScalarFunctionAdapter`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator">
      <summary>
            Interpolates and extrapolates rotational motion with the rotation represented as a
            <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> and derivatives represented as rotation vectors.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.#ctor">
      <summary>
            Initializes a new instance.  The user must set the <see cref="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.InterpolationAlgorithm" /> and
            <see cref="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.Data" /> properties.  The <see cref="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.Degree" /> property is initialized to 5 by default.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="interpolationAlgorithm">
            The interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="interpolationAlgorithm">
            The interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree"> The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="algorithmType">
            The type of interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="algorithmType">
            The type of interpoation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpoation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.RotationalMotionInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.CheckForSameDefinition(AGI.Foundation.NumericalMethods.RotationalMotionInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.Data">
      <summary>
            Gets or sets the data over which to interpolate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.Degree">
      <summary>
            Gets or sets the degree of interpolation to perform.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.GetEvaluator">
      <summary>
            Gets an evaluator that interpolates and extrapolates rotational motion with the rotation represented as a
            <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> and derivatives represented as rotation vectors.
            </summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that interpolates and extrapolates rotational motion with the rotation represented as a
            <see cref="T:AGI.Foundation.Coordinates.Quaternion" /> and derivatives represented as rotation vectors.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the provided <see cref="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.InterpolationAlgorithm" /> does not have derivative information up to the required order.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.InterpolationAlgorithm" /> requires more derivatives
            than were provided.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.InterpolationAlgorithm">
      <summary>
            Gets or sets the interpolation algorithm used to interpolate the rotational motion.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.SegmentBoundaryTimes">
      <summary>
            Gets or sets the boundary times between segments that the interpolator should not interpolate over.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.RungeKutta4Integrator">
      <summary>
            A fourth-order fixed step Runge-Kutta integrator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKutta4Integrator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKutta4Integrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives)">
      <summary>
            Initializes a new instance based on the given differential system for the derivatives 
            of the dependent variables.
            </summary>
      <param name="system">The system of differential equations defining the derivatives
            for the dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKutta4Integrator.#ctor(AGI.Foundation.NumericalMethods.RungeKutta4Integrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKutta4Integrator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Create a copy of this integrator.
            </summary>
      <param name="context">The context in which to create the copy.</param>
      <returns>The copy of this integrator.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator">
      <summary>
            This is a seventh order Runge-Kutta algorithm with error control based on the work 
            of Fehlberg which can adapt the size of the integration step based on comparing the
            eight order evaluation with the seventh order evaluation to produce an estimate of
            the numerical error produced by a given integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives,System.Double)">
      <summary>
            Initializes a new instance based on the given system of equations and initial step size.
            </summary>
      <param name="system">The system of equations that define the derivatives for the dependent variables.</param>
      <param name="initialStepSize">The initial size of the integration step.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.#ctor(AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.AbsoluteTolerance">
      <summary>
            Gets or sets the tolerance which provides a baseline for the error control.
            By default, this value is <see cref="F:AGI.Foundation.Constants.Epsilon10" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.AdaptStep">
      <summary>
            This method updates the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> to account for error in the state and its derivatives.
            It returns true if the integrator should reintegrate with the updated step size or false if the integrator
            should continue to the next integration step (potentially with a different step size).
            </summary>
      <returns>True if the integrator should reintegrate. False if the integrator should continue to the next step.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Create a copy of this integrator.
            </summary>
      <param name="context">The context in which to create the copy.</param>
      <returns>The copy of this integrator.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.RungeKuttaFehlberg78Integrator.RelativeTolerance">
      <summary>
            Gets or sets the tolerance which provides a relative weight for the numerical error
            based on the dependent variables. By default, this value is <see cref="F:AGI.Foundation.Constants.Epsilon13" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">
      <summary>
            A function that can be solved for by a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.#ctor(AGI.Foundation.NumericalMethods.SolvableMultivariableFunction,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.CreateClonesOfFunctionForParallelEvaluation(AGI.Foundation.NumericalMethods.SolvableMultivariableFunction,System.Int32)">
      <summary>
            Creates a set of independent clones of the <paramref name="function" />.
            </summary>
      <param name="function">The function to clone.</param>
      <param name="numberOfCopies">The number of clones of the <paramref name="function" /> you need.</param>
      <returns>A batch of cloned <paramref name="function">functions</paramref>.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.DifferenceMethod">
      <summary>
            Gets or sets how the default numerically computed derivative of this function should be computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.Evaluate(System.Double[],AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the function. The <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> returned must include the computed 
            constraints in the order that they are in the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints" />.  
            If your function computes more than just constraint values you should extend 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> to contain those additional results.
            </summary>
      <param name="variables">The value of the variables to evaluate at.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The constraint values and any other results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.Evaluate(System.Double[],System.Int32,System.Boolean,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the function and the Jacobian. 
            </summary>
      <param name="variables">The values of the variables to evaluate at.</param>
      <param name="order">The highest order of the function that should be evaluated.  By default, this can be 0 or 1.</param>
      <param name="multithreaded">Should the evaluation be done using as many cores as possible.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The constraint values, Jacobian, and any other results.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.EvaluateDerivative(System.Double[],System.Boolean,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the Jacobian of this function.  The default implementation of this method will numerically compute the 
            Jacobian.  To do that, the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults">value of the function</see> at the 
            <paramref name="variables" /> will be computed.  When using the default implementation, the 
            <see cref="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.PerturbationValues" /> must be set.
            </summary>
      <param name="variables">The values to compute the Jacobian at.</param>
      <param name="multithreaded">Should the evaluation be done using as many cores as possible.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The Jacobian and any other relevant results evaluated while evaluating the derivative of this function.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.EvaluateDerivative(System.Double[],System.Boolean,AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Evaluates the Jacobian of this function.  The default implementation of this method will numerically compute the 
            Jacobian.  To do that, the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults">value of the function</see> at the 
            <paramref name="variables" /> will be computed.
            </summary>
      <param name="variables">The values to compute the Jacobian at.</param>
      <param name="multithreaded">Should the evaluation be done using as many cores as possible.</param>
      <param name="valueResults">The evaluated value of the function at the <paramref name="variables" />.  
            If this is null then this function will be evaluated at the <paramref name="variables" /> 
            as part of the default evaluation of the Jacobian.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The Jacobian and any other relevant results evaluated while evaluating the derivative of this function.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.PerturbationValues">
      <summary>
            Gets or sets the values to use to perturb the variables when the derivative is computed numerically. 
            This can be ignored if the concrete function computes its derivative analytically.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults">
      <summary>
            The results of an evaluation of the derivative of a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults.#ctor(System.Double[],System.Double[0:,0:])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="variables">The variables that the functions derivative was evaluated at.</param>
      <param name="jacobian">The Jacobian of the function evaluated at the <paramref name="variables" />.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults.Jacobian">
      <summary>
            Gets the evaluated Jacobian.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults.Variables">
      <summary>
            Gets the variables that the <see cref="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults.Jacobian" /> was evaluated at.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionEvaluationAndDerivativeResults">
      <summary>
            Contains the evaluated value and derivative results of a 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">SolvableMultivariableFunctions</see> .
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionEvaluationAndDerivativeResults.#ctor(AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionDerivativeResults)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="value">The results from the evaluation of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.</param>
      <param name="firstDerivative">The derivative results from the evaluation of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionEvaluationAndDerivativeResults.DerivativeResults">
      <summary>
            Gets the derivative results from the evaluation of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionEvaluationAndDerivativeResults.Value">
      <summary>
            Gets the results from the evaluation of the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults">
      <summary>
            The result of <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.  If your <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> 
            computes more than just the values of the constraint, you will want to extend this type to store those other results.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.#ctor(System.Double[],System.Double[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="variableUsed">The values of the variables that were used to compute the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see>.  This should just be the variables 
            passed into the <see cref="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction.Evaluate(System.Double[],AGI.Foundation.ITrackCalculationProgress)">Evaluate</see> method.</param>
      <param name="constraintResults">The value of the constraints as computed by a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetConstraintValues">
      <summary>
            Returns a copy of constraint values computed by the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see>.  
            The values in the array are in the same order as the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Constraints" />.
            </summary>
      <returns>The values of the constraints from the function evaluation.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults.GetVariablesUsed">
      <summary>
            Returns a copy of variable values used to compute the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see>.  
            The values in the array are in the same order as the <see cref="P:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver.Variables" />.
            </summary>
      <returns>The values of the variables used for the function evaluation.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings">
      <summary>
            The settings for a constraint used by a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> that gets solved by a 
            <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverConstraintSettings.#ctor(AGI.Foundation.NumericalMethods.SolverConstraintSettings,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverConstraintSettings.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="desiredValue">The desired value that the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> 
            will be driven to.</param>
      <param name="tolerance">How close the evaluated value must get to the <see cref="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.DesiredValue" /> to consider
            this constraint satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverConstraintSettings.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.DesiredValue">
      <summary>
            Gets or sets the threshold that the corresponding value computed by the 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> will be driven to.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.Name">
      <summary>
            Gets or sets an optional name for this constraint.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.Tolerance">
      <summary>
            Gets or sets the tolerance that for the <see cref="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.DesiredValue" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolverFunctionEvaluatedEventArgs">
      <summary>
            An <see cref="T:System.EventArgs" /> wrapping a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverFunctionEvaluatedEventArgs.#ctor(AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="result">The <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> to include when an 
            event is fired.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverFunctionEvaluatedEventArgs.Results">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults" /> from the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> that fired 
            the event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SolverVariableSettings">
      <summary>
            The settings of a variable to use in a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverVariableSettings.#ctor(AGI.Foundation.NumericalMethods.SolverVariableSettings,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverVariableSettings.#ctor(System.Double)">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.InitialValue" /> will default to zero.
            </summary>
      <param name="maxStep">The maximum step to take when changing the value of this variable.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverVariableSettings.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="maxStep">The maximum step to take when changing the value of this variable.</param>
      <param name="initialValue">The initial value of the variable.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverVariableSettings.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="maxStep">The maximum step to take when changing the value of this variable.</param>
      <param name="initialValue">The initial value of the variable.</param>
      <param name="variableTolerance">How small of a step the variable can take when being solved numerically.  
            If all variables in a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> are asked to step by less than 
            this value, then the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> can not converge and will abort.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SolverVariableSettings.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.InitialValue">
      <summary>
            Gets or sets the initial value of the variable.  By default this is set to zero.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.MaximumStep">
      <summary>
            Gets or sets the maximum step to take.  This is to prevent a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> from
            taking too large of a step which might cause the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver">solver</see> 
            to jump over relevant changes and events.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.Name">
      <summary>
            Gets or sets an optional name for this variable.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.VariableTolerance">
      <summary>
            Gets or sets the minimum step that the variable is aloud to take. If a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />
            asks the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">function</see> to step by a value less than this, it 
            means that the function results will not change by any relevant amount.  If all the variables are asked 
            to step by a value less than their <see cref="P:AGI.Foundation.NumericalMethods.SolverVariableSettings.VariableTolerance" />, then the 
            <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver">solver</see> must abort.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.StepSizeInformation">
      <summary>
            Indicates the behavior of the size of an integration step produced by an integrator.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.StepSizeInformation.Unchanged">
      <summary>
            The step size was unchanged by the integrator
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.StepSizeInformation.Increased">
      <summary>
            The step size was increased by the integrator while adapting it.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.StepSizeInformation.Decreased">
      <summary>
            The step size was decreased by the integrator while adapting it.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.StepSizeInformation.UsedMaximum">
      <summary>
            The step size was bounded by the maximum step size.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.StepSizeInformation.UsedMinimum">
      <summary>
            The step size was bounded by the minimum step size.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.TimeIntervalFinder">
      <summary>
            Finds the time intervals during which a constraint on a function of time is satisfied.
            This is a convenient way to use the capabilities of <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.#ctor">
      <summary>
            Initializes a new instance with default parameters.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.#ctor(AGI.Foundation.Function{AGI.Foundation.Time.JulianDate,System.Double},System.Double)">
      <summary>
            Initializes a new instance using the specified function and constraint value.
            </summary>
      <param name="function">The function to evaluate.</param>
      <param name="constraintValue">The desired constraint value.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.#ctor(AGI.Foundation.Function{AGI.Foundation.Time.JulianDate,System.Double},System.Double,AGI.Foundation.Time.Duration)">
      <summary>
            Initializes a new instance using the specified function, constraint value,
            and sampling interval.
            </summary>
      <param name="function">The function to evaluate.</param>
      <param name="constraintValue">The desired constraint value.</param>
      <param name="samplingInterval">The maximum interval on which to sample the function.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ConstraintValue">
      <summary>
            Gets or sets the desired constraint value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.DebuggingLogger">
      <summary>
            Gets or sets a logger to which debugging information will be written.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ExtremaCrossingUncertaintyFactor">
      <summary>
            Gets or sets a value determining how finely to explore an extremum with the potential to cross a threshold.
            This value is passed along to the <see cref="P:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.ExtremaCrossingUncertaintyFactor">property of the same name</see>
            on the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.FindIntervals(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the intervals on which the <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Function" /> satisfies the
            <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ConstraintValue" /> over the specified interval.
            </summary>
      <param name="start">The beginning of the interval on which to search.</param>
      <param name="stop">The end of the interval on which to search.</param>
      <returns>A collection of intervals on which the function satisfies the constraint.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.FindIntervals(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Finds the intervals on which the <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Function" /> satisfies the
            <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ConstraintValue" /> over the specified interval.
            </summary>
      <param name="start">The beginning of the interval on which to search.</param>
      <param name="stop">The end of the interval on which to search.</param>
      <param name="tracker">The object to which progress is reported and that is able to cancel the operation.</param>
      <returns>A collection of intervals on which the function satisfies the constraint.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the threshold crossings of the function are not consistent. This usually indicates that a 
            singularity exists near the threshold value.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.FindIntervals(AGI.Foundation.Time.JulianDate,System.Boolean,AGI.Foundation.Time.JulianDate,System.Boolean)">
      <summary>
            Finds the intervals on which the <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Function" /> satisfies the
            <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ConstraintValue" /> over the specified interval.
            </summary>
      <param name="start">The beginning of the interval on which to search.</param>
      <param name="isStartIncluded">true if the start date is included in the interval, otherwise false.</param>
      <param name="stop">The end of the interval on which to search.</param>
      <param name="isStopIncluded">true if the stop date is included in the interval, otherwise false.</param>
      <returns>A collection of intervals on which the function satisfies the constraint.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the threshold crossings of the function are not consistent. This usually indicates that a 
            singularity exists near the threshold value.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.FindIntervals(AGI.Foundation.Time.JulianDate,System.Boolean,AGI.Foundation.Time.JulianDate,System.Boolean,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Finds the intervals on which the <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Function" /> satisfies the
            <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ConstraintValue" /> over the specified interval.
            </summary>
      <param name="start">The beginning of the interval on which to search.</param>
      <param name="isStartIncluded">true if the start date is included in the interval, otherwise false.</param>
      <param name="stop">The end of the interval on which to search.</param>
      <param name="isStopIncluded">true if the stop date is included in the interval, otherwise false.</param>
      <param name="tracker">The object to which progress is reported and that is able to cancel the operation.</param>
      <returns>A collection of intervals on which the function satisfies the constraint.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the threshold crossings of the function are not consistent. This usually indicates that a 
            singularity exists near the threshold value.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Function">
      <summary>
            Gets or sets the function to evaluate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.MultithreadFindIntervals">
      <summary>
            Gets or sets the boolean value indicating whether or not a call to <see cref="M:AGI.Foundation.NumericalMethods.TimeIntervalFinder.FindIntervals(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.ITrackCalculationProgress)" /> should
            be run in multithreaded mode.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Sampler">
      <summary>
            Gets or sets the sampler that controls the times at which the function is sampled
            while searching for satisfaction intervals.  Consider using
            <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling" /> and <see cref="M:AGI.Foundation.NumericalMethods.JulianDateFunctionSampling.GetFunctionSampler" />.
            If this property is null, the function is sampled at fixed steps
            defined by the <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.SamplingInterval" /> property.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.SamplingInterval">
      <summary>
            Gets or sets the independent variable sampling increment.  If <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Sampler" />
            is null, this is the fixed step that is used to sample the entire interval.  If
            <see cref="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.Sampler" /> is non-null, this property is ignored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.TimeTolerance">
      <summary>
            Gets or sets the convergence tolerance on the time when finding function extremum
            and crossings of the constraint threshold.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the user attempts to set a <see cref="T:AGI.Foundation.Time.Duration" /> whose
            <see cref="P:AGI.Foundation.Time.Duration.TotalSeconds">TotalSeconds</see> are less than or equal to zero.</exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TimeIntervalFinder.ValueTolerance">
      <summary>
            Gets or sets the convergence tolerance on the function value when finding function
            extremum and crossings of the constraint threshold.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the user attempts to set a value less than or equal to zero.</exception>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator">
      <summary>
            Interpolates and extrapolates translational motion represented as
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.#ctor">
      <summary>
            Initializes a new instance.  The user must set the <see cref="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.InterpolationAlgorithm" /> and
            <see cref="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.Data" /> properties.  The <see cref="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.Degree" /> property is initialized to 5.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="interpolationAlgorithm">
            The interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="interpolationAlgorithm">
            The interpolation algorithm to use the interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="algorithmType">
            The type of interpolation algorithm to use to interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.InterpolationAlgorithmType,System.Int32,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="algorithmType">
            The type of interpolation algorithm to use the interpolate the motion.
            </param>
      <param name="degree">The degree of interpolation to perform.</param>
      <param name="data">The data over which to interpolate.</param>
      <param name="segmentBoundaryTimes">
            The boundary times between segments that the interpolator should not interpolate over.
            </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.#ctor(AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.CheckForSameDefinition(AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.Data">
      <summary>
            Gets or sets the data over which to interpolate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.Degree">
      <summary>
            Gets or sets the degree of interpolation to perform.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.GetEvaluator">
      <summary>
            Gets an evaluator that interpolates and extrapolates translational motion represented as
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <returns>The Evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that interpolates and extrapolates translational motion represented as
            <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> coordinates.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the provided <see cref="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.InterpolationAlgorithm" /> does not have derivative information up to the required order.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.InterpolationAlgorithm" /> requires more derivatives
            than were provided.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.InterpolationAlgorithm">
      <summary>
            Gets or sets the interpolation algorithm used to interpolate the translational motion.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.SegmentBoundaryTimes">
      <summary>
            Gets or sets the boundary times between segments that the interpolator should not interpolate over.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator">
      <summary>
            Base class for all <see cref="T:AGI.Foundation.NumericalMethods.NumericalIntegrator" /> objects who can use error information
            produced during integration to adapt the size of the step in order to adjust the amount of
            error introduced into the dependent variables over successive integration steps.  This
            also allows varying the size of the step to arrive at a final stopping time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.AdaptiveWeights">
      <summary>
            Gets or sets the weights to be applied to the state elements when
            computing the error which determines how to adapt the step size.
            This is in addition to any weights used in the integration algorithm
            itself.  If these weights have not been initialized before 
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.Initialize(System.Double,System.Double[])" /> is called, they will be set to a default value
            of one.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.AdaptStep">
      <summary>
            This method updates the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> to account for error in the state and its derivatives.
            It returns true if the integrator should reintegrate with the updated step size or false if the integrator
            should continue to the next integration step (potentially with a different step size).
            </summary>
      <returns>True if the integrator should reintegrate. False if the integrator should continue to the next step.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.AdjustStep(System.Double,System.Double)">
      <summary>
            Adjusts a given step by increasing it or decreasing it based on the given error.
            If the error is greater than one, the step will increase.  Otherwise, it will decrease.
            After adjusting the step, <see cref="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.BoundAndTruncateStepSize(System.Double)" /> is called.
            </summary>
      <param name="step">The size of the step to adjust.</param>
      <param name="errorRatio">The error ratio factor.</param>
      <returns>The new size of the step.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.BoundAndTruncateStepSize(System.Double)">
      <summary>
            A method which should be called before updating the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> which
            will bound the size based on the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.MinimumStepSize" /> and <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.MaximumStepSize" />,
            and will truncate it based on the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepTruncationOrder" />.
            </summary>
      <param name="stepSize">The size of the previous step to bound and truncate.</param>
      <returns>The new value within the minimum and maximum and only containing significant digits to the specified order.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize">
      <summary>
            Gets the current (positive) size of the step which the integrator will use for the next integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.Integrate">
      <summary>
            Perform an integration step moving the independent and dependent variables from their 
            initial (the final values of the previous step) to their new final values, 
            using the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" />.
            <para>
            When overriding this method, <see cref="M:AGI.Foundation.NumericalMethods.NumericalIntegrator.StartNextStep" /> should be called prior to
            integration.  
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.Integrate(System.Double)">
      <summary>
            Integrate the current integration step with the given step size.
            </summary>
      <param name="stepSize">The stepsize at which to take the integration step.</param>
      <returns>The stepsize which was actually used to take the step.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.Iterations">
      <summary>
            Gets the number of iteration required to adapt the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> to
            within error tolerance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.MaximumIterations">
      <summary>
            Gets or sets the maximum number of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.Iterations" /> to allow before forcing the integrator
            to accept the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> and proceed to the next step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.MaximumStepSize">
      <summary>
            Gets or sets the maximum size of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.MinimumStepSize">
      <summary>
            Gets or sets the (positive) minimum size of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.SetCurrentStepSize(System.Double)">
      <summary>
            Sets the value of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" /> which the 
            integrator will use for the next integration step.
            </summary>
      <param name="value">The (positive) value to add to the independent variable
            for the next integration step.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepDeflationExponent">
      <summary>
            Gets or sets the exponent to apply to the error when calculating the amount to decrease the size of the step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepDeflationFactor">
      <summary>
            Gets or sets a scalar multiplier to apply to the step when decreasing it.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepInflationExponent">
      <summary>
            Gets or sets the exponent to apply to the error when calculating the amount to increase the size of the step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepInflationFactor">
      <summary>
            Gets or sets a scalar multiplier to apply to the step when increasing it.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepSizeBehavior">
      <summary>
            Gets or sets whether to avoid adapting the step size and instead fix the value of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.StepTruncationOrder">
      <summary>
            Gets or sets the integer exponent specifying the order of magnitude at which to 
            truncate the significant digits in the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator.CurrentStepSize" />.  For instance,
            to truncate the value to three decimal places, specify a truncation order of -3.
            To truncate the value to an order of 100, specify a truncation order of 2.  To specify
            the step size should be an integer value, specify a truncation order of 0.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.BehaviorWhenOnThreshold">
      <summary>
            Indicates the behavior of a function explorer such as <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />
            when a function value exactly equals a threshold value.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BehaviorWhenOnThreshold.TreatAsAbove">
      <summary>
            Indicates that a function value that is exactly equal to the threshold is
            treated as being ABOVE the threshold.  In other words, a crossing will
            be indicated when the function goes from being below the threshold to being
            on it, but will NOT be indicated when the function goes from being above the
            threshold to being on it.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BehaviorWhenOnThreshold.TreatAsBelow">
      <summary>
            Indicates that a function value that is exactly equal to the threshold is
            threated as being BELOW the threshold.  In other words, a crossing will
            be indicated when the function goes from being above the threshold to being
            on it, but will NOT be indicated when the function goes from being below the
            threshold to being on it.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.BracketToward">
      <summary>
            Defines the behavior of a root finder such as <see cref="T:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot" /> when a sampled
            function value exactly equals zero and the root finder's <see cref="T:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria" />
            requires convergence on the independent variable.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Earliest">
      <summary>
            The new bracket will be formed from the just-sampled zero and the side of the
            previous bracket with a smaller independent variable value.  The identified
            root will represent the first time (within tolerance) that the function
            is zero.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Latest">
      <summary>
            The new bracket will be formed from the just-sampled zero and the side of the
            previous bracket with a larger independent variable value.  The identified
            root will represent the last time (within tolerance) that the function
            is zero.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Positive">
      <summary>
            The new bracket will be formed from the just-sampled zero and the side of the
            previous bracket with a positive sampled function value.  The identified root
            will represent the first time (within tolerance) that the function is zero
            after being negative, or the last time that it is zero before going
            negative.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Negative">
      <summary>
            The new bracket will be formed from the just-sampled zero and the side of the
            previous bracket with a negative sampled function value.  The identified root
            will represent the first time (within tolerance) that the function is zero
            after being positive, or the last time that it is zero before going
            positive.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum">
      <summary>
            Locates a local extremum (minimum or maximum) of a function using the Brent algorithm.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunction,System.Double,System.Double,AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria)">
      <summary>
            Initializes the extremum finding algorithm.
            </summary>
      <param name="function">The function to evaluate.</param>
      <param name="variableTolerance">The convergence tolerance in the independent variable.</param>
      <param name="functionTolerance">The convergence tolerance in the function value.</param>
      <param name="criteria">The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.ConvergenceCriteria" /> to be used.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="function" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="variableTolerance" /> or <paramref name="functionTolerance" /> is
            less than or equal to zero.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.CheckInitialBracketingPoints(System.Double,System.Double,System.Double)">
      <summary>
            Checks whether the given values will produce a valid initial bracketing interval.
            </summary>
      <param name="a">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <param name="b">The value of the independent variable between the limits of the bracketing interval.</param>
      <param name="c">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <returns>True if the values will produce a valid interval, otherwise false.  </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.CheckInitialBracketingPoints(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Checks whether the given values and function values will produce a valid initial bracketing interval.
            </summary>
      <param name="a">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <param name="fa">The function value when evaluated at <paramref name="a" />.</param>
      <param name="b">The value of the independent variable between the limits of the bracketing interval.</param>
      <param name="fb">The function value when evaluated at <paramref name="b" />.</param>
      <param name="c">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <param name="fc">The function value when evaluated at <paramref name="c" />.</param>
      <param name="tolerance">The convergence tolerance in the value.</param>
      <returns>True if the values will produce a valid interval, otherwise false.  </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.ConvergenceCriteria">
      <summary>
            Gets the criteria used in determining convergence.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Error">
      <summary>
            Gets the error at this estimate in the quadratic approximation relative to the real function. This is the value
            checked against the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.FunctionTolerance" /> to determine convergence.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Extremum">
      <summary>
            Gets the current estimate of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.ExtremumKind">
      <summary>
            Gets whether this extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.FindExtremum(System.Int32)">
      <summary>
            Attempts to locate a local extremum in the provided number of iterations.
            </summary>
      <param name="iterations">The allowed number of iterations.</param>
      <returns>
            true if the algorithm converged on an extremum; otherwise, false.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Function">
      <summary>
            Gets the evaluation function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.FunctionTolerance">
      <summary>
            Gets the convergence tolerance on the value of the function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.HasConverged">
      <summary>
            Gets whether the algorithm is in the converged state.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Iterations">
      <summary>
            Gets the number of iterations taken.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.SetInitialBracketingPoints(System.Double,System.Double,System.Double)">
      <summary>
            Defines the initial bracketing interval using the provided variable values.
            </summary>
      <param name="a">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <param name="b">The value of the independent variable between the limits of the bracketing interval.</param>
      <param name="c">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The two end points must bracket the middle point.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The middle point does not indicate a local extremum.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.SetInitialBracketingPoints(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Defines the initial bracketing interval using the provided variable values and corresponding function values.
            </summary>
      <param name="a">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <param name="fa">The function value when evaluated at <paramref name="a" />.</param>
      <param name="b">The value of the independent variable between the limits of the bracketing interval.</param>
      <param name="fb">The function value when evaluated at <paramref name="b" />.</param>
      <param name="c">The value of the independent variable at one of the limits of the bracketing interval.</param>
      <param name="fc">The function value when evaluated at <paramref name="c" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the two end points do not bracket the middle point.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the middle point does not indicate a local extremum.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.Value">
      <summary>
            Gets the function value at the current estimate of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindExtremum.VariableTolerance">
      <summary>
            Gets the convergence tolerance on the value of the variable.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot">
      <summary>
            Locates the root of a function using the Van Wijngaarden, Dekker, Brent algorithm.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunction,System.Double,System.Double,AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType,AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria)">
      <summary>
            Initializes a new instance that can be used to find roots of a specified function.
            The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.BracketToward" /> property is set based on the value of the
            <paramref name="solutionType" /> parameter as follows:
            <list type="bullet"><item><description><see cref="F:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType.OnOrAboveZero" /> =&gt; <see cref="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Negative" /></description></item><item><description><see cref="F:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType.OnOrBelowZero" /> =&gt; <see cref="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Positive" /></description></item><item><description><see cref="F:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType.AboveOrBelowZero" /> =&gt; <see cref="F:AGI.Foundation.NumericalMethods.Advanced.BracketToward.Earliest" /></description></item></list></summary>
      <param name="function">The function to be called in order to evaluate intermediate variable values.</param>
      <param name="variableTolerance">The convergence tolerance in the variable value.</param>
      <param name="functionTolerance">The convergence tolerance in the function value.</param>
      <param name="solutionType">Indicates on which side of zero a solution must be found.</param>
      <param name="criteria">Specifies the criteria to be used in determining convergence.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="function" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="variableTolerance" /> or <paramref name="functionTolerance" /> is
            less than or equal to zero.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunction,System.Double,System.Double,AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType,AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria,AGI.Foundation.NumericalMethods.Advanced.BracketToward)">
      <summary>
            Initializes a new instance that can be used to find roots of a specified function.
            </summary>
      <param name="function">The function to be called in order to evaluate intermediate variable values.</param>
      <param name="variableTolerance">The convergence tolerance in the variable value.</param>
      <param name="functionTolerance">The convergence tolerance in the function value.</param>
      <param name="solutionType">Indicates on which side of zero a solution must be found.</param>
      <param name="criteria">Specifies the criteria to be used in determining convergence.</param>
      <param name="bracketToward">
            Specifies the the bracketing behavior when a sampled function value exactly equals zero.
            This parameter only has an effect when the <paramref name="criteria" /> is
            <strong>Variable</strong> or <strong>Both</strong>.
            
            See <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.BracketToward" /> for more information.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="function" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="variableTolerance" /> or <paramref name="functionTolerance" /> is
            less than or equal to zero.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.BracketToward">
      <summary>
            Gets the behavior of the root finder when a sampled
            function value exactly equals zero and <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.ConvergenceCriteria" />
            requires convergence on the independent variable.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.CheckInitialBracketingPoints(System.Double,System.Double)">
      <summary>
            Checks whether the given variable values will produce a valid initial bracketing interval.
            </summary>
      <param name="a">The first bracketing value of the variable.</param>
      <param name="c">The second bracketing value of the variable</param>
      <returns>True if the values will produce a valid interval, otherwise false.  
            If the value is false, it may be caused by either <paramref name="a" /> or <paramref name="c" />
            already representing a root.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.CheckInitialBracketingPoints(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Checks whether the given variable and function values will produce a valid initial bracketing interval.
            </summary>
      <param name="a">The first bracketing value of the variable.</param>
      <param name="fa">The corresponding function value at the first bracketing value of the variable.</param>
      <param name="c">The second bracketing value of the variable</param>
      <param name="fc">The corresponding function value at the second bracketing value of the variable.</param>
      <returns>
            true if the values will produce a valid interval, otherwise false.  
            If the value is false, one of the parameters is not-a-number (NaN) or
            <paramref name="a" /> and <paramref name="c" /> do not bracket a root.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.ConvergenceCriteria">
      <summary>
            Gets the criteria used in determining convergence.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.FindRoot(System.Int32)">
      <summary>
            Attempts the indicated number of iterations to locate the root of the function
            to within the required convergence criteria.
            </summary>
      <param name="maximumIterations">The allowed number of iterations.</param>
      <returns>true if the root was found, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.Function">
      <summary>
            Gets the evaluation function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.FunctionTolerance">
      <summary>
            Gets the convergence tolerance on the value of the function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.HasConverged">
      <summary>
            Gets whether the algorithm is in the converged state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.IsFunctionValueWithinTolerance">
      <summary>
            Indicates whether the function value has converged to within the specified tolerance.
            </summary>
      <returns>true if the value is within tolerance, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.Iterations">
      <summary>
            Gets the number of iterations taken.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.Root">
      <summary>
            Gets the current best estimate of independent variable value at which the root occurs.
            If <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.HasConverged" /> is true, this is the actual root
            according to the convergence criteria defined when this instance was constructed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.SetInitialBracketingPoints(System.Double,System.Double)">
      <summary>
            Defines the initial bracketing interval using the provided variable values.
            </summary>
      <param name="a">The first bracketing value of the variable.</param>
      <param name="c">The second bracketing value of the variable</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.SetInitialBracketingPoints(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Defines the initial bracketing interval using the provided variable values
            and corresponding function values.
            </summary>
      <param name="a">The first bracketing c.</param>
      <param name="fa">The corresponding function value at the first bracketing value of the variable.</param>
      <param name="c">The second bracketing value of the variable</param>
      <param name="fc">The corresponding function value at the second bracketing value of the variable.</param>
      <exception cref="T:System.ArithmeticException">
            Thrown when the function value at either or both of the end points is <see cref="F:System.Double.NaN" />.
            </exception>
      <exception cref="T:System.ArithmeticException">
            Thrown when the two points do not bracket a root (or when there is a singularity).
            </exception>
      <exception cref="T:System.ArithmeticException">
            Thrown when the two points are already within the desired tolerance of zero.
            </exception>
      <exception cref="T:System.ArithmeticException">
            Thrown when the two points are already within the desired tolerance of each other.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.Value">
      <summary>
            Gets the function value at the current best estimate of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.Root" />.
            If <see cref="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.HasConverged" /> is true, this is the actual root
            according to the convergence criteria defined when this instance was constructed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot.VariableTolerance">
      <summary>
            Gets the convergence tolerance on the value of the independent variable.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType">
      <summary>
            Indicates on which side of zero a solution must be found.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType.OnOrBelowZero">
      <summary>
            Indicates that the solution must lie on or below zero.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType.AboveOrBelowZero">
      <summary>
            Indicates that the solution may lie below, on, or above zero.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.BrentSolutionType.OnOrAboveZero">
      <summary>
            Indicates that the solution must lie on or above zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria">
      <summary>
            Specifies the criteria to be used in determining convergence.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Either">
      <summary>
            Convergence in either the variable value or the function value is required.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Variable">
      <summary>
            Convergence in the variable value is required.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Function">
      <summary>
            Convergence in the function value is required.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ConvergenceCriteria.Both">
      <summary>
            Convergence in both the variable value and the function value is required.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives">
      <summary>
            Defines a set of first order differential equations used by a <see cref="T:AGI.Foundation.NumericalMethods.NumericalIntegrator" />
            to advance a set of dependent variables over an independent variable step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.#ctor(AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.#ctor(System.Int32[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orders">The orders of the differential equations in the differential equations.
            Higher order equations are decomposed into first-order derivatives of each dependent variable such that the
            length of this set of orders corresponds to the sum of the orders of the original equations.  
            So if the original equations were: A first order, B third order, C second order, D first order,
            then the resulting orders of this system of equations will be: 1, 3, 2, 1, 2, 1, 1</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.AddDerivatives(System.Double,System.Double[],AGI.Foundation.NumericalMethods.DerivativeMode,System.Double[])">
      <summary>
            Compute and add the derivatives of the dependent variables to the given <paramref name="derivativeArray" />.
            Since the <paramref name="derivativeArray" /> may already contain derivative information from other sources,
            do not overwrite existing values but instead add the derivatives of the given <paramref name="mode" /> to
            the existing values.
            </summary>
      <param name="x">The current independent variable value.</param>
      <param name="y">The current dependent variable values.</param>
      <param name="mode">The mode in which to compute the derivatives.  Make sure to only compute
            and add the derivatives requested by the given <paramref name="mode" /> or it may cause each
            derivative to be added more than once.</param>
      <param name="derivativeArray">The derivative array as output.  
            Upon returning, each element in the array should represent the first derivative
            of the corresponding element in the <paramref name="y">dependent variables</paramref>.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.ComputeDerivatives(System.Double,System.Double[],System.Double[])">
      <summary>
            Compute the derivatives of the dependent variables and store them to the given array.
            </summary>
      <param name="x">The current independent variable value.</param>
      <param name="y">The current dependent variable values.</param>
      <param name="derivativeArray">The derivative array as output.  
            Upon returning, each element in the array should represent the first derivative
            of the corresponding element in the <paramref name="y">dependent variables</paramref>.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.ComputeDerivatives(System.Double,System.Double[],System.Double[],System.Double[])">
      <summary>
            Compute the "fast" derivatives of the dependent variables, add them to the given 
            "slow" derivatives, and store them to the given array.  "Fast" derivatives are ones
            which are most important for the dynamics of the system and can be computed quickly.
            Some integrators optimize performance by only computing "fast" intervals when only
            an approximation of the overall derivative is required.
            </summary>
      <param name="x">The current independent variable value.</param>
      <param name="y">The current dependent variable values.</param>
      <param name="slowDerivatives">The cached "slow" derivatives to add to the <paramref name="derivativeArray" />.</param>
      <param name="derivativeArray">The derivative array as output.  
            Upon returning, each element in the array should represent the first derivative
            of the corresponding element in the <paramref name="y">dependent variables</paramref>.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.Dimension">
      <summary>
            Gets the total number of elements in the decomposed first-order derivative array.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.GetDimensionForOrder(System.Int32)">
      <summary>
            Get the number of elements in the dependent variables which are of 
            the given order.
            </summary>
      <param name="order">The order of the elements to count.</param>
      <returns>The number of elements of the given order in the dependent variables.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives.Orders">
      <summary>
            Gets the orders of the differential equations in the differential equations.
            Higher order equations are decomposed into first-order derivatives of each dependent variable such that the
            length of this set of orders corresponds to the sum of the orders of the original equations.  
            So if the original equations were: A first order, B third order, C second order, D first order,
            then the resulting orders of this system of equations will be: 1, 3, 2, 1, 2, 1, 1
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation">
      <summary>
            An adapter for an <see cref="T:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem" /> for use with a
            <see cref="T:AGI.Foundation.NumericalMethods.NumericalIntegrator" />.  This allows a user to define a function representing a
            system of differential equations and integrate it over an independent variable.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation.#ctor(AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation.#ctor(AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem)">
      <summary>
            Initializes a new instance based on an <see cref="T:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem" />.
            </summary>
      <param name="system">The system of equations defining the derivatives of a
            set of dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation.AddDerivatives(System.Double,System.Double[],AGI.Foundation.NumericalMethods.DerivativeMode,System.Double[])">
      <summary>
            Compute and add the derivatives of the dependent variables to the given <paramref name="derivativeArray" />.
            Since the <paramref name="derivativeArray" /> may already contain derivative information from other sources,
            do not overwrite existing values but instead add the derivatives of the given <paramref name="mode" /> to
            the existing values.
            </summary>
      <param name="x">The current independent variable value.</param>
      <param name="y">The current dependent variable values.</param>
      <param name="mode">The mode in which to compute the derivatives.  Make sure to only compute
            and add the derivatives requested by the given <paramref name="mode" /> or it may cause each
            derivative to be added more than once.</param>
      <param name="derivativeArray">The derivative array as output.  
            Upon returning, each element in the array should represent the first derivative
            of the corresponding element in the <paramref name="y">dependent variables</paramref>.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DependentVariableDifferentialEquation.SystemOfEquations">
      <summary>
            Gets or sets the system of equations which define the derivatives of a set of
            dependent variables.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection">
      <summary>
            A collection of functions to be explored by <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection.Add(AGI.Foundation.NumericalMethods.DoubleSimpleFunction)">
      <summary>
            Adds a function to the collection.  The new function will not be configured with any
            threshold values.
            </summary>
      <param name="function">The function to explore.</param>
      <returns>
            An instance describing the details of this function.  This instance will have already
            been added to this collection when this method returns.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection.Add(AGI.Foundation.NumericalMethods.DoubleSimpleFunction,System.Double)">
      <summary>
            Adds a function to the collection, and adds a threshold value that is of interest while
            exploring the function.
            </summary>
      <param name="function">The function to explore.</param>
      <param name="threshold">The threshold value that is of interest while exploring the function.</param>
      <returns>
            An instance describing the details of this function.  This instance will have already
            been added to this collection when this method returns.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection.InsertItem(System.Int32,AGI.Foundation.NumericalMethods.DoubleFunctionDetails)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">Index where the item is inserted.</param>
      <param name="item">The object that will be inserted.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection.
            </summary>
      <param name="index">Index where the item is removed.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionCollection.SetItem(System.Int32,AGI.Foundation.NumericalMethods.DoubleFunctionDetails)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">Index where the item will be replaced.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress">
      <summary>
            Contains additional information reported to
            <see cref="M:AGI.Foundation.ITrackCalculationProgress.ReportProgress(System.Int32,System.Object)" /> by
            <see cref="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double,AGI.Foundation.ITrackCalculationProgress)" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress.#ctor(AGI.Foundation.NumericalMethods.DoubleFunctionExplorer,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The explorer instance that is reporting progress.</param>
      <param name="start">The beginning of the interval being explored.</param>
      <param name="stop">The end of the interval being explored.</param>
      <param name="complete">The portion of the interval that has already been evaluated.</param>
      <param name="percentComplete">The percentage of the interval that has already been completed.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress.Complete">
      <summary>
            Gets the portion of the interval that has already been explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress.Explorer">
      <summary>
            Gets the explorer instance that is reporting progress.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress.PercentComplete">
      <summary>
            Gets the percentage of the interval that has already been explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress.Start">
      <summary>
            Gets the beginning of the interval being explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExplorerProgress.Stop">
      <summary>
            Gets the end of the interval being explored.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that a function has a local
            extremum at a specific Variable.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.#ctor(AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="indication">The finding that indicated the existence of this extremum.</param>
      <param name="extremumVariable">The Variable of the extremum.</param>
      <param name="extremumValue">The function value of the extremum.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that found this extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.ExtremumType">
      <summary>
            Gets a function value indicating whether the extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.ExtremumValue">
      <summary>
            Gets the function value of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.ExtremumVariable">
      <summary>
            Gets the Variable of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.Function">
      <summary>
            Gets the function for which the extremum was found.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.Indication">
      <summary>
            Gets the finding that indicated the existence of this extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound.IsEndpointExtremum">
      <summary>
            Gets a value indicating whether or not this extremum occurred at one of the endpoints
            of an interval explored with <see cref="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double)" />.
            Endpoint extrema do not necessarily indicate places in the function have a derivative of zero,
            but they can still be global minimima or maxima over the evaluation interval.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that a function has a local extremum
            indicated by three samples.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.#ctor(AGI.Foundation.NumericalMethods.DoubleFunctionExplorer,AGI.Foundation.NumericalMethods.DoubleFunctionDetails,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The explorer that found the indicated extremum.</param>
      <param name="function">The function for which an extremum was identified.</param>
      <param name="leftVariable">The left Variable.</param>
      <param name="leftValue">The left function value.</param>
      <param name="middleVariable">The middle Variable.</param>
      <param name="middleValue">The middle function value.</param>
      <param name="rightVariable">The right Variable.</param>
      <param name="rightValue">The right function value.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.ExploreExtremumForCrossing(AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails,System.Boolean@)">
      <summary>
            Searches an extremum until either the precise date at which the function reaches its extremum is found, or it is
            determined that this extremum will not result in a crossing.
            </summary>
      <param name="threshold">The threshold which is most likely to be crossed by this extremum, such that if this threshold is not crossed
            by the extremum no other threshold will be.</param>
      <param name="converged">This parameter will be set to true if returned extremum has converged, either because it resulted in a crossing or because
            it converged before it could be definitely determined to not be likely to cross the threshold.</param>
      <returns>Information about the extremum.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that found this indicated extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.ExtremumType">
      <summary>
            Gets a value indicating whether the extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.FindPreciseExtremum">
      <summary>
            Finds the precise date at which the function reaches its extremum.
            </summary>
      <returns>Information about the precise extremum.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.Function">
      <summary>
            Gets the function for which the extremum is indicated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.IsEndpointExtremum">
      <summary>
            Gets a value indicating whether or not this extremum occurred at one of the endpoints
            of an interval explored with <see cref="M:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer.Explore(System.Double,System.Double)" />.
            Endpoint extrema do not necessarily indicate places in the function have a derivative of zero,
            but they can still be global minimima or maxima over the evaluation interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.LeftSegmentSlope">
      <summary>
            Gets the slope between the left and middle samples.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.LeftValue">
      <summary>
            Gets the left function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.LeftVariable">
      <summary>
            Gets the left date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.MiddleValue">
      <summary>
            Gets the middle function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.MiddleVariable">
      <summary>
            Gets the middle date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.RightSegmentSlope">
      <summary>
            Gets the slope between the middle and right samples.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.RightValue">
      <summary>
            Gets the right function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumIndicated.RightVariable">
      <summary>
            Gets the right date.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionFinding">
      <summary>
            The base class for findings of the <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" />, such as a threshold
            crossing or an extremum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionFinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionFinding" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCollection">
      <summary>
            A collection of function thresholds.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCollection" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCollection.Add(System.Double)">
      <summary>
            Adds a threshold.
            </summary>
      <param name="threshold">The value of the threshold.</param>
      <returns>The instance representing the threshold, which has been added to the collection.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that a function crossed
            a threshold at a specific Variable.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.#ctor(AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="indication">The finding that originally indicated the existence of this threshold crossing.</param>
      <param name="crossingVariable">The Variable at which the crossing occurs.</param>
      <param name="crossingValue">The function value at the crossing.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.CrossingValue">
      <summary>
            Gets the function value at the crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.CrossingVariable">
      <summary>
            Gets the Variable at which the crossing occurs.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that found this crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.Function">
      <summary>
            Gets the function that crossed the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.Indication">
      <summary>
            Gets the finding that originally indicated the existence of this threshold crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.Slope">
      <summary>
            Gets the slope of the function at the crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingFound.Threshold">
      <summary>
            Gets the threshold crossed by the function.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that a threshold crossing is
            indicated somewhere between two Variables, because the function values are on opposite sides of the
            threshold at the two Variables.  The precise Variable at which the function crosses the
            threshold may not yet be known.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.#ctor(AGI.Foundation.NumericalMethods.DoubleFunctionExplorer,AGI.Foundation.NumericalMethods.DoubleFunctionDetails,AGI.Foundation.NumericalMethods.DoubleFunctionThresholdDetails,AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionExtremumFound,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The instance that identified this threshold crossing.</param>
      <param name="function">The function that crossed the threshold.</param>
      <param name="threshold">The threshold that was crossed.</param>
      <param name="extremum">
            The extremum that led to the discovery of this crossing, or null if and
            extremum was not involved in the discovery of this crossing.
            </param>
      <param name="leftVariable">The Variable to the left of the threshold.</param>
      <param name="leftValue">The function value to the left of the threshold.</param>
      <param name="rightVariable">The Variable to the right of the threshold.</param>
      <param name="rightValue">The function value to the right of the threshold.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DoubleFunctionExplorer" /> that found this indicated crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.Extremum">
      <summary>
            Gets the extremum that caused this threshold crossing indication, or null
            if this indication was not caused by an extremum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.FindPreciseCrossing">
      <summary>
            Finds the precise date at which the function crosses the threshold.
            </summary>
      <returns>Information about the precise threshold crossing.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.Function">
      <summary>
            Gets the function that crossed the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.LeftValue">
      <summary>
            Gets the function value to the left of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.LeftVariable">
      <summary>
            Gets the date to the left of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.RightValue">
      <summary>
            Gets the function value to the right of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.RightVariable">
      <summary>
            Gets the date to the right of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.Slope">
      <summary>
            Gets the slope of the segment that crosses the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DoubleFunctionThresholdCrossingIndicated.Threshold">
      <summary>
            Gets the threshold being crossed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection">
      <summary>
            A collection of functions to be explored by <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection.Add(AGI.Foundation.NumericalMethods.DurationSimpleFunction)">
      <summary>
            Adds a function to the collection.  The new function will not be configured with any
            threshold values.
            </summary>
      <param name="function">The function to explore.</param>
      <returns>
            An instance describing the details of this function.  This instance will have already
            been added to this collection when this method returns.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection.Add(AGI.Foundation.NumericalMethods.DurationSimpleFunction,System.Double)">
      <summary>
            Adds a function to the collection, and adds a threshold value that is of interest while
            exploring the function.
            </summary>
      <param name="function">The function to explore.</param>
      <param name="threshold">The threshold value that is of interest while exploring the function.</param>
      <returns>
            An instance describing the details of this function.  This instance will have already
            been added to this collection when this method returns.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection.InsertItem(System.Int32,AGI.Foundation.NumericalMethods.DurationFunctionDetails)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">Index where the item is inserted.</param>
      <param name="item">The object that will be inserted.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection.
            </summary>
      <param name="index">Index where the item is removed.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionCollection.SetItem(System.Int32,AGI.Foundation.NumericalMethods.DurationFunctionDetails)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">Index where the item will be replaced.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress">
      <summary>
            Contains additional information reported to
            <see cref="M:AGI.Foundation.ITrackCalculationProgress.ReportProgress(System.Int32,System.Object)" /> by
            <see cref="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration,AGI.Foundation.ITrackCalculationProgress)" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress.#ctor(AGI.Foundation.NumericalMethods.DurationFunctionExplorer,AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration,System.Int32)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The explorer instance that is reporting progress.</param>
      <param name="start">The beginning of the interval being explored.</param>
      <param name="stop">The end of the interval being explored.</param>
      <param name="complete">The portion of the interval that has already been evaluated.</param>
      <param name="percentComplete">The percentage of the interval that has already been completed.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress.Complete">
      <summary>
            Gets the portion of the interval that has already been explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress.Explorer">
      <summary>
            Gets the explorer instance that is reporting progress.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress.PercentComplete">
      <summary>
            Gets the percentage of the interval that has already been explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress.Start">
      <summary>
            Gets the beginning of the interval being explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExplorerProgress.Stop">
      <summary>
            Gets the end of the interval being explored.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that a function has a local
            extremum at a specific duration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.#ctor(AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated,AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="indication">The finding that indicated the existence of this extremum.</param>
      <param name="extremumDuration">The duration of the extremum.</param>
      <param name="extremumValue">The function value of the extremum.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that found this extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.ExtremumDuration">
      <summary>
            Gets the duration of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.ExtremumType">
      <summary>
            Gets a function value indicating whether the extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.ExtremumValue">
      <summary>
            Gets the function value of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.Function">
      <summary>
            Gets the function for which the extremum was found.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.Indication">
      <summary>
            Gets the finding that indicated the existence of this extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound.IsEndpointExtremum">
      <summary>
            Gets a value indicating whether or not this extremum occurred at one of the endpoints
            of an interval explored with <see cref="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)" />.
            Endpoint extrema do not necessarily indicate places in the function have a derivative of zero,
            but they can still be global minimima or maxima over the evaluation interval.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that a function has a local extremum
            indicated by three samples.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.#ctor(AGI.Foundation.NumericalMethods.DurationFunctionExplorer,AGI.Foundation.NumericalMethods.DurationFunctionDetails,AGI.Foundation.Time.Duration,System.Double,AGI.Foundation.Time.Duration,System.Double,AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The explorer that found the indicated extremum.</param>
      <param name="function">The function for which an extremum was identified.</param>
      <param name="leftDuration">The left duration.</param>
      <param name="leftValue">The left function value.</param>
      <param name="middleDuration">The middle duration.</param>
      <param name="middleValue">The middle function value.</param>
      <param name="rightDuration">The right duration.</param>
      <param name="rightValue">The right function value.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.ExploreExtremumForCrossing(AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails,System.Boolean@)">
      <summary>
            Searches an extremum until either the precise date at which the function reaches its extremum is found, or it is
            determined that this extremum will not result in a crossing.
            </summary>
      <param name="threshold">The threshold which is most likely to be crossed by this extremum, such that if this threshold is not crossed
            by the extremum no other threshold will be.</param>
      <param name="converged">This parameter will be set to true if returned extremum has converged, either because it resulted in a crossing or because
            it converged before it could be definitely determined to not be likely to cross the threshold.</param>
      <returns>Information about the extremum.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that found this indicated extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.ExtremumType">
      <summary>
            Gets a value indicating whether the extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.FindPreciseExtremum">
      <summary>
            Finds the precise date at which the function reaches its extremum.
            </summary>
      <returns>Information about the precise extremum.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.Function">
      <summary>
            Gets the function for which the extremum is indicated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.IsEndpointExtremum">
      <summary>
            Gets a value indicating whether or not this extremum occurred at one of the endpoints
            of an interval explored with <see cref="M:AGI.Foundation.NumericalMethods.DurationFunctionExplorer.Explore(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)" />.
            Endpoint extrema do not necessarily indicate places in the function have a derivative of zero,
            but they can still be global minimima or maxima over the evaluation interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.LeftDuration">
      <summary>
            Gets the left date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.LeftSegmentSlope">
      <summary>
            Gets the slope between the left and middle samples.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.LeftValue">
      <summary>
            Gets the left function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.MiddleDuration">
      <summary>
            Gets the middle date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.MiddleValue">
      <summary>
            Gets the middle function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.RightDuration">
      <summary>
            Gets the right date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.RightSegmentSlope">
      <summary>
            Gets the slope between the middle and right samples.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumIndicated.RightValue">
      <summary>
            Gets the right function value.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionFinding">
      <summary>
            The base class for findings of the <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" />, such as a threshold
            crossing or an extremum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionFinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionFinding" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCollection">
      <summary>
            A collection of function thresholds.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCollection" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCollection.Add(System.Double)">
      <summary>
            Adds a threshold.
            </summary>
      <param name="threshold">The value of the threshold.</param>
      <returns>The instance representing the threshold, which has been added to the collection.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that a function crossed
            a threshold at a specific duration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.#ctor(AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated,AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="indication">The finding that originally indicated the existence of this threshold crossing.</param>
      <param name="crossingDuration">The duration at which the crossing occurs.</param>
      <param name="crossingValue">The function value at the crossing.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.CrossingDuration">
      <summary>
            Gets the duration at which the crossing occurs.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.CrossingValue">
      <summary>
            Gets the function value at the crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that found this crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.Function">
      <summary>
            Gets the function that crossed the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.Indication">
      <summary>
            Gets the finding that originally indicated the existence of this threshold crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.Slope">
      <summary>
            Gets the slope of the function at the crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingFound.Threshold">
      <summary>
            Gets the threshold crossed by the function.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that a threshold crossing is
            indicated somewhere between two durations, because the function values are on opposite sides of the
            threshold at the two durations.  The precise duration at which the function crosses the
            threshold may not yet be known.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.#ctor(AGI.Foundation.NumericalMethods.DurationFunctionExplorer,AGI.Foundation.NumericalMethods.DurationFunctionDetails,AGI.Foundation.NumericalMethods.DurationFunctionThresholdDetails,AGI.Foundation.NumericalMethods.Advanced.DurationFunctionExtremumFound,AGI.Foundation.Time.Duration,System.Double,AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The instance that identified this threshold crossing.</param>
      <param name="function">The function that crossed the threshold.</param>
      <param name="threshold">The threshold that was crossed.</param>
      <param name="extremum">
            The extremum that led to the discovery of this crossing, or null if and
            extremum was not involved in the discovery of this crossing.
            </param>
      <param name="leftDuration">The duration to the left of the threshold.</param>
      <param name="leftValue">The function value to the left of the threshold.</param>
      <param name="rightDuration">The duration to the right of the threshold.</param>
      <param name="rightValue">The function value to the right of the threshold.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.DurationFunctionExplorer" /> that found this indicated crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.Extremum">
      <summary>
            Gets the extremum that caused this threshold crossing indication, or null
            if this indication was not caused by an extremum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.FindPreciseCrossing">
      <summary>
            Finds the precise date at which the function crosses the threshold.
            </summary>
      <returns>Information about the precise threshold crossing.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.Function">
      <summary>
            Gets the function that crossed the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.LeftDuration">
      <summary>
            Gets the date to the left of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.LeftValue">
      <summary>
            Gets the function value to the left of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.RightDuration">
      <summary>
            Gets the date to the right of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.RightValue">
      <summary>
            Gets the function value to the right of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.Slope">
      <summary>
            Gets the slope of the segment that crosses the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.DurationFunctionThresholdCrossingIndicated.Threshold">
      <summary>
            Gets the threshold being crossed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.ExtremumKind">
      <summary>
            Enumerates possible extremum types.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ExtremumKind.Minimum">
      <summary>
            Extremum is a minimum of the function.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ExtremumKind.Invalid">
      <summary>
            Did not return a valid extremum.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ExtremumKind.Maximum">
      <summary>
            Extremum is a maximum of the function.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation">
      <summary>
            A technique for polynomial interpolation and extrapolation using a general form of Hermite's algorithm
            that is valid for any input order.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.#ctor(AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.GetRequiredDataPoints(System.Int32,System.Int32)">
      <summary>
            Returns the number of data points needed to interpolate with the desired degree of accuracy,
            which is the ceiling of (degree + 1) / (inputOrder + 1).
            </summary>
      <param name="degree">The degree of polynomial approximation desired.</param>
      <param name="inputOrder">The order of the input data.</param>
      <returns>
            The number of data points needed to interpolate with the desired degree of accuracy.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates values using this interpolation algorithm.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            </param>
      <param name="yTable">
            The array of dependent variables to use to interpolate.
            There can be multiple values corresponding to each independent values in <paramref name="xTable" />.
            For a set of three dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2
            this should be as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains dependent values, first derivatives, and second derivatives.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives along with the dependent variable values,
            pass 1.
            </param>
      <param name="startIndex">
            The index in <paramref name="xTable" /> of the first value to use in the interpolation.
            The index of the first value in <paramref name="yTable" /> to use is calculated as:
            <code>startIndex * yStride * (inputOrder + 1)</code></param>
      <param name="length">
            The number of values to use in the interpolation. The degree of the generated polynomial
            will be (length * (inputOrder + 1) - 1).
            </param>
      <returns>
            An array of interpolated values.  The array contains at least <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable value.  If <paramref name="outputOrder" />
            is greater than zero, the array contains an additional number of <paramref name="yStride" /> elements,
            for each output order.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.HermitePolynomialApproximation.OrderRequired">
      <summary>
            Gets 0, indicating that this interpolation algorithm does not require derivative information.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.IDoubleFunctionSampler">
      <summary>
            An interface to an object that controls how a function of a double is sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.IDoubleFunctionSampler.GetNextSample(System.Double,System.Double,System.Double)">
      <summary>
            Gets the next Variable at which to sample the function.
            </summary>
      <param name="intervalStart">The beginning of the overall interval being evaluated.</param>
      <param name="intervalStop">The end of the overall interval being evaluated.</param>
      <param name="lastSample">The previous Variable at which the function was sampled.</param>
      <returns>The next Variable at which to sample the function.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.IDurationFunctionSampler">
      <summary>
            An interface to an object that controls how a function of a <see cref="T:AGI.Foundation.Time.Duration" /> is sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.IDurationFunctionSampler.GetNextSample(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Gets the next duration at which to sample the function.
            </summary>
      <param name="intervalStart">The beginning of the overall interval being evaluated.</param>
      <param name="intervalStop">The end of the overall interval being evaluated.</param>
      <param name="lastSample">The previous duration at which the function was sampled.</param>
      <returns>The next duration at which to sample the function.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.IJulianDateFunctionSampler">
      <summary>
            An interface to an object that controls how a function of a <see cref="T:AGI.Foundation.Time.JulianDate" /> is sampled.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.IJulianDateFunctionSampler.GetNextSample(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Gets the next date at which to sample the function.
            </summary>
      <param name="intervalStart">The beginning of the overall interval being evaluated.</param>
      <param name="intervalStop">The end of the overall interval being evaluated.</param>
      <param name="lastSample">The previous date at which the function was sampled.</param>
      <returns>The next date at which to sample the function.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm">
      <summary>
            A type containing an algorithm that can interpolate the value of a function for a new independent variable value
            from a list of known values of the function at different independent variable values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.#ctor(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.GetRequiredDataPoints(System.Int32,System.Int32)">
      <summary>
            Calculates the number of data points needed to interpolate with the desired degree of accuracy.
            </summary>
      <param name="degree">The degree of polynomial approximation desired.</param>
      <param name="inputOrder">The order of the input data.</param>
      <returns>
            The number of data points needed to interpolate with the desired degree of accuracy.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates values using this interpolation algorithm.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            </param>
      <param name="yTable">The array of dependent variables to use to interpolate.  For a set of three
            dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2 this should be
            as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains dependent variable values, first derivatives, and second derivatives.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives along with the dependent variable values, pass 1.
            To retrieve the second derivatives as well, pass 2. Note that not all interpolation algorithms are capable
            of returning second derivative information, and if a higher <paramref name="outputOrder" />
            is requested than the algorithm is able to provide, the highest order derivative
            will be returned and the request for the higher order derivatives is ignored.
            </param>
      <returns>
            An array of interpolated values.  The array contains at least <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable value.  If <paramref name="outputOrder" />
            is 1 or greater, the array contains an additional <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable first derivative.  Lastly, if
            <paramref name="outputOrder" /> is 2 or greater, the array contains another additional
            <paramref name="yStride" /> elements, each of which is an interpolated variable second
            derivative.  Note that if the interpolation algorithm is not capable of returning the degree of derivative
            requested, it will simply return the highest order derivative available.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates values using this interpolation algorithm.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            </param>
      <param name="yTable">
            The array of dependent variables to use to interpolate.
            There can be multiple values corresponding to each independent values in <paramref name="xTable" />.
            For a set of three dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2
            this should be as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains dependent values, first derivatives, and second derivatives.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives along with the dependent variable values,
            pass 1.  To retrieve the second derivatives as well, pass 2.  Note that not all interpolation algorithms are capable
            of returning second derivative information, and if a higher <paramref name="outputOrder" />
            is requested than the algorithm is able to provide, the highest order derivative
            will be returned and the request for the higher order derivatives is ignored.
            </param>
      <param name="startIndex">
            The index in <paramref name="xTable" /> of the first value to use in the interpolation.
            The index of the first value in <paramref name="yTable" /> to use is calculated as:
            <code>startIndex * yStride * (inputOrder + 1)</code></param>
      <param name="length">
            The number of values to use in the interpolation.  This value should be one more than the
            desired interpolation degree.  For example for 7th degree interpolation, this parameter
            should be 8.
            </param>
      <returns>
            An array of interpolated values.  The array contains at least <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable value.  If <paramref name="outputOrder" />
            is greater than zero, the array contains an additional number of <paramref name="yStride" /> elements,
            for each output order.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.InterpolateWithDegree(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates values using this interpolation algorithm.  The appropriate subset of input values to use for
            the interpolation is determined automatically from an interpolation given <paramref name="degree" />.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            </param>
      <param name="yTable">
            The array of dependent variables to use to interpolate.  For a set of three
            dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2 this should be
            as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}. 
            </param>
      <param name="degree">
            The degree of interpolation to perform.  For Linear Interpolation, this value should be 1.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains values, first derivatives, and second derivatives.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives as well, pass 1.  To retrieve the
            second derivatives as well, pass 2.  Note that not all interpolation algorithms are capable
            of returning second derivative information, and if a higher <paramref name="outputOrder" />
            is requested than the algorithm is able to provide, the highest order derivative
            will be returned and the request for the higher order derivatives is ignored.
            </param>
      <returns>
            An array of interpolated values.  The array contains at least <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable value.  If <paramref name="outputOrder" />
            is 1 or greater, the array contains an additional <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable first derivative.  Lastly, if
            <paramref name="outputOrder" /> is 2 or greater, the array contains another additional
            <paramref name="yStride" /> elements, each of which is an interpolated variable second
            derivative.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm.OrderRequired">
      <summary>
            Gets the number of derivatives of the dependent variable that are required on input
            in order to interpolate using this interpolation algorithm.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable">
      <summary>
            Classes that implement this interface represent values which have partial derivatives associated with them,
            and contain the method <see cref="M:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)" /> to produce an evaluator to calculate those
            partial derivatives.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Constructs the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" /> that will calculate the partial derivatives of this
            <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> object with respect to any of the parameters in the
            <paramref name="independentVariables" /> that apply.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> that will contain the created evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection">
      <summary>
            A collection of functions to be explored by <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection.Add(AGI.Foundation.NumericalMethods.JulianDateSimpleFunction)">
      <summary>
            Adds a function to the collection.  The new function will not be configured with any
            threshold values.
            </summary>
      <param name="function">The function to explore.</param>
      <returns>
            An instance describing the details of this function.  This instance will have already
            been added to this collection when this method returns.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection.Add(AGI.Foundation.NumericalMethods.JulianDateSimpleFunction,System.Double)">
      <summary>
            Adds a function to the collection, and adds a threshold value that is of interest while
            exploring the function.
            </summary>
      <param name="function">The function to explore.</param>
      <param name="threshold">The threshold value that is of interest while exploring the function.</param>
      <returns>
            An instance describing the details of this function.  This instance will have already
            been added to this collection when this method returns.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection.InsertItem(System.Int32,AGI.Foundation.NumericalMethods.JulianDateFunctionDetails)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">Index where the item is inserted.</param>
      <param name="item">The object that will be inserted.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the collection.
            </summary>
      <param name="index">Index where the item is removed.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionCollection.SetItem(System.Int32,AGI.Foundation.NumericalMethods.JulianDateFunctionDetails)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">Index where the item will be replaced.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress">
      <summary>
            Contains additional information reported to
            <see cref="M:AGI.Foundation.ITrackCalculationProgress.ReportProgress(System.Int32,System.Object)" /> by
            <see cref="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.ITrackCalculationProgress)" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress.#ctor(AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The explorer instance that is reporting progress.</param>
      <param name="start">The beginning of the interval being explored.</param>
      <param name="stop">The end of the interval being explored.</param>
      <param name="complete">The portion of the interval that has already been evaluated.</param>
      <param name="percentComplete">The percentage of the interval that has already been completed.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress.Complete">
      <summary>
            Gets the portion of the interval that has already been explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress.Explorer">
      <summary>
            Gets the explorer instance that is reporting progress.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress.PercentComplete">
      <summary>
            Gets the percentage of the interval that has already been explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress.Start">
      <summary>
            Gets the beginning of the interval being explored.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExplorerProgress.Stop">
      <summary>
            Gets the end of the interval being explored.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that a function has a local
            extremum at a specific date.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.#ctor(AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated,AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="indication">The finding that indicated the existence of this extremum.</param>
      <param name="extremumDate">The date of the extremum.</param>
      <param name="extremumValue">The function value of the extremum.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that found this extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.ExtremumDate">
      <summary>
            Gets the date of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.ExtremumType">
      <summary>
            Gets a function value indicating whether the extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.ExtremumValue">
      <summary>
            Gets the function value of the extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.Function">
      <summary>
            Gets the function for which the extremum was found.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.Indication">
      <summary>
            Gets the finding that indicated the existence of this extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound.IsEndpointExtremum">
      <summary>
            Gets a value indicating whether or not this extremum occurred at one of the endpoints
            of an interval explored with <see cref="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)" />.
            Endpoint extrema do not necessarily indicate places in the function have a derivative of zero,
            but they can still be global minimima or maxima over the evaluation interval.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that a function has a local extremum
            indicated by three samples.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.#ctor(AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer,AGI.Foundation.NumericalMethods.JulianDateFunctionDetails,AGI.Foundation.Time.JulianDate,System.Double,AGI.Foundation.Time.JulianDate,System.Double,AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The explorer that found the indicated extremum.</param>
      <param name="function">The function for which an extremum was identified.</param>
      <param name="leftDate">The left date.</param>
      <param name="leftValue">The left function value.</param>
      <param name="middleDate">The middle date.</param>
      <param name="middleValue">The middle function value.</param>
      <param name="rightDate">The right date.</param>
      <param name="rightValue">The right function value.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.ExploreExtremumForCrossing(AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails,System.Boolean@)">
      <summary>
            Searches an extremum until either the precise date at which the function reaches its extremum is found, or it is
            determined that this extremum will not result in a crossing.
            </summary>
      <param name="threshold">The threshold which is most likely to be crossed by this extremum, such that if this threshold is not crossed
            by the extremum no other threshold will be.</param>
      <param name="converged">This parameter will be set to true if returned extremum has converged, either because it resulted in a crossing or because
            it converged before it could be definitely determined to not be likely to cross the threshold.</param>
      <returns>Information about the extremum.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that found this indicated extremum.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.ExtremumType">
      <summary>
            Gets a value indicating whether the extremum is a minimum or maximum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.FindPreciseExtremum">
      <summary>
            Finds the precise date at which the function reaches its extremum.
            </summary>
      <returns>Information about the precise extremum.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.Function">
      <summary>
            Gets the function for which the extremum is indicated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.IsEndpointExtremum">
      <summary>
            Gets a value indicating whether or not this extremum occurred at one of the endpoints
            of an interval explored with <see cref="M:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer.Explore(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)" />.
            Endpoint extrema do not necessarily indicate places in the function have a derivative of zero,
            but they can still be global minimima or maxima over the evaluation interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.LeftDate">
      <summary>
            Gets the left date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.LeftSegmentSlope">
      <summary>
            Gets the slope between the left and middle samples.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.LeftValue">
      <summary>
            Gets the left function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.MiddleDate">
      <summary>
            Gets the middle date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.MiddleValue">
      <summary>
            Gets the middle function value.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.RightDate">
      <summary>
            Gets the right date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.RightSegmentSlope">
      <summary>
            Gets the slope between the middle and right samples.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumIndicated.RightValue">
      <summary>
            Gets the right function value.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionFinding">
      <summary>
            The base class for findings of the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" />, such as a threshold
            crossing or an extremum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionFinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionFinding" /> class</summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCollection">
      <summary>
            A collection of function thresholds.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCollection" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCollection.Add(System.Double)">
      <summary>
            Adds a threshold.
            </summary>
      <param name="threshold">The value of the threshold.</param>
      <returns>The instance representing the threshold, which has been added to the collection.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that a function crossed
            a threshold at a specific date.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.#ctor(AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated,AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="indication">The finding that originally indicated the existence of this threshold crossing.</param>
      <param name="crossingDate">The date at which the crossing occurs.</param>
      <param name="crossingValue">The function value at the crossing.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.CrossingDate">
      <summary>
            Gets the date at which the crossing occurs.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.CrossingValue">
      <summary>
            Gets the function value at the crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that found this crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.Function">
      <summary>
            Gets the function that crossed the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.Indication">
      <summary>
            Gets the finding that originally indicated the existence of this threshold crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.Slope">
      <summary>
            Gets the slope of the function at the crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingFound.Threshold">
      <summary>
            Gets the threshold crossed by the function.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated">
      <summary>
            A finding by <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that a threshold crossing is
            indicated somewhere between two dates, because the function values are on opposite sides of the
            threshold at the two dates.  The precise date at which the function crosses the
            threshold may not yet be known.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.#ctor(AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer,AGI.Foundation.NumericalMethods.JulianDateFunctionDetails,AGI.Foundation.NumericalMethods.JulianDateFunctionThresholdDetails,AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionExtremumFound,AGI.Foundation.Time.JulianDate,System.Double,AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="explorer">The instance that identified this threshold crossing.</param>
      <param name="function">The function that crossed the threshold.</param>
      <param name="threshold">The threshold that was crossed.</param>
      <param name="extremum">
            The extremum that led to the discovery of this crossing, or null if and
            extremum was not involved in the discovery of this crossing.
            </param>
      <param name="leftDate">The date to the left of the threshold.</param>
      <param name="leftValue">The function value to the left of the threshold.</param>
      <param name="rightDate">The date to the right of the threshold.</param>
      <param name="rightValue">The function value to the right of the threshold.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.Explorer">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.JulianDateFunctionExplorer" /> that found this indicated crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.Extremum">
      <summary>
            Gets the extremum that caused this threshold crossing indication, or null
            if this indication was not caused by an extremum.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.FindPreciseCrossing">
      <summary>
            Finds the precise date at which the function crosses the threshold.
            </summary>
      <returns>Information about the precise threshold crossing.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.Function">
      <summary>
            Gets the function that crossed the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.LeftDate">
      <summary>
            Gets the date to the left of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.LeftValue">
      <summary>
            Gets the function value to the left of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.RightDate">
      <summary>
            Gets the date to the right of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.RightValue">
      <summary>
            Gets the function value to the right of the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.Slope">
      <summary>
            Gets the slope of the segment that crosses the threshold.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.JulianDateFunctionThresholdCrossingIndicated.Threshold">
      <summary>
            Gets the threshold being crossed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters">
      <summary>
            Uses variation of parameters (VOP) with a two-body propagator to interpolate orbital positions.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.GravitationalParameter" /> property must be set
            before calling <see cref="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.#ctor(AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">The context in which to copy the object.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified gravitational parameters.
            </summary>
      <param name="gravitationalParameter">The gravitational parameter to use in orbit estimation.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.GetRequiredDataPoints(System.Int32,System.Int32)">
      <summary>
            Calculates the number of data points needed to interpolate with the desired degree of accuracy.
            </summary>
      <param name="degree">The degree of polynomial approximation desired.</param>
      <param name="inputOrder">The order of the input data.</param>
      <returns>
            The number of data points needed to interpolate with the desired degree of accuracy.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter to use in the two-body orbit propagation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates values using this interpolation algorithm.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            </param>
      <param name="yTable">
            The array of dependent variables to use to interpolate.
            There can be multiple values corresponding to each independent values in <paramref name="xTable" />.
            For a set of three dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2
            this should be as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains dependent values, first derivatives, and second derivatives.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives along with the dependent variable values,
            pass 1.  To retrieve the second derivatives as well, pass 2.  Note that not all interpolation algorithms are capable
            of returning second derivative information, and if a higher <paramref name="outputOrder" />
            is requested than the algorithm is able to provide, the highest order derivative
            will be returned and the request for the higher order derivatives is ignored.
            </param>
      <param name="startIndex">
            The index in <paramref name="xTable" /> of the first value to use in the interpolation.
            The index of the first value in <paramref name="yTable" /> to use is calculated as:
            <code>startIndex * yStride * (inputOrder + 1)</code></param>
      <param name="length">
            The number of values to use in the interpolation.  This value should be one more than the
            desired interpolation degree.  For example for 7th degree interpolation, this parameter
            should be 8.
            </param>
      <returns>
            An array of interpolated values.  The array contains at least <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable value.  If <paramref name="outputOrder" />
            is greater than zero, the array contains an additional number of <paramref name="yStride" /> elements,
            for each output order.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LagrangeOrbitVariationOfParameters.OrderRequired">
      <summary>
            Gets the number of derivatives of the dependent variable that are required on input
            in order to interpolate using this interpolation algorithm.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation">
      <summary>
            A technique for polynomial interpolation and extrapolation using Lagrange's algorithm.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.#ctor(AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.GetRequiredDataPoints(System.Int32,System.Int32)">
      <summary>
            Returns the number of data points needed to interpolate with the desired degree of accuracy,
            which is degree + 1.
            </summary>
      <param name="degree">The degree of polynomial approximation desired.</param>
      <param name="inputOrder">This parameter does not affect the result for LagrangeApproximation</param>
      <returns>
            The number of data points needed to interpolate with the desired degree of accuracy.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates values using this interpolation algorithm.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            </param>
      <param name="yTable">
            The array of dependent variables to use to interpolate.
            There can be multiple values corresponding to each independent values in <paramref name="xTable" />.
            For a set of three dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2
            this should be as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains dependent values, first derivatives, and second derivatives.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives along with the dependent variable values,
            pass 1.  A Lagrange polynomial has <paramref name="length" />-1 non-zero derivatives.
            This algorithm bases the derivation off of the highest input order, so, for example,
            if you passed in an <paramref name="inputOrder" /> of 2 and a <paramref name="length" /> of 4,
            the output from zeroth order to fifth order would be nonzero.
            </param>
      <param name="startIndex">
            The index in <paramref name="xTable" /> of the first value to use in the interpolation.
            The index of the first value in <paramref name="yTable" /> to use is calculated as:
            <code>startIndex * yStride * (inputOrder + 1)</code></param>
      <param name="length">
            The number of values to use in the interpolation.  This value should be one more than the
            desired interpolation degree.  For example for 7th degree interpolation, this parameter
            should be 8.
            </param>
      <returns>
            An array of interpolated values.  The array contains at least <paramref name="yStride" /> elements,
            each of which is an interpolated dependent variable value.  If <paramref name="outputOrder" />
            is greater than zero, the array contains an additional number of <paramref name="yStride" /> elements,
            for each output order.
            </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LagrangePolynomialApproximation.OrderRequired">
      <summary>
            Gets 0, indicating that this interpolation algorithm does not require any derivatives.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation">
      <summary>
            A technique for Linear Interpolation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.#ctor(AGI.Foundation.NumericalMethods.Advanced.LinearApproximation,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.GetRequiredDataPoints(System.Int32,System.Int32)">
      <summary>
            Returns two.
            </summary>
      <param name="degree">The degree of polynomial approximation desired, must be 1 for Linear interpolation.</param>
      <param name="inputOrder">This parameter does not affect the result for LinearApproximation.</param>
      <returns>
            The number of data points needed to interpolate with the desired degree of accuracy.
            </returns>
      <exception cref="T:System.InvalidOperationException">If <paramref name="degree" /> is not 1.</exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.Interpolate(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Interpolate method that can be called with the coordinates of the 2 points and the independent variable
            to be interpolated.
            </summary>
      <param name="x">
            The independent variable for which the dependent variable will be interpolated.
            </param>
      <param name="x0">
            The first independent variable to be used to interpolate.
            </param>
      <param name="y0">
            The first dependent variable to be used to interpolate.
            </param>
      <param name="x1">
            The second independent variable to be used to interpolate. Cannot be equal to <paramref name="x0" />.
            </param>
      <param name="y1">
            The second dependent variable to be used to interpolate.
            </param>
      <returns>
            The interpolated value corresponding to the values supplied.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when <paramref name="x1" /> equals <paramref name="x0" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.Interpolate(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Interpolates a dependent value corresponding to an independent value when supplied 2 distinct
            independent values and at least 1 dependent value per independent value.
            </summary>
      <param name="x">
            The independent variable for which the dependent variables will be interpolated.
            </param>
      <param name="xTable">
            The array of independent variables to use to interpolate.  The values
            in this array must be in increasing order and the same value must not occur twice in the array.
            Only 2 values from this array will be used in the interpolation.
            </param>
      <param name="yTable">
            The array of dependent variables to use to interpolate.
            There can be multiple values corresponding to each independent values in <paramref name="xTable" />.
            For a set of three dependent values (p,q,w) and their derivatives (dp, dq, dw) at time 1 and time 2
            this should be as follows: {p1, q1, w1, dp1, dq1, dw1, p2, q2, w2, dp2, dq2, dw2}.
            </param>
      <param name="yStride">
            The number of dependent variable values in <paramref name="yTable" /> corresponding to
            each independent variable value in <paramref name="xTable" />.  If <paramref name="inputOrder" />
            is greater than 0, this is also the number of first derivative values, second derivative
            values, etc. corresponding to each value in <paramref name="xTable" />.
            </param>
      <param name="inputOrder">
            The number of dependent variable derivatives in <paramref name="yTable" />.  If this value is 0,
            the <paramref name="yTable" /> is assumed to contain only dependent variable values, with each
            <paramref name="yStride" /> of them corresponding to a single independent variable in the
            <paramref name="xTable" />.  If this value is 1, the <paramref name="yTable" /> is assumed to
            contain not only the dependent variable values but also their derivatives.  There are
            <paramref name="yStride" /> dependent variable values followed by <paramref name="yStride" />
            dependent variable first derivatives corresponding to each independent variable value
            in <paramref name="xTable" />.  Similarly if this value is 2, the
            <paramref name="yTable" /> contains dependent values, first derivatives, and second derivatives.
            The returned array will have the linearly interpolated values of all given orders, so the derivative
            of the zeroth order result data may not necessarily be the same as the values in the first order of the
            result data.
            </param>
      <param name="outputOrder">
            The number of derivatives to return.  To return just the dependent variable values,
            pass 0 for this parameter.  To return the first derivatives along with the dependent variable values,
            pass 1.  If a number greater than 1 is passed, zeroes will be returned for all the derivatives past the first degree.
            </param>
      <param name="startIndex">
            The index in <paramref name="xTable" /> of the first value to use in the interpolation.
            The index of the first value in <paramref name="yTable" /> to use is calculated as:
            <code>startIndex * yStride * (inputOrder + 1)</code></param>
      <param name="length">
            The number of values to use in the interpolation.  This number must be 2 for the interpolation algorithm to work correctly.
            </param>
      <returns>
            An array of interpolated values along with the derivative information if indicated by <paramref name="outputOrder" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length" /> does not equal 2, <paramref name="startIndex" /> is outside the bounds of
            <paramref name="xTable" />, or <paramref name="yStride" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.LinearApproximation.OrderRequired">
      <summary>
            Gets 0, indicating that this interpolation algorithm does not require derivative information.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.MultipleStepIntegrator">
      <summary>
            A subtype of integrator which saves multiple steps of derivative data for more accurate
            integration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.MultipleStepIntegrator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.MultipleStepIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.MultipleStepIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.MultipleStepIntegrator.UpdateSavedDerivatives(System.Double[])">
      <summary>
            This method is used in order to update the last step's derivatives with any post integration corrections.
            </summary>
      <param name="derivativeCorrections">The corrections to the last step's derivatives.</param>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning">
      <summary>
            When a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> for some reason doesn't succeed or encounters another 
            issue that is not critical enough to throw an <see cref="T:System.Exception" />, one of these warning objects can be created 
            to let the user know what happened.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="sourceOfWarning">The object that created the warning.</param>
      <param name="warningMessage">The text of the message.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning.SourceOfWarning">
      <summary>
            Gets the <see cref="T:System.Object" /> that encountered the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning">warning</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning.WarningMessage">
      <summary>
            Gets the text of the warning message.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionWarning">
      <summary>
            A warning for when a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> being run in a 
            <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> encounters a problem due to a solver nested in the 
            function having a problem.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionWarning.#ctor(System.Object,AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="sourceOfWarning">The function that encountered the warning.</param>
      <param name="innerWarning">The original warning that was encountered.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionWarning.InnerWarning">
      <summary>
            Gets the original <see cref="T:AGI.Foundation.NumericalMethods.Advanced.MultivariableFunctionSolverWarning" /> encountered.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot">
      <summary>
            Locates the root of a function using the Newton-Raphson method.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.#ctor(AGI.Foundation.NumericalMethods.RealValuedScalarFunction,System.Double,AGI.Foundation.NumericalMethods.RealValuedScalarFunction,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance that can be used to find roots of a specified function.
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.SetInitialGuessOfRootLocation(System.Double)" /> must be called before <see cref="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FindRoot(System.Int32)" />. <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.MaximumStepsize" /> is set to
            an initial value of <see cref="F:System.Double.MaxValue" />, <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.VariableTolerance" /> is set to an initial value of zero.
            </summary>
      <param name="function">The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Function" /> to find the root of.</param>
      <param name="functionTolerance">The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FunctionTolerance">tolerance</see> to use to determine whether the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Function" /> is zero.</param>
      <param name="derivativeFunction">The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeFunction">derivative</see> of the function.</param>
      <param name="derivativeTolerance">The <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeTolerance">tolerance</see> to use to determine whether the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeFunction" /> is zero.</param>
      <param name="lowerBound">The lower bound of the region to search for the root within.</param>
      <param name="upperBound">The upper bound of the region to search for the root within.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeFunction">
      <summary>
            Gets the derivative of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Function" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeTolerance">
      <summary>
            Gets or sets the tolerance used to determine whether the derivative is zero for the purposes of
            aborting the calculation and setting the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.ResultType" /> to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.SolverFailedDueToHorizontalSlope" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeValue">
      <summary>
            Gets the value of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeFunction" /> at the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FindRoot(System.Int32)">
      <summary>
            Attempts the indicated number of iterations to locate the root of the function
            to within the required convergence criteria.
            </summary>
      <param name="maxIterations"> The maximum number of iterations to perform.
            If a solution has not been found after this number of iterations the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root" /> property is set to the guess
            of the last iteration and <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.ResultType" /> is set to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.SolutionDidNotConverge" />.</param>
      <returns>true if the root was found, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Function">
      <summary>
            Gets the evaluation function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FunctionTolerance">
      <summary>
            Gets or sets the tolerance used to determine whether the function is zero and a root has been found.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FunctionValue">
      <summary>
            Gets the value of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Function" /> at the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Iterations">
      <summary>
            Gets the number of iterations taken.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.LowerBound">
      <summary>
            The lower bound of the range of independent variables to search for the root within.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.MaximumStepsize">
      <summary>
            Gets or sets the maximum size of the step to take during a single iteration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.ResultType">
      <summary>
            Gets the type of result the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root" /> represents.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root">
      <summary>
            Gets the value of the root. Consult the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.ResultType" /> property
            for whether the calculated root is the result of a finished calculation, or some other failure condition
            such as the failure to converge in the allotted number of maximum iterations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.SetInitialGuessOfRootLocation(System.Double)">
      <summary>
            Sets the initial guess of the root's location. This sets <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root" /> to the provided guess, <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.ResultType" />
            to <see cref="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.InitialGuess" /> and <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Iterations" /> is set to 0.
            If <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Function" /> and/or <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeFunction" /> are non-null the method also assigns
            assigns <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FunctionValue" /> and <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.DerivativeValue" /> respectively.
            </summary>
      <param name="guess">The guess of the roots location.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.UpperBound">
      <summary>
            The upper bound of the range of independent variables to search for the root within.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.VariableTolerance">
      <summary>
            Gets or sets the tolerance used to determine whether a root guess is the same as another root guess, used in
            early detection of non-convergence.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType">
      <summary>
            Indicates the type of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root">Root</see> held by a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.InitialGuess">
      <summary>
            The value of the root has just been set as an initial guess and has yet to be <see cref="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FindRoot(System.Int32)">solved</see> for.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.FoundSolution">
      <summary>
            The root has a valid result after <see cref="M:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.FindRoot(System.Int32)" /> has successfully run.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.SolutionDidNotConverge">
      <summary>
            The attempt to solve for the location of the root failed as the solution did not converge in the
            allowed number of iterations. <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root">Root</see>
            holds the guess calculated by the latest iteration, and <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Iterations" /> holds the number
            iterations taken to calculate that latest guess.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.NewtonRootType.SolverFailedDueToHorizontalSlope">
      <summary>
            The attempt to solve for the location of the root failed do to the derivative equalling zero, making a next guess impossible to calculate
            using this algorithm. You can try <see cref="T:AGI.Foundation.NumericalMethods.Advanced.BrentFindRoot" /> as an alternative method to solve for the root of your function. <see cref="P:AGI.Foundation.NumericalMethods.Advanced.NewtonFindRoot.Root">Root</see>
            contains the location of the guess which led to the zero derivative.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationFunction">
      <summary>
            A multivariate, vector function representing a set of ordinary differential equations.
            </summary>
      <param name="independentVariable">The independent variable of the differential equations.</param>
      <param name="dependentVariables">The dependent variables of the differential equations
            and their derivatives up to the highest order derivative appearing in the equations.</param>
      <returns>
            The highest order derivative appearing in the differential equations for each of the
            dependent variables.
            </returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem">
      <summary>
            Describes a system of ordinary differential equations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.#ctor(AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationFunction,System.Int32[])">
      <summary>
            Initializes a system of ordinary differential equations from the provided information.
            </summary>
      <param name="function">The multivariate, vector function which produces the highest order derivative
            for each of the dependent variables in the set of equations.</param>
      <param name="orders">The order of the highest derivative for each of the dependent variables.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.Function">
      <summary>
            Gets the multivariate, vector function representing the set of ordinary differential equations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.GetDimensionForOrder(System.Int32)">
      <summary>
            Gets the number of variables of the given <paramref name="order" /> in the dependent variables.
            </summary>
      <param name="order">The order of dependent variables to analyze.</param>
      <returns>The number of variables of the given order in the dependent variables.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.IsMixedOrder">
      <summary>
            Gets a value indicating if the highest order derivative for each dependent variable
            appearing in the set of equations is not the same.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.MaxOrder">
      <summary>
            Gets the highest order derivative appearing in the set of differential equations
            for all of the dependent variables.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.Orders">
      <summary>
            Gets the order of the highest derivative for each of the dependent variables.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.OrdinaryDifferentialEquationSystem.ToFirstOrderSystem">
      <summary>
            Converts the system of ordinary differential equations to its equivalent first order system.
            </summary>
      <returns>The equivalent first order system.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator">
      <summary>
            An interface for an evaluator that takes a <see cref="T:AGI.Foundation.Time.JulianDate" />, order, and list of
            inputs and returns the partial derivatives of itself with respect to those inputs.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.#ctor(AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.#ctor(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable,System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable})">
      <summary>
        <para>Initializes a new instance that will evaluate the partial derivatives of the given <paramref name="partialsOf" /><see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> with respect to the given <paramref name="withRespectTo" /> list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" />.</para>
        <para>The <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">RowDimension</see> of this instance will be equal to the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.Dimension">Dimension</see>
            of <paramref name="partialsOf" />. The <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">ColumnDimension</see> of this instance will be equal to the summation of the
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.Dimension">Dimensions</see> of objects in the <paramref name="withRespectTo" /> list.</para>
      </summary>
      <param name="independentVariables">The master list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables of the partial derivative calculation..</param>
      <param name="partialsOf">The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> that the evaluated matrix will represent partials of.</param>
      <param name="withRespectTo">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable">IPartialDifferentiable's</see>
            from the <paramref name="independentVariables" /> that <paramref name="partialsOf" /> has non-zero partials with respect to.
            This could be an empty list, a subset of the independentVariables list, or the entire independentVariable list.
            Do not include <paramref name="partialsOf" /> in this list. If partialsOf is an independentVariable this base class constructor will perform the
            necessary adjustments to account for the partial derivatives of the subject with respect to itself.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> identifying the object that the partial derivatives calculated
            during evaluation are of.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.Evaluate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Calls <see cref="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.EvaluatePartialsOfChildren(AGI.Foundation.Time.JulianDate)" /> to calculate the partials derivatives of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" />
            with respect to all variables in <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.IndependentVariables" /> except for <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" />, and then adds
            on the terms for the partial derivatives of DependentVariable with respect to itself, if necessary.
            </summary>
      <param name="date">The date at which to calculate the partial derivatives.</param>
      <returns>A Motion containing the <see cref="T:AGI.Foundation.Coordinates.Matrix" /> representing the partial derivatives
            of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" /> object with respect to the objects in <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.IndependentVariables" />.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.Evaluate(AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
        <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator">PartialDerivativeEvaluators</see> only calculate zeroth order values,
            this method returns a <see cref="T:AGI.Foundation.Motion`1" /> of order zero regardless of the requested order.
            </summary>
      <param name="date">The date at which to calculate the partial derivatives.</param>
      <param name="order">This requested order is disregarded.</param>
      <returns>A Motion containing the <see cref="T:AGI.Foundation.Coordinates.Matrix" /> representing the partial derivatives
            of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" /> object with respect to the objects in <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.IndependentVariables" />.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.EvaluatePartialsOfChildren(AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates the partials derivatives of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" />
            with respect to all variables in <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.IndependentVariables" /> except for <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" />,
            as that is taken care of by <see cref="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.Evaluate(AGI.Foundation.Time.JulianDate)" />.
            </summary>
      <param name="date">The date at which to calculate the partial derivatives.</param>
      <returns>A Motion containing the <see cref="T:AGI.Foundation.Coordinates.Matrix" /> representing the partial derivatives
            of the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" /> object with respect to any of the objects
            (with the exception of <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" />) in <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.IndependentVariables" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.IndependentVariables">
      <summary>
        <para>Gets the list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable">IPartialDifferentiables</see> identifying the objects
            that the partial derivatives calculated during evaluation are with respect to.</para>
        <para>As an optimization this is typically only the subset of the independentVariables provided to
            <see cref="M:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)" /> for which the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.DependentVariable" />
            has non-zero partials, however a user-implemented <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" /> does not have to follow that pattern.</para>
        <para>This list of variables corresponds to the columns of the <see cref="T:AGI.Foundation.Coordinates.Matrix" /> produced by <see cref="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator.Evaluate(AGI.Foundation.Time.JulianDate)" />.
            Each <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> in this list has a number of columns equal to its
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable.Dimension">Dimension</see>, and those column groupings follow the same order as this list.
            In addition, this list, while possible a subset of the independent variables specified by the user, will always be in the same
            order as that original list.</para>
      </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed">
      <summary>
        <para>An object with fixed partial derivatives.</para>
        <para>
          <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed" /> and <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum" /> are meant as types
            to be used during the creation of a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />. For example a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed" />
            is used to represent an identity partial or a partial with zero partial derivatives, and a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum" />
            is used to aggregate the partial derivatives of different terms of within a type. You generally should not use either of these types
            as permanent objects which exist outside of a call to produce an evaluator.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.#ctor(AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.CheckForSameDefinition(AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.CreatePartialDerivativesWithRespectToNothing(AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable)">
      <summary>
            Creates a new instance that represents the partials of an entity with respect to nothing.
            This takes the form of a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed" /> where the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Subject" />
            is the given partial, the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Dependencies" /> list is empty, and the
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.PartialDerivatives" /> are a matrix with the <see cref="P:AGI.Foundation.Coordinates.Matrix.RowDimension">RowDimension</see>
            of the given partial and a <see cref="P:AGI.Foundation.Coordinates.Matrix.ColumnDimension">ColumnDimension</see> of zero.
            </summary>
      <param name="partial">The partial to use to create the Identity partial derivatives with respect to itself.</param>
      <returns>A PartialDerivativesFixed with the given partial as the DependentVariable and an empty list of IndependentVariables."/&gt;</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Dependencies">
      <summary>
            Gets the read only list of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing
            the objects the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.PartialDerivatives" /> are with respect to.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that returns the fixed <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.PartialDerivatives" /> with respect to any of the parameters
            in the provided generalized state.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <para>As a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed" /> should be created during the course of
            <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" /> creation for higher level objects, it is assumed to have its
            independent variables coordinated correctly. If <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Dependencies" /> contains an independent variable
            not included within <paramref name="independentVariables" /> an exception will be thrown.</para>
      </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.PartialDerivatives">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Coordinates.Matrix" /> of the fixed partial derivatives of the
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Subject" /> with respect to the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Dependencies" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed.Subject">
      <summary>
            Gets the entity whose partials are represented by this fixed object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum">
      <summary>
        <para>An <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> which produces an evaluator which calculates the resulting partial derivative from a summation of a list of
            additional <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" />.</para>
        <para>
          <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed" /> and <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum" /> are meant as types
            to be used during the creation of a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />. For example a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesFixed" />
            is used to represent a dependent variable with zero partial derivatives, and a <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum" />
            is used to aggregate the partial derivatives of different terms within a type. You generally should not use either of these types
            as permanent objects which exist outside of a call to produce an evaluator.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.#ctor(AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.CheckForSameDefinition(AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Gets an evaluator that calculates the partial derivatives created from summing the partials of the objects in
            <see cref="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.PartialsToSum" />.</para>
      </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The evaluator group to contain the evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.PartialsToSum">
      <summary>
        <para>Gets the list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> to sum.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesSum.Subject">
      <summary>
            Gets or sets the object whose partials are represented by the terms contained in this summation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial">
      <summary>
            Represents a polynomial function of one variable with only real coefficients.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial.#ctor(System.Double[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="coefficients">The coefficients of the polynomial, starting with the highest order term
            (P = coefficients[0]*x^(N) + coefficients[1]*x^(N-1) + ... + coefficients[N-1]*x + coefficients[N])
            where N is the order of the polynomial.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial.Evaluate(System.Double)">
      <summary>
            Evaluates the polynomial at the specified value of the independent variable.
            </summary>
      <param name="x">The independent variable value.</param>
      <returns>The evaluated value of the polynomial.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial.Evaluate(System.Double[])">
      <summary>
            Evaluates the polynomial at the specified values of the independent variable.
            </summary>
      <param name="x">The independent variable values.</param>
      <returns>The evaluated values of the polynomial.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial.Item(System.Int32)">
      <summary>
            Gets the coefficient of the monomial of the specified order.
            </summary>
      <param name="index">The index of the coefficient of the monomial of the specified order.</param>
      <returns>The coefficient of the given term.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameter <paramref name="index" /> is less than zero or is greater 
            than or equal to the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial.Order" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RealPolynomial.Order">
      <summary>
            Gets the order of the polynomial.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator">
      <summary>
            Defines a Runge-Kutta integrator which can adapt the size of its steps based on the integration error.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm)">
      <summary>
            Initializes a new instance based on the given tableau.
            </summary>
      <param name="tableau">The Butcher Tableau containing the coefficients and weights for the algorithm.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator.Reintegrate(System.Double)">
      <summary>
            Repeats the last integration of the differential equations.
            <para>
            When overriding this method, note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAdaptiveStepIntegrator.Tableau">
      <summary>
            Gets or sets the Butcher Tableau with the coefficients and weights 
            to use to perform the RungeKutta integration.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm">
      <summary>
            The basic Runge-Kutta integration algorithm used by the integrators, it's Butcher Tableau, and the derivative information
            computed during integration.
            <para>
            y[n+1] = y[n] + h * Sum(i=0 to s){ b[i]*k[i] }
            </para><para>
            k[i] = f(t[n] + c[i]*h, y[n] + Sum(j=0 to i-1){ a[i,j] * k[j] } )
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.#ctor(AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.#ctor(System.Double[],System.Double[],System.Double[][])">
      <summary>
            Initializes a new instance of a Runge-Kutta algorithm with the given Butcher Tableau.
            <para>
            y[n+1] = y[n] + h * Sum(i=0 to s){ b[i]*k[i] }
            </para><para>
            k[i] = f(t[n] + c[i]*h, y[n] + Sum(j=0 to i-1){ a[i,j] * k[j] } )
            </para></summary>
      <param name="stages">The coefficients "c".  These represent the factors multiplying the stepsize by which to advance the independent variable
            at each stage.</param>
      <param name="weights">The coefficients "b".  These represent the coefficients of the "k" stages summed together to represent the slope.</param>
      <param name="coefficients">The coefficients "a". These represent the factors multiplying the derivatives to provide the intermediate
            state information.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Coefficients">
      <summary>
            Gets the coefficients "a". These represent the factors multiplying the derivatives to provide the intermediate
            state information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.DerivativeFunction">
      <summary>
            Gets the delegate which defines the first order differential equation representing the 
            derivative of the dependent variables as a function of independent variable and dependent variables.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Derivatives">
      <summary>
            Gets the derivative information used in the algorithm.  These represent the 
            values of "k" in the Butcher Tableau for each dependent variable, with the 
            first index representing the stage "i" and the second representing the index
            of the dependent variable.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Initialize(System.Int32,AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives)">
      <summary>
            Initializes the derivative <see cref="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.DerivativeFunction" /> and the working arrays used during integration.
            </summary>
      <param name="dimension">The dimension of the state.</param>
      <param name="function">The first order differential function representing the derivative of the dependent variables
            as a function of independent variable and dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Integrate(System.Double,System.Double,System.Double[],System.Double[])">
      <summary>
            Compute and integration step and update the final dependent variables and store the <see cref="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Derivatives" />.
            </summary>
      <param name="step">The size of the step "h" to take.</param>
      <param name="initialIndependentVariableValue">The initial independent variable value "t[n]".</param>
      <param name="initialDependentVariableValues">The initial dependent variable value "y[n]".</param>
      <param name="finalDependentVariableValues">The final dependent variable value "y[n+1]" which will be updated.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.NumberOfStages">
      <summary>
            Gets the total number of stages in this instance of the Runge-Kutta integrator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Stages">
      <summary>
            Gets the coefficients "c".  These represent the factors multiplying the stepsize by which to advance the independent variable
            at each stage.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.Weights">
      <summary>
            Gets the coefficients "b".  These represent the coefficients of the "k" stages summed together to represent the slope.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.WorkingArray">
      <summary>
            Gets the working array used as a means to efficiently update the intermediate state information
            when calling the derivative <see cref="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm.DerivativeFunction" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator">
      <summary>
            Defines a Runge-Kutta integrator with a fixed step size.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm)">
      <summary>
            Initializes a new instance based on the given tableau.
            </summary>
      <param name="tableau">The Butcher Tableau containing the coefficients and weights for the algorithm.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.RungeKuttaAlgorithm,AGI.Foundation.NumericalMethods.Advanced.DependentVariableDerivatives)">
      <summary>
            Initializes a new instance based on the given tableau and on the given differential system for the derivatives 
            of the dependent variables.
            </summary>
      <param name="tableau">The Butcher Tableau containing the coefficients and weights for the algorithm.</param>
      <param name="system">The system of differential equations defining the derivatives
            for the dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.#ctor(AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.CurrentStepSize">
      <summary>
            Gets the current (positive) size of the step which the integrator will use for the next integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.Initialize(System.Double,System.Double[])">
      <summary>
            Initialize the integrator's initial independent and dependent variables and reset the integration parameters.
            This should be called by the user prior to performing the first integration step.
            </summary>
      <param name="x">The value of the initial independent variable.</param>
      <param name="y">The values for the initial dependent variables.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.Reintegrate(System.Double)">
      <summary>
            Repeats the last integration of the differential equations.
            <para>
            When overriding this method, note that the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.CurrentStepSize" /> 
            property should be unaffected by the <paramref name="stepSize" /> parameter.
            </para></summary>
      <param name="stepSize">The increment made to the <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.InitialIndependentVariableValue" />
            to transition to the new <see cref="P:AGI.Foundation.NumericalMethods.NumericalIntegrator.FinalIndependentVariableValue" />.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.RungeKuttaFixedStepIntegrator.Tableau">
      <summary>
            Gets or sets the Butcher Tableau with the coefficients and weights 
            to use to perform the RungeKutta integration.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.SolvableMultivariableFunctionOperations">
      <summary>
            A set of common methods for using a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.SolvableMultivariableFunctionOperations.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.NumericalMethods.Advanced.SolvableMultivariableFunctionOperations" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.SolvableMultivariableFunctionOperations.ComputeJacobianNumerically(AGI.Foundation.NumericalMethods.SolvableMultivariableFunction,System.Double[],System.Double[],AGI.Foundation.NumericalMethods.FiniteDifferenceMethod,System.Boolean,AGI.Foundation.NumericalMethods.SolvableMultivariableFunctionResults,AGI.Foundation.NumericalMethods.SolvableMultivariableFunction[],AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Computes the Jacobian of a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> numerically.  
            </summary>
      <param name="function">The <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> to compute the Jacobian for.</param>
      <param name="variables">The independent variables to compute the Jacobian at.</param>
      <param name="perturbationValues">How much each <paramref name="variables" /> should be perturbed while computing 
            the Jacobian.</param>
      <param name="differenceMethod">The differencing method to use to numerically compute the derivative.</param>
      <param name="multithreaded">Should this routine use a multithreaded algorithm.  Usually 
            the multithreaded algorithm will be faster, however in cases where there are very few variables 
            and the the <paramref name="function" /> evaluates very quickly, it may be faster to set this to 
            false.</param>
      <param name="precomputedValueResults">The function results at the <paramref name="variables" />.  
            This is optional; if this is null then the function will be evaluated 
            at the <paramref name="variables" />.</param>
      <param name="clonedFunctions">If the <paramref name="function" /> is not thread safe, and 
            <paramref name="multithreaded" /> is true, then the <paramref name="function" /> 
            will need to be cloned during evaluation.  The cloning process may take longer than a trivial 
            amount of time, so if you have already made the clones of the <paramref name="function" /> 
            they can be passed in here so they do not get cloned again.</param>
      <param name="progressTracker">An optional progress tracker.</param>
      <returns>The evaluated Jacobian of the function.</returns>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType">
      <summary>
            Indicates on which side of threshold crossing a solution must be found.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType.OnOrBelowThreshold">
      <summary>
            Indicates that the solution must lie on or below the threshold.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType.OnAboveOrBelowThreshold">
      <summary>
            Indicates that the solution may lie below, on, or above the threshold.
            </summary>
    </member>
    <member name="F:AGI.Foundation.NumericalMethods.Advanced.ThresholdCrossingSolutionType.OnOrAboveThreshold">
      <summary>
            Indicates that the solution must lie on or above the threshold.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress">
      <summary>
            Contains additional information reported to
            <see cref="M:AGI.Foundation.ITrackCalculationProgress.ReportProgress(System.Int32,System.Object)" /> by <see cref="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.TimeIntervalFinder" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.#ctor(AGI.Foundation.NumericalMethods.TimeIntervalFinder,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="timeIntervalFinder">The time interval finder that is reporting progress.</param>
      <param name="startDate">The first date to be evaluated.</param>
      <param name="endDate">The last date to be evaluated.</param>
      <param name="complete">The quantity of time for which the computation has been completed.</param>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.DurationComplete">
      <summary>
            Gets the quantity of time that has already been computed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.EndDate">
      <summary>
            Gets the last date to be evaluated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.PercentComplete">
      <summary>
            Gets an estimate of the percentage of work that has been completed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.StartDate">
      <summary>
            Gets the first date to be evaluated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.TimeIntervalFinder">
      <summary>
            Gets the time interval finder that is reporting progress.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.Advanced.TimeIntervalFinderProgress.TotalDuration">
      <summary>
            Gets the quantity of time to be evaluated.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.Duration">
      <summary>
            Represents a span of time.  
            This is different from the .NET <see cref="T:System.TimeSpan" /> class in that it
            
            offers the same precision as the <see cref="T:AGI.Foundation.Time.JulianDate" /> type.  It stores a
            number of days as an <see cref="T:System.Int32" /> and a number of seconds as a <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.#ctor(System.Int32,System.Double)">
      <summary>
            Initializes a new instance of Duration from a specified number
            of days and seconds.  The time standard is not specified, so this Duration
            will match the time standard of anything it is added to or subtracted from.
            </summary>
      <param name="days">The number of days in the new duration.</param>
      <param name="seconds">The number of seconds in the new duration.</param>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.#ctor(System.Int32,System.Double,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a new instance of Duration from a specified number
            of days and seconds.  It also specifies that the time is
            measured using the specified time standard.
            </summary>
      <param name="days">The number of days in the new duration.</param>
      <param name="seconds">The number of seconds in the new duration.</param>
      <param name="standard">The time standard in which the time is measured.</param>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a new instance of Duration from a specified number
            of days, hours, minutes, and seconds.  The time standard is not
            specified, so this Duration will match the time standard of anything it
            is added to or subtracted from.
            </summary>
      <param name="days">The number of days in the new duration.</param>
      <param name="hours">The number of hours in the new duration.</param>
      <param name="minutes">The number of minutes in the new duration.</param>
      <param name="seconds">The number of seconds in the new duration.</param>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.#ctor(System.Int32,System.Int32,System.Int32,System.Double,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a new instance of Duration from a specified number
            of days, hours, minutes, and seconds.  It also specifies that the time is
            measured using the specified time standard.
            </summary>
      <param name="days">The number of days in the new duration.</param>
      <param name="hours">The number of hours in the new duration.</param>
      <param name="minutes">The number of minutes in the new duration.</param>
      <param name="seconds">The number of seconds in the new duration.</param>
      <param name="standard">The time standard in which the time is measured.</param>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new Duration from a <see cref="T:System.TimeSpan" />.
            The time standard is not specified, so this Duration will match the
            time standard of anything it is added to or subtracted from.
            </summary>
      <param name="timeSpan">The time span.</param>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.#ctor(System.TimeSpan,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a new Duration from a <see cref="T:System.TimeSpan" />.
            It also specifies that the time is measured using the specified
            time standard.
            </summary>
      <param name="timeSpan">The time span.</param>
      <param name="standard">The time standard in which the span is measured.</param>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Add(AGI.Foundation.Time.Duration)">
      <summary>
            Adds the specified Duration to this instance.
            </summary>
      <param name="other">The duration to add to this instance.</param>
      <returns>A <see cref="T:AGI.Foundation.Time.Duration" /> that represents the value of this instance plus the value of <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">This duration and the <paramref name="other" /> duration have different time standards.</exception>
      <exception cref="T:System.ArgumentException">
            Thrown when attempting to add <see cref="T:AGI.Foundation.Time.Duration">Durations</see> of different <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see>.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.AddDays(System.Double)">
      <summary>
            Adds a specified number of days to this duration and returns the new duration.
            </summary>
      <param name="days">The number of days to add.</param>
      <returns>A new duration which is the sum of the original duration and the specified number of days.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.AddSeconds(System.Double)">
      <summary>
            Adds a specified number of seconds to this duration and returns the new duration.
            </summary>
      <param name="seconds">The number of seconds to add.</param>
      <returns>A new duration which is the sum of the original duration and the specified number of seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.CompareTo(AGI.Foundation.Time.Duration)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
      <exception cref="T:System.ArgumentException">
            Thrown when comparing this object to a <see cref="T:AGI.Foundation.Time.Duration" /> defined in a different <see cref="T:AGI.Foundation.Time.TimeStandard" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.CompareTo(System.Object)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="obj" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="obj" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="obj" />.
            </description></item></list></returns>
      <exception cref="T:AGI.Foundation.ArgumentTypeInvalidException">
        Thrown when the parameter <paramref name="obj" /> is not of the same type as the object on which
        this method is called.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.Days">
      <summary>
            Gets the day component of this duration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Divide(AGI.Foundation.Time.Duration)">
      <summary>
            Divides the duration by another duration, yield a constant.
            </summary>
      <param name="divisor">The duration by which to divide this duration.</param>
      <returns>The result of dividing this Duration by another.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Divide(System.Double)">
      <summary>
            Divides the duration by a constant.
            </summary>
      <param name="constant">The constant by which to divide the <see cref="T:AGI.Foundation.Time.Duration" />.</param>
      <returns>A <see cref="T:AGI.Foundation.Time.Duration" /> that represents the value of this instance divided by the constant.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Equals(AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if this Duration exactly equals another duration, within the limits
            of floating point precision.  To be considered equal, the <see cref="P:AGI.Foundation.Time.Duration.Days" />
            and <see cref="P:AGI.Foundation.Time.Duration.Standard" /> properties must be identical (or one must be null) and the
            difference between the <see cref="P:AGI.Foundation.Time.Duration.Seconds" /> properties must be less than 1.0e-10.
            </summary>
      <param name="other">The other duration.</param>
      <returns>true if this duration exactly equals the <paramref name="other" /> duration, within the limits of floating point precision.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Equals(System.Object)">
      <summary>
            Returns true if this Duration exactly equals another duration, within the limits
            of floating point precision.  To be considered equal, the <see cref="P:AGI.Foundation.Time.Duration.Days" />
            and <see cref="P:AGI.Foundation.Time.Duration.Standard" /> properties must be identical (or one must be null) and the
            difference between the <see cref="P:AGI.Foundation.Time.Duration.Seconds" /> properties must be less than 1.0e-10.
            </summary>
      <param name="obj">The other duration.</param>
      <returns>true if this duration exactly equals the <paramref name="obj" /> duration, within the limits of floating point precision.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.EqualsEpsilon(AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Returns true if this Duration is within <paramref name="epsilon" /> seconds of the
            specified Duration.  That is, in order for the Durations to be considered equal (and for
            this function to return true), the absolute value of the difference between them, in
            seconds, must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The Duration to compare to this Duration.</param>
      <param name="epsilon">The smallest difference between the Durations, in seconds, such that they will NOT be considered equal.</param>
      <returns>true if the dates are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.FromDays(System.Double)">
      <summary>
            Returns a Duration that represents the specified number of days.
            </summary>
      <param name="days">The number of days to be represented by the returned duration.</param>
      <returns>A <see cref="T:AGI.Foundation.Time.Duration" /> representing the specified number of days.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.FromDays(System.Double,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Returns a Duration that represents the specified number of days
            using the specified time standard.
            </summary>
      <param name="days">The number of days to be represented by the returned duration.</param>
      <param name="standard">The time standard of the new duration.</param>
      <returns>A <see cref="T:AGI.Foundation.Time.Duration" /> representing the specified number of days.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.FromSeconds(System.Double)">
      <summary>
            Returns a Duration that represents the specified number of seconds.
            </summary>
      <param name="seconds">The number of seconds to be represented by the returned duration.</param>
      <returns>A <see cref="T:AGI.Foundation.Time.Duration" /> representing the specified number of seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.FromSeconds(System.Double,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Returns a Duration that represents the specified number of seconds using the
            specified time standard.
            </summary>
      <param name="seconds">The number of seconds to be represented by the returned duration.</param>
      <param name="standard">The time standard of the new duration.</param>
      <returns>A <see cref="T:AGI.Foundation.Time.Duration" /> representing the specified number of seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.HoursMinutesSecondsToSeconds(System.Int32,System.Int32,System.Double)">
      <summary>
            Converts the specified number of hours, minutes, and seconds to total duration in seconds.
            </summary>
      <param name="hours">The number of hours.</param>
      <param name="minutes">The number of minutes.</param>
      <param name="seconds">The number of seconds.</param>
      <returns>The corresponding duration in seconds.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.MaxValue">
      <summary>
            Gets the largest possible value of a <see cref="T:AGI.Foundation.Time.Duration" />. 
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.MinValue">
      <summary>
            Gets the smallest possible value of a <see cref="T:AGI.Foundation.Time.Duration" />. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Multiply(System.Double)">
      <summary>
            Multiplies the duration by a constant.
            </summary>
      <param name="constant">The constant by which to multiply the Duration.</param>
      <returns>A Duration that represents the value of this instance multiplied by the constant.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Addition(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Adds two specified Duration instances.
            </summary>
      <param name="left">The first duration to add.</param>
      <param name="right">The second duration to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Division(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Divides the duration by another duration.
            </summary>
      <param name="dividend">The duration to divide.</param>
      <param name="divisor">The duration by which to divide the Duration.</param>
      <returns>The result of dividing the dividend by the divisor.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Division(AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Divides the duration by a constant.
            </summary>
      <param name="dividend">The duration to divide.</param>
      <param name="divisor">The constant by which to divide the duration.</param>
      <returns>The result of dividing the dividend by the divisor.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Equality(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if two Durations are exactly equal, within the limits
            of floating point precision.  To be considered equal, the <see cref="P:AGI.Foundation.Time.Duration.Days" />
            and <see cref="P:AGI.Foundation.Time.Duration.Standard" /> properties must be identical (or one must be null) and the
            difference between the <see cref="P:AGI.Foundation.Time.Duration.Seconds" /> properties must be less than 1.0e-10.
            </summary>
      <param name="left">The left duration.</param>
      <param name="right">The second duration.</param>
      <returns>true if the durations are equal, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_GreaterThan(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if <paramref name="left" /> is longer than <paramref name="right" />.
            </summary>
      <param name="left">The left duration.</param>
      <param name="right">The right duration.</param>
      <returns>true if left is greater than right, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_GreaterThanOrEqual(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if <paramref name="left" /> is longer than or exactly equal to <paramref name="right" />.
            </summary>
      <param name="left">The left duration.</param>
      <param name="right">The right duration.</param>
      <returns>true if left is greater than or equal to right, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Inequality(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if two Durations are NOT exactly equal, within the limits
            of floating point precision.  To be considered equal, the <see cref="P:AGI.Foundation.Time.Duration.Days" />
            and <see cref="P:AGI.Foundation.Time.Duration.Standard" /> properties must be identical (or one must be null) and the
            difference between the <see cref="P:AGI.Foundation.Time.Duration.Seconds" /> properties must be less than 1.0e-10.
            </summary>
      <param name="left">The first duration.</param>
      <param name="right">The second duration.</param>
      <returns>true if the durations are not equal, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_LessThan(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if <paramref name="left" /> is shorter than <paramref name="right" />.
            </summary>
      <param name="left">The left duration.</param>
      <param name="right">The right duration.</param>
      <returns>true if left is less than right, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_LessThanOrEqual(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Returns true if <paramref name="left" /> is shorter than or exactly equal to <paramref name="right" />.
            </summary>
      <param name="left">The left duration.</param>
      <param name="right">The right duration.</param>
      <returns>true if left is less than or equal to right, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Multiply(AGI.Foundation.Time.Duration,System.Double)">
      <summary>
            Multiplies the duration by a constant.
            </summary>
      <param name="left">The duration to multiply.</param>
      <param name="right">The constant by which to multiply the Duration.</param>
      <returns>A Duration that represents the value of this instance multiplied by the constant.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_Subtraction(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration)">
      <summary>
            Subtracts a specified Duration from another specified Duration.
            </summary>
      <param name="left">The subtrahend.</param>
      <param name="right">The minuend.</param>
      <returns>The difference <paramref name="left" /> minus <paramref name="right" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.op_UnaryNegation(AGI.Foundation.Time.Duration)">
      <summary>
            Inverts a specified Duration.  For example, if the <paramref name="value" /> represents a positive
            quantity of time, the returned Duration will be a negative quantity of time.
            </summary>
      <param name="value">The value to invert.</param>
      <returns>The inverted duration.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.Seconds">
      <summary>
            Gets the seconds component of this duration.  This is the number of seconds represented by
            this duration in addition to the <see cref="P:AGI.Foundation.Time.Duration.Days" />, so it will always be less than
            <see cref="F:AGI.Foundation.Time.TimeConstants.SecondsPerDay" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.Standard">
      <summary>
            Gets the time standard in which this Duration is measured.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.Subtract(AGI.Foundation.Time.Duration)">
      <summary>
            Subtracts the specified Duration from this instance.
            </summary>
      <param name="other">The Duration to subtract from this instance.</param>
      <returns>A Duration that represents the value of this instance minus the value of other.</returns>
      <exception cref="T:System.ArgumentException">This duration and the <paramref name="other" /> duration have different time standards.</exception>
      <exception cref="T:System.ArgumentException">
            Thrown when attempting to subtract <see cref="T:AGI.Foundation.Time.Duration">Durations</see> of different <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see>.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.ToString">
      <summary>
            Returns the value of the <see cref="T:AGI.Foundation.Time.Duration" /> in <see cref="P:AGI.Foundation.Time.Duration.Days" />:<see cref="P:AGI.Foundation.Time.Duration.Seconds" />.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.TotalDays">
      <summary>
            Gets the total number of whole and fractional days represented by this Duration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.Duration.TotalSeconds">
      <summary>
            Gets the total number of seconds represented by this duration, including the seconds
            that compose the days returned by the <see cref="P:AGI.Foundation.Time.Duration.Days" /> property.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.Duration.ToTimeSpan">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> equivalent to this Duration.
            </summary>
      <returns>The time span.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.GlobalPositioningSystemDate">
      <summary>
            A date and time format consisting of a week number and a time of week and utilizing
            the <see cref="P:AGI.Foundation.Time.TimeStandard.GlobalPositioningSystemTime" /> time standard.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.#ctor(AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a new instance from a Julian date.
            </summary>
      <param name="date">The Julian date from which to create this instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the given <see cref="T:AGI.Foundation.Time.JulianDate" /> is
            prior to the <see cref="F:AGI.Foundation.Time.GlobalPositioningSystemDate.JulianDateOfEpoch" />.</exception>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance from a <see cref="T:System.DateTime" /> object.
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> object from which to create this
            instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the given 
            <see cref="T:System.DateTime" /> is prior to the <see cref="F:AGI.Foundation.Time.GlobalPositioningSystemDate.JulianDateOfEpoch" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.#ctor(System.Int32,System.DayOfWeek,System.Double)">
      <summary>
            Initializes a new instance from a week number, a day of the week, and a number of seconds into the day.
            </summary>
      <param name="week">The GPS reference week number.  Must be counted from the initial GPS Epoch (Jan 6, 1980).</param>
      <param name="dayOfWeek">The day of the week.</param>
      <param name="secondsOfDay">The number of seconds into the day, counted from midnight.</param>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.#ctor(System.Int32,System.Double)">
      <summary>
            Initializes a new instance from a week number and a number of seconds into the week.
            </summary>
      <param name="week">The GPS reference week number.  Must be counted from the initial GPS Epoch (Jan 6, 1980).</param>
      <param name="secondsOfWeek">The number of seconds into the week, counted from Sunday (the first day of the week) at midnight.</param>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance from the time parameters found in a
            <see cref="T:AGI.Foundation.Navigation.DataReaders.PerformanceAssessmentRecord" />
            .
            </summary>
      <param name="year">The year.</param>
      <param name="dayOfYear">The Julian day of year.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The Second.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the parameter <paramref name="dayOfYear" /> is not between 1 and 366 inclusive.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.Add(AGI.Foundation.Time.Duration)">
      <summary>
            Adds a <see cref="T:AGI.Foundation.Time.Duration" /> to this date, producing a new date.
            </summary>
      <param name="duration">The duration to add.</param>
      <returns>A new Date that is the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.AddDays(System.Double)">
      <summary>
            Adds the specified number of days to this date and returns the new date.
            </summary>
      <param name="days">The number of days.</param>
      <returns>The new date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.AddSeconds(System.Double)">
      <summary>
            Adds the specified number of seconds to this date and returns the new date.
            </summary>
      <param name="seconds">The number of seconds.</param>
      <returns>The new date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.CompareTo(AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.CompareTo(System.Object)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="obj" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="obj" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="obj" />.
            </description></item></list></returns>
      <exception cref="T:AGI.Foundation.ArgumentTypeInvalidException">
        Thrown when the parameter <paramref name="obj" /> is not of the same type as the object on which
        this method is called.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.DayOfWeek">
      <summary>
            Gets the day of the week.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.Equals(AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.EqualsEpsilon(AGI.Foundation.Time.GlobalPositioningSystemDate,System.Double)">
      <summary>
            Returns true if this date is within <paramref name="epsilon" /> seconds of the
            specified date.  That is, in order for the dates to be considered equal (and for
            this function to return true), the absolute value of the difference between them, in
            seconds, must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The date to compare to this date.</param>
      <param name="epsilon">The smallest difference between the dates, in seconds, such that they will NOT be considered equal.</param>
      <returns>true if the dates are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="F:AGI.Foundation.Time.GlobalPositioningSystemDate.JulianDateOfEpoch">
      <summary>
            The GPS epoch of 6 January 1980 00:00:00 UTC expressed as a <see cref="T:AGI.Foundation.Time.JulianDate" /> in the <see cref="P:AGI.Foundation.Time.TimeStandard.GlobalPositioningSystemTime" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.KPoints">
      <summary>
            Gets the K-Points (15-minute segments) since the most recent GPS epoch.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.MinutesDifference(AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Computes the number of minutes that have elapsed from this date to the
            <paramref name="other" /> date.
            </summary>
      <param name="other">The other date, which is the end of the interval.</param>
      <returns>The number of minutes that have elapsed from this date to the other date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_Addition(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.Duration)">
      <summary>
            Adds a <see cref="T:AGI.Foundation.Time.Duration" /> to a <see cref="T:AGI.Foundation.Time.GlobalPositioningSystemDate" />, producing a new date.
            </summary>
      <param name="left">The date.</param>
      <param name="right">The duration.</param>
      <returns>A new date that is the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_Equality(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_GreaterThan(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs after <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the <paramref name="left" /> is greater than <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_GreaterThanOrEqual(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs after or at the same time as <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if <paramref name="left" /> occurs after or at the same time as <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_Inequality(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_LessThan(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs before <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the <paramref name="left" /> is less than <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_LessThanOrEqual(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs before or at the same time as <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if <paramref name="left" /> occurs before or at the same time as <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_Subtraction(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.Duration)">
      <summary>
            Subtracts a <see cref="T:AGI.Foundation.Time.Duration" /> from a date, yielding a new <see cref="T:AGI.Foundation.Time.GlobalPositioningSystemDate" />.
            </summary>
      <param name="left">The minuend.</param>
      <param name="right">The subtrahend.</param>
      <returns>The date that is the result of the subtraction; that is, <paramref name="left" /> minus <paramref name="right" />.  The time standard will be the same as the time standard of the subtrahend.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.op_Subtraction(AGI.Foundation.Time.GlobalPositioningSystemDate,AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Subtracts a date from another date, yielding a <see cref="T:AGI.Foundation.Time.Duration" />.
            </summary>
      <param name="left">The minuend.</param>
      <param name="right">The subtrahend.</param>
      <returns>The Duration that is the result of the subtraction; that is, <paramref name="left" /> minus <paramref name="right" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.RolloverCount">
      <summary>
            Gets the number of times that the GPS week counter has rolled over since
            <see cref="F:AGI.Foundation.Time.GlobalPositioningSystemDate.JulianDateOfEpoch" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.RolloverDate">
      <summary>
            Gets the most recent rollover of the GPS week counter.  The week number returned by
            <see cref="P:AGI.Foundation.Time.GlobalPositioningSystemDate.WeekSinceRollover" /> is relative to this date.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.SecondsDifference(AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Computes the number of seconds that have elapsed from this date to the
            <paramref name="other" /> date.
            </summary>
      <param name="other">The other date, which is the end of the interval.</param>
      <returns>The number of seconds that have elapsed from this date to the other date.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.SecondsOfDay">
      <summary>
            Gets the elapsed whole and fractional seconds since the start of the day.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.SecondsOfWeek">
      <summary>
            Gets the elapsed whole and fractional seconds since the start of the week.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.Subtract(AGI.Foundation.Time.Duration)">
      <summary>
            Subtracts a <see cref="T:AGI.Foundation.Time.Duration" /> from this date, producing a new date.
            </summary>
      <param name="duration">The duration to subtract.</param>
      <returns>A new date that is the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.Subtract(AGI.Foundation.Time.GlobalPositioningSystemDate)">
      <summary>
            Subtracts another date from this date.
            </summary>
      <param name="subtrahend">The date to subtract from this date.</param>
      <returns>The Duration that is the result of the subtraction.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.ToDateTime">
      <summary>
            Converts this GPS Time to a .NET standard <see cref="T:System.DateTime" /> with a default time standard of Global Positioning System Time.
            </summary>
      <returns>The <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.ToJulianDate">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.JulianDate" /> that is equivalent to this instance.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.Time.JulianDate" /> that is equivalent to this date.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GlobalPositioningSystemDate.ToString">
      <summary>
            Returns the value of this GPS Time in <see cref="P:AGI.Foundation.Time.GlobalPositioningSystemDate.RolloverCount" />:<see cref="P:AGI.Foundation.Time.GlobalPositioningSystemDate.WeekSinceRollover" />:<see cref="P:AGI.Foundation.Time.GlobalPositioningSystemDate.SecondsOfWeek" />, where 
            <see cref="P:AGI.Foundation.Time.GlobalPositioningSystemDate.RolloverCount" /> is the number of times that the GPS week counter has rolled over since
            <see cref="F:AGI.Foundation.Time.GlobalPositioningSystemDate.JulianDateOfEpoch" />.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.TotalDays">
      <summary>
            Gets the total number of whole and fractional days that have elapsed since
            <see cref="F:AGI.Foundation.Time.GlobalPositioningSystemDate.JulianDateOfEpoch" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.TotalDaysSinceRollover">
      <summary>
            Gets the total number of whole and fractional days that have elapsed since
            <see cref="P:AGI.Foundation.Time.GlobalPositioningSystemDate.RolloverDate" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.Week">
      <summary>
            Gets the week number, which is the number of weeks since January 6, 1980.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.WeekSinceRollover">
      <summary>
            Gets the week number since the most recent GPS week rollover.  In the GPS system,
            the week is represented as a 10 bit number so it can only be a value from 0 to 1023 before
            rolling over back to 0.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.GlobalPositioningSystemDate.WeekWrapValue">
      <summary>
            The number of weeks at which the week count wraps around to zero.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GlobalPositioningSystemDate.ZCounts">
      <summary>
            Gets the Z-Counts (1.5 second segments) since the most recent GPS Epoch.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.GregorianDate">
      <summary>
            Represents a calendar date in the Gregorian calendar.  A 
            <see cref="T:AGI.Foundation.Time.GregorianDate" /> does not include a <see cref="T:AGI.Foundation.Time.TimeStandard" /> as <see cref="T:AGI.Foundation.Time.JulianDate" />
            does.  However, without explicitly specifying a <see cref="T:AGI.Foundation.Time.TimeStandard" /> for the date, the <see cref="T:AGI.Foundation.Time.GregorianDate" />
            is assumed to be represented in <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" />. <see cref="T:AGI.Foundation.Time.GregorianDate" /> is
            also capable of representing leap seconds, which are represented as the second measured from 60 to 61.  In this case,
            the <see cref="T:AGI.Foundation.Time.GregorianDate" /> is assumed to be the <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" /> represented
            in <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime" /> which can represent leap seconds exactly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new <see cref="T:AGI.Foundation.Time.GregorianDate" /> will be in the
            <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" /> (UTC) time standard.
            </summary>
      <param name="julianDate">The <see cref="T:AGI.Foundation.Time.JulianDate" />.</param>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new <see cref="T:AGI.Foundation.Time.GregorianDate" /> will be in the
            provided <see cref="T:AGI.Foundation.Time.TimeStandard" />.
            </summary>
      <param name="julianDate">The <see cref="T:AGI.Foundation.Time.JulianDate" />.</param>
      <param name="timeStandard">
            The <see cref="T:AGI.Foundation.Time.TimeStandard" /> to represent the new <see cref="T:AGI.Foundation.Time.GregorianDate" />
            in.
            </param>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(System.DateTime)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided 
            <see cref="T:System.DateTime" />.  If the provided <see cref="T:System.DateTime" /> is in local
            time, it is converted to UTC.
            </summary>
      <param name="dateTime">The <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(System.Int32,System.Double)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided values.  The
            fractional portion of the <paramref name="daysOfYear" /> will be converted into
            hours, minutes, and seconds.
            </summary>
      <param name="year">The year.</param>
      <param name="daysOfYear">The day of year plus the fractional portion of the day 
            (in the range 1 through the number of days in the given year).</param>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided values.  The
            remaining values are assumed to be zero.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month of the year (in the range 1 through 12)</param>
      <param name="day">The day of the month (in the range 1 through the number of
            days in <paramref name="month" />)</param>
      <exception cref="T:System.ArgumentException">
            Thrown when one of the provided parameters is outside of its acceptable range.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided values.
            </summary>
      <param name="year">The year.</param>
      <param name="dayOfYear">The day of year
            (in the range 1 through the number of days in the given year).</param>
      <param name="hour">The hour (in the range 0 through 23).</param>
      <param name="minute">The minute (in the range 0 through 59).</param>
      <param name="second">The second, including fractional seconds (in the range 0.0
            up to, but not including, 61.0).  A second between 60.0 and 61.0 (a leap
            second) is only valid if the overall time is during one of the official leap
            seconds. </param>
      <exception cref="T:System.ArgumentException">
            Thrown when one of the provided parameters is outside of its acceptable range.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.GregorianDate" /> from the provided values.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month of the year (in the range 1 through 12)</param>
      <param name="day">The day of the month (in the range 1 through the number of
            days in <paramref name="month" />)</param>
      <param name="hour">The hour (in the range 0 through 23).</param>
      <param name="minute">The minute (in the range 0 through 59).</param>
      <param name="second">The second, including fractional seconds (in the range 0.0
            up to, but not including, 61.0).  A second between 60.0 and 61.0 (a leap
            second) is only valid if the overall time is during one of the official leap
            seconds. </param>
      <exception cref="T:System.ArgumentException">
            Thrown when one of the provided parameters is outside of its acceptable range.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.CompareTo(AGI.Foundation.Time.GregorianDate)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.CompareTo(System.Object)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="obj" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="obj" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="obj" />.
            </description></item></list></returns>
      <exception cref="T:AGI.Foundation.ArgumentTypeInvalidException">
        Thrown when the parameter <paramref name="obj" /> is not of the same type as the object on which
        this method is called.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.Day">
      <summary>
            Gets the day of the month (in the range 1 through the number of days in the
            month).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.DayOfWeek">
      <summary>Gets the day of the week represented by this instance.</summary>
      <returns>A <see cref="P:AGI.Foundation.Time.GregorianDate.DayOfWeek" /> enumerated constant that indicates the day
            of the week. This property value ranges from zero, indicating Sunday, to six,
            indicating Saturday.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.DayOfYear">
      <summary>Gets the day of the year represented by this instance.</summary>
      <returns>An integer that indicates the day of the year.
            This property value ranges from 1 through the number of days in the year.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.Equals(AGI.Foundation.Time.GregorianDate)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.Hour">
      <summary>
            Gets the hour (in the range 0 through 23).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.IsValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Indicates whether the date values provided are a valid representation of a date
            and time.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month of the year (in the range 1 through 12)</param>
      <param name="day">The day of the month (in the range 1 through the number of
            days in <paramref name="month" />)</param>
      <param name="hour">The hour (in the range 0 through 23).</param>
      <param name="minute">The minute (in the range 0 through 59).</param>
      <param name="second">The second, including fractional seconds (in the range 0.0
            up to, but not including, 61.0).  A second between 60.0 and 61.0 (a leap
            second) is only valid if the overall time is during one of the official leap
            seconds. </param>
      <returns>true if the representation is valid and false if it is not.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.JulianSecondsOfDay">
      <summary>
            Gets the corresponding seconds past noon for this instance.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.GregorianDate.MaxValue">
      <summary>
            Represents the largest possible value of <see cref="T:AGI.Foundation.Time.GregorianDate" />. 
            Corresponds to <see cref="F:System.DateTime.MaxValue" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.Minute">
      <summary>
            Gets the minute (in the range 0 through 59).
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.GregorianDate.MinValue">
      <summary>
            Represents the smallest possible value of <see cref="T:AGI.Foundation.Time.GregorianDate" />. 
            Corresponds to <see cref="F:System.DateTime.MinValue" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.Month">
      <summary>
            Gets the month of the year (in the range 1 through 12).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.op_Equality(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.GregorianDate)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.op_GreaterThan(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.GregorianDate)">
      <summary>
        Returns true if <paramref name="left" /> is greater than <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.op_GreaterThanOrEqual(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.GregorianDate)">
      <summary>
        Returns true if <paramref name="left" /> is greater than or equal to <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.op_Inequality(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.GregorianDate)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.op_LessThan(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.GregorianDate)">
      <summary>
        Returns true if <paramref name="left" /> is less than <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.op_LessThanOrEqual(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.GregorianDate)">
      <summary>
        Returns true if <paramref name="left" /> is less than or equal to <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.Parse(System.String)">
      <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent.
            
            Note: <see cref="T:AGI.Foundation.Time.GregorianDate" /> is always assumed to be in UTC.  You cannot
            parse strings containing time zone information. However, this will handle
            two common ISO8601 formats: YYYY-MM-DDThh:mm:ss.sZ (with seconds to machine precision)
            and it's "day of year" equivalent: YYYY-DDDThh:mm:ss.sZ
            </summary>
      <param name="s">A string containing a date and time to convert.</param>
      <returns>
            A <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent to the date and time contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date
            and time. 
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent using the specified culture-specific
            format information.
            
            Note: <see cref="T:AGI.Foundation.Time.GregorianDate" /> is always assumed to be in UTC.  You cannot
            parse strings containing time zone information. However, this will handle
            two common ISO8601 formats: YYYY-MM-DDThh:mm:ss.sZ (with seconds to machine precision)
            and it's "day of year" equivalent: YYYY-DDDThh:mm:ss.sZ
            </summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            culture-specific format information about <paramref name="s" />.</param>
      <returns>
            A <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent to the date and time contained in 
            <paramref name="s" /> as specified by <paramref name="provider" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date
            and time. 
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
             Converts the specified string representation of a date and time to its
             <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent using the specified format and
             culture-specific format information. The format of the string representation
             must match the specified format exactly.
            
             Note: <see cref="T:AGI.Foundation.Time.GregorianDate" /> is always assumed to be in UTC.  You cannot
             parse strings containing time zone information.
             </summary>
      <param name="s">A string containing a date and time to convert. </param>
      <param name="format">The expected format of <paramref name="s" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
             culture-specific format information about <paramref name="s" />. </param>
      <returns>
             A <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent to the date and time contained in 
             <paramref name="s" /> as specified by <paramref name="format" /> and 
             <paramref name="provider" />.
             </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null.
             </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- 
             <paramref name="s" /> does not contain a date and time that corresponds to the
             pattern specified in
             <paramref name="format" />. 
             </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>
             Converts the specified string representation of a date and time to its
             <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent using the specified format and
             culture-specific format information. The format of the string representation
             must match the specified format exactly.
            
             Note: <see cref="T:AGI.Foundation.Time.GregorianDate" /> is always assumed to be in UTC.  You cannot
             parse strings containing time zone information.
             </summary>
      <param name="s">A list of strings containing a date and time to convert. </param>
      <param name="format">The expected format of <paramref name="s" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
             culture-specific format information about <paramref name="s" />. </param>
      <returns>
             A <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent to the date and time contained in 
             <paramref name="s" /> as specified by <paramref name="format" /> and 
             <paramref name="provider" />.
             </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null.
             </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- 
             <paramref name="s" /> does not contain a date and time that corresponds to the
             pattern specified in
             <paramref name="format" />. 
             </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.RoundSeconds(System.Int32)">
      <summary>
            Rounds this instance to the specified number of decimal digits in the seconds, rolling over to minutes, hours, days,
            etc. as necessary.  This instance is assumed to express a time in the <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" />
            (UTC) time standard so the <see cref="P:AGI.Foundation.Time.GregorianDate.Second" /> will be allowed to go above 60 during a leap second.
            </summary>
      <param name="digits">The number of digits after the decimal point to include in the seconds.</param>
      <returns>The rounded date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.RoundSeconds(System.Int32,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Rounds this instance to the specified number of decimal digits in the seconds, rolling over to minutes, hours, days,
            etc. as necessary.  If the specified <paramref name="timeStandard" /> is <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" />,
            (UTC), the seconds will be allowed to go above 60 during a leap second.  For any other time standard, the
            <see cref="P:AGI.Foundation.Time.GregorianDate.Second" /> will be below 60.
            </summary>
      <param name="digits">The number of digits after the decimal point to include in the seconds.</param>
      <param name="timeStandard">The time standard in which this <see cref="T:AGI.Foundation.Time.GregorianDate" /> is expressed.</param>
      <returns>The rounded date.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.Second">
      <summary>
            Gets the second, including fractional seconds (in the range 0.0 up to, but not
            including, 61.0).  A value between 60.0 and 61.0 indicates a leap second.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.SecondsOfDay">
      <summary>
            Gets the corresponding seconds past midnight for this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToDateTime">
      <summary>Convert this <see cref="T:AGI.Foundation.Time.GregorianDate" /> to a <see cref="T:System.DateTime" />. 
            The <see cref="T:System.DateTime" /> will be in UTC.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representing this date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToIso8601String">
      <summary>
            Converts the value of this instance to its equivalent ISO8601 extended string
            representation, corresponding to year month day hours minutes and seconds with
            seconds represented to machine precision.
            </summary>
      <returns>A string representing this date and time in ISO8601 format.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToIso8601String(AGI.Foundation.Time.Iso8601Format)">
      <summary>
            Converts the value of this instance to its equivalent ISO8601 string representation,
            corresponding to year month day hours minutes and seconds with seconds
            represented to machine precision.
            </summary>
      <param name="format">The type of ISO8601 string to create.</param>
      <returns>A string representing this date and time in ISO8601 format.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToIso8601String(AGI.Foundation.Time.Iso8601Format,System.Int32)">
      <summary>
            Converts the value of this instance to its equivalent ISO8601 string representation,
            corresponding to year month day hours minutes and seconds with seconds
            rounded to and formatted with the specified number of decimal digits.
            </summary>
      <param name="format">The type of ISO8601 string to create.</param>
      <param name="digitsOfFractionalSeconds">The number of digits after the decimal point in the 'seconds' portion of the time.</param>
      <returns>A string representing this date and time in ISO8601 format.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToJulianDate">
      <summary>
             Convert this <see cref="T:AGI.Foundation.Time.GregorianDate" /> to a <see cref="T:AGI.Foundation.Time.JulianDate" />. The
             time standard will be <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" />
             (UTC), unless this  <see cref="T:AGI.Foundation.Time.GregorianDate" /> represents the instant of a
             leap second, in which case the <see cref="T:AGI.Foundation.Time.JulianDate" /> will be in 
             <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime" /> (TAI).
            </summary>
      <returns>A <see cref="T:AGI.Foundation.Time.JulianDate" /> representing this date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToJulianDate(AGI.Foundation.Time.TimeStandard)">
      <summary>
             Convert this <see cref="T:AGI.Foundation.Time.GregorianDate" /> to a <see cref="T:AGI.Foundation.Time.JulianDate" />.  The
             <see cref="T:AGI.Foundation.Time.GregorianDate" /> is assumed to specify a time in the
             specified <see cref="T:AGI.Foundation.Time.TimeStandard" />.
            </summary>
      <param name="timeStandard">
            The time standard in which this <see cref="T:AGI.Foundation.Time.GregorianDate" /> is expressed.  The returned
            <see cref="T:AGI.Foundation.Time.JulianDate" /> will be expressed in this time standard as well, if possible.
            </param>
      <returns>A <see cref="T:AGI.Foundation.Time.JulianDate" /> representing this date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToLongDateString">
      <summary>Converts the value of this instance to its equivalent long date string representation.</summary>
      <returns>A string containing the name of the day of the week, the name of the month, the numeric day of the month, and the year equivalent to the date value of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToLongTimeString">
      <summary>Converts the value of this instance to its equivalent long time string
            representation.</summary>
      <returns>A string containing the name of the day of the week, the name of the
            month, the numeric day of the hours, minutes, and seconds equivalent to the
            time value of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToShortDateString">
      <summary>Converts the value of this instance to its equivalent short date
            string representation.</summary>
      <returns>A string containing the numeric month, the numeric day of the month,
            and the year equivalent to the date value of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToShortTimeString">
      <summary>Converts the value of this instance to its equivalent short time
            string representation.</summary>
      <returns>A string containing the name of the day of the week, the name of the
            month, the numeric day of the hours, minutes, and seconds equivalent to the
            time value of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToString">
      <summary>Converts the value of this instance to its equivalent string
            representation.</summary>
      <returns>A string representation of value of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string
            representation using the specified culture-specific format information.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            culture-specific formatting information. </param>
      <returns>A string representation of value of this instance as specified by
            <paramref name="provider" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToString(System.String)">
      <summary>Converts the value of this instance to its equivalent string
            representation using the specified format.</summary>
      <param name="format">A format string. </param>
      <returns>A string representation of value of this instance as specified by
            <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1,
            and it is not one of the format specifier characters defined for 
            <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- <paramref name="format" /> does not
            contain a valid custom format pattern. </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string
            representation using the specified format and culture-specific format
            information.</summary>
      <param name="format">A format string. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            culture-specific formatting information. </param>
      <returns>A string representation of value of this instance as specified by
            <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1,
            and it is not one of the format specifier characters defined for 
            <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- <paramref name="format" /> does not
            contain a valid custom format pattern. </exception>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.TryParse(System.String,AGI.Foundation.Time.GregorianDate@)">
      <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent.
            
            Note: <see cref="T:AGI.Foundation.Time.GregorianDate" /> is always assumed to be in UTC.  You cannot
            parse strings containing time zone information. However, this will handle
            two common ISO8601 formats: YYYY-MM-DDThh:mm:ss.sZ (with seconds to machine precision)
            and it's "day of year" equivalent: YYYY-DDDThh:mm:ss.sZ
            </summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="result">
            
            On return,
            the <see cref="T:AGI.Foundation.Time.GregorianDate" /> value equivalent to the date and time contained in
            <paramref name="s" />, if the conversion succeeded, or 
            <see cref="F:AGI.Foundation.Time.GregorianDate.MinValue" /> if the conversion failed. The conversion
            fails if the <paramref name="s" /> parameter is null, or does not contain a
            valid string representation of a date and time. This parameter is passed
            uninitialized. 
            </param>
      <returns>
            true if the <paramref name="s" /> parameter was converted successfully;
            otherwise, false.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.GregorianDate.TryParse(System.String,System.IFormatProvider,AGI.Foundation.Time.GregorianDate@)">
      <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:AGI.Foundation.Time.GregorianDate" /> equivalent using the specified culture-specific
            format information.
            
            Note: <see cref="T:AGI.Foundation.Time.GregorianDate" /> is always assumed to be in UTC.  You cannot
            parse strings containing time zone information. However, this will handle
            two common ISO8601 formats: YYYY-MM-DDThh:mm:ss.sZ (with seconds to machine precision)
            and it's "day of year" equivalent: YYYY-DDDThh:mm:ss.sZ
            </summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            culture-specific format information about <paramref name="s" />. </param>
      <param name="result">
            
            On return,
            the <see cref="T:AGI.Foundation.Time.GregorianDate" /> value equivalent to the date and time contained in
            <paramref name="s" />, if the conversion succeeded, or 
            <see cref="F:AGI.Foundation.Time.GregorianDate.MinValue" /> if the conversion failed. The conversion
            fails if the <paramref name="s" /> parameter is null, or does not contain a
            valid string representation of a date and time. This parameter is passed
            uninitialized. 
            </param>
      <returns>
            true if the <paramref name="s" /> parameter was converted successfully;
            otherwise, false.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Time.GregorianDate.Year">
      <summary>
            Gets the year.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.IAvailability">
      <summary>
            An interface used to determine at what times an object is able to provide information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.IAvailability.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.IAvailability.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Time.Iso8601Format">
      <summary>
            Defines the representation of the ISO8601 date string generated by <see cref="M:AGI.Foundation.Time.GregorianDate.ToIso8601String(AGI.Foundation.Time.Iso8601Format)" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.Iso8601Format.Basic">
      <summary>
            A complete ISO8601 date and time in the extended format, which omits the dash and colon seperators used between time and date components.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.Iso8601Format.Extended">
      <summary>
            A complete ISO8601 date and time in the extended format, which uses dash and colon seperators between time and date components.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.Iso8601Format.Compact">
      <summary>
            The shortest possible way to accurately represent an ISO8601 date and time.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.JulianDate">
      <summary>
            An astronomical Julian Date, which is the number of days since noon on January 1, -4712 (4713 BC).
            For increased precision, this class stores the whole number part of the date as an <see cref="T:System.Int32" />
            and the seconds into the day as a <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(AGI.Foundation.Time.GregorianDate)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from a <see cref="T:AGI.Foundation.Time.GregorianDate" />.
            The time standard will be <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" /> (UTC), except when
            the <paramref name="gregorianDate" /> represents time during a leap second.  During a leap second,
            the <see cref="T:AGI.Foundation.Time.JulianDate" /> will be in the <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime" /> (TAI)
            standard.
            </summary>
      <param name="gregorianDate">The <see cref="T:AGI.Foundation.Time.GregorianDate" /> to use to specify the 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.</param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(AGI.Foundation.Time.GregorianDate,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from a <see cref="T:AGI.Foundation.Time.GregorianDate" /> where the <see cref="T:AGI.Foundation.Time.GregorianDate" /> 
            is expressed in the given <see cref="T:AGI.Foundation.Time.TimeStandard" />.  If the date is during a leap second, the 
            <see cref="T:AGI.Foundation.Time.JulianDate" /> will be expressed in <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime" /> (TAI).
            </summary>
      <param name="gregorianDate">The <see cref="T:AGI.Foundation.Time.GregorianDate" />.</param>
      <param name="standard">
            The time standard in which the <paramref name="gregorianDate" /> is expressed.  
            </param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(System.DateTime)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from a <see cref="T:System.DateTime" />.
            The time standard will be Coordinated Universal Time (UTC).
            </summary>
      <param name="dateTime">The <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(System.DateTime,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from a <see cref="T:System.DateTime" /> and specified time standard.
            </summary>
      <param name="dateTime">The <see cref="T:System.DateTime" />.</param>
      <param name="standard">
            The time standard to use for this Julian Date.  The <paramref name="dateTime" /> is assumed to be expressed
            in this time standard.
            </param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(System.Double)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from a double expressing the complete astronomical Julian Date.
            The time standard will be <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">International Atomic Time (TAI)</see>.
            </summary>
      <param name="dayCount">The complete astronomical Julian date.</param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(System.Double,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from a double expressing the complete astronomical Julian Date.
            </summary>
      <param name="dayCount">The complete Julian date.</param>
      <param name="timeStandard">The time standard to use for this Julian Date.</param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(System.Int32,System.Double)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from the provided values.  The values will be
            normalized so that the <see cref="P:AGI.Foundation.Time.JulianDate.SecondsOfDay" /> property is less than the length of a day.
            The time standard will be International Atomic Time (TAI).
            </summary>
      <param name="day">The whole number part of the date.</param>
      <param name="secondsOfDay">The time of day, expressed as seconds past noon on the given whole-number day.</param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.#ctor(System.Int32,System.Double,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.JulianDate" /> from the provided values.  The values will be
            normalized so that the <see cref="P:AGI.Foundation.Time.JulianDate.SecondsOfDay" /> property is less than the length of the day.
            </summary>
      <param name="day">The whole number part of the date.</param>
      <param name="secondsOfDay">The time of day, expressed as seconds past noon on the given whole-number day.</param>
      <param name="timeStandard">The time standard to use for this Julian Date.</param>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.Add(AGI.Foundation.Time.Duration)">
      <summary>
            Adds a <see cref="T:AGI.Foundation.Time.Duration" /> to this Julian date, producing a new Julian date.
            </summary>
      <param name="duration">The duration to add.</param>
      <returns>
            A new <see cref="T:AGI.Foundation.Time.JulianDate" /> that is the result of the addition.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.AddDays(System.Double)">
      <summary>
            Adds the specified number of days to this date and returns the new date.
            </summary>
      <param name="days">The number of days.</param>
      <returns>The new date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.AddSeconds(System.Double)">
      <summary>
            Adds the specified number of seconds to this date and returns the new date.
            </summary>
      <param name="seconds">The number of seconds.</param>
      <returns>The new date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.CompareTo(AGI.Foundation.Time.JulianDate)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.CompareTo(System.Object)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="obj" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="obj" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="obj" />.
            </description></item></list></returns>
      <exception cref="T:AGI.Foundation.ArgumentTypeInvalidException">
        Thrown when the parameter <paramref name="obj" /> is not of the same type as the object on which
        this method is called.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Time.JulianDate.Day">
      <summary>
            Gets the integer portion of the Julian Date (or astronomical Julian day number).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.DaysDifference(AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the number of days that have elapsed from this Julian date to the
            <paramref name="other" /> Julian date.
            </summary>
      <param name="other">The other Julian date, which is the end of the interval.</param>
      <returns>The number of days that have elapsed from this Julian date to the other Julian date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.Equals(AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if this date exactly equals another date.  To be considered equal, the <see cref="P:AGI.Foundation.Time.JulianDate.Day" />
            and <see cref="P:AGI.Foundation.Time.JulianDate.SecondsOfDay" /> properties must be identical when converted to a common time standard.
            It is highly recommended that you use <see cref="M:AGI.Foundation.Time.JulianDate.EqualsEpsilon(AGI.Foundation.Time.JulianDate,System.Double)" /> or <see cref="M:AGI.Foundation.Time.JulianDate.IsIdentical(AGI.Foundation.Time.JulianDate)" />
            instead of this method.
            </summary>
      <param name="other">The date to compare to this instance.</param>
      <returns>true if <paramref name="other" /> represents the same value as this instance; otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.Equals(System.Object)">
      <summary>
            Returns true if this date exactly equals another date.  To be considered equal, the <see cref="P:AGI.Foundation.Time.JulianDate.Day" />
            and <see cref="P:AGI.Foundation.Time.JulianDate.SecondsOfDay" /> properties must be identical when converted to a common time standard.
            It is highly recommended that you use <see cref="M:AGI.Foundation.Time.JulianDate.EqualsEpsilon(AGI.Foundation.Time.JulianDate,System.Double)" /> or <see cref="M:AGI.Foundation.Time.JulianDate.IsIdentical(AGI.Foundation.Time.JulianDate)" />
            instead of this method.
            </summary>
      <param name="obj">The object to compare to this instance.</param>
      <returns>true if <paramref name="obj" /> represents the same value as this instance; otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.EqualsEpsilon(AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Returns true if this date is within <paramref name="epsilon" /> seconds of the
            specified date.  That is, in order for the dates to be considered equal (and for
            this function to return true), the absolute value of the difference between them, in
            seconds, must be less than <paramref name="epsilon" />.
            </summary>
      <param name="other">The Julian Date to compare to this date.</param>
      <param name="epsilon">The smallest difference between the dates, in seconds, such that they will NOT be considered equal.</param>
      <returns>true if the dates are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.IsIdentical(AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if this date is identical to another date.  Unlike <see cref="M:AGI.Foundation.Time.JulianDate.Equals(AGI.Foundation.Time.JulianDate)" />, this method will
            consider two dates with different time standards to be different even if the dates represent the same
            moment when expressed in the same time standard.
            </summary>
      <param name="other">The date to compare to this instance.</param>
      <returns>true if <paramref name="other" /> is identical to this instance; otherwise, false.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.JulianDate.MaxValue">
      <summary>
            Gets the largest possible value of <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.MinutesDifference(AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the number of minutes that have elapsed from this Julian date to the
            <paramref name="other" /> Julian date.
            </summary>
      <param name="other">The other Julian date, which is the end of the interval.</param>
      <returns>The number of minutes that have elapsed from this Julian date to the other Julian date.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.JulianDate.MinValue">
      <summary>
            Gets the smallest value possible of <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_Addition(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration)">
      <summary>
            Adds a <see cref="T:AGI.Foundation.Time.Duration" /> to a <see cref="T:AGI.Foundation.Time.JulianDate" />, producing a new
            Julian date.
            </summary>
      <param name="left">The Julian date.</param>
      <param name="right">The duration.</param>
      <returns>A new Julian Date that is the result of the addition.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_Equality(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if the two dates are exactly equal.  To be considered equal, the <see cref="P:AGI.Foundation.Time.JulianDate.Day" />
            and <see cref="P:AGI.Foundation.Time.JulianDate.SecondsOfDay" /> properties must be identical when converted to a common time standard.
            It is highly recommended that you use <see cref="M:AGI.Foundation.Time.JulianDate.EqualsEpsilon(AGI.Foundation.Time.JulianDate,System.Double)" /> or <see cref="M:AGI.Foundation.Time.JulianDate.IsIdentical(AGI.Foundation.Time.JulianDate)" />
            instead of this method.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the dates are equal, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_GreaterThan(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs after <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the <paramref name="left" /> is greater than <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_GreaterThanOrEqual(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs after or at the same time as <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the <paramref name="left" /> is greater than or equal to <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_Inequality(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if the two dates are NOT exactly equal.  To be considered equal, the <see cref="P:AGI.Foundation.Time.JulianDate.Day" />
            and <see cref="P:AGI.Foundation.Time.JulianDate.SecondsOfDay" /> properties must be identical when converted to a common time standard.
            It is highly recommended that you use <see cref="M:AGI.Foundation.Time.JulianDate.EqualsEpsilon(AGI.Foundation.Time.JulianDate,System.Double)" /> or <see cref="M:AGI.Foundation.Time.JulianDate.IsIdentical(AGI.Foundation.Time.JulianDate)" />
            instead of this method.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the dates are not equal, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_LessThan(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs before <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the <paramref name="left" /> is less than <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_LessThanOrEqual(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns true if <paramref name="left" /> occurs before or at the same time as <paramref name="right" />.
            </summary>
      <param name="left">The date on the left side.</param>
      <param name="right">The date on the right side.</param>
      <returns>true if the <paramref name="left" /> is less than or equal to <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_Subtraction(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration)">
      <summary>
            Subtracts a <see cref="T:AGI.Foundation.Time.Duration" /> from a Julian date, yielding a new 
            <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="left">The minuend.</param>
      <param name="right">The subtrahend.</param>
      <returns>
            A new Julian Date that is the result of the subtraction; that is, 
            <paramref name="left" /> minus <paramref name="right" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.op_Subtraction(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Subtracts a Julian date from another Julian date, yielding a 
            <see cref="T:AGI.Foundation.Time.Duration" />.
            </summary>
      <param name="left">The minuend.</param>
      <param name="right">The subtrahend.</param>
      <returns>
            The Duration that is the result of the subtraction; that is, 
            <paramref name="left" /> minus <paramref name="right" />.  The time standard will
            be the same as the time standard of the subtrahend.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.SecondsDifference(AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the number of seconds that have elapsed from this Julian date to the
            <paramref name="other" /> Julian date.
            </summary>
      <param name="other">The other Julian date, which is the end of the interval.</param>
      <returns>The number of seconds that have elapsed from this Julian date to the other Julian date.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.JulianDate.SecondsOfDay">
      <summary>
            Gets the number of seconds past noon on the whole-number Julian Day.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.JulianDate.Standard">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Time.TimeStandard" /> that this astronomical Julian date is based upon.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.Subtract(AGI.Foundation.Time.Duration)">
      <summary>
            Subtracts a <see cref="T:AGI.Foundation.Time.Duration" /> from this Julian date, producing a new
            Julian date.
            </summary>
      <param name="duration">The duration to subtract.</param>
      <returns>
            A new <see cref="T:AGI.Foundation.Time.JulianDate" /> that is the result of the subtraction.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.Subtract(AGI.Foundation.Time.JulianDate)">
      <summary>
            Subtracts another Julian date from this Julian date.
            </summary>
      <param name="subtrahend">The Julian Date to subtract from this Julian Date.</param>
      <returns>The Duration that is the result of the subtraction.  The time standard will be the same as the time standard of the subtrahend.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.SubtractSeconds(System.Double)">
      <summary>
            Subtracts the specified number of seconds to this date and returns the new
            date.
            </summary>
      <param name="seconds">The number of seconds.</param>
      <returns>The new date.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.ToDateTime">
      <summary>
            Converts this <see cref="T:AGI.Foundation.Time.JulianDate" /> to a .NET standard
            <see cref="T:System.DateTime" /> with a default time standard of Coordinated Universal
            Time.
            </summary>
      <returns>The <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.ToDateTime(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Converts this <see cref="T:AGI.Foundation.Time.JulianDate" /> to a .NET standard
            <see cref="T:System.DateTime" /> expressed in the specified time standard.
            </summary>
      <param name="standard">The time standard in which to express the returned
            <see cref="T:System.DateTime" />.</param>
      <returns>The <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.ToGregorianDate">
      <summary>
            Converts this <see cref="T:AGI.Foundation.Time.JulianDate" /> to a <see cref="T:AGI.Foundation.Time.GregorianDate" /> with a
            default time standard of Coordinated Universal Time.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.Time.GregorianDate" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if this date is earlier
            than 1 AD, which cannot be represented by GregorianDate.</exception>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.ToGregorianDate(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Converts this <see cref="T:AGI.Foundation.Time.JulianDate" /> to a <see cref="T:AGI.Foundation.Time.GregorianDate" />
            expressed in the specified time standard.
            </summary>
      <param name="standard">The time standard in which to express the returned
            <see cref="T:AGI.Foundation.Time.GregorianDate" />.</param>
      <returns>The <see cref="T:AGI.Foundation.Time.GregorianDate" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if this date is earlier
            than 1 AD, which cannot be represented by GregorianDate.</exception>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.ToString">
      <summary>
            Returns the value of this <see cref="T:AGI.Foundation.Time.JulianDate" /> in the standard format.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.JulianDate.TotalDays">
      <summary>
            Gets the total number of whole and fractional days represented by this astronomical Julian date.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.ToTimeStandard(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Converts this <see cref="T:AGI.Foundation.Time.JulianDate" /> to the specified time standard.
            </summary>
      <param name="timeStandard">The requested time standard.</param>
      <returns>An equivalent <see cref="T:AGI.Foundation.Time.JulianDate" /> using the requested time
            standard.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified <see cref="T:AGI.Foundation.Time.TimeStandard" /> is not capable of
            representing this <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.JulianDate.TryConvertTimeStandard(AGI.Foundation.Time.TimeStandard,AGI.Foundation.Time.JulianDate@)">
      <summary>
            Try to convert this <see cref="T:AGI.Foundation.Time.JulianDate" /> to the specified 
            <see cref="T:AGI.Foundation.Time.TimeStandard" />, if the specified <see cref="T:AGI.Foundation.Time.TimeStandard" /> is
            capable of representing this time.
            </summary>
      <param name="timeStandard">The requested time standard.</param>
      <param name="result">
            
            On return,
            an equivalent
            <see cref="T:AGI.Foundation.Time.JulianDate" /> using the requested <see cref="T:AGI.Foundation.Time.TimeStandard" />, if it
            is capable  of representing this time, otherwise <see cref="P:AGI.Foundation.Time.JulianDate.MinValue" />.
            </param>
      <returns>true if this date could be converted to the
            requested <see cref="T:AGI.Foundation.Time.TimeStandard" />, otherwise false.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.LeapSecond">
      <summary>
            Describes a single leap second.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.#ctor(AGI.Foundation.Time.JulianDate,System.Double)">
      <summary>
            Initializes a new instance of a Leap Second.
            </summary>
      <param name="date">The date of the leap second.  This will be assumed to be Coordinated Universal Time (UTC) regardless of the actual time standard associated with the date.</param>
      <param name="totalTaiOffsetFromUtc">The offset of TAI from UTC after this leap second.</param>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of a Leap Second.
            </summary>
      <param name="date">The Julian date of the leap second, in Coordinated Universal Time (UTC).</param>
      <param name="totalTaiOffsetFromUtc">The offset of TAI from UTC after this leap second.</param>
    </member>
    <member name="P:AGI.Foundation.Time.LeapSecond.Date">
      <summary>
            Gets the date of the leap second.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.Equals(AGI.Foundation.Time.LeapSecond)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.op_Equality(AGI.Foundation.Time.LeapSecond,AGI.Foundation.Time.LeapSecond)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.op_Inequality(AGI.Foundation.Time.LeapSecond,AGI.Foundation.Time.LeapSecond)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecond.ToString">
      <summary>
            Returns the date of this LeapSecond and offset from UTC as a string.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.LeapSecond.TotalTaiOffsetFromUtc">
      <summary>
            Gets the total difference TAI - UTC after this leap second, in seconds.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.LeapSecondFile">
      <summary>
            Contains static methods to read and write leap second data in a standard format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondFile.ReadLeapSeconds(System.IO.TextReader)">
      <summary>
            Reads an STK leap second file and returns a new <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> instance
            initialized with the contents of the file.
            </summary>
      <param name="source">The stream from which to read.</param>
      <returns>A new <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> initialized with the contents of the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="source" /> is null.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when there is an error parsing the leap second data.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondFile.ReadLeapSeconds(System.String)">
      <summary>
            Reads an STK leap second file and returns a new <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> instance
            initialized with the contents of the file.
            </summary>
      <param name="fileName">The name of the file from which to read.</param>
      <returns>A new <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> initialized with the contents of the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parameter <paramref name="fileName" /> is null.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when there is an error parsing the leap second data.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondFile.WriteLeapSeconds(System.IO.TextWriter,AGI.Foundation.Time.LeapSecondsFacet)">
      <summary>
            Writes the specified <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> instance to a stream in
            STK leap second file format.
            </summary>
      <param name="writer">The stream to which to write.</param>
      <param name="leapSeconds">The leap second data to write.</param>
    </member>
    <member name="T:AGI.Foundation.Time.LeapSecondsFacet">
      <summary>
            Manages Leap Seconds.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.#ctor">
      <summary>
            Initializes a new instance with the list of leap seconds that was available
            when the library was released.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.#ctor(AGI.Foundation.Time.LeapSecondsFacet,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Time.LeapSecond})">
      <summary>
            Initializes a new instance with the specified list of leap seconds.
            </summary>
      <param name="leapSeconds">The list of leap seconds.</param>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.DoesDayHaveLeapSecond(System.Int32)">
      <summary>
            Determines if a given day contains a leap second.
            </summary>
      <param name="julianDayNumber">The day, specified as a Julian day number.</param>
      <returns>true if the day contains a leap second, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.GetFromContext">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> instance from the calculation context. 
            If the context does not contain leap second data, a default instance is created
            containing the leap seconds that were known when the library was released and
            it is added to the calculation context.
            </summary>
      <returns>The instance from the calculation context.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.GetTaiMinusUtc(AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns the difference TAI - UTC as of the given date, in seconds.
            </summary>
      <param name="date">The date.</param>
      <returns>The difference.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.LeapSecondsFacet.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Time.LeapSecondsFacet.LeapSecondList">
      <summary>
            Gets the list of leap seconds currently being used by this class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.LeapSecondsFacet.UseInCurrentContext">
      <summary>
            Adds this instance to the calculation context, making it the official source of leap seconds
            in the context.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.MergeTimeIntervalDataCallback`1">
      <summary>
            A callback defining how two data elements on any two intervals should
            be combined when creating a new interval.
            </summary>
      <param name="previous">The data existing on the original time interval.</param>
      <param name="newData">The data existing on the new time interval.</param>
      <typeparam name="T">The type of the data associated with each interval.</typeparam>
      <returns>A new instance of data representing the result of combining (merging) 
            the <paramref name="previous" /> data and the <paramref name="newData" />.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.TimeConstants">
      <summary>
            Contains time-related constants.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.DaysPerJulianCentury">
      <summary>
            The number of standard days in a Julian century.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.HoursPerDay">
      <summary>
            The number of hours in a day.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.J2000">
      <summary>
            The Julian Epoch J2000.0, which is 2451545.0 in the TT time standard.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.MinutesPerDay">
      <summary>
            The number of minutes in a day.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.MinutesPerHour">
      <summary>
            The number of minutes in an hour.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.ModifiedJulianDateDifference">
      <summary>
            The difference between a Julian date and a modified Julian date.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.PicoSecond">
      <summary>
            One picosecond
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.SecondsPerDay">
      <summary>
            The number of seconds in a standard day that does not have leap seconds.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.SecondsPerHour">
      <summary>
            The number of seconds in an hour.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeConstants.SecondsPerMinute">
      <summary>
            The number of seconds in a minute.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.TimeGenerator">
      <summary>
            Generates <see cref="T:AGI.Foundation.Time.JulianDate" /> instances according to several algorithms.
            <para>
            Note that this will return values of <see cref="T:AGI.Foundation.Time.JulianDate" /> represented in the 
            <see cref="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">arithmetically safe</see><see cref="T:AGI.Foundation.Time.TimeStandard" />
            corresponding to the standards on the provided input values.  For instance, if the values
            are provided in <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime">UTC</see> the output values will
            be expressed in <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime" />.  This is done to account for the 
            performance impact of having to convert each time to the arithmetically safe standard rather than 
            simply converting the start and stop times.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeGenerator.FromInterval(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration)">
      <summary>
            Generates times at a specified frequency within an interval as well as the stop time.
            </summary>
      <param name="start">The first date in the returned collection.</param>
      <param name="stop">The last date in the returned collection.</param>
      <param name="step">The step between times.</param>
      <returns>A collection of times within the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeGenerator.FromInterval(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.Duration)">
      <summary>
            Generates times at a specified frequency within an interval as well as the end of the interval.
            </summary>
      <param name="interval">The interval in which to generate times.</param>
      <param name="step">The step between times.</param>
      <returns>A collection of times within the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeGenerator.RegularSamplingFromInterval(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.Duration)">
      <summary>
            Generates times at regular steps within an interval (not including the end time).
            </summary>
      <param name="interval">The interval in which to generate times.</param>
      <param name="step">The step between times.</param>
      <returns>A collection of times within the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeGenerator.RegularSamplingFromInterval(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration)">
      <summary>
            Generates times at regular steps within an interval (not including the end time).
            </summary>
      <param name="interval">The interval in which to generate times.</param>
      <param name="startOfSampling">The time at which to start sampling.  If this time is prior to the
            given sampling <paramref name="interval" />, samples will begin inside the <paramref name="interval" />.</param>
      <param name="step">The step between times.</param>
      <returns>A collection of times within the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeGenerator.RegularSamplingFromIntervals(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.Duration)">
      <summary>
            Generates times at regular steps within a set of intervals (not including the edges of the intervals).
            </summary>
      <param name="intervals">The collection of intervals in which to generate times.</param>
      <param name="step">The step between times.</param>
      <returns>A collection of times within the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeGenerator.RegularSamplingFromIntervals(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration)">
      <summary>
            Generates times at regular steps within an interval (not including the end time).
            </summary>
      <param name="intervals">The intervals in which to generate times.</param>
      <param name="startOfSampling">The time at which to start sampling.  If this time is prior to the
            given sampling <paramref name="intervals" />, samples will begin inside the <paramref name="intervals" />.</param>
      <param name="step">The step between times.</param>
      <returns>A collection of times within the interval.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.TimeInterval">
      <summary>
            An interval defined by a start date and a stop date.  The end points are optionally included
            in the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a new interval with the specified start date and stop date.
            The new interval is closed, meaning that both end points are included.
            </summary>
      <param name="start">The first date in the interval.</param>
      <param name="stop">The last date in the interval.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new interval with the specified start date, stop date, and data.
            It is also specified whether or not the start and stop dates are included.
            </summary>
      <param name="start">The date that starts the interval.</param>
      <param name="stop">The date that stops the interval.</param>
      <param name="isStartIncluded">true if the start date is included in the interval.</param>
      <param name="isStopIncluded">true if the stop date is included in the interval.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.Add(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Adds two intervals together, producing an interval list that
            includes both intervals.
            </summary>
      <param name="other">The interval to add.</param>
      <returns>A collection that contains both intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.Add(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Adds an interval list to this interval, producing a new interval list
            that includes this interval plus all intervals in the input list.
            The input list is not changed by this method.
            </summary>
      <param name="intervalList">The interval list to add.</param>
      <returns>A new interval list.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.AddData``1(``0)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Time.TimeInterval`1" /> that is equivalent to this time interval but with the specified
            <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> value.
            </summary>
      <param name="data">The data value.</param>
      <typeparam name="T">The type of the data.</typeparam>
      <returns>An equivalent interval with the specified data.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.Contains(AGI.Foundation.Time.JulianDate)">
      <summary>
            Determines if the interval contains a specified date.
            </summary>
      <param name="date">The date to test.</param>
      <returns>true if the interval contains the date, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval.Empty">
      <summary>
            Gets an empty interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.Equals(AGI.Foundation.Time.TimeInterval)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.EqualsEpsilon(AGI.Foundation.Time.TimeInterval,System.Double)">
      <summary>
            Determines if this time interval is equal to another time interval, using an epsilon to compare
            the <see cref="P:AGI.Foundation.Time.TimeInterval.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval.Stop" /> properties of the
            two intervals.  The dates are considered equal if they are within <paramref name="epsilon" />
            seconds of each other.  All other properties must be identical.
            </summary>
      <param name="other">The time interval to compare to this time interval.</param>
      <param name="epsilon">The smallest difference between the <see cref="P:AGI.Foundation.Time.TimeInterval.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval.Stop" /> dates, in seconds, such that they will NOT be considered equal.</param>
      <returns>true if the <see cref="P:AGI.Foundation.Time.TimeInterval.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval.Stop" /> dates of the intervals are equal as defined by the epsilon value and all other properties are identical.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.Intersect(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Computes an interval which is the intersection of this interval with another.
            </summary>
      <param name="other">The interval to intersect with this interval.</param>
      <returns>The intersection of the two intervals.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval.IsEmpty">
      <summary>
            Gets a value indicating whether or not the interval is empty.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval.IsStartIncluded">
      <summary>
            Gets a value indicating whether or not the <see cref="P:AGI.Foundation.Time.TimeInterval.Start" /> date is
            included in the interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval.IsStopIncluded">
      <summary>
            Gets a value indicating whether or not the <see cref="P:AGI.Foundation.Time.TimeInterval.Stop" /> date is
            included in the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.op_Equality(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.TimeInterval)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.op_Inequality(AGI.Foundation.Time.TimeInterval,AGI.Foundation.Time.TimeInterval)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval.Start">
      <summary>
            Gets the start date of the interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval.Stop">
      <summary>
            Gets the stop date of the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.ToDuration">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.Duration" /> representing the span of time between the
            <see cref="P:AGI.Foundation.Time.TimeInterval.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval.Stop" /> of the interval.
            </summary>
      <returns>The duration.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.ToString">
      <summary>
            Returns a string with interval in the format "[Start, Stop)".  Square brackets indicate
            that the end point of the interval is included in the intervals.  Parenthesis indicate that the
            end point is not included.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval.ToTimeStandard(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.TimeInterval" /> equivalent to this one where the time standard
            of the start and end dates has been converted to the specified standard.
            </summary>
      <param name="timeStandard">The time standard of the new interval.</param>
      <returns>An equivalent interval with the new time standard.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.TimeInterval`1">
      <summary>
            An interval defined by a start date and a stop date.  The end points are optionally included
            in the interval.
            </summary>
      <typeparam name="T">The type of the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> associated with the interval.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a new interval with the specified start date and stop date.
            The new interval is closed, meaning that both end points are included.
            </summary>
      <param name="start">The first date in the interval.</param>
      <param name="stop">The last date in the interval.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new interval with the specified start date and stop date.  It is also
            specified whether or not the start and stop dates are included.
            </summary>
      <param name="start">The date that starts the interval.</param>
      <param name="stop">The date that stops the interval.</param>
      <param name="isStartIncluded">true if the start date is included in the interval.</param>
      <param name="isStopIncluded">true if the stop date is included in the interval.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Initializes a new interval with the specified start date, stop date, and data.
            The new interval is closed, meaning that both end points are included.
            </summary>
      <param name="start">The first date in the interval.</param>
      <param name="stop">The last date in the interval.</param>
      <param name="data">The user-defined data associated with this interval.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,`0,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new interval with the specified start date, stop date, and data.
            It is also specified whether or not the start and stop dates are included.
            </summary>
      <param name="start">The date that starts the interval.</param>
      <param name="stop">The date that stops the interval.</param>
      <param name="data">The user-defined data associated with this interval.</param>
      <param name="isStartIncluded">true if the start date is included in the interval.</param>
      <param name="isStopIncluded">true if the stop date is included in the interval.</param>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.AcceptLeft">
      <summary>
            A <see cref="T:AGI.Foundation.Time.MergeTimeIntervalDataCallback`1" /> that simply accepts the data on the left-hand side.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.AcceptRight">
      <summary>
            A <see cref="T:AGI.Foundation.Time.MergeTimeIntervalDataCallback`1" /> that simply accepts the data on the right-hand side.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Add(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Adds two intervals together, producing an interval list that
            includes both intervals.
            </summary>
      <param name="other">The interval to add.</param>
      <returns>A collection that contains both intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Add(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
            Adds an interval list to this interval, producing a new interval list
            that includes this interval plus all intervals in the input list.
            The input list is not changed by this method.
            </summary>
      <param name="intervalList">The interval list to add.</param>
      <returns>A new interval list.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.ChangeData``1(``0)">
      <summary>
            Creates a new interval that is identical to this one except that
            it has a different value for the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property.
            </summary>
      <param name="newData">The new value for the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property.</param>
      <typeparam name="TNew">The type of the new data.</typeparam>
      <returns>An equivalent interval with new data.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Contains(AGI.Foundation.Time.JulianDate)">
      <summary>
            Determines if the interval contains a specified date.
            </summary>
      <param name="date">The date to test.</param>
      <returns>true if the interval contains the date, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.Data">
      <summary>
            Gets the user-defined data associated with this interval.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Time.TimeInterval`1.DefaultComparer">
      <summary>
            A comparer for the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property that considers two <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties
            to be equal if <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> reports that they are equal.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.Empty">
      <summary>
            Gets an empty interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Equals(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Equals(AGI.Foundation.Time.TimeInterval{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of the two intervals.</param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.EqualsEpsilon(AGI.Foundation.Time.TimeInterval{`0},System.Double)">
      <summary>
            Determines if this time interval is equal to another time interval, using an epsilon to compare
            the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> properties of the
            two intervals.  The dates are considered equal if they are within <paramref name="epsilon" />
            seconds of each other.  All other properties must be identical.
            </summary>
      <param name="other">The time interval to compare to this time interval.</param>
      <param name="epsilon">The smallest difference between the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> dates, in seconds, such that they will NOT be considered equal.</param>
      <returns>true if the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> dates of the intervals are equal as defined by the epsilon value and all other properties are identical.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.EqualsEpsilon(AGI.Foundation.Time.TimeInterval{`0},System.Double,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Determines if this time interval is equal to another time interval, using an epsilon to compare
            the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> properties of the
            two intervals.  The dates are considered equal if they are within <paramref name="epsilon" />
            seconds of each other.  All other properties must be identical.
            </summary>
      <param name="other">The time interval to compare to this time interval.</param>
      <param name="epsilon">The smallest difference between the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> dates, in seconds, such that they will NOT be considered equal.</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of the two intervals.</param>
      <returns>true if the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> dates of the intervals are equal as defined by the epsilon value and all other properties are identical.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.GetHashCode(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <param name="dataComparer">The object to use to retrieve the hash code for the the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property of the interval.</param>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Intersect(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Computes an interval which is the intersection of this interval with another,
            with the data from this one.
            </summary>
      <param name="other">The interval to intersect with this interval.</param>
      <returns>The intersection of the two intervals, with the data from this one.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Intersect(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Computes an interval which is the intersection of this interval with another.
            </summary>
      <param name="other">The interval to intersect with this interval.</param>
      <returns>The intersection of the two intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.Intersect(AGI.Foundation.Time.TimeInterval{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Computes an interval which is the intersection of this interval with another.
            </summary>
      <param name="other">The interval to intersect with this interval.</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of the two intervals.</param>
      <returns>The intersection of the two intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.IntersectMergingData(AGI.Foundation.Time.TimeInterval{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Computes an interval which is the intersection of this interval with another while 
            also providing a means to merge the data of the two intervals.
            </summary>
      <param name="other">The interval to intersect with this interval.</param>
      <param name="mergeCallback">A callback to use to 'merge' the data on the two intervals, or null.  If this interval
            intersects with the <paramref name="other" /> one, the two data instances will be merged with this callback
            to create the data on the resulting interval.  If the callback is null, this will intersect the two
            intervals and return the new interval with the data from 'this' interval.</param>
      <returns>The intersection of the two intervals, with its data representing the merge of the data
            in the two existing intervals.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.IsEmpty">
      <summary>
            Gets a value indicating whether or not the interval is empty.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.IsStartIncluded">
      <summary>
            Gets a value indicating whether or not the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> date is
            included in the interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.IsStopIncluded">
      <summary>
            Gets a value indicating whether or not the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> date is
            included in the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.op_Equality(AGI.Foundation.Time.TimeInterval{`0},AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.op_Inequality(AGI.Foundation.Time.TimeInterval{`0},AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.RemoveData">
      <summary>
            Creates a new interval that is identical to this one except that it does not have a
            <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property.
            </summary>
      <returns>An equivalent interval without data.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.Start">
      <summary>
            Gets the start date of the interval.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeInterval`1.Stop">
      <summary>
            Gets the stop date of the interval.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.ToDuration">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.Duration" /> representing the span of time between the
            <see cref="P:AGI.Foundation.Time.TimeInterval`1.Start" /> and <see cref="P:AGI.Foundation.Time.TimeInterval`1.Stop" /> of the interval.
            </summary>
      <returns>The duration.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.ToString">
      <summary>
            Returns a string with interval in the format "[Start, Stop) - Data".  Square brackets indicate
            that the end point of the interval is included in the intervals.  Parenthesis indicate that the
            end point is not included.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeInterval`1.ToTimeStandard(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.TimeInterval`1" /> equivalent to this one where the time standard
            of the start and end dates has been converted to the specified standard.
            </summary>
      <param name="timeStandard">The time standard of the new interval.</param>
      <returns>An equivalent interval with the new time standard.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.TimeIntervalCollection">
      <summary>
            A collection of time intervals.  The intervals are sorted by their start date
            and no two intervals in the list overlap each other.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.#ctor">
      <summary>
            Initializes a new, empty interval collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.#ctor(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Initializes a new instance from a single interval.
            </summary>
      <param name="interval">The interval to add to the collection.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.#ctor(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Initializes a new interval collection by copying an existing one.
            </summary>
      <param name="collection">The existing collection to copy.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Add(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Adds an interval to the interval collection.
            </summary>
      <param name="item">The interval to add.</param>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Add(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Adds another interval collection to this interval collection.
            This interval collection will contain all intervals that were
            previously in either collection.
            </summary>
      <param name="collection">
            The collection to add to this collection. This parameter can be
            null, in which case nothing will be added.
            </param>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.AddData``1(``0)">
      <summary>
            Converts this collection to a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" /> by
            filling in the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property for all intervals.
            </summary>
      <param name="data">The value of the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property for all intervals in the new collection.</param>
      <typeparam name="T">The type of the data.</typeparam>
      <returns>A collection equivalent to this one, with data.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Clear">
      <summary>
            Removes all intervals from the interval collection.
            </summary>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Complement(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the complement of this time interval collection.  
            </summary>
      <param name="startDate">The earliest date to include in the complement.</param>
      <param name="endDate">The latest date to include in the complement.</param>
      <returns>The complement of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Contains(AGI.Foundation.Time.JulianDate)">
      <summary>
            Determines if the collection contains a specified date.
            </summary>
      <param name="date">The date to look for in the collection.</param>
      <returns>true if this interval collection contains the specified date, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Contains(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Determines if this collection contains all of a specified interval.
            </summary>
      <param name="item">The interval to check.</param>
      <returns>
            true if this interval collection contains the specified interval,
            or false if this collection has any gaps over the input interval.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.CopyTo(AGI.Foundation.Time.TimeInterval[],System.Int32)">
      <summary>
            Copies the intervals in this collection to an array.
            </summary>
      <param name="array">The destination array.</param>
      <param name="arrayIndex">The index at which to begin copying.</param>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.Count">
      <summary>
            Gets the number of intervals in this interval collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.Empty">
      <summary>
            Gets an empty, read-only <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Equals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.EqualsEpsilon(AGI.Foundation.Time.TimeIntervalCollection,System.Double)">
      <summary>
            Determines if this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is equal to another by comparing each of the <see cref="T:AGI.Foundation.Time.TimeInterval" /> elements in the two collections with <see cref="M:AGI.Foundation.Time.TimeInterval.EqualsEpsilon(AGI.Foundation.Time.TimeInterval,System.Double)" />.
            </summary>
      <param name="other">A <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> to compare this one to.</param>
      <param name="epsilon">The smallest difference between the Start and Stop dates, in seconds, such that they will NOT be considered equal.</param>
      <returns>True if all <see cref="T:AGI.Foundation.Time.TimeInterval">TimeIntervals</see> are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.FindIntervalContainingDate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the <see cref="T:AGI.Foundation.Time.TimeInterval" /> in this collection that contains a specified date.
            </summary>
      <param name="date">The date to look for in the collection.</param>
      <returns>The <see cref="T:AGI.Foundation.Time.TimeInterval" /> in the collection that contains the date, or null if the collection does not contain the date at all.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Freeze">
      <summary>
            Freezes this object.  Further attempts to modify it will result
            in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.GetEnumerator">
      <summary>
            Gets an enumerator for this interval list.
            </summary>
      <returns>An enumerator for enumerating the intervals in this collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.IndexOf(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the index of the <see cref="T:AGI.Foundation.Time.TimeInterval" /> in this collection
            that contains the specified date.
            </summary>
      <param name="date">The Julian date to find.</param>
      <returns>
            The index of the interval that contains the date, if the date exists in the collection; otherwise, a negative number
            that is the bitwise complement of the index of the next interval that starts after <paramref name="date" />,
            or if no interval starts after the specified date, the bitwise complement of <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.IndexOf(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Finds the index of a given <see cref="T:AGI.Foundation.Time.TimeInterval" /> in the collection.  This method requires
            that the given interval exactly match an interval in the collection.  Intervals with
            different time standards or even slightly different values due to floating point noise will be considered
            to be different.
            </summary>
      <param name="interval">The interval to find.</param>
      <returns>The index of the interval, or -1 if the interval does not exist in the collection.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite">
      <summary>
            Gets an unbounded, infinite, read-only <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Intersect(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Computes the intersection of this interval collection with an interval.
            </summary>
      <param name="interval">The interval to intersect with this collection</param>
      <returns>The intersection of this collection with the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Intersect(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Computes the intersection of this interval collection with another.
            </summary>
      <param name="collection">The collection to intersect with this collection. The parameter
            can be null, in which case Intersect returns this instance.</param>
      <returns>The intersection of this collection with another collection.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.IsEmpty">
      <summary>
            Gets a value indicating whether or not the interval collection is empty.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.IsFrozen">
      <summary>
            Gets a value indicating whether this object is frozen.  A frozen object cannot be modified and an
            <see cref="T:AGI.Foundation.ObjectFrozenException" /> will be thrown if an attempt is made to do so.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.IsInfinite">
      <summary>
            Gets a value indicating whether or not the interval collection is infinite.
            An infinite interval collection contains all possible times.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.Item(System.Int32)">
      <summary>
            Gets the interval at the specified index.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.op_Equality(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.op_Inequality(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Remove(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Removes the specified interval from this interval list, creating a hole
            over the specified interval.
            </summary>
      <param name="item">The interval to remove.</param>
      <returns>true if any part of the input interval was in the interval list, otherwise false.</returns>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.Remove(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Removes the specified intervals from this interval list, creating a hole
            over the specified intervals.
            </summary>
      <param name="collection">The interval collection to remove.</param>
      <returns>true if any part of the input interval collection was in the interval collection, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the interval at a specified index in the collection.
            </summary>
      <param name="index">The index of the interval to remove.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.RemoveLeavingEndpoints(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Removes the specified interval from this interval list, creating a hole
            over the specified interval.  The end points of the removed interval are NOT
            removed.
            </summary>
      <param name="item">The interval to remove.</param>
      <returns>true if any part of the input interval was in the interval list, otherwise false.</returns>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.RemoveLeavingEndpoints(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Removes the specified intervals from this interval list, creating a hole
            over the specified intervals.  The end points of the removed intervals
            are NOT removed.
            </summary>
      <param name="collection">The interval collection to remove.</param>
      <returns>true if any part of the input interval collection was in the interval collection, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.Start">
      <summary>
            Gets the start date of the first interval in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection.Stop">
      <summary>
            Gets the stop date of the last interval in the collection
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.ToDuration">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.Duration" /> representing the span of time represented by the sum of the individual time intervals
            in the collection.
            </summary>
      <returns>The total duration.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection.ToTimeStandard(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Converts all times in this time interval collection to be the specified time standard.
            </summary>
      <param name="timeStandard">The time standard to use.</param>
      <returns>A copy of this collection with the new time standard.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.TimeIntervalCollection`1">
      <summary>
            A collection of time intervals.  The intervals are sorted by their start date
            and no two intervals in the list overlap each other.
            </summary>
      <typeparam name="T">The type of the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> associated with each interval.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.#ctor">
      <summary>
            Initializes a new, empty interval collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.#ctor(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Initializes a new instance from a single interval.
            </summary>
      <param name="interval">The interval to add to the collection.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.#ctor(AGI.Foundation.Time.TimeIntervalCollection,`0)">
      <summary>
            Initializes a new interval collection by copying an existing one that does not have data.
            The <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property of each interval in the new collection will be set to
            a specified value.
            </summary>
      <param name="collection">The collection to copy.</param>
      <param name="data">The <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property to use for each interval in the new collection.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.#ctor(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
            Initializes a new interval collection by copying an existing one.
            </summary>
      <param name="collection">The existing collection to copy.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Add(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Adds an interval to the interval collection.  If the interval or a portion of the interval
            already exists in the collection, the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> from
            <paramref name="item" /> will replace the data already in the collection.
            </summary>
      <param name="item">The interval to add.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Add(AGI.Foundation.Time.TimeInterval{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Adds an interval to the interval collection.  If the interval or a portion of the interval
            already exists in the collection, the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> from
            <paramref name="item" /> will replace the data already in the collection.
            </summary>
      <param name="item">The interval to add.</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Add(AGI.Foundation.Time.TimeIntervalCollection,`0)">
      <summary>
            Adds another interval collection to this interval collection.
            This interval collection will contain all intervals that were
            previously in either collection.  If an interval or portion of an interval is in both containers
            and has different <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> in each container, the data from
            <paramref name="collection" /> takes precedence.
            </summary>
      <param name="collection">
            The collection to add to this collection. This parameter can be
            null, in which case nothing will be added.
            </param>
      <param name="data">The <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> to use for all intervals in the source collection.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Add(AGI.Foundation.Time.TimeIntervalCollection,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Adds another interval collection to this interval collection.
            This interval collection will contain all intervals that were
            previously in either collection.  If an interval or portion of an interval is in both containers
            and has different <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> in each container, the data from
            <paramref name="collection" /> takes precedence.
            </summary>
      <param name="collection">
            The collection to add to this collection. This parameter can be
            null, in which case nothing will be added.
            </param>
      <param name="data">The <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> to use for all intervals in the source collection.</param>
      <param name="dataComparer">
            The comparer to use to determine if the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of two
            intervals are equivalent.
            </param>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Add(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
            Adds another interval collection to this interval collection.
            This interval collection will contain all intervals that were
            previously in either collection.  If an interval or portion of an interval is in both containers
            and has different <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> in each container, the data from
            <paramref name="collection" /> takes precedence.
            </summary>
      <param name="collection">
            The collection to add to this collection. This parameter can be
            null, in which case nothing will be added.
            </param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Add(AGI.Foundation.Time.TimeIntervalCollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Adds another interval collection to this interval collection.
            This interval collection will contain all intervals that were
            previously in either collection.  If an interval or portion of an interval is in both containers
            and has different <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> in each container, the data from
            <paramref name="collection" /> takes precedence.
            </summary>
      <param name="collection">
            The collection to add to this collection. This parameter can be
            null, in which case nothing will be added.
            </param>
      <param name="dataComparer">
            The comparer to use to determine if the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of two
            intervals are equivalent.
            </param>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.AddMergingData(AGI.Foundation.Time.TimeInterval{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Adds an interval to the interval collection.  The callback function specified will
            determine the instances of data occuring on any intersections by merging the existing <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" />
            on the interval in this collection with the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> on the interval to add.
            </summary>
      <param name="item">The interval to add.</param>
      <param name="mergeCallback">The method to use to "merge" the data on two intervals that intersect.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.AddMergingData(AGI.Foundation.Time.TimeIntervalCollection{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Adds a collection of intervals to this interval collection.  The callback function specified will
            determine the instances of data occuring on any intersections by merging the existing <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" />
            on the interval in this collection with the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> on the interval to add.
            </summary>
      <param name="items">The intervals to add.</param>
      <param name="mergeCallback">The callback to use to "merge" the data on two intervals that intersect.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Clear">
      <summary>
            Removes all intervals from the interval collection.
            </summary>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Complement(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the complement of this time interval collection.  
            </summary>
      <param name="startDate">The earliest date to include in the complement.</param>
      <param name="endDate">The latest date to include in the complement.</param>
      <returns>The complement of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Complement(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,`0)">
      <summary>
            Computes the complement of this time interval collection.  
            </summary>
      <param name="startDate">The earliest date to include in the complement.</param>
      <param name="endDate">The latest date to include in the complement.</param>
      <param name="data">The value to set for the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property for each <see cref="T:AGI.Foundation.Time.TimeInterval" /> in the returned collection.</param>
      <returns>The complement of this instance.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Contains(AGI.Foundation.Time.JulianDate)">
      <summary>
            Determines if the collection contains a specified date.
            </summary>
      <param name="date">The date to look for in the collection.</param>
      <returns>true if this interval collection contains the specified date, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Contains(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Determines if this collection contains all of a specified interval.
            </summary>
      <param name="item">The interval to check.</param>
      <returns>
            true if this interval collection contains the specified interval,
            or false if this collection has any gaps over the input interval.
            <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> is ignored by this method.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.ConvertData``1(System.Converter{`0,``0})">
      <summary>
            Converts this collection to a different kind of data without changing the intervals.
            </summary>
      <param name="conversion">The function used to convert from the existing data to the new data.</param>
      <typeparam name="D">The new type of data.</typeparam>
      <returns>The resulting intervals, identical to these intervals except with new data.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.CopyTo(AGI.Foundation.Time.TimeInterval{`0}[],System.Int32)">
      <summary>
            Copies the intervals in this collection to an array.
            </summary>
      <param name="array">The destination array.</param>
      <param name="arrayIndex">The index at which to begin copying.</param>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.Count">
      <summary>
            Gets the number of intervals in this interval collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.Empty">
      <summary>
            Gets an empty, read-only <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Equals(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Equals(AGI.Foundation.Time.TimeIntervalCollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.EqualsEpsilon(AGI.Foundation.Time.TimeIntervalCollection{`0},System.Double)">
      <summary>
            Determines if this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is equal to another by comparing each of the <see cref="T:AGI.Foundation.Time.TimeInterval" /> elements in the two collections with <see cref="M:AGI.Foundation.Time.TimeInterval.EqualsEpsilon(AGI.Foundation.Time.TimeInterval,System.Double)" />.
            </summary>
      <param name="other">A <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" /> to compare this one to.</param>
      <param name="epsilon">The smallest difference between the Start and Stop dates, in seconds, such that they will NOT be considered equal.</param>
      <returns>True if all <see cref="T:AGI.Foundation.Time.TimeInterval">TimeIntervals</see> are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.EqualsEpsilon(AGI.Foundation.Time.TimeIntervalCollection{`0},System.Double,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Determines if this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is equal to another by comparing each of the <see cref="T:AGI.Foundation.Time.TimeInterval" /> elements in the two collections with <see cref="M:AGI.Foundation.Time.TimeInterval.EqualsEpsilon(AGI.Foundation.Time.TimeInterval,System.Double)" />.
            </summary>
      <param name="other">A <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" /> to compare this one to.</param>
      <param name="epsilon">The smallest difference between the Start and Stop dates, in seconds, such that they will NOT be considered equal.</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <returns>True if all <see cref="T:AGI.Foundation.Time.TimeInterval">TimeIntervals</see> are equal as defined by the epsilon value.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.FindIntervalContainingDate(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the <see cref="T:AGI.Foundation.Time.TimeInterval" /> in this collection that contains a specified date.
            </summary>
      <param name="date">The date to look for in the collection.</param>
      <returns>The <see cref="T:AGI.Foundation.Time.TimeInterval`1" /> in the collection that contains the date, or null if the collection does not contain the date at all.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Freeze">
      <summary>
            Freezes this object.  Further attempts to modify it will result
            in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.GetEnumerator">
      <summary>
            Gets an enumerator for this interval list.
            </summary>
      <returns>An enumerator for enumerating the intervals in this collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.IndexOf(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the index of the <see cref="T:AGI.Foundation.Time.TimeInterval" /> in this collection
            that contains the specified date.
            </summary>
      <param name="date">The Julian date to find.</param>
      <returns>
            The index of the interval that contains the date, if the date exists in the collection; otherwise, a negative number
            that is the bitwise complement of the index of the next interval that starts after <paramref name="date" />,
            or if no interval starts after the specified date, the bitwise complement of <see cref="P:AGI.Foundation.Time.TimeIntervalCollection`1.Count" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.IndexOf(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Finds the index of a given <see cref="T:AGI.Foundation.Time.TimeInterval`1" /> in the collection.  This method requires
            that the given interval exactly match an interval in the collection.  Intervals with
            different time standards, different data, or even slightly different values due to floating point noise
            will be considered to be different.
            </summary>
      <param name="interval">The interval to find.</param>
      <returns>The index of the interval, or -1 if the interval does not exist in the collection.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.Infinite">
      <summary>
            Gets an unbounded, infinite, read-only <see cref="T:AGI.Foundation.Time.TimeIntervalCollection`1" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Intersect(AGI.Foundation.Time.TimeInterval)">
      <summary>
            Computes the intersection of this interval collection with an interval without data.
            The returned intervals will contain the data of the intervals in this collection
            which overlap with the specified <paramref name="interval" />.
            </summary>
      <param name="interval">The interval to intersect with this collection, regardless of data.</param>
      <returns>The intersection of this collection with the interval, with the 
            data in the collection representing the data which already exists in this collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Intersect(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Computes the intersection of this interval collection with an interval.
            </summary>
      <param name="interval">The interval to intersect with this collection</param>
      <returns>The intersection of this collection with the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Intersect(AGI.Foundation.Time.TimeInterval{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Computes the intersection of this interval collection with an interval.
            </summary>
      <param name="interval">The interval to intersect with this collection</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <returns>The intersection of this collection with the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Intersect(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
            Computes the intersection of this interval collection with another, returning data from this one.
            </summary>
      <param name="intervals">The collection to intersect with this collection. The parameter
            can be null, in which case Intersect returns this instance.</param>
      <returns>The intersection of this collection with another collection, with
            the data of the intervals corresponding to the data of the overlapping intervals from this collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Intersect(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
            Computes the intersection of this interval collection with another.
            </summary>
      <param name="collection">The collection to intersect with this collection. The parameter
            can be null, in which case Intersect returns this instance.</param>
      <returns>The intersection of this collection with another collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Intersect(AGI.Foundation.Time.TimeIntervalCollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Computes the intersection of this interval collection with another.
            </summary>
      <param name="collection">The collection to intersect with this collection. The parameter
            can be null, in which case Intersect returns this instance.</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <returns>The intersection of this collection with another collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.IntersectMergingData(AGI.Foundation.Time.TimeInterval{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Computes the intersection of this interval collection with an interval.  When the interval overlaps an interval
            in the collection, a provided callback is used to merge the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> on each into a single
            value that is applied to the interval of intersection.  If the <paramref name="mergeCallback" /> is
            null, intervals that overlap in time will not be included in the returned intersection collection
            if they have different data.
            </summary>
      <param name="interval">The interval to intersect with this collection</param>
      <param name="mergeCallback">The callback to use to merge the data in overlapping intervals.</param>
      <returns>The intersection of this collection with the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.IntersectMergingData(AGI.Foundation.Time.TimeInterval{`0},System.Collections.Generic.IEqualityComparer{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Computes the intersection of this interval collection with an interval.  When the interval overlaps an interval
            in the collection, a provided callback is used to merge the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> on each into a single
            value that is applied to the interval of intersection.  If the <paramref name="mergeCallback" /> is
            null, intervals that overlap in time will not be included in the returned intersection collection
            if they have different data.
            </summary>
      <param name="interval">The interval to intersect with this collection</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <param name="mergeCallback">The callback to use to merge the data in overlapping intervals.</param>
      <returns>The intersection of this collection with the interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.IntersectMergingData(AGI.Foundation.Time.TimeIntervalCollection{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Computes the intersection of this interval collection with another.  When intervals in the two collections overlap,
            a provided callback is used to merge the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> on each into a single
            value that is applied to the interval of intersection.  If the <paramref name="mergeCallback" /> is
            null, intervals that overlap in time will not be included in the returned intersection collection
            if they have different data.
            </summary>
      <param name="collection">The collection to intersect with this collection. The parameter
            can be null, in which case Intersect returns this instance.</param>
      <param name="mergeCallback">The callback to use to merge the data in overlapping intervals.</param>
      <returns>The intersection of this collection with another collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.IntersectMergingData(AGI.Foundation.Time.TimeIntervalCollection{`0},System.Collections.Generic.IEqualityComparer{`0},AGI.Foundation.Time.MergeTimeIntervalDataCallback{`0})">
      <summary>
            Computes the intersection of this interval collection with another.  When intervals in the two collections overlap,
            a provided callback is used to merge the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> on each into a single
            value that is applied to the interval of intersection.  If the <paramref name="mergeCallback" /> is
            null, intervals that overlap in time will not be included in the returned intersection collection
            if they have different data.
            </summary>
      <param name="collection">The collection to intersect with this collection. The parameter
            can be null, in which case Intersect returns this instance.</param>
      <param name="dataComparer">The object to use to compare the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> properties of intervals.</param>
      <param name="mergeCallback">The callback to use to merge the data in overlapping intervals.</param>
      <returns>The intersection of this collection with another collection.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.IsEmpty">
      <summary>
            Gets a value indicating whether or not the interval collection is empty.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.IsFrozen">
      <summary>
            Gets a value indicating whether this object is frozen.  A frozen object cannot be modified and an
            <see cref="T:AGI.Foundation.ObjectFrozenException" /> will be thrown if an attempt is made to do so.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.IsInfinite">
      <summary>
            Gets a value indicating whether or not the interval collection is infinite.
            An infinite interval collection contains all possible times.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.Item(System.Int32)">
      <summary>
            Gets the interval at the specified index.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.op_Equality(AGI.Foundation.Time.TimeIntervalCollection{`0},AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.op_Inequality(AGI.Foundation.Time.TimeIntervalCollection{`0},AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Remove(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Removes the specified interval from this interval list, creating a hole
            over the specified interval.  The Data property of the input interval is ignored.
            </summary>
      <param name="item">The interval to remove.</param>
      <returns>true if any part of the input interval was in the interval list, otherwise false.</returns>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.Remove(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
            Removes the specified intervals from this interval list, creating a hole
            over the specified intervals.  The Data property of the intervals in the
            input collection is ignored.
            </summary>
      <param name="collection">The interval collection to remove.</param>
      <returns>true if any part of the input interval collection was in the interval collection, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the interval at a specified index in the collection.
            </summary>
      <param name="index">The index of the interval to remove.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.RemoveData">
      <summary>
            Converts this collection to a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> by
            removing the <see cref="P:AGI.Foundation.Time.TimeInterval`1.Data" /> property from each interval.
            </summary>
      <returns>A collection equivalent to this one, without data.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.RemoveLeavingEndpoints(AGI.Foundation.Time.TimeInterval{`0})">
      <summary>
            Removes the specified interval from this interval list, creating a hole
            over the specified interval.  The end points of the removed interval are NOT
            removed.  The Data property of the input interval is ignored.
            </summary>
      <param name="item">The interval to remove.</param>
      <returns>true if any part of the input interval was in the interval list, otherwise false.</returns>
      <exception cref="T:AGI.Foundation.ObjectFrozenException">
            Thrown when the this <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.RemoveLeavingEndpoints(AGI.Foundation.Time.TimeIntervalCollection{`0})">
      <summary>
            Removes the specified intervals from this interval list, creating a hole
            over the specified intervals.  The end points of the removed intervals
            are NOT removed.  The Data property of the input interval is ignored.
            </summary>
      <param name="collection">The interval collection to remove.</param>
      <returns>true if any part of the input interval collection was in the interval collection, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.Start">
      <summary>
            Gets the start date of the first interval in the collection.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeIntervalCollection`1.Stop">
      <summary>
            Gets the stop date of the last interval in the collection
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.ToDuration">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Time.Duration" /> representing the span of time represented by the sum of the individual time intervals
            in the collection.
            </summary>
      <returns>The total duration.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeIntervalCollection`1.ToTimeStandard(AGI.Foundation.Time.TimeStandard)">
      <summary>
            Converts all times in this time interval collection to be the specified time standard.
            </summary>
      <param name="timeStandard">The time standard to use.</param>
      <returns>A copy of this collection with the new time standard.</returns>
    </member>
    <member name="T:AGI.Foundation.Time.TimeStandard">
      <summary>
            Provides a means for measuring time by specifying the rate at which time passes and/or points in time.
            Note that for many operations, the system will need to convert times to an 
            <see cref="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">arithmetically safe standard</see> in order to correctly
            compare times.  In many cases, it may be more efficient to work directly in the corresponding
            <see cref="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">ArithmeticSafeStandard</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandard.#ctor(System.String,System.String,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Initializes a new time standard instance.
            </summary>
      <param name="name">The name of the time standard.</param>
      <param name="abbreviation">An abbreviation for the time standard.</param>
      <param name="arithmeticSafeStandard">Another time standard that is closely related to this one but is safe for arithmetic, or null if this standard is itself safe for arithmetic.</param>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.Abbreviation">
      <summary>
            Gets an abbreviation for this time standard
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">
      <summary>
            Gets a time standard that is equivalent to this time standard but is safe
            for arithmetic.  In order to be safe for arithmetic, a time standard must not
            have any discontinuities and it must have exactly 86400 seconds in every day.
            How the seconds are measured does not matter, but the standard returned by this
            method must measure seconds in the same way as the standard implementing this
            method.  For example, <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime">UTC</see> is not safe for arithmetic 
            (and thus returns <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">TAI</see>)
            but <see cref="P:AGI.Foundation.Time.TimeStandard.UniversalTime1">UT1</see> is safe for arithmetic.  
            If a time standard is safe for arithmetic, this method returns null.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.BarycentricDynamicalTime">
      <summary>
            Gets the Barycentric Dynamical Time (TDB) time standard.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime">
      <summary>
            Gets the Coordinated Universal Time (UTC) time standard.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.GlobalPositioningSystemTime">
      <summary>
            Gets the Global Positioning System (GPS) time standard.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.Index">
      <summary>
            Gets the index corresponding to this time
            standard.  This should return a static member variable initialized with
            a call to <see cref="M:AGI.Foundation.Time.TimeStandard.GetNextTimeStandardIndex" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">
      <summary>
            Gets the International Atomic Time (TAI) time standard.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.Name">
      <summary>
            Gets the name of this time standard
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.TerrestrialTime">
      <summary>
            Gets the Terrestrial Time (TT) time standard.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandard.ToString">
      <summary>
            Converts this time standard to a string representation.
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.TimeStandard.UniversalTime1">
      <summary>
            Gets the Universal Time 1 (UT1) time standard.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Time.TimeStandardConverter">
      <summary>
            Converts a <see cref="T:AGI.Foundation.Time.JulianDate" /> between different time standards.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandardConverter.Convert(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Converts the specified <see cref="T:AGI.Foundation.Time.JulianDate" /> to the specified 
            <see cref="T:AGI.Foundation.Time.TimeStandard" />.
            </summary>
      <param name="value">The <see cref="T:AGI.Foundation.Time.JulianDate" /> to convert.</param>
      <param name="to">
            The <see cref="T:AGI.Foundation.Time.TimeStandard" /> to convert <paramref name="value" /> to.
            </param>
      <returns>
            A <see cref="T:AGI.Foundation.Time.JulianDate" /> equivalent to <paramref name="value" /> in the new 
            <see cref="T:AGI.Foundation.Time.TimeStandard" />.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandardConverter.GetConversionDistance(AGI.Foundation.Time.TimeStandard,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Gets the number of intermediate conversions that must be done to convert from
            <paramref name="from" /> to <paramref name="to" />.  For example, if a conversion
            function is defined to directly convert between the time standards, 1 will be returned.
            If the two standards are identical, 0 will be returned.  If no conversion exists
            at all, <see cref="F:System.Int32.MaxValue" /> will be returned.
            </summary>
      <param name="from">The source time standard.</param>
      <param name="to">The destination time standard.</param>
      <returns>The number of conversion functions that must be invoked to convert between the formats.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandardConverter.IsConversionDefined(AGI.Foundation.Time.TimeStandard,AGI.Foundation.Time.TimeStandard)">
      <summary>
            Determines if a conversion between <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see> has been
            defined.
            </summary>
      <param name="from">The source time standard.</param>
      <param name="to">The destination time standard.</param>
      <returns>True if a conversion is defined, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandardConverter.RegisterConversion(AGI.Foundation.Time.TimeStandard,AGI.Foundation.Time.TimeStandard,AGI.Foundation.Infrastructure.FormatConversionCallback{AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.TimeStandard})">
      <summary>
            Registers a new conversion between time standards.
            </summary>
      <param name="from">The time standard that the conversion method converts from.</param>
      <param name="to">The time standard that the conversion method converts to.</param>
      <param name="conversion">The conversion method.</param>
    </member>
    <member name="M:AGI.Foundation.Time.TimeStandardConverter.TryConvert(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.TimeStandard,AGI.Foundation.Time.JulianDate@)">
      <summary>
            Tries to convert the specified <see cref="T:AGI.Foundation.Time.JulianDate" /> to the specified 
            <see cref="T:AGI.Foundation.Time.TimeStandard" />, returning success or failure.
            </summary>
      <param name="value">The <see cref="T:AGI.Foundation.Time.JulianDate" /> to convert.</param>
      <param name="to">
            The <see cref="T:AGI.Foundation.Time.TimeStandard" /> to convert <paramref name="value" /> to.
            </param>
      <param name="result">
            
            On return,
            the resulting <see cref="T:AGI.Foundation.Time.JulianDate" /> equivalent to 
            <paramref name="value" /> in the new <see cref="T:AGI.Foundation.Time.TimeStandard" />.
            </param>
      <returns> 
            true if <paramref name="value" /> could be converted to the
            requested <see cref="T:AGI.Foundation.Time.TimeStandard" /><paramref name="to" />, otherwise 
            false.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Time.YearMonthDay">
      <summary>
            Represents a calendar year, month, and day.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.#ctor(AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a new instance from a <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="date">The date.</param>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.#ctor(System.Int32)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.YearMonthDay" /> in the Gregorian calendar from the
            provided astronomical  Julian day number, assuming the beginning of the Julian
            day (noon).
            </summary>
      <param name="astronomicalJulianDayNumber">The astronomical Julian day number.
            </param>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.YearMonthDay" /> from the provided values.
            </summary>
      <param name="year">The year.</param>
      <param name="dayOfYear">The day of the year
            (in the range 1 through the number of days in the year).</param>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a <see cref="T:AGI.Foundation.Time.YearMonthDay" /> from the provided values.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month of the year (in the range 1 through 12)</param>
      <param name="day">The day of the month (in the range 1 through the number of
            days in <paramref name="month" />)</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="year" />, <paramref name="month" />, or 
            <paramref name="day" /> is outside of its acceptable range.</exception>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.CompareTo(AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.CompareTo(System.Object)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="obj" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="obj" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="obj" />.
            </description></item></list></returns>
      <exception cref="T:AGI.Foundation.ArgumentTypeInvalidException">
        Thrown when the parameter <paramref name="obj" /> is not of the same type as the object on which
        this method is called.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Time.YearMonthDay.Day">
      <summary>
            Gets the day of the month (in the range 1 through the number of days in the
            month).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.YearMonthDay.DayOfWeek">
      <summary>Gets the day of the week represented by this instance.</summary>
      <returns>A <see cref="P:AGI.Foundation.Time.YearMonthDay.DayOfWeek" /> enumerated constant that indicates the day
            of the week. This property value ranges from zero, indicating Sunday, to six,
            indicating Saturday.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.YearMonthDay.DayOfYear">
      <summary>
            Gets the day of the year (in the range 1 through the number of days in the
            year).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.DaysInMonth(System.Int32,System.Int32)">
      <summary>
            Provides the number of days in the month of the indicated year.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month of the year.</param>
      <returns>The number of days in the month.</returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.DaysInYear(System.Int32)">
      <summary>
            Provides the number of days in the indicated year.
            </summary>
      <param name="year">The year.</param>
      <returns>The number of days in the year (365 for a common year and 366 for a
            leap year).</returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.Equals(AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.IsLeapYear(System.Int32)">
      <summary>
            Indicates whether the year in question is a leap year.
            </summary>
      <param name="year">The year.</param>
      <returns>true if <paramref name="year" /> is a leap year and 
            false if it is not.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.IsValidDate(System.Int32,System.Int32,System.Int32)">
      <summary>
            Indicates whether the year, month, and day are a valid representation.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month of the year (in the range 1 through 12)</param>
      <param name="day">The day of the month (in the range 1 through the number of days in 
            <paramref name="month" />)</param>
      <returns>true if the representation is valid and 
            false if it is not.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.YearMonthDay.JulianDayNumber">
      <summary>
            Gets the Julian day number for this <see cref="T:AGI.Foundation.Time.YearMonthDay" /> instance,
            assuming noon on this day.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Time.YearMonthDay.Month">
      <summary>
            Gets the month of the year (in the range 1 through 12).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.op_Equality(AGI.Foundation.Time.YearMonthDay,AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.op_GreaterThan(AGI.Foundation.Time.YearMonthDay,AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Returns true if <paramref name="left" /> is greater than <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.op_GreaterThanOrEqual(AGI.Foundation.Time.YearMonthDay,AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Returns true if <paramref name="left" /> is greater than or equal to <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.op_Inequality(AGI.Foundation.Time.YearMonthDay,AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.op_LessThan(AGI.Foundation.Time.YearMonthDay,AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Returns true if <paramref name="left" /> is less than <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.op_LessThanOrEqual(AGI.Foundation.Time.YearMonthDay,AGI.Foundation.Time.YearMonthDay)">
      <summary>
        Returns true if <paramref name="left" /> is less than or equal to <paramref name="right" />.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Time.YearMonthDay.ToString">
      <summary>
            Returns a string formatted as Year:Month:Day
            </summary>
      <returns>The string.</returns>
    </member>
    <member name="P:AGI.Foundation.Time.YearMonthDay.Year">
      <summary>
            Gets the year.
            </summary>
    </member>
  </members>
</doc>