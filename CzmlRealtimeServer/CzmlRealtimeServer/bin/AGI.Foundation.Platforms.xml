<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>AGI.Foundation.Platforms</name>
  </assembly>
  <members>
    <member name="T:AGI.Foundation.StkComponentsPlatforms">
      <summary>
            Version information for the STK Components Platforms library.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsPlatforms.DisplayVersion">
      <summary>
            The display version of the library: <c>2015 r2</c>.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsPlatforms.Version">
      <summary>
            The numeric version of the library: <c>15.2.379.0</c>.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.AltitudeConstraint">
      <summary>
            An Access constraint that restricts access to when the <see cref="P:AGI.Foundation.Access.Constraints.AltitudeConstraint.ConstrainedObject" /> is above a minimum and
            below a maximum altitude in meters with respect to the given central body.  Altitude is measured orthogonally from 
            the subpoint of the <see cref="P:AGI.Foundation.Access.Constraints.AltitudeConstraint.ConstrainedObject" /> object on the surface of the central body's ellipsoid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(AGI.Foundation.Access.Constraints.AltitudeConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the altitude is computed.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the altitude is computed.</param>
      <param name="minimumValue">The minimum allowed altitude value, in meters.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified maximum value.
            </summary>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum allowed altitude value, in meters.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, central body, and maximum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="centralBody">The central body relative to which the altitude is computed.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, central body, minimum value, and maximum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="centralBody">The central body relative to which the altitude is computed.</param>
      <param name="minimumValue">The minimum allowed altitude value, in meters.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(System.IServiceProvider,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object and maximum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.#ctor(System.IServiceProvider,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, minimum value, and maximum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="minimumValue">The minimum allowed altitude value, in meters.</param>
      <param name="maximumValue">The maximum allowed altitude value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AltitudeConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the altitude is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.AltitudeConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AltitudeConstraint.ConstrainedObject">
      <summary>
            Gets or sets the object to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AltitudeConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint">
      <summary>
            An access constraint that projects the displacement vector from one object to another into a given axis-aligned plane
            and requires that the angle of the projected vector, measured from the first axis defining the plane toward the second,
            is within a range of values.  This constraint is similar to <see cref="T:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint" /> except that is allows
            for much more flexibility in how the azimuth is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.#ctor(AGI.Foundation.Access.Constraints.AngleInPlaneConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">The context with which to copy the instance.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.CheckForSameDefinition(AGI.Foundation.Access.CircularAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.AngleInPlaneConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing
            the angle which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.GetAngleInPlane(AGI.Foundation.Coordinates.UnitCartesian,AGI.Foundation.Access.Constraints.PlaneIndicator)">
      <summary>
            Gets the angle formed by a projection of a vector into an axis-aligned plane.  The angle is measured from the
            first axis defining the plane toward the second axis defining the plane.
            </summary>
      <param name="vector">The vector that is projected in the plane.</param>
      <param name="plane">The axis-aligned plane in which to project the vector.</param>
      <returns>
            The angle from the first axis defining the plane to the projection of the vector into the plane.
            Positive is toward the second axis defining the plane.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.Invert">
      <summary>
            Gets or sets a value indicating whether or not the angle should be measured opposite the usual direction.
            In other words, if this property is true, the angle is measured away from the second
            axis defining the plane (counter-clockwise) rather than toward it.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.Plane">
      <summary>
            Gets or sets the plane into which the displacement vector is projected.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint">
      <summary>
            An access constraint that requires that the angle of the displacement vector between two objects above a given
            axis-aligned plane is within a range of values.  This constraint is similar to <see cref="T:AGI.Foundation.Access.Constraints.ElevationAngleConstraint" />
            except that it allows for much more flexibility in how the elevation is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.#ctor(AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">The context with which to copy the instance.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing
            the angle which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.Derivative">
      <summary>
            Gets or sets the derivative to constrain.  If this property is 0, the angle itself is constrained.  If it is
            1, the angular rate is constrained.  If it is 2, the angular acceleration is constrained.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.Invert">
      <summary>
            Gets or sets a value indicating whether or not the angle should be measured opposite the usual direction.
            In other words, if this property is true, the angle is positive when the remaining component
            of the vector (other than the two that define the plane) is negative.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.Plane">
      <summary>
            Gets or sets the plane from which the angle to the displacement vector is measured.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint">
      <summary>
            An Access constraint that requires that the object at the other end of the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.ConstrainedLink" />
            be between a range of azimuth angles as viewed from the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.ConstrainedLinkEnd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.#ctor(AGI.Foundation.Access.Constraints.AzimuthAngleConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, start angle, and stop angle.
            </summary>
      <param name="centralBody">The central body relative to which the azimuth is computed.</param>
      <param name="startAngle">The angle defining the beginning of the satisfaction region, in radians.</param>
      <param name="stopAngle">The angle defining the end of the satisfaction region, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified start angle and stop angle.
            </summary>
      <param name="startAngle">The angle defining the beginning of the satisfaction region, in radians.</param>
      <param name="stopAngle">The angle defining the end of the satisfaction region, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end,
            central body, start angle, and stop angle.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the azimuth angle to the other object.</param>
      <param name="centralBody">The central body relative to which the azimuth is computed.</param>
      <param name="startAngle">The angle defining the beginning of the satisfaction region, in radians.</param>
      <param name="stopAngle">The angle defining the end of the satisfaction region, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end,
            start angle, and stop angle.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the azimuth angle to the other object.</param>
      <param name="startAngle">The angle defining the beginning of the satisfaction region, in radians.</param>
      <param name="stopAngle">The angle defining the end of the satisfaction region, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the azimuth is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.CircularAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.AzimuthAngleConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing
            the azimuth angle which is considered by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint">
      <summary>
            An Access constraint that requires that the angular motion of the other end of the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.ConstrainedLink" />
            be between a range of azimuth angle rates in radians per second as viewed from the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.ConstrainedLinkEnd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the azimuth angle rate is computed.</param>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the azimuth angle rate is computed.</param>
      <param name="minimumValue">The minimum required azimuth angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified maximum value.
            </summary>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required azimuth angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the azimuth angle rate of the other object.</param>
      <param name="centralBody">The central body relative to which the azimuth angle rate is computed.</param>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end,
            central body, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the azimuth angle rate of the other object.</param>
      <param name="centralBody">The central body relative to which the azimuth angle rate is computed.</param>
      <param name="minimumValue">The minimum required azimuth angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the azimuth angle rate of the other object.</param>
      <param name="maximumValue">The maximum allow azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the azimuth angle rate of the other object.</param>
      <param name="minimumValue">The minimum required azimuth angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed azimuth angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the azimuth and azimuth rate are computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing
            the azimuth angle rate which is considered by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthAngleRateConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint">
      <summary>
            An Access constraint that determines whether the object at the other end of the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ConstrainedLink" />
            is visible based on an <see cref="T:AGI.Foundation.Terrain.AzimuthElevationMask" /> associated with the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ConstrainedLinkEnd" />.
            The constraint value is the angular separation from the top of the highest terrain peak to the line-of-sight
            vector from the <see cref="P:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ConstrainedLinkEnd" /> to the other end of the link.  Therefore, the 
            <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinimumValue" /> is the smallest angular separation that is required
            in order for access to be available, and is typically set to 0.0 so that a line-of-sight that just grazes the
            terrain will allow access, as will any line-of-sight that is above the terrain.  Similarly, the 
            <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MaximumValue" /> is the maximum allowed angular separation, and it is
            usually not set at all.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor">
      <summary>
            Initializes a new instance to require a minimum elevation angle above the terrain of 0.0 radians.  In other words,
            a line-of-sight between the two ends of the link that just grazes the terrain will be considered to allow
            access between the two objects, as will any line of sight that is above the terrain.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor(AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.  The constraint will require that the
            angular separation vector from the highest terrain peak to the line-of-sight vector be greater than
            or equal to the minimum value.
            </summary>
      <param name="minimumValue">
            The minimum value of the constraint, in radians.  This is the minimum required angular separation from the highest
            terrain peak to the line-of-sight vector.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            The constraint will require that the angular separation vector from the highest terrain peak to the
            line-of-sight vector be greater than or equal to the minimum value, and less than or equal to the
            maximum value.
            </summary>
      <param name="minimumValue">
            The minimum value of the constraint, in radians.  This is the minimum required angular separation from the highest
            terrain peak to the line-of-sight vector.
            </param>
      <param name="maximumValue">
            The maximum value of the constraint, in radians.  This is the maximum allowed angular separation from the highest
            terrain peak to the line-of-sight vector.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole)">
      <summary>
            Initializes a new instance with the specified constrained link and constrained link end.  The constraint
            will require a minimum elevation angle above the terrain of 0.0 radians.  In other words,
            a line-of-sight between the two ends of the link that just grazes the terrain will be considered to allow
            access between the two objects, as will any line of sight that is above the terrain.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            The constraint will require that the angular separation vector from the highest terrain peak to the
            line-of-sight vector be greater than or equal to the minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="minimumValue">
            The minimum value of the constraint, in radians.  This is the minimum required angular separation from the highest
            terrain peak to the line-of-sight vector.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value, and maximum value.
            The constraint will require that the angular separation vector from the highest terrain peak to the
            line-of-sight vector be greater than or equal to the minimum value, and less than or equal to the
            maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="minimumValue">
            The minimum value of the constraint, in radians.  This is the minimum required angular separation from the highest
            terrain peak to the line-of-sight vector.
            </param>
      <param name="maximumValue">
            The maximum value of the constraint, in radians.  This is the maximum allowed angular separation from the highest
            terrain peak to the line-of-sight vector.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that owns the mask and
            is observing the other object.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.AzimuthElevationMaskConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.CartographicZoneConstraint">
      <summary>
            This constraint limits access to within a certain cartographic region.
            Depending on parameters, either there is a list of regions which do not
            allow access (exclusion) or a single region which allows access (inclusion)
            and excludes all other regions.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.#ctor(AGI.Foundation.Access.Constraints.CartographicZoneConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Initializes a new instance with the specified central body and zone definition.
            </summary>
      <param name="centralBody">The central body relative to which the cartographic zone is computed.</param>
      <param name="minimumLatitude">The south-most planetodetic latitude boundary, in radians.</param>
      <param name="maximumLatitude">The north-most planetodetic latitude boundary, in radians.</param>
      <param name="minimumLongitude">The west-most longitude boundary, in radians.</param>
      <param name="maximumLongitude">The east-most longitude boundary, in radians.</param>
      <param name="isInclusion">
            If true, access is only satisfied within this zone.
            Otherwise, access is only satisfied outside this zone.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Initializes a new instance with the specified constrained object, central body, and zone definition.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="centralBody">The central body relative to which the cartographic zone is computed.</param>
      <param name="minimumLatitude">The south-most planetodetic latitude boundary, in radians.</param>
      <param name="maximumLatitude">The north-most planetodetic latitude boundary, in radians.</param>
      <param name="minimumLongitude">The west-most longitude boundary, in radians.</param>
      <param name="maximumLongitude">The east-most longitude boundary, in radians.</param>
      <param name="isInclusion">
            If true, access is only satisfied within this zone.
            Otherwise, access is only satisfied outside this zone.
            </param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.CentralBody">
      <summary>
            Gets or sets the central body used to define the cartographic coordinates.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.CartographicZoneConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.ConstrainedObject">
      <summary>
            Gets or sets the object to which this constraint applies.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.IsInclusion">
      <summary>
            Gets or sets the flag indicating whether access is satisfied inside or outside of the
            cartographic zone represented by this constraint.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.MaximumLatitude">
      <summary>
            Gets or sets the northernmost planetodetic latitude of the cartographic zone, in radians.
            The maximum latitude must be less than <see cref="F:AGI.Foundation.Constants.HalfPi" /> and
            greater than the <see cref="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.MinimumLatitude" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.MaximumLongitude">
      <summary>
            Gets or sets the easternmost longitude of the cartographic zone, in radians.
            The maximum longitude must be less than <see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.MinimumLatitude">
      <summary>
            Gets or sets the southernmost planetodetic latitude of the cartographic zone, in radians.
            The minimum latitude must be greater than -<see cref="F:AGI.Foundation.Constants.HalfPi" /> and
            less than the <see cref="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.MaximumLatitude" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.MinimumLongitude">
      <summary>
            Gets or sets the westernmost longitude of the cartographic zone, in radians.
            The minimum longitude must be greater than -<see cref="F:System.Math.PI" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.SetZone(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Set the latitude and longitude boundaries for an inclusion zone.  This zone
            will only allow access inside of its boundaries.  
            <para>Allowed latitude Bounds:  -<see cref="F:AGI.Foundation.Constants.HalfPi" /> to <see cref="F:AGI.Foundation.Constants.HalfPi" /></para><para>Allowed longitude Bounds: -<see cref="F:System.Math.PI" /> to <see cref="F:System.Math.PI" /></para></summary>
      <param name="minimumLatitude">Southernmost planetodetic latitude boundary greater than -<see cref="F:AGI.Foundation.Constants.HalfPi" />.</param>
      <param name="maximumLatitude">Northernmost planetodetic latitude boundary less than <see cref="F:AGI.Foundation.Constants.HalfPi" />.</param>
      <param name="minimumLongitude">Westernmost longitude boundary greater than -<see cref="F:System.Math.PI" />.</param>
      <param name="maximumLongitude">Easternmost longitude boundary less than <see cref="F:System.Math.PI" />.</param>
      <param name="isInclusion">If true, access is only allowed within this zone.
            Otherwise, access is not allowed within this zone.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.Tolerance">
      <summary>
        Gets or sets the tolerance on the constraint value to use when computing the time when this constraint crosses its threshold.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CartographicZoneConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint">
      <summary>
            An Access constraint that requires that the view from one object to another not be obstructed by
            a central body such as the Earth or another planet.  Only the spheroidal shape of the central body is
            considered.  That is, terrain and the mean sea level surface are NOT considered.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.#ctor(AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.#ctor(AGI.Foundation.Celestial.CentralBody)">
      <summary>
            Initializes a new instance with the specified central body.
            </summary>
      <param name="centralBody">The central body which obstructs visibility.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Celestial.CentralBody)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and central body.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="centralBody">The central body which obstructs visibility.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.CentralBody">
      <summary>
            Gets or sets the central body to consider in this constraint.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.Tolerance">
      <summary>
        Gets or sets the tolerance on the constraint value to use when computing the time when this constraint crosses its threshold.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodyObstructionConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint">
      <summary>
            An Access constraint that requires that an object be between a span of elevation angles
            from any or all of the points along a given line on the surface of the central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.#ctor(AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="centralBody">The central body relative to which the elevation is computed.</param>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.AccessToWholeObject">
      <summary>
            Gets or sets a flag indicating whether to constrain based on any or all points along the line.
            If true, the constraint will ensure that the elevation constraint is satisfied for all points
            along the line.  If false, the constraint will be satisfied by any point
            along the line.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the elevation is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is anchored
            to the line target.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.Granularity">
      <summary>
            Gets or sets the maximum angular distance in radians between sample points along the polyline.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint">
      <summary>
            An Access constraint that requires that an object be between a span of elevation angles
            from any or all of the points in a given area on the surface of the central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.#ctor(AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="centralBody">The central body relative to which the elevation is computed.</param>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="minimumElevation">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.AccessToWholeObject">
      <summary>
            Gets or sets a flag indicating whether to constrain based on any or all points in the area definition.
            If true, the constraint will ensure that the elevation constraint is satisfied for all points
            inside the area and on the boundary.  If false, the constraint will be satisfied by any point
            inside the area or on the boundary.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the elevation is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is anchored to the area target.
            It is not necessary to set this property when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.Granularity">
      <summary>
            Gets or sets the maximum angular distance in radians between sample points along the boundary of the area.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint">
      <summary>
            An access constraint that requires that an <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion" /> attached to one end of the
            <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ConstrainedLink" /> be partially within the volume of the sensor attached to the other end of the link.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.#ctor">
      <summary>
            Initializes a new default instance. The <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ConstrainedLink" />
            must be set before an evaluator can be created. <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.BoundaryResolution" /> is set to a default of .01 radians,
            <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.SensorTolerance" /> is set to a fixed value of 10 meters, and <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ConstrainedLinkEnd" /> is set to
            <see cref="F:AGI.Foundation.Access.LinkRole.Transmitter" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.#ctor(AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole)">
      <summary>
            Initializes a new instance from the provided service provider, region, and central body.
            <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.BoundaryResolution" /> is set to a default of .01 radians and
            <see cref="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.SensorTolerance" /> is set to a fixed value of 10 meters.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is attached to the area target.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.BoundaryResolution">
      <summary>
            Gets or sets the spacing, in radians, at which to create additional points along the area target boundary to perform access on.
            If this property is set at or below zero no such additional points will be created.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is anchored to the area target.
            It is not necessary to set this property when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.SensorTolerance">
      <summary>
        <para>Gets or sets the tolerance, in meters, for the error in the sensor boundary. The sensor boundary will be discretized such that the difference
            between the actual sensor projection boundary and the interpolated boundary is not more than this tolerance.
            This is stored as a Scalar in order to allow the use of a time-varying tolerance based on zoom and camera distance.</para>
        <para>A value at or less than zero will result in no sub-division along sensor projection boundaries, and is recommended
            for use with <see cref="T:AGI.Foundation.Geometry.Shapes.CustomSensorPattern">CustomSensorPatterns.</see></para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionSensorVolumeConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint">
      <summary>
            An Access constraint that requires that the ends of the <see cref="P:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.ConstrainedLink" /> with uncertain position have a 'worst-case' separation
            above a minimum and below a maximum distance in meters. This separation is determined by using the <see cref="T:AGI.Foundation.Geometry.ILocationPointCovarianceService" />
            provided by the ends of the constrained link, if one is available. The uncertainty ellipsoid is modeled, and the calculated separation represents
            the distance between the two points on the surface of the ellipsoids which are closest to one another.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.#ctor(AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum value, in meters.</param>
      <param name="maximumValue">The maximum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.#ctor(System.IServiceProvider,System.Double)">
      <summary>
        <para>Initializes a new instance with the specified constrained link, constrained link end, and minimum value.</para>
      </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="minimumValue">The minimum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.#ctor(System.IServiceProvider,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value,
            and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="minimumValue">The minimum value, in meters.</param>
      <param name="maximumValue">The maximum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.ConstrainedLinkEnd">
      <summary>
        <para>Gets or sets the end of the link to which this constraint applies.</para>
        <para>This property can be ignored, as the displacement between two objects in a link is
            unaffected by which end of the link you monitor, regardless of light speed delays.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.ReceiverSigmaFactor">
      <summary>
             Gets or sets the number of standard deviations of position uncertainty to take into account for the
             <see cref="P:AGI.Foundation.Access.ILinkService.Receiver">Receiver</see>.
             By default this is set to a <see cref="T:AGI.Foundation.Geometry.ScalarFixed" /> of 2.7954832077026364, which corresponds to a 95% confidence
             interval for a three-dimensional Gaussian distribution. <see cref="M:AGI.Foundation.GaussianStatistics.MultiDimensionalStandardDeviationFactor(System.Int32,System.Double)" />
             can be used to calculate replacement values if a different Confidence Interval is required.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.CovarianceSeparationConstraint.TransmitterSigmaFactor">
      <summary>
             Gets or sets the number of standard deviations of position uncertainty to take into account for the
             <see cref="P:AGI.Foundation.Access.ILinkService.Transmitter">Transmitter</see>.
             By default this is set to a <see cref="T:AGI.Foundation.Geometry.ScalarFixed" /> of 2.7954832077026364, which corresponds to a 95% confidence
             interval for a three-dimensional Gaussian distribution. <see cref="M:AGI.Foundation.GaussianStatistics.MultiDimensionalStandardDeviationFactor(System.Int32,System.Double)" />
             can be used to calculate replacement values if a different Confidence Interval is required.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.ElevationAngleConstraint">
      <summary>
            An Access constraint that requires that the object at the other end of the <see cref="P:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.ConstrainedLink" />
            be between a span of elevation angles as viewed from the <see cref="P:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.ConstrainedLinkEnd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(AGI.Foundation.Access.Constraints.ElevationAngleConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum allowed elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum allowed elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="centralBody">The central body relative to which the elevation is computed.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="centralBody">The central body relative to which the elevation is computed.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum allowed elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle to the other object.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the elevation is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.ElevationAngleConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing
            the elevation angle which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint">
      <summary>
            An Access constraint that requires that the object at the other end of the <see cref="P:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.ConstrainedLink" />
            be between a range of elevation angle rates in radians per second as viewed from the <see cref="P:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.ConstrainedLinkEnd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle rate is computed.</param>
      <param name="minimumValue">The minimum required elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle rate is computed.</param>
      <param name="minimumValue">The minimum required elevation angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum allowed elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required elevation angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle rate of the other object.</param>
      <param name="centralBody">The central body relative to which the elevation angle rate is computed.</param>
      <param name="minimumValue">The minimum required elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end,
            central body, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle rate of the other object.</param>
      <param name="centralBody">The central body relative to which the elevation angle rate is computed.</param>
      <param name="minimumValue">The minimum required elevation angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle rate of the other object.</param>
      <param name="minimumValue">The minimum allow elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the elevation angle rate of the other object.</param>
      <param name="minimumValue">The minimum required elevation angle rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed elevation angle rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the elevation and elevation rate are computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing
            the elevation angle rate which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ElevationAngleRateConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint">
      <summary>
            An access constraint which requires the Ground Sample Distance (GSD) to be greater than a
            minimum and less than a maximum value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the ground sample distance is computed.</param>
      <param name="minimumValue">The minimum required ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the ground sample distance is computed.</param>
      <param name="minimumValue">The minimum required ground sample distance, in meters.</param>
      <param name="maximumValue">The maximum allowed ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum allowed ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required ground sample distance, in meters.</param>
      <param name="maximumValue">The maximum allowed ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the ground sample distance at the location of the other object.</param>
      <param name="centralBody">The central body relative to which the ground sample distance is computed.</param>
      <param name="minimumValue">The minimum required ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end,
            central body, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the ground sample distance at the location of the other object.</param>
      <param name="centralBody">The central body relative to which the ground sample distance is computed.</param>
      <param name="minimumValue">The minimum required ground sample distance, in meters.</param>
      <param name="maximumValue">The maximum allowed ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the ground sample distance at the location of the other object.</param>
      <param name="minimumValue">The minimum allow ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the ground sample distance at the location of the other object.</param>
      <param name="minimumValue">The minimum required ground sample distance, in meters.</param>
      <param name="maximumValue">The maximum allowed ground sample distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.CentralBody">
      <summary>
            Gets or sets the central body associated with the target and used to determine the target's local horizon.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing the ground
            sample distance which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.GroundSampleDistanceConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint">
      <summary>
            An access constraint based on the vertical height (in meters) of the other end of the <see cref="P:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ConstrainedLink" /> with 
            respect to the horizontal plane of the <see cref="P:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ConstrainedLinkEnd" /> object.  Access is restricted to above 
            a minimum and below a maximum height relative to the plane orthogonal to the central body's
            surface normal projected to the location of the <see cref="P:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ConstrainedLinkEnd" /> object.  Height below the plane 
            of the horizon is considered as negative.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified central body and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the height above horizon is computed.</param>
      <param name="minimumValue">The minimum required height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the height above horizon is computed.</param>
      <param name="minimumValue">The minimum required height above horizon, in meters.</param>
      <param name="maximumValue">The maximum allowed height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum allowed height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required height above horizon, in meters.</param>
      <param name="maximumValue">The maximum allowed height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the height above horizon of the other object.</param>
      <param name="centralBody">The central body relative to which the height above horizon is computed.</param>
      <param name="minimumValue">The minimum required height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end,
            central body, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the height above horizon of the other object.</param>
      <param name="centralBody">The central body relative to which the height above horizon is computed.</param>
      <param name="minimumValue">The minimum required height above horizon, in meters.</param>
      <param name="maximumValue">The maximum allowed height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the height above horizon of the other object.</param>
      <param name="minimumValue">The minimum allow height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the height above horizon of the other object.</param>
      <param name="minimumValue">The minimum required height above horizon, in meters.</param>
      <param name="maximumValue">The maximum allowed height above horizon, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the plane of the local horizon is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing the height
            above horizon which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.HeightAboveHorizonConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.PlaneIndicator">
      <summary>
            Indicates which plane to use with a <see cref="T:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint" />
            or a <see cref="T:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint" /></summary>
    </member>
    <member name="F:AGI.Foundation.Access.Constraints.PlaneIndicator.XY">
      <summary>
            Indicates the use of the XY plane for a <see cref="T:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint" />
            or a <see cref="T:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint" /></summary>
    </member>
    <member name="F:AGI.Foundation.Access.Constraints.PlaneIndicator.XZ">
      <summary>
            Indicates the use of the XZ plane for a <see cref="T:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint" />
            or a <see cref="T:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint" /></summary>
    </member>
    <member name="F:AGI.Foundation.Access.Constraints.PlaneIndicator.YZ">
      <summary>
            Indicates the use of the XZ plane for a <see cref="T:AGI.Foundation.Access.Constraints.AngleInPlaneConstraint" />
            or a <see cref="T:AGI.Foundation.Access.Constraints.AngleOutOfPlaneConstraint" /></summary>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.RangeConstraint">
      <summary>
            An Access constraint that requires that the ends of the <see cref="P:AGI.Foundation.Access.Constraints.RangeConstraint.ConstrainedLink" /> be above a minimum and
            below a maximum distance in meters.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.#ctor(AGI.Foundation.Access.Constraints.RangeConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum value, in meters.</param>
      <param name="maximumValue">The maximum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.#ctor(System.IServiceProvider,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="minimumValue">The minimum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.#ctor(System.IServiceProvider,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value,
            and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="minimumValue">The minimum value, in meters.</param>
      <param name="maximumValue">The maximum value, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.RangeConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.RangeConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.RangeConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.RangeRateConstraint">
      <summary>
            An access constraint that requires that the ends of the <see cref="P:AGI.Foundation.Access.Constraints.RangeRateConstraint.ConstrainedLink" /> have a
            range-rate in meters per second above a minimum and below a maximum value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.#ctor(AGI.Foundation.Access.Constraints.RangeRateConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified maximum value.
            </summary>
      <param name="maximumValue">The maximum value, in meters per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum value, in meters per second.</param>
      <param name="maximumValue">The maximum value, in meters per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.#ctor(System.IServiceProvider,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="maximumValue">The maximum value, in meters per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.#ctor(System.IServiceProvider,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value,
            and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="minimumValue">The minimum value, in meters per second.</param>
      <param name="maximumValue">The maximum value, in meters per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.RangeRateConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.RangeRateConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.RangeRateConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.RangeRateConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.ScalarConstraint">
      <summary>
            A class representing a generalized constraint based on a given evaluator
            with a minimum and maximum threshold value which indicate the satisfaction region.
            This constraint can be used to evaluate angles created from geometry types or to
            evaluate arbitrary scalar functions.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.#ctor(AGI.Foundation.Access.Constraints.ScalarConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.#ctor(AGI.Foundation.Geometry.Scalar,System.Double)">
      <summary>
            Initializes a new instance with the specified scalar and minimum value.
            </summary>
      <param name="scalar">The scalar function to constrain.</param>
      <param name="minimumValue">The minimum allowed scalar value.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.#ctor(AGI.Foundation.Geometry.Scalar,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified scalar, minimum value, and maximum value.
            </summary>
      <param name="scalar">The scalar function to constrain.</param>
      <param name="minimumValue">The minimum allowed scalar value.</param>
      <param name="maximumValue">The maximum allowed scalar value.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Geometry.Scalar,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, scalar, and minimum value.
            </summary>
      <param name="constrainedObject">
            The object to which this constraint applies.  See <see cref="P:AGI.Foundation.Access.Constraints.ScalarConstraint.ConstrainedObject" />
            for more information.
            </param>
      <param name="scalar">The scalar function to constrain.</param>
      <param name="minimumValue">The minimum allowed scalar value.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Geometry.Scalar,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, scalar,
            minimum value, and maximum value.
            </summary>
      <param name="constrainedObject">
            The object to which this constraint applies.  See <see cref="P:AGI.Foundation.Access.Constraints.ScalarConstraint.ConstrainedObject" />
            for more information.
            </param>
      <param name="scalar">The scalar function to constrain.</param>
      <param name="minimumValue">The minimum allowed scalar value.</param>
      <param name="maximumValue">The maximum allowed scalar value.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.ScalarConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ScalarConstraint.ConstrainedObject">
      <summary>
            Gets or sets the object to which this constraint applies.  This constraint does not use this property
            directly.  However, when this constraint is part of a larger <see cref="T:AGI.Foundation.Access.AccessQuery" />, this property
            identifies the participant that is observing the scalar, so event times will be moved to this participant
            before evaluating the scalar.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ScalarConstraint.Scalar">
      <summary>
            Gets or sets the scalar function to compare to  
            <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MinimumValue" /> and 
            <see cref="P:AGI.Foundation.Access.MinimumMaximumAccessConstraint.MaximumValue" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ScalarConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.SensorVolumeConstraint">
      <summary>
            An access constraint that requires that the object at the other end of the <see cref="P:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.ConstrainedLink" />
            be inside the volume of the sensor attached to the <see cref="P:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.ConstrainedLinkEnd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.#ctor(AGI.Foundation.Access.Constraints.SensorVolumeConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole)">
      <summary>
            Initializes a new instance with the specified constrained link and constrained link end.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that provides the <see cref="T:AGI.Foundation.Geometry.Shapes.IFieldOfViewService" /> and is observing the other object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.CheckForSameDefinition(AGI.Foundation.Access.AccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.SensorVolumeConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that owns the
            sensor volume which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.Tolerance">
      <summary>
        Gets or sets the tolerance on the constraint value to use when computing the time when this constraint crosses its threshold.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SensorVolumeConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint">
      <summary>
            An Access constraint that requires that the surface distance between two objects be above a minimum and
            below a maximum in meters.  The surface distance is measured along an <see cref="T:AGI.Foundation.Geometry.Shapes.EllipsoidGeodesic" />
            connecting the two objects.  It ignores the heights of the objects above the ellipsoid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.#ctor(AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the surface distance is computed.</param>
      <param name="minimumValue">The minimum required surface distance, in meters.</param>
      <param name="maximumValue">The maximum allowed surface distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required surface distance, in meters.</param>
      <param name="maximumValue">The maximum allowed surface distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,AGI.Foundation.Celestial.CentralBody,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, central body,
            minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the surface distance to the other object.</param>
      <param name="centralBody">The central body relative to which the surface distance is computed.</param>
      <param name="minimumValue">The minimum required surface distance, in meters.</param>
      <param name="maximumValue">The maximum allowed surface distance, in meters.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the surface distance is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing the
            range which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.SurfaceDistanceConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint">
      <summary>
            An Access constraint that requires that the apparent position of the third body be between a range of elevation
            angles as viewed from the <see cref="P:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.ConstrainedObject" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, third body point, and minimum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="thirdBodyPoint">The center of mass point for the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified central body, third body point, minimum value, and maximum value.
            </summary>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="thirdBodyPoint">The center of mass point of the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(AGI.Foundation.Geometry.Point,System.Double)">
      <summary>
            Initializes a new instance with the specified third body point and minimum value.
            </summary>
      <param name="thirdBodyPoint">The center of mass point for the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(AGI.Foundation.Geometry.Point,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified third body point, minimum value, and maximum value.
            </summary>
      <param name="thirdBodyPoint">The center of mass point for the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum allowed elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, central body, third body point, and minimum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="thirdBodyPoint">The center of mass point for the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, central body, third body point,
            minimum value, and maximum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="centralBody">The central body relative to which the elevation angle is computed.</param>
      <param name="thirdBodyPoint">The center of mass point of the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Geometry.Point,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, third body point, and minimum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="thirdBodyPoint">The center of mass point for the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Geometry.Point,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained object, third body point, minimum value, and maximum value.
            </summary>
      <param name="constrainedObject">The object to which this constraint is applied.</param>
      <param name="thirdBodyPoint">The center of mass point for the third body.</param>
      <param name="minimumValue">The minimum required elevation angle, in radians.</param>
      <param name="maximumValue">The maximum allowed elevation angle, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.CentralBody">
      <summary>
            Gets or sets the central body relative to which the elevation is computed.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.ConstrainedObject">
      <summary>
            Gets or sets the object to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.ThirdBodyPoint">
      <summary>
            Gets or sets the center of mass point for the third body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.ThirdBodyElevationAngleConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint">
      <summary>
            An Access constraint that requires that the other end of the <see cref="P:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.ConstrainedLink" />
            move at a certain angular rate with respect to the <see cref="P:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.ConstrainedLinkEnd" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.#ctor(AGI.Foundation.Access.Constraints.TotalAngularRateConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.#ctor(System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value.
            </summary>
      <param name="minimumValue">The minimum allowed total angular rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified minimum value and maximum value.
            </summary>
      <param name="minimumValue">The minimum required total angular rate, in radians per second.</param>
      <param name="maximumValue">The maximum allowed total angular rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, and minimum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the total angular rate of the other object.</param>
      <param name="minimumValue">The minimum allowed total angular rate, in radians per second.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.#ctor(System.IServiceProvider,AGI.Foundation.Access.LinkRole,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified constrained link, constrained link end, minimum value, and maximum value.
            </summary>
      <param name="constrainedLink">The link to which this constraint is applied.</param>
      <param name="constrainedLinkEnd">The end of the link that is observing the total angular rate of the other object.</param>
      <param name="minimumValue">The minimum required total angular rate, in radians.</param>
      <param name="maximumValue">The maximum allowed total angular rate, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.BuildQueryEvaluator(AGI.Foundation.Access.ConstraintQueryBuilder,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Builds a query evaluator from this constraint.
            </summary>
      <param name="builder">The builder instance to use to build the evaluator.</param>
      <param name="group">The evaluator group in which to create individual constraint function evaluators.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.Constraints.TotalAngularRateConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.CheckForSameDefinition(AGI.Foundation.Access.MinimumMaximumAccessConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.ConstrainedLink">
      <summary>
            Gets or sets the link to which this constraint applies.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.ConstrainedLinkEnd">
      <summary>
            Gets or sets the end of the link to which this constraint applies.  This is the end that is observing the
            total angular rate which is constrained by this constraint.  It is not necessary to set this property
            when using this constraint with <see cref="T:AGI.Foundation.Access.AccessComputation" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Access.Constraints.TotalAngularRateConstraint.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Platforms.AccessConstraintsExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that stores Access constraints. <see cref="T:AGI.Foundation.Platforms.AccessConstraintsExtension" />s
            can be attached to a <see cref="T:AGI.Foundation.Platforms.Platform" /> or link. An <see cref="T:AGI.Foundation.Access.AccessQuery" /> can
            then be created from these Extensions by calling <see cref="M:AGI.Foundation.Access.AccessQuery.FromObject(System.IServiceProvider)" />.
            However it is generally better to construct AccessQueries by using <see cref="T:AGI.Foundation.Access.AccessQueryAnd" />
            to combine multiple constraints.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.#ctor(AGI.Foundation.Access.AccessConstraint)">
      <summary>
            Initialize the extension with the given constraint.
            </summary>
      <param name="singleConstraint">A single constraint to add to the extension.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.#ctor(AGI.Foundation.Access.AccessConstraintCollection)">
      <summary>
            Initialize the extension with the given collection of constraints.
            </summary>
      <param name="constraints">A collection of constraints to add to the extension.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.#ctor(AGI.Foundation.Platforms.AccessConstraintsExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.CheckForSameDefinition(AGI.Foundation.Platforms.AccessConstraintsExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.AccessConstraintsExtension.Constraints">
      <summary>
            Gets the constraint collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessConstraintsExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="T:AGI.Foundation.Platforms.AccessResultExtension">
      <summary>
            An extension which holds an <see cref="T:AGI.Foundation.Access.AccessQueryResult" /> representing precomputed access results for the
            <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> object.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.#ctor(AGI.Foundation.Access.AccessQueryResult)">
      <summary>
            Initialize a new instance based on the given access results.
            </summary>
      <param name="access">The precomputed access results.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.#ctor(AGI.Foundation.Platforms.AccessResultExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Platforms.AccessResultExtension.AccessResult">
      <summary>
            Gets or sets the precomputed access results for the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.CheckForSameDefinition(AGI.Foundation.Platforms.AccessResultExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AccessResultExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:AGI.Foundation.Platforms.AzimuthElevationMaskExtension">
      <summary>
            An extension that associates an <see cref="T:AGI.Foundation.Terrain.AzimuthElevationMask" /> with a platform.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.#ctor(AGI.Foundation.Platforms.AzimuthElevationMaskExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.#ctor(AGI.Foundation.Terrain.IAzimuthElevationMask)">
      <summary>
            Initializes a new instance with a specified mask.
            </summary>
      <param name="mask">The mask.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.CheckForSameDefinition(AGI.Foundation.Platforms.AzimuthElevationMaskExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.AzimuthElevationMaskExtension.Mask">
      <summary>
            Gets or sets the azimuth-elevation mask.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.CentralBodySurfaceCurve">
      <summary>
            A curve (or polyline) on the surface of a <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.CentralBody" />.  This class can be used
            alone or as an <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> when <see cref="T:AGI.Foundation.Platforms.ICentralBodySurfaceCurveService" />
            is required, such as when computing access with a
            <see cref="T:AGI.Foundation.Access.Constraints.CentralBodySurfaceCurveElevationAngleConstraint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.SurfaceCurve" /> and <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.CentralBody" />
            must be set before this instance is used.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve)">
      <summary>
            Initializes a new instance as a surface curve on a specified central body.
            </summary>
      <param name="centralBody">
            The central body providing the topology and orientation of the <paramref name="surfaceCurve" />,
            and on which the curve is defined.  The 
            <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid">Ellipsoid</see> property
            of the <paramref name="surfaceCurve" /> is expected to match the
            <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape">Shape</see> of this central body.
            </param>
      <param name="surfaceCurve">The curve on the surface of the <paramref name="centralBody" />.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.#ctor(AGI.Foundation.Celestial.CentralBody,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Initializes a new instance as a polyline defined by a set of planetodetic cartographic points
            on a specified central body.
            </summary>
      <param name="centralBody">
            The central body providing the topology and orientation of the polyline, and on which the polyline
            is defined.
            </param>
      <param name="points">The ordered planetodetic vertices of the polyline.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.#ctor(AGI.Foundation.Platforms.CentralBodySurfaceCurve,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.CentralBody">
      <summary>
            Gets or sets the central body providing the topology and orientation of the <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.SurfaceCurve" />,
            and on which the curve is defined.  The 
            <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid">Ellipsoid</see> property
            of the <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.SurfaceCurve" /> is expected to match the <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape">Shape</see>
            of this central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.CheckForSameDefinition(AGI.Foundation.Platforms.CentralBodySurfaceCurve)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceCurve.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.SurfaceCurve">
      <summary>
            Gets or sets the definition of the curve on the surface of the central body.  The 
            <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceCurve.Ellipsoid">Ellipsoid</see> property
            of this instance is expected to match the <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape">Shape</see>
            of the <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceCurve.CentralBody" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.CentralBodySurfaceRegion">
      <summary>
            A region (or polygon) on the surface of a <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.CentralBody" />.  This class can be used
            alone or as an <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> when <see cref="T:AGI.Foundation.Platforms.ICentralBodySurfaceRegionService" />
            is required, such as when computing access with a
            <see cref="T:AGI.Foundation.Access.Constraints.CentralBodySurfaceRegionElevationAngleConstraint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.#ctor">
      <summary>
            Initializes a new instance.  <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.SurfaceRegion" /> and <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.CentralBody" />
            must be set before this instance is used.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion)">
      <summary>
            Initializes a new instance as a surface region on a specified central body.
            </summary>
      <param name="centralBody">
            The central body providing the topology and orientation of the <paramref name="surfaceRegion" />,
            and on which the region is defined.  The 
            <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.ReferenceSurface">ReferenceSurface</see> property
            of the <paramref name="surfaceRegion" /> is expected to match the
            <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape">Shape</see> of this central body.
            </param>
      <param name="surfaceRegion">The region on the surface of the <paramref name="centralBody" />.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.#ctor(AGI.Foundation.Celestial.CentralBody,System.Collections.Generic.IEnumerable{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Initializes a new instance as a polygon defined by a set of planetodetic cartographic points on a
            specified associated central body.
            </summary>
      <param name="centralBody">
            The central body providing the topology and orientation of the polygon, and on which the polygon
            is defined.
            </param>
      <param name="points">
            The ordered planetodetic vertices of the polygon.  The last point is automatically connected
            with the first.
            </param>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.#ctor(AGI.Foundation.Platforms.CentralBodySurfaceRegion,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.CentralBody">
      <summary>
            Gets or sets the central body providing the orientation and topology of the
            <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.SurfaceRegion" />, and on which the region is defined.  The 
            <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.ReferenceSurface">ReferenceSurface</see> property
            of the <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.SurfaceRegion" /> is expected to match the <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape">Shape</see>
            of this central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.CheckForSameDefinition(AGI.Foundation.Platforms.CentralBodySurfaceRegion)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.CentralBodySurfaceRegion.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.SurfaceRegion">
      <summary>
            Gets or sets the definition of the region on the surface of the central body.  The 
            <see cref="P:AGI.Foundation.Geometry.Shapes.EllipsoidSurfaceRegion.ReferenceSurface">ReferenceSurface</see> property
            of this instance is expected to match the <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape">Shape</see>
            of the <see cref="P:AGI.Foundation.Platforms.CentralBodySurfaceRegion.CentralBody" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.ChildPlatformCollection">
      <summary>
            A collection of child platforms.  A platform can only be in one
            <see cref="T:AGI.Foundation.Platforms.ChildPlatformCollection" /> at a time and the platform's <see cref="P:AGI.Foundation.Platforms.Platform.Parent" />
            property is updated accordingly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.#ctor(AGI.Foundation.Platforms.ChildPlatformCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.#ctor(AGI.Foundation.Platforms.Platform)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="parent">The platform that owns this collection.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.CheckForSameDefinition(AGI.Foundation.Platforms.ChildPlatformCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.CheckForSameDefinition(AGI.Foundation.Platforms.PlatformCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.ClearItems">
      <summary>
            Clears all of the items in the <see cref="T:AGI.Foundation.Platforms.ChildPlatformCollection" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.InsertItem(System.Int32,AGI.Foundation.Platforms.Platform)">
      <summary>
            Inserts an element into the <see cref="T:AGI.Foundation.Platforms.ChildPlatformCollection" />
            at the given index.
            </summary>
      <param name="index">The index, based at zero, where the item is to be inserted.</param>
      <param name="item">The specific object that is being inserted (Value can be null for reference types).</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the given index of the <see cref="T:AGI.Foundation.Platforms.ChildPlatformCollection" />.
            </summary>
      <param name="index">The index, based at zero, where the item is to be removed.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.ChildPlatformCollection.SetItem(System.Int32,AGI.Foundation.Platforms.Platform)">
      <summary>
            Replaces the element at the given index.
            </summary>
      <param name="index">TThe index, based at zero, where the item is to be replaced.</param>
      <param name="item">The new value for the element at the given index (Value can be null for reference types). </param>
    </member>
    <member name="T:AGI.Foundation.Platforms.DynamicFieldOfViewExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that defines a time-dynamic field of view.  This is particularly useful for
            modeling sensors that change their shape with time, for example by zooming in and out.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.#ctor(AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView)">
      <summary>
            Initializes a new instance with a specified field of view.
            </summary>
      <param name="fieldOfView">The field of view.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.#ctor(AGI.Foundation.Platforms.DynamicFieldOfViewExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.CheckForSameDefinition(AGI.Foundation.Platforms.DynamicFieldOfViewExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.FieldOfViewVolume">
      <summary>
            Gets or sets the dynamic volume of the sensor's field of view defined in the sensor's reference frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetPointIsInFieldOfViewEvaluator(AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator to determine if a point is inside the field of view of the sensor at
            different dates.
            </summary>
      <param name="point">The point to check.</param>
      <returns>An evaluator to determine if a point is inside the field of view of the sensor.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetPointIsInFieldOfViewEvaluator(AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to determine if a point is inside the field of view of the sensor at
            different dates.
            </summary>
      <param name="point">The point to check.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to determine if a point is inside the field of view of the sensor.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <returns>An evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> or the <paramref name="centralBody" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>An evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> or the <paramref name="centralBody" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.DynamicFieldOfViewExtension.GetService(System.Type)">
      <summary>
        Gets the service object of the specified type.
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>
        The found service, or null  if the service does not exist.
      </returns>
      <exception cref="T:System.ArgumentNullException">
        Thrown when the <paramref name="serviceType" /> is null.
      </exception>
    </member>
    <member name="T:AGI.Foundation.Platforms.FieldOfViewExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that defines a field of view.  This is particularly useful for
            modeling sensors.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.#ctor(AGI.Foundation.Geometry.Shapes.SensorFieldOfView)">
      <summary>
            Initializes a new instance with a specified field of view.
            </summary>
      <param name="fieldOfView">The field of view.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.#ctor(AGI.Foundation.Platforms.FieldOfViewExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.CheckForSameDefinition(AGI.Foundation.Platforms.FieldOfViewExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.FieldOfViewExtension.FieldOfViewVolume">
      <summary>
            Gets or sets the volume of the sensor's field of view defined in the sensor's reference frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetPointIsInFieldOfViewEvaluator(AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator to determine if a point is inside the field of view of the sensor at
            different dates.
            </summary>
      <param name="point">The point to check.</param>
      <returns>An evaluator to determine if a point is inside the field of view of the sensor.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetPointIsInFieldOfViewEvaluator(AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to determine if a point is inside the field of view of the sensor at
            different dates.
            </summary>
      <param name="point">The point to check.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to determine if a point is inside the field of view of the sensor.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <returns>An evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> or the <paramref name="centralBody" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>An evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> or the <paramref name="centralBody" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetService(System.Type)">
      <summary>
        Gets the service object of the specified type.
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>
        The found service, or null  if the service does not exist.
      </returns>
      <exception cref="T:System.ArgumentNullException">
        Thrown when the <paramref name="serviceType" /> is null.
      </exception>
    </member>
    <member name="T:AGI.Foundation.Platforms.ICentralBodySurfaceCurveService">
      <summary>
            This service provides the geometry of a curve on the surface of a <see cref="P:AGI.Foundation.Platforms.ICentralBodySurfaceCurveService.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.ICentralBodySurfaceCurveService.CentralBody">
      <summary>
            Gets central body of the curve.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.ICentralBodySurfaceCurveService.SurfaceCurve">
      <summary>
            Gets the surface curve.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.ICentralBodySurfaceRegionService">
      <summary>
            This service provides the geometry of a region on the surface of a <see cref="P:AGI.Foundation.Platforms.ICentralBodySurfaceRegionService.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.ICentralBodySurfaceRegionService.CentralBody">
      <summary>
            Gets or sets the central body of the region.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.ICentralBodySurfaceRegionService.SurfaceRegion">
      <summary>
            Gets the region of interest on the reference surface.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.IDetectorPitchService">
      <summary>
            A service which returns the detector pitch of a device.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.IDetectorPitchService.DetectorPitch">
      <summary>
            Gets the detector pitch of the device.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.IFieldOfViewEnclosureService">
      <summary>
            A service that provides an evaluator for determining if a <see cref="T:AGI.Foundation.Geometry.Point" /> is inside of a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.IFieldOfViewEnclosureService.GetPointIsInFieldOfViewEvaluator(AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator to determine if a point is inside the field of view of the sensor at
            different dates.
            </summary>
      <param name="point">The point to check.</param>
      <returns>An evaluator to determine if a point is inside the field of view of the sensor.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.IFieldOfViewEnclosureService.GetPointIsInFieldOfViewEvaluator(AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to determine if a point is inside the field of view of the sensor at
            different dates.
            </summary>
      <param name="point">The point to check.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to determine if a point is inside the field of view of the sensor.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Platforms.IFieldOfViewProjectionService">
      <summary>
            A service that provides an evaluator for projecting a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> onto a <see cref="T:AGI.Foundation.Celestial.CentralBody" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.IFieldOfViewProjectionService.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <returns>An evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.IFieldOfViewProjectionService.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Shapes.SensorProjectionOptions,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can project the field of view of the sensor onto the ellipsoid
            surface of a central body.
            </summary>
      <param name="centralBody">The central body onto which to project the sensor.</param>
      <param name="projectionOptions">The options controlling how the sensor is projected.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Infrastructure.ObjectExtension.Owner" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> or the <paramref name="centralBody" /> is null.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Platforms.IFocalLengthService">
      <summary>
            A service that provides the focal length of a device.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.IFocalLengthService.FocalLength">
      <summary>
            Gets the focal length of the device.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.ImagingDeviceExtension">
      <summary>
            Extension for a platform which provides data regarding an imaging device.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.#ctor">
      <summary>
            Instantiate.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.#ctor(AGI.Foundation.Platforms.ImagingDeviceExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Copy constructor.
            </summary>
      <param name="existingInstance">Existing instance.</param>
      <param name="context">Copy context.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="existingInstance" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.#ctor(System.Double,System.Double)">
      <summary>
            Construct a new instance based on imaging parameters.
            </summary>
      <param name="focalLength">The focal length of the device.</param>
      <param name="detectorPitch">The detector pitch of the device.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.CheckForSameDefinition(AGI.Foundation.Platforms.ImagingDeviceExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.ImagingDeviceExtension.ComputeGroundSampleDistance(AGI.Foundation.Coordinates.AzimuthElevationRange,System.Double)">
      <summary>
            Compute the ground sample distance representing a measure of the ability of an imaging sensor to detect a target on the ground.
            </summary>
      <param name="relativePositionFromTarget">The azimuth elevation and range coordinates from the target to the camera.</param>
      <param name="focalConstant">The focal constant of the camera (detector pitch divided by focal length).</param>
      <returns>The value of the ground sample distance.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.ImagingDeviceExtension.DetectorPitch">
      <summary>
            Gets or sets the detector pitch of the device.  Must be greater than or equal to zero.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Platforms.ImagingDeviceExtension.FocalLength">
      <summary>
            Gets or sets the focal length of the device.  Must be greater than or equal to zero.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Platforms.LocationPointCovarianceExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that provides the covariance 
            of an object's position over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Platforms.LocationPointCovarianceExtension.LocationPointCovariance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.#ctor(AGI.Foundation.Geometry.DynamicCovariance3By3)">
      <summary>
            Initializes a new instance from a vector and axes.
            </summary>
      <param name="covariance">The size and orientation of the covariance ellipsoid of the location point.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.#ctor(AGI.Foundation.Platforms.LocationPointCovarianceExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.CheckForSameDefinition(AGI.Foundation.Platforms.LocationPointCovarianceExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointCovarianceExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.LocationPointCovarianceExtension.LocationPointCovariance">
      <summary>
            Gets or sets the description of the axes lengths and orientation of the covariance ellipsoid.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.LocationPointExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that provides the position 
            of an object over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.#ctor(AGI.Foundation.Geometry.Point)">
      <summary>
            Initialize the extension with the given point.
            </summary>
      <param name="locationPoint">Point that describes the position of the object.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.#ctor(AGI.Foundation.Platforms.LocationPointExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.CheckForSameDefinition(AGI.Foundation.Platforms.LocationPointExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.LocationPointExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.LocationPointExtension.LocationPoint">
      <summary>
            Gets or sets the point that describes the position of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.NameExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that provides a name of an object. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.#ctor(AGI.Foundation.Platforms.NameExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.#ctor(System.String)">
      <summary>
            Initialize the extension with the given name.
            </summary>
      <param name="name">A name given to the extension.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.CheckForSameDefinition(AGI.Foundation.Platforms.NameExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.NameExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.NameExtension.Name">
      <summary>
            Gets or sets the name.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.OrientationAxesExtension">
      <summary>
            An <see cref="T:AGI.Foundation.Infrastructure.ObjectExtension" /> that that provides the orientation 
            (rotation) of an object over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.#ctor(AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes the extension with the given point.
            </summary>
      <param name="orientationAxes">The axes that describe the orientation of the object.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.#ctor(AGI.Foundation.Platforms.OrientationAxesExtension,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.CheckForSameDefinition(AGI.Foundation.Infrastructure.ObjectExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.CheckForSameDefinition(AGI.Foundation.Platforms.OrientationAxesExtension)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.OrientationAxesExtension.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.OrientationAxesExtension.OrientationAxes">
      <summary>
            Gets or sets the axes that describe the orientation of the object.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.Platform">
      <summary>
            A generic platform with a location and orientation relative to a parent platform.
            Examples of platforms include satellites, facilities, and aircraft.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.#ctor(AGI.Foundation.Platforms.Platform,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified name.
            </summary>
      <param name="name">The name of the platform.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.#ctor(System.String,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance with a specified name, time-varying position, and time-varying orientation.
            </summary>
      <param name="name">The name of the platform.</param>
      <param name="locationPoint">A <see cref="T:AGI.Foundation.Geometry.Point" /> describing the position of the platform over time.</param>
      <param name="orientationAxes">An <see cref="T:AGI.Foundation.Geometry.Axes" /> describing the orientation of the platform over time.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.CheckForSameDefinition(AGI.Foundation.Infrastructure.ExtensibleObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.CheckForSameDefinition(AGI.Foundation.Platforms.Platform)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.Platform.Children">
      <summary>
            Gets the collection containing the children of this Platform.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.Platform.GetService(System.Type)">
      <summary>
        Gets the service object of the specified type.
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>
        The found service, or null  if the service does not exist.
      </returns>
      <exception cref="T:System.ArgumentNullException">
        Thrown when the <paramref name="serviceType" /> is null.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Platforms.Platform.LocationPoint">
      <summary>
            Gets or sets the time-varying location of this platform.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.Platform.Name">
      <summary>
            Gets or sets the name of the platform.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.Platform.OrientationAxes">
      <summary>
            Gets or sets the time-varying orientation of this platform.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.Platform.Parent">
      <summary>
            Gets the parent platform of this platform.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Platforms.Platform.ReferenceFrame">
      <summary>
            Gets the reference frame of this platform formed by the combination of
            the platform's location and orientation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.PlatformAddedEventArgs">
      <summary>
            Provides data for the <see cref="E:AGI.Foundation.Platforms.PlatformCollection.PlatformAdded" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformAddedEventArgs.#ctor(AGI.Foundation.Platforms.Platform)">
      <summary>
            Initializes a new instance using the specified <see cref="P:AGI.Foundation.Platforms.PlatformAddedEventArgs.Platform" />.
            </summary>
      <param name="platform">An instance that represents the platform being added.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.PlatformAddedEventArgs.Platform">
      <summary>
            Gets the Platform that is being added.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.PlatformCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Platforms.Platform" /> instances.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.#ctor(AGI.Foundation.Platforms.PlatformCollection,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Platforms.Platform})">
      <summary>
            Construct a new instance based on an existing collection of <see cref="T:AGI.Foundation.Platforms.Platform">Platforms</see>.
            </summary>
      <param name="platformList">A list of platforms.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{AGI.Foundation.Platforms.Platform})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.CheckForSameDefinition(AGI.Foundation.Platforms.PlatformCollection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:AGI.Foundation.Platforms.PlatformCollection" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.InsertItem(System.Int32,AGI.Foundation.Platforms.Platform)">
      <summary>
            Inserts an element into the <see cref="T:AGI.Foundation.Platforms.PlatformCollection" />
            at the given index.
            </summary>
      <param name="index">The index, based at zero, where the item is to be inserted.</param>
      <param name="item">The specific object that is being inserted (Value can be null for reference types).</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.OnPlatformAdded(AGI.Foundation.Platforms.Platform)">
      <summary>
            Raises the <see cref="E:AGI.Foundation.Platforms.PlatformCollection.PlatformAdded" /> event.
            </summary>
      <param name="platform">The platform that was added.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.OnPlatformRemoved(AGI.Foundation.Platforms.Platform)">
      <summary>
            Raises the <see cref="E:AGI.Foundation.Platforms.PlatformCollection.PlatformRemoved" /> event.
            </summary>
      <param name="platform">The platform that was removed.</param>
    </member>
    <member name="E:AGI.Foundation.Platforms.PlatformCollection.PlatformAdded">
      <summary>
            Occurs when a platform is added to this collection.
            </summary>
    </member>
    <member name="E:AGI.Foundation.Platforms.PlatformCollection.PlatformRemoved">
      <summary>
            Occurs when a platform is removed from this collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the given index of the <see cref="T:AGI.Foundation.Platforms.PlatformCollection" />.
            </summary>
      <param name="index">The index, based at zero, where the item is to be removed.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformCollection.SetItem(System.Int32,AGI.Foundation.Platforms.Platform)">
      <summary>
            Replaces the element at the given index.
            </summary>
      <param name="index">The index, based at zero, where the item is to be replaced.</param>
      <param name="item">The new value for the element at the given index (Value can be null for reference types). </param>
    </member>
    <member name="T:AGI.Foundation.Platforms.PlatformLocationPoint">
      <summary>
            A Point that can be used to refer to the current <see cref="P:AGI.Foundation.Platforms.Platform.LocationPoint" /> of a <see cref="T:AGI.Foundation.Platforms.Platform" />,
            whatever it is at the time that this point is evaluated.  All method and properties on this class simply pass the
            call to the platform's current <see cref="P:AGI.Foundation.Platforms.Platform.LocationPoint" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.#ctor(AGI.Foundation.Platforms.Platform)">
      <summary>
            Creates a new instance of this class with the specified parameters
            </summary>
      <param name="platform">The <see cref="T:AGI.Foundation.Platforms.Platform" /> whose <see cref="P:AGI.Foundation.Platforms.Platform.LocationPoint" /> will receive all method calls.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.#ctor(AGI.Foundation.Platforms.PlatformLocationPoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.CheckForSameDefinition(AGI.Foundation.Platforms.PlatformLocationPoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformLocationPoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the motion of this point in its parent reference frame
            at a given date.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.PlatformLocationPoint.Platform">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Platforms.Platform" /> whose <see cref="P:AGI.Foundation.Platforms.Platform.LocationPoint" />
            will receive all method calls.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.PlatformOrientationAxes">
      <summary>
            An Axes that can be used to refer to the current <see cref="P:AGI.Foundation.Platforms.Platform.OrientationAxes" /> of a <see cref="T:AGI.Foundation.Platforms.Platform" />,
            whatever it is at the time that this axes is evaluated.  All method and properties on this class simply pass the
            call to the platform's current <see cref="P:AGI.Foundation.Platforms.Platform.OrientationAxes" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.#ctor(AGI.Foundation.Platforms.Platform)">
      <summary>
            Creates a new instance of this class with the specified parameters
            </summary>
      <param name="platform">The <see cref="T:AGI.Foundation.Platforms.Platform" /> whose <see cref="P:AGI.Foundation.Platforms.Platform.OrientationAxes" /> will receive all method calls.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.#ctor(AGI.Foundation.Platforms.PlatformOrientationAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.CheckForSameDefinition(AGI.Foundation.Platforms.PlatformOrientationAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformOrientationAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes at a given date.  Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Platforms.PlatformOrientationAxes.Platform">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Platforms.Platform" /> whose <see cref="P:AGI.Foundation.Platforms.Platform.OrientationAxes" />
            will receive all method calls.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.PlatformRemovedEventArgs">
      <summary>
            Provides data for the <see cref="E:AGI.Foundation.Platforms.PlatformCollection.PlatformRemoved" /> event.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.PlatformRemovedEventArgs.#ctor(AGI.Foundation.Platforms.Platform)">
      <summary>
            Initializes a new instance using the specified <see cref="P:AGI.Foundation.Platforms.PlatformRemovedEventArgs.Platform" />.
            </summary>
      <param name="platform">An instance that represents the platform being removed.</param>
    </member>
    <member name="P:AGI.Foundation.Platforms.PlatformRemovedEventArgs.Platform">
      <summary>
            Gets the Platform that is being removed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Platforms.SensorProjectionEvaluator">
      <summary>
            An evaluator that can find the projection of a sensor onto a central body's ellipsoid surface.
            To obtain an instance of this class, call <see cref="M:AGI.Foundation.Platforms.FieldOfViewExtension.GetSensorProjectionEvaluator(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.EvaluatorGroup)" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.SensorProjectionEvaluator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Platforms.SensorProjectionEvaluator.#ctor(AGI.Foundation.Platforms.SensorProjectionEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">The context in which to perform the copy.</param>
    </member>
  </members>
</doc>