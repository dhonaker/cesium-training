<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>AGI.Foundation.Models</name>
  </assembly>
  <members>
    <member name="T:AGI.Foundation.StkComponentsModels">
      <summary>
            Version information for the STK Components Models library.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsModels.DisplayVersion">
      <summary>
            The display version of the library: <c>2015 r2</c>.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsModels.Version">
      <summary>
            The numeric version of the library: <c>15.2.379.0</c>.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.CentralBodiesFacet">
      <summary>
            A <see cref="T:AGI.Foundation.Infrastructure.CalculationContextFacet" /> that holds and provides information about
            central bodies such as planets, moons, the sun, etc.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.#ctor">
      <summary>
            Initializes a new instance with default values.  You should generally call the
            <see cref="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetFromContext" /> method instead of constructing a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.#ctor(AGI.Foundation.Celestial.CentralBodiesFacet,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBodiesFacet.Earth">
      <summary>
            Gets the planet Earth.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetByName(System.String)">
      <summary>
            Gets a central body by name.
            </summary>
      <param name="name">The name of the central body to get.</param>
      <returns>The central body instance, or null if a central body with the specified name does not exist.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetCentralBodyOfPoint(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.Point)">
      <summary>
            Gets the central body most closely associated with a given point.
            </summary>
      <param name="date">
            The date at which to obtain the central body, in case the point is defined in
            different reference frames at different times.
            </param>
      <param name="point">The point.</param>
      <returns>The central body that is most closely associated with the point.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetEnumerator">
      <summary>
            Enumerates the central bodies.
            </summary>
      <returns>An enumerator for enumerating the central bodies.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetFromContext">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> instance from the calculation context.  If the context does
            not contain a <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> instance, one will be created.
            </summary>
      <returns>The instance from the context.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBodiesFacet.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBodiesFacet.Moon">
      <summary>
            Gets the Moon.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBodiesFacet.SolarSystemBarycenter">
      <summary>
            Gets the barycenter of the solar system.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBodiesFacet.Sun">
      <summary>
            Gets the Sun.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodiesFacet.UseInCurrentContext">
      <summary>
            Adds this instance to the current context, making it the official instance of this
            facet type in the context.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.CentralBody">
      <summary>
            A central body, such as a planet, star, asteroid, libration point, etc.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.CenterOfMassPoint">
      <summary>
        Gets or sets a point describing the center of mass of this central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.CentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.FixedFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the surface features of this central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.GetAzimuthElevationRangeEvaluator(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator to find the azimuth, elevation, and range of a vector as observed
            from a given point.
            </summary>
      <param name="vector">The vector.</param>
      <param name="observingPoint">
            The point from which the vector is observed.  This point defines the local coordinate system
            in which the azimuth, elevation, and range are defined.
            </param>
      <returns>An evaluator to find the azimuth, elevation, and range.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.GetAzimuthElevationRangeEvaluator(AGI.Foundation.Geometry.Vector,AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to find the azimuth, elevation, and range of a vector as observed
            from a given point, and associates the evaluator with the specified evaluator group.
            </summary>
      <param name="vector">The vector.</param>
      <param name="observingPoint">
            The point from which the vector is observed.  This point defines the local coordinate system
            in which the azimuth, elevation, and range are defined.
            </param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the azimuth, elevation, and range.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.GetAzimuthElevationRangeEvaluator(AGI.Foundation.Geometry.VectorDisplacement)">
      <summary>
            Gets an evaluator to find the azimuth, elevation, and range of a displacement vector as observed
            from the initial point.
            </summary>
      <param name="displacementVector">The displacement vector.</param>
      <returns>An evaluator to find the azimuth, elevation, and range.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.GetAzimuthElevationRangeEvaluator(AGI.Foundation.Geometry.VectorDisplacement,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to find the azimuth, elevation, and range of a displacement vector as observed
            from the initial point, and associates the evaluator with the specified evaluator group.
            </summary>
      <param name="displacementVector">The displacement vector.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the azimuth, elevation, and range.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.GetService(System.Type)">
      <summary>
        Gets the service object of the specified type.
      </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>
        The found service, or null  if the service does not exist.
      </returns>
      <exception cref="T:System.ArgumentNullException">
        Thrown when the <paramref name="serviceType" /> is null.
      </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.InertialFrame">
      <summary>
        Gets or sets the default Inertial frame for this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.Name">
      <summary>
        Gets or sets the name of the central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.ObserveCartographicPoint(AGI.Foundation.Geometry.Point)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> motion of a
            point relative to this central body.
            </summary>
      <param name="point">The point to observe.</param>
      <returns>An evaluator to find the Cartographic motion of a point relative to this central body.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.ObserveCartographicPoint(AGI.Foundation.Geometry.Point,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> motion of a
            point relative to this central body.
            </summary>
      <param name="point">The point to observe.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator to find the Cartographic motion of a point relative to this central body.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.PrincipalFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the gravity frame of this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.CentralBody.Shape">
      <summary>
        Gets or sets the shape of this central body.  If the central
        body does not have a shape (for example, a libration point)
        this property will be null.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBody.SynchronizeOrigins">
      <summary>
            Remakes the Inertial, Fixed, and PrincipalAxes frames so that they have the same
            origin as the current <see cref="P:AGI.Foundation.Celestial.CentralBody.CenterOfMassPoint" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.CentralBodyInertialAxes">
      <summary>
            This class provides the Axes based on the STK definition of a <see cref="T:AGI.Foundation.Celestial.CentralBody" />'s Inertial Axes.
            The Inertial Z axis aligns with the <see cref="T:AGI.Foundation.Celestial.IauOrientationAxes" /> Z axis of the <see cref="T:AGI.Foundation.Celestial.CentralBody" />,
            and the Inertial X axis aligns with the vector that is the cross product of the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.InternationalCelestialReferenceFrame" />
            Z axis and the IAU Z axis, evaluated at the J2000 epoch.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.#ctor(AGI.Foundation.Celestial.CentralBodyInertialAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.#ctor(AGI.Foundation.Celestial.CentralBodyInertialAxes.ComputeOrientationParameters)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orientationFunction">The function that produces the necessary
            <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" />.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.CheckForSameDefinition(AGI.Foundation.Celestial.CentralBodyInertialAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.CentralBodyInertialAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that describes the orientation of the default <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" />
            in relation to the axes of the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.InternationalCelestialReferenceFrame" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The axes evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.CentralBodyInertialAxes.ComputeOrientationParameters">
      <summary>
            The definition of a function which computes a set of orientation parameters.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes">
      <summary>
        <para>
            Represents the classical equation of the equinox as defined in the Explanatory Supplement
            to the Astronomical Almanac.  This equation has been in use for many decades.  For the
            updated equation of equinoxes defined by the IERS in 1996, see 
            <see cref="T:AGI.Foundation.Celestial.IersTechnicalNote21" />.  To apply this equation of equinoxes, replace the
            existing <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.EquationOfEquinoxes" /> with an instance of this class.
            </para>
        <para>
            This class uses the existing <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.NutationModel" /> and 
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.PrecessionModel" />.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes.#ctor">
      <summary>
            Create a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes.CheckForSameDefinition(AGI.Foundation.Celestial.EquationOfEquinoxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes.GetEquationOfTheEquinoxesEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to compute the equation of the equinoxes.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see> which represents the value of the equation of the equinoxes representing
            the offset between the mean and apparent equinoxes at the given <see cref="T:AGI.Foundation.Time.JulianDate" />.  No derivatives are provided, so the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />) method will return the
            same value as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;double&gt;.Value</see>.
            </para><para>
            The equation of the equinox uses a <see cref="T:AGI.Foundation.Celestial.NutationModel" /> and <see cref="T:AGI.Foundation.Celestial.PrecessionModel" /> defined by the
            instance of <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" /> in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> of the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator that evaluates the equation of the equinoxes.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.ComputeIauOrientationParameters">
      <summary>
            The definition of a function which computes a set of orientation parameters.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.EarthCentralBody">
      <summary>
            The planet Earth.  You should generally obtain an instance of this class from the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" />
            instance in the calculation context instead of creating one directly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.#ctor(AGI.Foundation.Celestial.EarthCentralBody,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.CenterOfMassPoint">
      <summary>
        Gets or sets a point describing the center of mass of this central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.CentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.EarthCentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.EquationOfEquinoxes">
      <summary>
            Gets or sets the default model for the equation of the equinoxes which
            defines the right ascension of the mean equinox with respect to the 
            true equator and equinox.  By default, this uses the
            <see cref="P:AGI.Foundation.Celestial.IersTechnicalNote21.UpdatedEquationOfEquinoxes" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.FixedFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the surface features of this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.InertialFrame">
      <summary>
            Gets or sets the Inertial reference frame, which is, by default,
            the same as the reference frame returned by <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.InternationalCelestialReferenceFrame" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.InternationalCelestialReferenceFrame">
      <summary>
            Gets or sets the International Celestial Reference Frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.J2000Frame">
      <summary>
            Gets or sets the J2000 Reference Frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.MeanEclipticMeanEquinoxFrame">
      <summary>
            Gets or sets the Mean Ecliptic Mean Equinox Reference Frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.MeanEclipticTrueEquinoxFrame">
      <summary>
            Gets or sets the Mean Ecliptic True Equinox Reference Frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.MeanEquatorMeanEquinoxFrame">
      <summary>
            Gets or sets the Mean Equator Mean Equinox Reference Frame, also
            known as the "Mean of Date" reference frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.MeanSeaLevel">
      <summary>
            Gets or sets the default mean sea level surface.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.Name">
      <summary>
        Gets or sets the name of the central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.NutationModel">
      <summary>
            Gets or sets the default nutation model used in the FK5 transformation from 
            J2000 to the Fixed frame.  By default, this is <see cref="P:AGI.Foundation.Celestial.IersTechnicalNote21.Updated1980NutationModel" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.OrientationParameters">
      <summary>
            Gets or sets the default <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.PrecessionModel">
      <summary>
            Gets or sets the default precession model used in the FK5 transformation from 
            J2000 to the Fixed frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.PrincipalFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the gravity frame of this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.PseudoFixedFrame">
      <summary>
            Gets or sets the pseudo-fixed reference frame.  The pseudo-fixed frame
            does not include the effect of pole wander.  Note that this does include 
            the s-prime correction from the International Celestial Reference System.
            So the only difference between the pseudo-fixed frame and the fixed frame
            is the 'x' and 'y' offset terms from pole wander computed by the 
            <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> (EOP).  If the EOP data is default
            (zeros), the pseudo-fixed frame will be the same as the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.FixedFrame" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.Shape">
      <summary>
            Gets or sets the shape of this central body.  By default this property returns the
            WGS84 oblate ellipsoid model of the Earth.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.SlowChangingAxesUpdateInterval">
      <summary>
            Gets or sets the interval, in seconds, on which to recalculate slow-changing relationships between axes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthCentralBody.SynchronizeOrigins">
      <summary>
            Sets the <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Origin" /> of the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.InertialFrame" />,
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.J2000Frame" />, <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.InternationalCelestialReferenceFrame" />,
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.FixedFrame" />, <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.PrincipalFrame" />, <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.PseudoFixedFrame" />,
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.MeanEquatorMeanEquinoxFrame" />, <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.MeanEclipticMeanEquinoxFrame" />,
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.MeanEclipticTrueEquinoxFrame" />, <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorTrueEquinoxFrame" />,
            and <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />
            to the current <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.CenterOfMassPoint" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame">
      <summary>
            Gets or sets the True Equator, Mean Equinox (TEME) Reference Frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorTrueEquinoxFrame">
      <summary>
            Gets or sets the True Equator True Equinox Reference Frame, also 
            known as the "True of Date" reference frame.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.EarthGravitationalModel1996">
      <summary>
            Provides the semimajor axis, gravitational parameter, and 2nd, 3rd, and 4th zonal harmonic coefficients
            for the Earth Gravitational Model of 1996 (EGM96) according to NASA Technical Publication 1998-206861.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.GravitationalParameter">
      <summary>
            The gravitational parameter of the Earth in meters cubed per second squared as defined by the EGM96 model.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J2NormalizedValue">
      <summary>
            The normalized second zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J2UnnormalizedValue">
      <summary>
            The non-normalized second zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J3NormalizedValue">
      <summary>
            The normalized third zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J3UnnormalizedValue">
      <summary>
            The non-normalized third zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J4NormalizedValue">
      <summary>
            The normalized fourth zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J4UnnormalizedValue">
      <summary>
            The non-normalized fourth zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J5NormalizedValue">
      <summary>
            The normalized fifth zonal harmonic coefficient.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.J5UnnormalizedValue">
      <summary>
            The non-normalized fifth zonal harmonic coefficient.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthGravitationalModel1996.NormalizationFactor(System.Int32,System.Int32)">
      <summary>
            The normalization factor for the spherical harmonic terms of the specified degree and order.
            The unnormalized value divided by the normalization factor yields the normalized value.
            </summary>
      <param name="degree">The degree.</param>
      <param name="order">The order.</param>
      <returns>The normalization factor.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthGravitationalModel1996.Normalize(System.Double,System.Int32,System.Int32)">
      <summary>
            Computes the corresponding normalized value of an unnormalized coefficient.
            </summary>
      <param name="coefficient">The unnormalized coefficient value.</param>
      <param name="degree">The degree of the coefficient.</param>
      <param name="order">The order of the coefficient.</param>
      <returns>The normalized value.</returns>
    </member>
    <member name="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.SemimajorAxis">
      <summary>
            The semimajor axis of the Earth in meters as defined by the EGM96 model.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthGravitationalModel1996.Unnormalize(System.Double,System.Int32,System.Int32)">
      <summary>
            Computes the corresponding unnormalized value of a normalized coefficient.
            </summary>
      <param name="coefficient">The normalized coefficient value.</param>
      <param name="degree">The degree of the coefficient.</param>
      <param name="order">The order of the coefficient.</param>
      <returns>The unnormalized value.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.EarthOrientationParameters">
      <summary>
            Specifies Earth polar motion coordinates and the difference between UT1 and UTC.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.#ctor">
      <summary>
            Initializes a new instance with no pole wander and no difference between UT1 and UTC.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Celestial.EarthOrientationParametersData})">
      <summary>
            Initializes a new instance from the specified list of data points.
            </summary>
      <param name="data">The list of EOP data points.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeCelestialPoleOffset(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the offset to the Celestial Intermediate Pole (CIP) for the given date by interpolating 
            this EOP data, in arc seconds.
            </summary>
      <param name="date">The date at which to retrieve the celestial pole offset.</param>
      <returns>The offset to the celestial intermediate pole, in arc seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeDeltaEpsilonCorrection(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the correction to the nutation in obliquity (delta Delta epsilon), in arc seconds, for the given date by interpolating
            this EOP data.
            </summary>
      <param name="date">The date at which to retrieve the delta psi correction.</param>
      <returns>The correction to the nutation in longitude, in arc seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeDeltaPsiCorrection(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the correction to the nutation in longitude (delta Delta psi), in arc seconds, for the given date by interpolating
            this EOP data.
            </summary>
      <param name="date">The date at which to retrieve the delta psi correction.</param>
      <returns>The correction to the nutation in longitude, in arc seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeEopData(AGI.Foundation.Time.JulianDate)">
      <summary>
            Creates an <see cref="T:AGI.Foundation.Celestial.EarthOrientationParametersData" /> object with the given date and information from the
            various Compute methods such as <see cref="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputePoleWander(AGI.Foundation.Time.JulianDate)" />.
            </summary>
      <param name="date">The date</param>
      <returns>The Earh Orientation Parameters data.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeLengthOfDayCorrection(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the correction to the length of a solar day (86400.0 sec) for the given date by interpolating
            this EOP data.
            </summary>
      <param name="date">The date at which to retrieve the length of day correction.</param>
      <returns>The length of day correction, in seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputePoleWander(AGI.Foundation.Time.JulianDate)">
      <summary>
            Finds the pole wander for the given date by interpolating this EOP data, in arc seconds.
            </summary>
      <param name="date">The date at which to retrieve pole wander information.</param>
      <returns>The wander of the pole for the given date.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeTaiMinusUtc(AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns the difference TAI - UTC for the given date by returning the number of leap seconds
            at the previous data point.
            </summary>
      <param name="date">The date.</param>
      <returns>The difference in seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.ComputeUt1MinusUtc(AGI.Foundation.Time.JulianDate)">
      <summary>
            Returns the difference UT1 - UTC for the given date by interpolating this EOP data.
            </summary>
      <param name="date">The date.</param>
      <returns>The difference in seconds.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParameters.Data">
      <summary>
            Gets the EOP data represented by this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.GetDefinitionHashCode">
      <summary>
        Gets a hash code representing the definition of this object.
      </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.IsSameDefinition(System.Object)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParameters.UseForTimeStandardConversions">
      <summary>
            Configures the <see cref="T:AGI.Foundation.Time.TimeStandardConverter" /> so that EOP data is used to
            convert between the UTC and UT1 time standards.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.EarthOrientationParametersData">
      <summary>
            Specifies Earth Orientation Parameters at a specific instant.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.#ctor(AGI.Foundation.Time.JulianDate,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="date">The instant at which the parameters are specified, in UTC.</param>
      <param name="poleWanderX">The pole wander in the X direction at this instance, in arc seconds.</param>
      <param name="poleWanderY">The pole wander in the X direction at this instance, in arc seconds.</param>
      <param name="ut1MinusUtc">The difference UT1 - UTC at this instant.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.#ctor(AGI.Foundation.Time.JulianDate,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="date">The instant at which the parameters are specified, in UTC.</param>
      <param name="poleWanderX">The pole wander in the X direction at this instance, in arc seconds.</param>
      <param name="poleWanderY">The pole wander in the X direction at this instance, in arc seconds.</param>
      <param name="ut1MinusUtc">The difference UT1 - UTC at this instant.</param>
      <param name="lengthOfDay">The correction to the length of a standard solar day (86400.0 Seconds).</param>
      <param name="dPsi">The correction to nutation in longitude from the IAU1980 theory, in arc seconds.</param>
      <param name="dEpsilon">The correction to nutation in obliquity from the IAU1980 theory, in arc seconds.</param>
      <param name="celestialPoleOffsetX">The x-offset to the celestial intermediate pole (CIP), in arc seconds.</param>
      <param name="celestialPoleOffsetY">The y-offset to the celestial intermediate pole (CIP), in arc seconds.</param>
      <param name="taiOffsetToUtc">The number of leap seconds for the given date.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.CelestialPoleOffsetX">
      <summary>
            Gets the x-offset to the definition of the Celestial Intermediate Pole (CIP), in arc seconds.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.CelestialPoleOffsetY">
      <summary>
            Gets the y-offset to the definition of the Celestial Intermediate Pole (CIP), in arc seconds.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.Date">
      <summary>
            Gets the instant at which the parameters are specified, in the TAI time standard.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.DeltaEpsilonCorrection">
      <summary>
            Gets the correction to the nutation in the obliquity of the ecliptic (delta Delta epsilon) with
            respect to the IAU1980 theory, in arc seconds.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.DeltaPsiCorrection">
      <summary>
            Gets the correction to the nutation in longitude (delta Delta psi) with respect to the IAU1980 theory, in arc seconds.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.Equals(AGI.Foundation.Celestial.EarthOrientationParametersData)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.LengthOfDayCorrection">
      <summary>
            Gets the correction to the length of a solar day ("LOD"), in seconds.  This defines the difference
            between the astronomically determined length of a day and the length of a standard solar day (86400.0 SI Seconds).
            This accounts for effects from zonal tides, oceanic tides, angular momentum transfer from the moon, and
            other effects on the Earth's rotation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.op_Equality(AGI.Foundation.Celestial.EarthOrientationParametersData,AGI.Foundation.Celestial.EarthOrientationParametersData)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersData.op_Inequality(AGI.Foundation.Celestial.EarthOrientationParametersData,AGI.Foundation.Celestial.EarthOrientationParametersData)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.PoleWanderX">
      <summary>
            Gets the pole wander in the X direction at this instant, in arc seconds.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.PoleWanderY">
      <summary>
            Gets the pole wander in the Y direction at this instant, in arc seconds.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.SecondsDifference">
      <summary>
            Gets the number of seconds difference between <see cref="P:AGI.Foundation.Celestial.EarthOrientationParametersData.Date" /> in UTC and TAI.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.TaiOffsetFromUtc">
      <summary>
            Gets the number of leap seconds ("DAT") as specified in the EOP file.  This yields the relationship between
            the UTC and TAI time scales by the following relation: DAT = TAI - UTC
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersData.Ut1MinusUtc">
      <summary>
            Gets the difference UT1 - UTC at this instant.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.EarthOrientationParametersFile">
      <summary>
            Contains static methods to read EOP data in the Celestrak EOP data file format which is documented at
            <a href="http://celestrak.com/SpaceData/EOP-format.asp">Celestrak EOP data file format</a>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersFile.ReadData(System.IO.TextReader)">
      <summary>
            Reads an EOP data file and returns a new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> instance
            initialized with the contents of the file.
            </summary>
      <param name="source">The stream from which to read.</param>
      <returns>A new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> initialized with the contents of the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="source" /> is null.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when there is an error parsing the EOP data specified by the <paramref name="source" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersFile.ReadData(System.IO.TextReader,AGI.Foundation.Celestial.EarthOrientationParametersReadOptions)">
      <summary>
            Reads an EOP data file and returns a new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> instance
            initialized with the contents of the file.
            </summary>
      <param name="source">The stream from which to read.</param>
      <param name="readOptions">Options for reading the file.</param>
      <returns>A new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> initialized with the contents of the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="source" /> is null.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when there is an error parsing the EOP data specified by the <paramref name="source" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersFile.ReadData(System.String)">
      <summary>
            Reads an EOP data file and returns a new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> instance
            initialized with the contents of the file.
            </summary>
      <param name="fileName">The name of the file from which to read.</param>
      <returns>A new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> initialized with the contents of the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="fileName" /> is null.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when there is an error parsing the EOP data specified by the <paramref name="fileName" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersFile.ReadData(System.String,AGI.Foundation.Celestial.EarthOrientationParametersReadOptions)">
      <summary>
            Reads an EOP data file and returns a new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> instance
            initialized with the contents of the file.
            </summary>
      <param name="fileName">The name of the file from which to read.</param>
      <param name="readOptions">Options for reading the file.</param>
      <returns>A new <see cref="T:AGI.Foundation.Celestial.EarthOrientationParameters" /> initialized with the contents of the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="fileName" /> is null.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when there is an error parsing the EOP data specified by the <paramref name="fileName" />.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Celestial.EarthOrientationParametersReadOptions">
      <summary>
            Specifies options for reading an <see cref="T:AGI.Foundation.Celestial.EarthOrientationParametersFile" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EarthOrientationParametersReadOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Celestial.EarthOrientationParametersReadOptions" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.EarthOrientationParametersReadOptions.InterpretTimesUsingLeapSecondsFacet">
      <summary>
            Gets or sets a value indicating how times in the <see cref="T:AGI.Foundation.Celestial.EarthOrientationParametersFile" />
            should be interpreted.  When the value of this property is false, the default,
            <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime" /> (UTC) times in an EOP file are converted to
            <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime" /> (TAI) using the difference between the two that
            is specified in the EOP file itself.  This ensures that the absolute time of each EOP sample is as
            intended by the author of the file.  When the value of this property is false,
            the conversion to TAI is done using the list of leap seconds known to the <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" />
            in the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.  This is provided for compatibility with older versions
            of STK Components and other software that interprets the UTC times in an EOP file in this way.  Regardless
            of the value of this property, the leap seconds in the <see cref="T:AGI.Foundation.Time.LeapSecondsFacet" /> will be used if the
            EOP file itself does not contain any information about the difference between TAI and UTC.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.EquationOfEquinoxes">
      <summary>
        <para>
            Represents the equation of the equinox (also called the "nutation in right ascension" according
            to the Explanatory Supplement to the Astronomical Almanac) which defines the right ascension of
            the mean equinox with respect to the true equator and equinox.
            </para>
        <para>
            The two primary theories of the equation of the equinoxes are the 
            <see cref="T:AGI.Foundation.Celestial.ClassicalEquationOfEquinoxes" /> and the <see cref="P:AGI.Foundation.Celestial.IersTechnicalNote21.UpdatedEquationOfEquinoxes" />.
            To apply a particular theory to calculations involving the Earth, obtain an instance of the
            <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" /> from the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> and replace the
            existing <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.EquationOfEquinoxes" /> with a new instance.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.#ctor(AGI.Foundation.Celestial.EquationOfEquinoxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.CheckForSameDefinition(AGI.Foundation.Celestial.EquationOfEquinoxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.GetEquationOfTheEquinoxesEvaluator">
      <summary>
            Gets an evaluator to compute the equation of the equinoxes.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see> which represents the value of the equation of the equinoxes representing
            the offset between the mean and apparent equinoxes at the given <see cref="T:AGI.Foundation.Time.JulianDate" />.  No derivatives are provided, so the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />) method will return the
            same value as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;double&gt;.Value</see>.
            </para><para>
            The equation of the equinox uses a <see cref="T:AGI.Foundation.Celestial.NutationModel" /> and <see cref="T:AGI.Foundation.Celestial.PrecessionModel" /> defined by the
            instance of <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" /> in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> of the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </para></summary>
      <returns>An evaluator that evaluates the equation of the equinoxes.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.EquationOfEquinoxes.GetEquationOfTheEquinoxesEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to compute the equation of the equinoxes.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see> which represents the value of the equation of the equinoxes representing
            the offset between the mean and apparent equinoxes at the given <see cref="T:AGI.Foundation.Time.JulianDate" />.  No derivatives are provided, so the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />) method will return the
            same value as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;double&gt;.Value</see>.
            </para><para>
            The equation of the equinox uses a <see cref="T:AGI.Foundation.Celestial.NutationModel" /> and <see cref="T:AGI.Foundation.Celestial.PrecessionModel" /> defined by the
            instance of <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" /> in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> of the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator that evaluates the equation of the equinoxes.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Iau1976Precession">
      <summary>
            Provides Earth precession information according to the IAU 1976 model
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.#ctor">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Celestial.Iau1976Precession" /> object instance with default <see cref="P:AGI.Foundation.Celestial.Iau1976Precession.CacheSeconds" /> = 0.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.#ctor(AGI.Foundation.Celestial.Iau1976Precession,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Celestial.Iau1976Precession" /> instance.
            </summary>
      <param name="cacheSeconds">
            The number of seconds between dates required for <see cref="T:AGI.Foundation.Celestial.Iau1976Precession" />'s evaluator to compute a new
            precession.  Otherwise it will return the precession associated with last cached date.
            </param>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau1976Precession.CacheSeconds">
      <summary>
            Gets or sets the number of seconds required between dates before precession is recomputed
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.CheckForSameDefinition(AGI.Foundation.Celestial.Iau1976Precession)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.CheckForSameDefinition(AGI.Foundation.Celestial.PrecessionModel)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1976Precession.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to compute the <see cref="T:AGI.Foundation.Celestial.Precession" /> for a specified <see cref="T:AGI.Foundation.Time.JulianDate" />.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Celestial.Precession" />&gt; data type which represents the precession angles 
            at the given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This does not provide any derivatives, so the result of 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />)
            is the same as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;Precession&gt;.Value</see>.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Iau1980Nutation">
      <summary>
            Provides Earth Nutation information according to the IAU 1980 model
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.#ctor">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Celestial.Iau1980Nutation" /> object instance with default <see cref="P:AGI.Foundation.Celestial.Iau1980Nutation.CacheSeconds" /> = 0.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.#ctor(AGI.Foundation.Celestial.Iau1980Nutation,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:AGI.Foundation.Celestial.Iau1980Nutation" /> instance.
            </summary>
      <param name="cacheSeconds">
            The number of seconds between dates required for the nutation evaluator to compute a new
            nutation.  Otherwise it will return the nutation associated with last cached date.
            </param>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau1980Nutation.CacheSeconds">
      <summary>
            Gets or sets the number of seconds required between dates before nutation is recomputed
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.CheckForSameDefinition(AGI.Foundation.Celestial.Iau1980Nutation)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.CheckForSameDefinition(AGI.Foundation.Celestial.NutationModel)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau1980Nutation.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to compute the <see cref="T:AGI.Foundation.Celestial.Nutation" /> for a specified <see cref="T:AGI.Foundation.Time.JulianDate" />.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Celestial.Nutation" />&gt; data type which represents the nutation angles. 
            This does not provide any derivatives, so the result of 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />)
            is the same as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;Nutation&gt;.Value</see>.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Iau2000Orientation">
      <summary>
            This is a collection of the orientation information available for central bodies.
            The data comes from the Report of the IAU/IAG Working Group on Cartographic
            Coordinates and Rotational Elements: 2000.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeJupiter(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Jupiter.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Jupiter.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeMars(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Mars.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Mars.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeMercury(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Mercury.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Mercury.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeMoon(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for the Moon.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Earth's Moon.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeNeptune(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Neptune.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Neptune.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeSaturn(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Saturn.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Saturn.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeSun(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for the Sun.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of the Sun.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeUranus(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Uranus.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Uranus.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2000Orientation.ComputeVenus(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Venus.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Venus.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Iau2006Orientation">
      <summary>
            This is a collection of the orientation information available for central bodies.
            The data comes from the Report of the IAU/IAG Working Group on Cartographic
            Coordinates and Rotational Elements: 2006.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeJupiter(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Jupiter.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Jupiter.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeMars(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Mars.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Mars.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeMercury(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Mercury.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Mercury.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeMoon(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for the Moon.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Earth's Moon.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeNeptune(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Neptune.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Neptune.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeSaturn(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Saturn.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Saturn.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeSun(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for the Sun.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of the Sun.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeUranus(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Uranus.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Uranus.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006Orientation.ComputeVenus(AGI.Foundation.Time.JulianDate)">
      <summary>
            Compute the <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> for Venus.
            </summary>
      <param name="date">The date to evaluate the parameters.</param>
      <returns>The <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> representing the orientation of Venus.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Iau2006XysData">
      <summary>
            A table of IAU2006 XYS data that is used to evaluate the transformation between the International Celestial
            Reference Frame (ICRF) and the International Terrestrial Reference Frame (ITRF).  It is usually preferable to use
            the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> instances on <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" /> rather than using this table directly.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.DateOfLastSample">
      <summary>
            Gets the date of the last sample in the table.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Iau2006XysData.GetXysCopy">
      <summary>
            Gets a copy of the XYS data table.
            </summary>
      <returns>The XYS table.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.Instance">
      <summary>
            Gets the instance of the embedded IAU2006 XYS data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.InterpolationOrder">
      <summary>
            Gets the order of the Lagrange polynomial to use to interpolate the data in the table.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.NumberOfPoints">
      <summary>
            Gest the total number of samples in the XYS table.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.ReferenceEpoch">
      <summary>
            Gets the <see cref="P:AGI.Foundation.Celestial.Iau2006XysData.ReferenceEpochJulianEphemerisDate" /> expressed as a <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.ReferenceEpochJulianEphemerisDate">
      <summary>
            Gets the Julian Ephemeris Date (JED) of the first sample in the table.
            Julian Ephemeris Dates are in the <see cref="P:AGI.Foundation.Time.TimeStandard.TerrestrialTime" /> standard.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.StepSizeDays">
      <summary>
            Gets the step between samples in the table, in days.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.Updated">
      <summary>
            Gets a string containing the date on which the XYS data in the table was last updated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.Version">
      <summary>
            Gets the version of the XYS table.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.Xys">
      <summary>
            Gets the XYS table, in the order X0, Y0, S0, X1, Y1, S1, etc.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Iau2006XysData.XysAlgorithm">
      <summary>
            Gets the name of the algorithm used to generate the data held in the XYS table.
            This algorithm takes the fundamental arguments and astronomical standards and 
            computes the XYS values from the series approximations from ICRF theory.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.IauOrientationAxes">
      <summary>
            The Axes representing the orientation of a <see cref="T:AGI.Foundation.Celestial.CentralBody" /> as represented by the data
            from the IAU/IAG Working Group reports on rotational elements expressed in the 
            <see cref="P:AGI.Foundation.Celestial.SolarSystemBarycenter.InertialFrame">Inertial</see><see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> of the <see cref="T:AGI.Foundation.Celestial.SolarSystemBarycenter" />.
            See <see cref="T:AGI.Foundation.Celestial.Iau2006Orientation" /> for more details.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.#ctor(AGI.Foundation.Celestial.ComputeIauOrientationParameters)">
      <summary>
            Create a new set of Axes based on the given orientation function.        
            </summary>
      <param name="orientationFunction">The function which computes the 
            <see cref="T:AGI.Foundation.Celestial.IauOrientationParameters" /> given a <see cref="T:AGI.Foundation.Time.JulianDate" />.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.#ctor(AGI.Foundation.Celestial.IauOrientationAxes,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.CheckForSameDefinition(AGI.Foundation.Celestial.IauOrientationAxes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationAxes.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the orientation of a <see cref="T:AGI.Foundation.Celestial.CentralBody" /> based on the angles
            provided by the <see cref="P:AGI.Foundation.Celestial.IauOrientationAxes.OrientationFunction" />.  
            <para>
            The orientation is represented by a 
            <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  If the order passed into 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int)
            is greater than zero, the <see cref="T:AGI.Foundation.Motion`2" /> will include the angular velocity of the <see cref="T:AGI.Foundation.Celestial.CentralBody" />
            expressed in the <see cref="T:AGI.Foundation.Geometry.Axes" /> held in <see cref="P:AGI.Foundation.Geometry.AxesEvaluator.DefinedInIntervals" />[0] which corresponds to the 
            inertial <see cref="T:AGI.Foundation.Geometry.Axes" /> of the <see cref="T:AGI.Foundation.Celestial.SolarSystemBarycenter" /> from  
            <see cref="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetFromContext" />.  
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The axes evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.IauOrientationAxes.OrientationFunction">
      <summary>
            Gets or sets the function which computes the orientation parameters of these axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.IauOrientationParameters">
      <summary>
            A structure containing the orientation data computed at a particular time.  The data 
            represent the direction of the pole of rotation and the rotation about that pole.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationParameters.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Instantiate a new instance.
            </summary>
      <param name="rightAscension">The right ascension of the pole, in radians.</param>
      <param name="declination">The declination of the pole, in radians.</param>
      <param name="rotation">The rotation about the pole, in radians.</param>
      <param name="rotationRate">The rotation rate about the pole, in radians per second.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.IauOrientationParameters.Declination">
      <summary>
            Gets the declination of the north pole of the body with respect to
            the International Celestial Reference Frame, in radians.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationParameters.Equals(AGI.Foundation.Celestial.IauOrientationParameters)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationParameters.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationParameters.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationParameters.op_Equality(AGI.Foundation.Celestial.IauOrientationParameters,AGI.Foundation.Celestial.IauOrientationParameters)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IauOrientationParameters.op_Inequality(AGI.Foundation.Celestial.IauOrientationParameters,AGI.Foundation.Celestial.IauOrientationParameters)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.IauOrientationParameters.RightAscension">
      <summary>
            Gets the right ascension of the north pole of the body with respect to
            the International Celestial Reference Frame, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.IauOrientationParameters.Rotation">
      <summary>
            Gets the rotation about the north pole used to align a set of axes
            with the meridian defined by the IAU report, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.IauOrientationParameters.RotationRate">
      <summary>
            Gets the instantaneous rotation rate about the north pole, in radians per second.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.IersTechnicalNote21">
      <summary>
            Provides Earth orientation parameters according to the IERS Technical Note 21.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.IersTechnicalNote21.GetGreenwichHourAngle(AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the hour angle measured using the Greenwich mean sidereal time.
            </summary>
      <param name="date">The date at which to retrieve the hour angle.</param>
      <returns>The Greenwich hour angle (GHA), in radians.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IersTechnicalNote21.GetGreenwichMeanSiderealTime(AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the mean sidereal time of Greenwich at the provided Julian date.
            </summary>
      <param name="date">The date at which to retrieve the mean sidereal time</param>
      <returns>The mean sidereal time of Greenwich, in seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IersTechnicalNote21.GetGreenwichMeanSiderealTimeOfMidnight(AGI.Foundation.Time.JulianDate)">
      <summary>
            Computes the mean sidereal time of Greenwich at 0hr UT1 on the provided Julian date.
            </summary>
      <param name="date">The date at which to retrieve the mean sidereal time</param>
      <returns>The mean sidereal time of Greenwich at 0hr UT1, in seconds.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IersTechnicalNote21.GetGreenwichTrueSiderealTimeEvaluator">
      <summary>
            Gets an evaluator that computes the true sidereal time of Greenwich.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see> which represents the value of the Greenwich true sidereal time 
            in seconds at the given <see cref="T:AGI.Foundation.Time.JulianDate" />.  No derivatives are provided, so the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />) method will return the
            same value as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;double&gt;.Value</see>.
            </para></summary>
      <returns>An evaluator that computes the true sidereal time of Greenwich</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.IersTechnicalNote21.GetGreenwichTrueSiderealTimeEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that computes the true sidereal time of Greenwich.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;double&gt;</see> which represents the value of the Greenwich true sidereal time 
            in seconds at the given <see cref="T:AGI.Foundation.Time.JulianDate" />.  No derivatives are provided, so the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0)">Evaluate</see>(<see cref="T:AGI.Foundation.Time.JulianDate" />) method will return the
            same value as <see cref="P:AGI.Foundation.Motion`1.Value">Motion&lt;double&gt;.Value</see>.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator that computes the true sidereal time of Greenwich</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.IersTechnicalNote21.Updated1980NutationModel">
      <summary>
            Gets an instance of the nutation model published by the
            IERS in 1996 to modify the fundamental arguments of the 
            IAU1980 Nutation theory.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.IersTechnicalNote21.UpdatedEquationOfEquinoxes">
      <summary>
            Gets an instance of the updated equation of the equinoxes published by the
            IERS in 1996.  The updated equation defines the right ascension of the 
            mean equinox with respect to the true equator and equinox with the addition
            of periodic terms involving the right ascension of the moon.  
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDE">
      <summary>
            The common base for classes for loading and accessing JPL DE files.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.#ctor(AGI.Foundation.Celestial.JplDE,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.#ctor(AGI.Foundation.Celestial.JplDEFile)">
      <summary>
            Initializes an instance using the specified <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance.
            </summary>
      <param name="file">The <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance to use.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.#ctor(AGI.Foundation.Infrastructure.StreamFactory)">
      <summary>
            Initializes a new instance with the specified stream factory.
            </summary>
      <param name="streamFactory">The factory to use to create streams to read the JPL DE data.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.#ctor(System.String)">
      <summary>
            Initializes an instance using the specified JPL DE filename.
            </summary>
      <param name="fileName">The full path and filename of the JPL DE file.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.EarthMoonMassRatio">
      <summary>
            Gets the ratio of the mass of the earth to the mass of the moon.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.File">
      <summary>
            Gets the raw JPL DE file represented by this instance.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.FinalEpoch">
      <summary>
            Gets the last epoch for which ephemeris data is available.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.GetCenterOfMassPoint(AGI.Foundation.Celestial.JplDECentralBody)">
      <summary>
            Gets a point which represents the center of mass of the given <see cref="T:AGI.Foundation.Celestial.JplDECentralBody" />.
            </summary>
      <param name="centralBody">An enumeration indicating the central body to create.</param>
      <returns>The Point representing the central body.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.GetEarthNutationModel">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Celestial.NutationModel" /> which uses this JPL DE data for the nutation of the Earth.
            </summary>
      <returns>The Earth's nutation.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.GetGravitationalParameter(AGI.Foundation.Celestial.JplDECentralBody)">
      <summary>
            Gets the gravitational parameter of a central body in SI units (m^3/s^2).
            </summary>
      <param name="centralBody">The central body for which to retrieve information.</param>
      <returns>The gravitational parameter of the specified central body, in m^3/s^2.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.GetGravitationalParameterNative(AGI.Foundation.Celestial.JplDECentralBody)">
      <summary>
            Gets the gravitational parameter of a central body in AU^3/day^2.
            </summary>
      <param name="centralBody">The central body for which to retrieve information.</param>
      <returns>The gravitational parameter of the specified central body, in AU^3/day^2.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.InitialEpoch">
      <summary>
            Gets the first epoch for which ephemeris data is available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.KilometersPerAstronomicalUnit">
      <summary>
            Gets the number of kilometers (km) in one astronomical unit (AU)
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.LunarEphemerisNumber">
      <summary>
            Gets the number indicating the source of the data.  For example,
            '405' indicates the DE405 emphemerides.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.PlanetaryEphemerisNumber">
      <summary>
            Gets the number indicating the source of the data.  For example,
            '405' indicates the DE405 emphemerides.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.SpeedOfLight">
      <summary>
            Gets the speed of light in km/s
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE.Titles">
      <summary>
            Gets the collection of titles.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE.UseForCentralBodyPositions(AGI.Foundation.Celestial.CentralBodiesFacet)">
      <summary>
            Uses this JPLDE data for the positions of the centers of mass of the central
            bodies in the specified <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> instance.
            </summary>
      <param name="centralBodies">The central bodies to update to use this JPLDE data.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="centralBodies" /> is null.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDE200">
      <summary>
            Represents JPL DE200 ephemeris data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.#ctor(AGI.Foundation.Celestial.JplDE200,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.#ctor(AGI.Foundation.Celestial.JplDEFile)">
      <summary>
            Initializes an instance using the specified <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance.
            </summary>
      <param name="file">The <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance to use.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="file" /> is not a valid
            JplDE200 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.#ctor(AGI.Foundation.Infrastructure.StreamFactory)">
      <summary>
            Initializes a new instance with the specified stream factory.
            </summary>
      <param name="streamFactory">The factory to use to create streams to read the JPL DE data.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="streamFactory" /> is not a valid
            JplDE200 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.#ctor(System.String)">
      <summary>
            Initializes an instance using the specified JPL DE filename.
            </summary>
      <param name="fileName">The full path and filename of the JPL DE file.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="fileName" /> is not a valid
            JplDE200 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE200)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE200.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.EarthRadius">
      <summary>
            Gets the radius of Earth in kilometers.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDE200.EphemerisNumber">
      <summary>
            The <see cref="P:AGI.Foundation.Celestial.JplDE.PlanetaryEphemerisNumber" /> represented by this class.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.JupiterRadius">
      <summary>
            Gets the radius of Jupiter in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.MarsRadius">
      <summary>
            Gets the radius of Mars in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.MercuryRadius">
      <summary>
            Gets the radius of Mercury in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.MoonRadius">
      <summary>
            Gets the radius of Moon in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.NeptuneRadius">
      <summary>
            Gets the radius of Neptune in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.PlutoRadius">
      <summary>
            Gets the radius of Pluto in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.SaturnRadius">
      <summary>
            Gets the radius of Saturn in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.Source">
      <summary>
            Gets the string describing the source of the data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.SunRadius">
      <summary>
            Gets the radius of Sun in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.UranusRadius">
      <summary>
            Gets the radius of Uranus in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE200.VenusRadius">
      <summary>
            Gets the radius of Venus in kilometers.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDE403">
      <summary>
            Represents JPL DE403 ephemeris data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.#ctor(AGI.Foundation.Celestial.JplDE403,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.#ctor(AGI.Foundation.Celestial.JplDEFile)">
      <summary>
            Initializes an instance using the specified <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance.
            </summary>
      <param name="file">The <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance to use.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="file" /> is not a valid
            JplDE403 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.#ctor(AGI.Foundation.Infrastructure.StreamFactory)">
      <summary>
            Initializes a new instance with the specified stream factory.
            </summary>
      <param name="streamFactory">The factory to use to create streams to read the JPL DE data.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="streamFactory" /> is not a valid
            JplDE403 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.#ctor(System.String)">
      <summary>
            Initializes an instance using the specified JPL DE filename.
            </summary>
      <param name="fileName">The full path and filename of the JPL DE file.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="fileName" /> is not a valid
            JplDE403 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE403)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE403.EarthRadius">
      <summary>
            Gets the radius of Earth in kilometers.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDE403.EphemerisNumber">
      <summary>
            The <see cref="P:AGI.Foundation.Celestial.JplDE.PlanetaryEphemerisNumber" /> represented by this class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.GetMoonFixedFrame">
      <summary>
            Uses the JplDE403 data to return the orientation and position of the Moon's principal axes of inertia to define a fixed
            frame.  This is useful as a frame in which to describe the gravity of the Moon.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.Geometry.Axes" /> representing the orientation and position of the Moon.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.GetMoonLibrationModel">
      <summary>
            Uses the JplDE403 data to return the librations for the Moon.
            </summary>
      <returns>Lunar libration in radians and radians/second.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE403.GetMoonTopographicFixedFrame">
      <summary>
            Uses the JplDE403 data to return the orientation and position of the Moon's "Mean Earth" axes which define a fixed
            frame with the z-axis pointing toward the mean axis of rotation, the x-axis pointing toward the mean 
            direction to the Earth, and the y-axis orthogonal.  This is useful for describing topographic features
            on the Moon.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> representing the orientation and position of the Moon.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE403.Source">
      <summary>
            Gets the string describing the source of the data.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDE405">
      <summary>
            Represents JPL DE405 ephemeris data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.#ctor(AGI.Foundation.Celestial.JplDE405,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.#ctor(AGI.Foundation.Celestial.JplDEFile)">
      <summary>
            Initializes an instance using the specified <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance.
            </summary>
      <param name="file">The <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance to use.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="file" /> is not a valid
            JplDE405 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.#ctor(AGI.Foundation.Infrastructure.StreamFactory)">
      <summary>
            Initializes a new instance with the specified stream factory.
            </summary>
      <param name="streamFactory">The factory to use to create streams to read the JPL DE data.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="streamFactory" /> is not a valid
            JplDE405 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.#ctor(System.String)">
      <summary>
            Initializes an instance using the specified JPL DE filename.
            </summary>
      <param name="fileName">The full path and filename of the JPL DE file.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="fileName" /> is not a valid
            JplDE405 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE405)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE405.EarthRadius">
      <summary>
            Gets the radius of Earth in kilometers.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDE405.EphemerisNumber">
      <summary>
            The <see cref="P:AGI.Foundation.Celestial.JplDE.PlanetaryEphemerisNumber" /> represented by this class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.GetMoonFixedFrame">
      <summary>
            Uses the JplDE405 data to return the orientation and position of the Moon's principal axes of inertia to define a fixed
            frame.  This is useful as a frame in which to describe the gravity of the Moon.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> representing the orientation and position of the Moon.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.GetMoonLibrationModel">
      <summary>
            Uses the JplDE405 data to return the librations for the Moon.
            </summary>
      <returns>Lunar libration in radians and radians/second.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE405.GetMoonTopographicFixedFrame">
      <summary>
            Uses the JplDE405 data to return the orientation and position of the Moon's "Mean Earth" axes which define a fixed
            frame with the z-axis pointing toward the mean axis of rotation, the x-axis pointing toward the mean 
            direction to the Earth, and the y-axis orthogonal.  This is useful for describing topographic features
            on the Moon.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> representing the orientation and position of the Moon.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE405.MarsRadius">
      <summary>
            Gets the radius of Mars in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE405.MercuryRadius">
      <summary>
            Gets the radius of Mercury in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE405.Source">
      <summary>
            Gets the string describing the source of the data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE405.VenusRadius">
      <summary>
            Gets the radius of Venus in kilometers.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDE421">
      <summary>
            Represents JPL DE421 ephemeris data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.#ctor(AGI.Foundation.Celestial.JplDE421,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.#ctor(AGI.Foundation.Celestial.JplDEFile)">
      <summary>
            Initializes an instance using the specified <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance.
            </summary>
      <param name="file">The <see cref="T:AGI.Foundation.Celestial.JplDEFile" /> instance to use.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="file" /> is not a valid
            JplDE421 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.#ctor(AGI.Foundation.Infrastructure.StreamFactory)">
      <summary>
            Initializes a new instance with the specified stream factory.
            </summary>
      <param name="streamFactory">The factory to use to create streams to read the JPL DE data.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="streamFactory" /> is not a valid
            JplDE421 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.#ctor(System.String)">
      <summary>
            Initializes an instance using the specified JPL DE filename.
            </summary>
      <param name="fileName">The full path and filename of the JPL DE file.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the file specified by the <paramref name="fileName" /> is not a valid
            JplDE421 file.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.CheckForSameDefinition(AGI.Foundation.Celestial.JplDE421)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE421.EarthRadius">
      <summary>
            Gets the radius of Earth in kilometers.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDE421.EphemerisNumber">
      <summary>
            The <see cref="P:AGI.Foundation.Celestial.JplDE.PlanetaryEphemerisNumber" /> represented by this class.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.GetMoonFixedFrame">
      <summary>
            Uses the JplDE421 data to return the orientation and position of the Moon's principal axes of inertia to define a fixed
            frame.  This is useful as a frame in which to describe the gravity of the Moon.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> representing the orientation and position of the Moon.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.GetMoonLibrationModel">
      <summary>
            Uses the JplDE421 data to return the librations for the Moon.
            </summary>
      <returns>Lunar libration in radians and radians/second.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDE421.GetMoonTopographicFixedFrame">
      <summary>
            Uses the JplDE421 data to return the orientation and position of the Moon's "Mean Earth" axes which define a fixed
            frame with the z-axis pointing toward the mean axis of rotation, the x-axis pointing toward the mean 
            direction to the Earth, and the y-axis orthogonal.  This is useful for describing topographic features
            on the Moon.
            </summary>
      <returns>An <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> representing the orientation and position of the Moon.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE421.MarsRadius">
      <summary>
            Gets the radius of Mars in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE421.MercuryRadius">
      <summary>
            Gets the radius of Mercury in kilometers.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE421.Source">
      <summary>
            Gets the string describing the source of the data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDE421.VenusRadius">
      <summary>
            Gets the radius of Venus in kilometers.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDECentralBody">
      <summary>
            The central bodies referenced in a JPL DE file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Mercury">
      <summary>
            Planet Mercury
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Venus">
      <summary>
            Planet Venus
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Earth">
      <summary>
            Planet Earth
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Mars">
      <summary>
            Planet Mars
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Jupiter">
      <summary>
            Planet Mercury
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Saturn">
      <summary>
            Planet Saturn
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Uranus">
      <summary>
            Planet Uranus
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Neptune">
      <summary>
            Planet Neptune
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Pluto">
      <summary>
            Planet Pluto
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Moon">
      <summary>
            Earth's Moon in Geocentric coordinates
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDECentralBody.Sun">
      <summary>
            The Sun
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDEDataIndex">
      <summary>
            Indices of the data available in a JPL DE file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Mercury">
      <summary>
            Planet Mercury
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Venus">
      <summary>
            Planet Venus
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.EarthMoonBarycenter">
      <summary>
            The barycenter of the Earth-Moon system
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Mars">
      <summary>
            Planet Mars
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Jupiter">
      <summary>
            Planet Jupiter
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Saturn">
      <summary>
            Planet Saturn
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Uranus">
      <summary>
            Planet Uranus
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Neptune">
      <summary>
            Planet Neptune
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Pluto">
      <summary>
            Planet Pluto
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Moon">
      <summary>
            Earth's Moon in Geocentric coordinates
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Sun">
      <summary>
            The sun
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Nutation">
      <summary>
            Earth Nutation
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.Libration">
      <summary>
            Lunar Libration
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.JplDEDataIndex.NumberOfIndexes">
      <summary>
            The number of indices in a JPL DE file
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDEFile">
      <summary>
            Provides raw access to a JPL DE file
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.#ctor(AGI.Foundation.Celestial.JplDEFile,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.#ctor(AGI.Foundation.Infrastructure.StreamFactory)">
      <summary>
            Initializes a new instance with the specified stream factory.
            </summary>
      <param name="streamFactory">The factory to use to create streams to read the JPL DE data.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.#ctor(System.String)">
      <summary>
            Initializes an instance using the specified JPL DE filename.
            </summary>
      <param name="fileName">The full path and filename of the JPL DE file.</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.CheckForSameDefinition(AGI.Foundation.Celestial.JplDEFile)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDEFile.Constants">
      <summary>
            Gets an enumerator for the constants in the file.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDEFile.DaysPerBlock">
      <summary>
            Gets the number of days in each data block.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDEFile.FinalEpoch">
      <summary>
            Gets the final epoch for which this file contains data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.GetConstantValue(System.String)">
      <summary>
            Retrieves the value associated with the named constant.
            </summary>
      <param name="name">The name of the constant to retrieve.</param>
      <returns>The value of the constant with the specified name.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.GetEvaluator(AGI.Foundation.Celestial.JplDEDataIndex)">
      <summary>
            Gets an evaluator that can be used to produce the time-varying information based on this JPL DE file.
            The evaluator will produce an array of double values corresponding to the data for the given <see cref="T:AGI.Foundation.Celestial.JplDEDataIndex" />
            for a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            </summary>
      <param name="index">The index of the data to evaluate.</param>
      <returns>An evaluator used to calculate time-varying information in the file.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.GetEvaluator(AGI.Foundation.Celestial.JplDEDataIndex,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to calculate time-varying information in the file.
            </summary>
      <param name="index">The index of the data to evaluate.</param>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator used to calculate time-varying information in the file.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDEFile.InitialEpoch">
      <summary>
            Gets the initial epoch for which this file contains data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.JedToJulianDate(System.Double)">
      <summary>
            Converts a Julian ephemeris date to a Julian epoch.
            </summary>
      <param name="jed">The Julian ephemeris date to convert.</param>
      <returns>The corresponding Julian epoch in <see cref="P:AGI.Foundation.Time.TimeStandard.BarycentricDynamicalTime" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFile.JulianDateToJed(AGI.Foundation.Time.JulianDate)">
      <summary>
            Converts a Julian epoch to a Julian ephemeris date.
            </summary>
      <param name="epoch">The Julian epoch to convert in <see cref="P:AGI.Foundation.Time.TimeStandard.BarycentricDynamicalTime" />.</param>
      <returns>The corresponding Julian ephemeris date.</returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.JplDEFile.Titles">
      <summary>
            Gets the titles of this file.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.JplDEFileEvaluator">
      <summary>
            The class returned by <see cref="M:AGI.Foundation.Celestial.JplDEFile.GetEvaluator(AGI.Foundation.Celestial.JplDEDataIndex,AGI.Foundation.EvaluatorGroup)" /> to allow calculation of
            time-varying information in the JPL DE file.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFileEvaluator.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.JplDEFileEvaluator.#ctor(AGI.Foundation.Celestial.JplDEFileEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="T:AGI.Foundation.Celestial.LibrationModel">
      <summary>
            A model of the libration of a central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.#ctor(AGI.Foundation.Celestial.LibrationModel,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.CheckForSameDefinition(AGI.Foundation.Celestial.LibrationModel)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.GetEvaluator">
      <summary>
            Gets an evaluator to evaluate the libration at given dates.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>
            (<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.EulerSequence" />&gt; data type which represents the libration angles 
            and may also provide their derivatives.  To check whether a particular <see cref="T:AGI.Foundation.Celestial.LibrationModel" /> provides libration rates, see the 
            <see cref="P:AGI.Foundation.Motion`1.Order">Motion&lt;EulerSequence&gt;.Order</see> property on the result returned from the evaluator.  
            </para></summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.LibrationModel.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to evaluate the libration at given dates.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>
            (<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.EulerSequence" />&gt; data type which represents the libration angles 
            and may also provide their derivatives.  To check whether a particular <see cref="T:AGI.Foundation.Celestial.LibrationModel" /> provides libration rates, see the 
            <see cref="P:AGI.Foundation.Motion`1.Order">Motion&lt;EulerSequence&gt;.Order</see> property on the result returned from the evaluator.  
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.MoonCentralBody">
      <summary>
            The moon of the Earth.  You should generally obtain an instance of this class from
            the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> instance in the calculation context instead of creating one directly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.#ctor(AGI.Foundation.Celestial.MoonCentralBody,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.MoonCentralBody.CenterOfMassPoint">
      <summary>
        Gets or sets a point describing the center of mass of this central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.CentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.MoonCentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.MoonCentralBody.FixedFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the surface features of this central body.
      </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.MoonCentralBody.Iau2000MeanLunarRadius">
      <summary>
            The mean radius of the moon, according to the "Report of the IAU/IAG Working Group on
            Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000", 
            Celestial Mechanics 82: 83-110, 2002.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.MoonCentralBody.InertialFrame">
      <summary>
        Gets or sets the default Inertial frame for this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.MoonCentralBody.Name">
      <summary>
        Gets or sets the name of the central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.MoonCentralBody.PrincipalFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the gravity frame of this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.MoonCentralBody.Shape">
      <summary>
        Gets or sets the shape of this central body.  If the central
        body does not have a shape (for example, a libration point)
        this property will be null.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.MoonCentralBody.SynchronizeOrigins">
      <summary>
            Sets the <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Origin" /> of the <see cref="P:AGI.Foundation.Celestial.MoonCentralBody.InertialFrame" />,
            <see cref="P:AGI.Foundation.Celestial.MoonCentralBody.FixedFrame" />, and <see cref="P:AGI.Foundation.Celestial.MoonCentralBody.PrincipalFrame" /> to the
            <see cref="P:AGI.Foundation.Celestial.MoonCentralBody.CenterOfMassPoint" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.Nutation">
      <summary>
            Holds nutation angles in longitude and in obliquity.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Nutation.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new Nutation with specified angles in longitude and in obliquity.
            </summary>
      <param name="longitude">The nutation in longitude, in radians</param>
      <param name="obliquity">The nutation in obliquity, in radians</param>
      <param name="omega">The longitude of the mean ascending node of the lunar orbit on the
            ecliptic plane measured from the mean equinox of date, in radians</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.Nutation.Equals(AGI.Foundation.Celestial.Nutation)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Nutation.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Nutation.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.Nutation.Longitude">
      <summary>
            Gets the nutation in longitude, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Nutation.Obliquity">
      <summary>
            Gets the nutation in obliquity, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Nutation.Omega">
      <summary>
            Gets the longitude of the mean ascending node of the lunar orbit on the ecliptic plane measured
            from the mean equinox of date.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Nutation.op_Equality(AGI.Foundation.Celestial.Nutation,AGI.Foundation.Celestial.Nutation)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Nutation.op_Inequality(AGI.Foundation.Celestial.Nutation,AGI.Foundation.Celestial.Nutation)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.NutationModel">
      <summary>
            A model of the nutation of a central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.#ctor(AGI.Foundation.Celestial.NutationModel,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.CheckForSameDefinition(AGI.Foundation.Celestial.NutationModel)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.GetEvaluator">
      <summary>
            Gets an evaluator to evaluate the nutation at given dates.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>
            (<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Celestial.Nutation" />&gt; data type which represents the nutation angles 
            and may also provide their derivatives.  To check whether a particular <see cref="T:AGI.Foundation.Celestial.NutationModel" /> provides nutation rates, see the 
            <see cref="P:AGI.Foundation.Motion`1.Order">Motion&lt;Nutation&gt;.Order</see> property on the result returned from the evaluator.  
            </para></summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.NutationModel.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to evaluate the nutation at given dates.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>
            (<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Celestial.Nutation" />&gt; data type which represents the nutation angles 
            and may also provide their derivatives.  To check whether a particular <see cref="T:AGI.Foundation.Celestial.NutationModel" /> provides nutation rates, see the 
            <see cref="P:AGI.Foundation.Motion`1.Order">Motion&lt;Nutation&gt;.Order</see> property on the result returned from the evaluator.  
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Precession">
      <summary>
            Holds precession angles.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Precession.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new Precession structure with the values provided.
            </summary>
      <param name="zeta">A precession angle, in radians</param>
      <param name="z">A precession angle, in radians</param>
      <param name="theta">A precession angle, in radians</param>
      <param name="meanObliquity">The mean obliquity of the ecliptic, in radians</param>
    </member>
    <member name="M:AGI.Foundation.Celestial.Precession.Equals(AGI.Foundation.Celestial.Precession)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Precession.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Precession.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.Precession.MeanObliquity">
      <summary>
            Gets the mean obliquity of the ecliptic, in radians.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.Precession.op_Equality(AGI.Foundation.Celestial.Precession,AGI.Foundation.Celestial.Precession)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.Precession.op_Inequality(AGI.Foundation.Celestial.Precession,AGI.Foundation.Celestial.Precession)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Celestial.Precession.Theta">
      <summary>
            Gets the accumulated precession angle theta, in radians, used to tilt the x-y-plane to the mean equator of date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Precession.Z">
      <summary>
            Gets the accumulated precession angle z, in radians, used to align the x-axis with the mean equinox of date by rotating
            along the mean equator of date.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Precession.Zeta">
      <summary>
            Gets the accumulated precession angle zeta, in radians, used to align the x-axis toward the direction in which 
            the pole is to be tilted off of the ICRF z-axis.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.PrecessionModel">
      <summary>
            A model of the precession of a central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.#ctor(AGI.Foundation.Celestial.PrecessionModel,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.CheckForSameDefinition(AGI.Foundation.Celestial.PrecessionModel)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.GetEvaluator">
      <summary>
            Gets an evaluator to evaluate the precession at given dates.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>
            (<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Celestial.Precession" />&gt; data type which represents the precession angles and
            may also provide their derivatives.  To check whether a particular <see cref="T:AGI.Foundation.Celestial.PrecessionModel" /> provides precession rates, see the 
            <see cref="P:AGI.Foundation.Motion`1.Order">Motion&lt;Precession&gt;.Order</see> property on the result returned from the evaluator.  
            </para></summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.PrecessionModel.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator to evaluate the precession at given dates.
            <para>
            The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate</see>
            (<see cref="T:AGI.Foundation.Time.JulianDate" />,int) method
            will be a <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Celestial.Precession" />&gt; data type which represents the precession angles and
            may also provide their derivatives.  To check whether a particular <see cref="T:AGI.Foundation.Celestial.PrecessionModel" /> provides precession rates, see the 
            <see cref="P:AGI.Foundation.Motion`1.Order">Motion&lt;Precession&gt;.Order</see> property on the result returned from the evaluator.  
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Celestial.Simon1994PlanetaryPositions">
      <summary>
            Provides <see cref="T:AGI.Foundation.Geometry.Point" /> instances representing the positions of the planets computed using the
            equations described in <i>Simon J.L., Bretagnon P., Chapront J., Chapront-Touze M., Francou G., Laskar J.,
            1994, A&amp;A 282, 663-683</i>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Earth">
      <summary>
            Gets a point describing the motion of the Earth.  This point uses the <see cref="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Moon" /> point and
            the 1992 mu value (ratio between Moon and Earth masses) in Table 2 of the paper in order
            to determine the position of the Earth relative to the Earth-Moon barycenter.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.EarthMoonBarycenter">
      <summary>
            Gets a point describing the motion of the Earth-Moon barycenter according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Jupiter">
      <summary>
            Gets a point describing the motion of Jupiter according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Mars">
      <summary>
            Gets a point describing the motion of Mars according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Mercury">
      <summary>
            Gets a point describing the motion of Mercury according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Moon">
      <summary>
            Gets a point describing the position of the moon according to the equations described in
            section 4.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Neptune">
      <summary>
            Gets a point describing the motion of Neptune according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Saturn">
      <summary>
            Gets a point describing the motion of Saturn according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Uranus">
      <summary>
            Gets a point describing the motion of Uranus according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.Simon1994PlanetaryPositions.Venus">
      <summary>
            Gets a point describing the motion of Venus according to the equations
            described in section 6.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.SolarSystemBarycenter">
      <summary>
            The barycenter of the solar system.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.#ctor(AGI.Foundation.Celestial.SolarSystemBarycenter,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.SolarSystemBarycenter.CenterOfMassPoint">
      <summary>
        Gets or sets a point describing the center of mass of this central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.CheckForSameDefinition(AGI.Foundation.Celestial.SolarSystemBarycenter)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SolarSystemBarycenter.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.SolarSystemBarycenter.InertialFrame">
      <summary>
        Gets or sets the default Inertial frame for this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SolarSystemBarycenter.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SolarSystemBarycenter.Name">
      <summary>
        Gets or sets the name of the central body.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.SunCentralBody">
      <summary>
            The star at the center of our solar system.  You should generally obtain an instance of this class from
            the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> instance in the calculation context instead of creating one directly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.#ctor(AGI.Foundation.Celestial.SunCentralBody,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.CenterOfMassPoint">
      <summary>
        Gets or sets a point describing the center of mass of this central body.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.CentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.CheckForSameDefinition(AGI.Foundation.Celestial.SunCentralBody)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.FixedFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the surface features of this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.InertialFrame">
      <summary>
        Gets or sets the default Inertial frame for this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.J2000Frame">
      <summary>
            Gets or sets the J2000 frame centered at the Sun.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.SunCentralBody.MeanSolarRadius1992Seidelmann">
      <summary>
            The mean radius of the solar photosphere as observed in 1992: 6.96E8 meters.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.SunCentralBody.MeanSolarRadius1993Prussing">
      <summary>
            The mean radius of the solar photosphere as observed in 1993: 6.9599E8 meters.
            This is the value used in STK 9.0.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.SunCentralBody.MeanSolarRadius2007Carroll">
      <summary>
            The mean radius of the solar photosphere as observed in 2007: 6.95508E8 meters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.Name">
      <summary>
        Gets or sets the name of the central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.PrincipalFrame">
      <summary>
        Gets or sets the default Fixed frame that corresponds to the gravity frame of this central body.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.SunCentralBody.Shape">
      <summary>
        Gets or sets the shape of this central body.  If the central
        body does not have a shape (for example, a libration point)
        this property will be null.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Celestial.SunCentralBody.SynchronizeOrigins">
      <summary>
            Sets the <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Origin" /> of the <see cref="P:AGI.Foundation.Celestial.SunCentralBody.InertialFrame" />,
            <see cref="P:AGI.Foundation.Celestial.SunCentralBody.J2000Frame" />, <see cref="P:AGI.Foundation.Celestial.SunCentralBody.FixedFrame" />, and
            <see cref="P:AGI.Foundation.Celestial.SunCentralBody.PrincipalFrame" /> to the current <see cref="P:AGI.Foundation.Celestial.SunCentralBody.CenterOfMassPoint" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Celestial.WorldGeodeticSystem1984">
      <summary>
            Provides the set of four World Geodetic System of 1984, WGS84 (G873), defining constants according
            to Table 3.1 on page 3-5 of the National Imagery and Mapping Agency Technical Report TR8350.2,
            Third Edition, Amendment 1, 3 January 2000.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.WorldGeodeticSystem1984.AngularVelocity">
      <summary>
            The angular velocity of the Earth in radians per second as defined by the WGS84 model.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.WorldGeodeticSystem1984.GravitationalParameter">
      <summary>
            The gravitational parameter of the Earth in meters cubed per second squared as defined by the WGS84 model.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.WorldGeodeticSystem1984.ReciprocalOfFlattening">
      <summary>
            The reciprocal of flattening of the Earth as defined by the WGS84 model.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Celestial.WorldGeodeticSystem1984.SemimajorAxis">
      <summary>
            The semimajor axis of the Earth in meters as defined by the WGS84 model.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Celestial.WorldGeodeticSystem1984.Shape">
      <summary>
            Gets the shape of the Earth as defined by the WGS84 model.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.StateElementAdapter">
      <summary>
            The base type for all <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">StateElementAdapters</see>. This type 
            will extract one <see cref="T:AGI.Foundation.Coordinates.IMotionState">state's</see><see cref="T:AGI.Foundation.Motion`1" /> of a 
            specified element, possibly perform some operation on that <see cref="T:AGI.Foundation.Motion`1" />, and 
            store that modified <see cref="T:AGI.Foundation.Motion`1" /> into the second <see cref="T:AGI.Foundation.Coordinates.IMotionState" />.  
            These objects should always be created by a <see cref="T:AGI.Foundation.Coordinates.StateElementAdapterFactory" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.#ctor(AGI.Foundation.Coordinates.StateElementAdapter,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance.  However the <see cref="M:AGI.Foundation.Coordinates.StateElementAdapter.Initialize(System.Object,AGI.Foundation.EvaluatorGroup)" /> method will
            need to be called with the previous defined-in object.
            </summary>
      <param name="element">The name of the element getting adapted.</param>
      <param name="currentDefinedIn">The object that defines how the <paramref name="element" /> is represented in the state getting modified. 
            Generally this is a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />, <see cref="T:AGI.Foundation.Geometry.Axes" />, or null.</param>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.StateElementAdapter.ElementDefinedIn">
      <summary>
            Gets the object that defines how the element is represented in the state getting modified.  Generally 
            this is a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />, <see cref="T:AGI.Foundation.Geometry.Axes" />, or null.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coordinates.StateElementAdapter.ElementIdentification">
      <summary>
            Gets the identification of the element to be adapted.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.Initialize(System.Object,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initializes this instance so that it can modify an <see cref="T:AGI.Foundation.Coordinates.IMotionState" />. This should also set <see cref="P:AGI.Foundation.Coordinates.StateElementAdapter.PreviousElementDefinedIn" />. 
            If (for example) a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> transformation should be done by this adapter, this method would create 
            and store the <see cref="T:AGI.Foundation.Geometry.ReferenceFrameEvaluator" /> in this method.
            </summary>
      <param name="oldDefinedIn">The object that defines how the element in the original state is represented.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use in creating any needed <see cref="T:AGI.Foundation.IEvaluator">evaluators</see>.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.StateElementAdapter.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapter.ModifyElementInState(AGI.Foundation.Coordinates.IMotionState,AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            This will extract the <see cref="T:AGI.Foundation.Motion`1" /> of the <see cref="P:AGI.Foundation.Coordinates.StateElementAdapter.ElementIdentification" /> in the <paramref name="oldState" />, 
            possibly perform some transformation on that <see cref="T:AGI.Foundation.Motion`1" />, and then modify the <paramref name="stateToModify" /> 
            with that new <see cref="T:AGI.Foundation.Motion`1" />.
            </summary>
      <param name="oldState">The state whose <see cref="P:AGI.Foundation.Coordinates.StateElementAdapter.ElementIdentification">ElementIdentifications</see><see cref="T:AGI.Foundation.Motion`1" /> will be extracted.</param>
      <param name="stateToModify">The state to save the <see cref="T:AGI.Foundation.Motion`1" /> (which may have been modified) from the 
            <paramref name="oldState" />.</param>
    </member>
    <member name="P:AGI.Foundation.Coordinates.StateElementAdapter.PreviousElementDefinedIn">
      <summary>
            Gets the object that defines how the element was represented in the state providing a <see cref="T:AGI.Foundation.Motion`1" />.  Generally 
            this is a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />, <see cref="T:AGI.Foundation.Geometry.Axes" />, or null.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coordinates.StateElementAdapterFactory">
      <summary>
            Adapters are the objects that provide a connection of the same element between multiple 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments</see>.  
            For example, when the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> changes for a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationPointElement" /> from 
            one <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> to the next, an adapter can be made that can retrieve the 
            needed information from the two segments.  This is the abstract factory for all of the other 
            adapter factories.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapterFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Coordinates.StateElementAdapterFactory" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapterFactory.CreateAdapter(System.String,System.Object)">
      <summary>
            Creates and returns the actual <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" /> that will get used at propagation time to 
            transform an element in a state from the previous segment for use in the current <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. Note 
            that the <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" /> will not be fully configured when returned; if you are managing the
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapters</see> yourself, you will need to call <see cref="M:AGI.Foundation.Coordinates.StateElementAdapter.Initialize(System.Object,AGI.Foundation.EvaluatorGroup)" /> on the adapter 
            returned with the previous defined in object.
            </summary>
      <param name="elementName">The name of the element in the state getting modified.</param>
      <param name="currentElementDefinition">The element definition for the <paramref name="elementName" /> in the state that will get modified.</param>
      <returns>The partly configured <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapterFactory.GetDefinedIn(System.Object)">
      <summary>
            Returns the defined in object from the <paramref name="elementDefinition" />. This method should not check that <paramref name="elementDefinition" /> is 
            valid for this adapter factory, use the <see cref="M:AGI.Foundation.Coordinates.StateElementAdapterFactory.IsAppropriateAdapter(System.Object)" /> method to be sure. If it is not valid then 
            this method should throw a detailed <see cref="T:System.Exception" />.
            </summary>
      <param name="elementDefinition">The object that defines the element in the state. This object should provide
            the defined in object.</param>
      <returns>The defined in object, generally a <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> or 
            <see cref="T:AGI.Foundation.Geometry.Axes" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Coordinates.StateElementAdapterFactory.IsAppropriateAdapter(System.Object)">
      <summary>
            Checks to see if this <see cref="T:AGI.Foundation.Coordinates.StateElementAdapterFactory">adapter</see> can be used to transform an 
            element defined with the <paramref name="elementDefinition" />.
            </summary>
      <param name="elementDefinition">The object that defines an element.</param>
      <returns>true if this adapter can be used to adapt an element with the <paramref name="elementDefinition" />, false otherwise.</returns>
    </member>
    <member name="T:AGI.Foundation.Coverage.CoverageData">
      <summary>
            Contains all the information generated by a coverage calculation for a single point.  Coverage data for a given point represents
            the set of assets which have access to the point at any given time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.#ctor">
      <summary>
            Initialize a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.#ctor(AGI.Foundation.Coverage.CoverageData)">
      <summary>
            Initializes a new instance based on an existing one.
            </summary>
      <param name="existingInstance">An existing instance to copy.</param>
    </member>
    <member name="P:AGI.Foundation.Coverage.CoverageData.AssetAccessResults">
      <summary>
            Gets a list of the access results corresponding to each of the asset objects in <see cref="P:AGI.Foundation.Coverage.CoverageData.AssetsConsidered" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coverage.CoverageData.AssetsConsidered">
      <summary>
            Gets a list of the considered assets.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coverage.CoverageData.ConsideredIntervals">
      <summary>
            Gets the time intervals considered when computing these coverage results.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.GetAccessResultsForAsset(System.Object)">
      <summary>
            Get a set of access intervals from the given asset.
            </summary>
      <param name="asset">The asset for which to search.</param>
      <returns>If the asset is present in the data, this returns its access results (which may be empty).</returns>
      <exception cref="T:System.ArgumentException">
            The specified <paramref name="asset" /> does not exist in this <see cref="T:AGI.Foundation.Coverage.CoverageData" />.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.GetAssetsSatisfiedAtTime(AGI.Foundation.Time.JulianDate)">
      <summary>
            Get the set of the assets providing coverage at the given time.
            </summary>
      <param name="time">The time to check for coverage.</param>
      <returns>A list of the assets providing coverage at the given time.</returns>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.GetAssetsUnknownAtTime(AGI.Foundation.Time.JulianDate)">
      <summary>
            Get the set of the assets which do not have enough information to determine coverage at the given time.
            </summary>
      <param name="time">The time to check for unknown data.</param>
      <returns>A list of the assets whose coverage data is indeterminate at the given time.</returns>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.GetSatisfactionForAsset(System.Object)">
      <summary>
            Get the intervals where both access and coverage exist for the given asset.  
            </summary>
      <param name="asset">The asset providing coverage.</param>
      <returns>If the given asset provides satisfactory coverage, this returns the satisfaction intervals.
            If the given asset has access, but there is no coverage, it returns an empty collection.</returns>
      <exception cref="T:System.ArgumentException">
            The specified <paramref name="asset" /> does not exist in this <see cref="T:AGI.Foundation.Coverage.CoverageData" />.
            </exception>
    </member>
    <member name="F:AGI.Foundation.Coverage.CoverageData.GridPointPlaceholder">
      <summary>
            Gets an object that can be used as a placeholder to be replaced by grid points during a coverage calculation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Coverage.CoverageData.SatisfactionIntervals">
      <summary>
            Gets the intervals during which coverage is satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coverage.CoverageData.SetCoverageData(AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection,AGI.Foundation.Time.TimeIntervalCollection,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{AGI.Foundation.Access.AccessQueryResult})">
      <summary>
            Sets the coverage data.  This is used by derived classes when it's necessary to compute results during construction,
            prior to storing the data.
            </summary>
      <param name="considered">The time intervals considered for the coverage analysis.</param>
      <param name="satisfied">The time intervals which have coverage.</param>
      <param name="unknown">The time intervals over which coverage cannot be determined.</param>
      <param name="assets">The list of asset objects which were considered when determining coverage.</param>
      <param name="assetResults">The list of access results corresponding to each asset in the list of <paramref name="assets" />.</param>
    </member>
    <member name="P:AGI.Foundation.Coverage.CoverageData.UnknownIntervals">
      <summary>
            Gets the intervals during which it is unknown whether or
            not the query is satisfied because insufficient information is available.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Coverage.FigureOfMerit.IFigureOfMeritDefinition">
      <summary>
            An interface which defines the means by which to get a figure of merit value for the given coverage data and object of interest.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Coverage.FigureOfMerit.IFigureOfMeritDefinition.GetScalarFigureOfMerit(AGI.Foundation.Coverage.CoverageData,System.IServiceProvider)">
      <summary>
            Get a scalar which represents the figure of merit for the given coverage data.
            </summary>
      <param name="coverageResult">The coverage results for which to compute a figure of merit.</param>
      <param name="coverageObject">The object of interest in the figure of merit calculation.</param>
      <returns>A scalar which represents the figure of merit based on the given data.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesBPlane">
      <summary>
            The axes that a <see cref="T:AGI.Foundation.Geometry.VectorBPlane" /> are computed in.  See the documentation for the 
            <see cref="T:AGI.Foundation.Geometry.VectorBPlane" /> for more information of B-Planes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.#ctor">
      <summary>
            Initializes a new instance.  By default the <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody" /> will be Earth and the 
            <see cref="P:AGI.Foundation.Geometry.AxesBPlane.GravitationalParameter" /> will be set to <see cref="F:AGI.Foundation.Celestial.WorldGeodeticSystem1984.GravitationalParameter" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.#ctor(AGI.Foundation.Geometry.AxesBPlane,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point">location</see> of the satellite approaching the <paramref name="centralBody" />.</param>
      <param name="centralBody">The <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody" /> the <paramref name="location" /> is relative to.</param>
      <param name="gravitationalParameter">The gravitational parameter of <paramref name="centralBody" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Celestial.CentralBody,System.Double,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point">location</see> of the satellite approaching the <paramref name="centralBody" />.</param>
      <param name="centralBody">The <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody" /> the <paramref name="location" /> is relative to.</param>
      <param name="gravitationalParameter">The gravitational parameter of <paramref name="centralBody" />.</param>
      <param name="parentReferenceFrame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the <paramref name="centralBody" /> 
            should be computed in.  If this is null then the pole vector will be used to orient the B-plane.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody">
      <summary>
            Gets or sets the <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody" /> that the <see cref="P:AGI.Foundation.Geometry.AxesBPlane.OrbitalPoint" /> is near.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.CheckForSameDefinition(AGI.Foundation.Geometry.AxesBPlane)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesBPlane.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesBPlane.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter of the <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesBPlane.OrbitalPoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to use when computing this <see cref="T:AGI.Foundation.Geometry.VectorBPlane" />.  
            This must provide position and velocity information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesBPlane.ParentReferenceFrame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody" /> will be defined in. If this is 
            null then the Z component of the <see cref="P:AGI.Foundation.Geometry.AxesBPlane.CentralBody">CentralBodies</see> fixed frame will be used in 
            orientating the B-plane.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesEastNorthUp">
      <summary>
            The set of axes defined by the local East, North, and Up directions at a point with respect to
            the shape of a central body as the point moves over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.#ctor">
      <summary>
            Initialize a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.AxesEastNorthUp.ReferencePoint" /> 
            and <see cref="P:AGI.Foundation.Geometry.AxesEastNorthUp.CentralBody" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="centralBody">The central body that defines the surface.</param>
      <param name="referencePoint">The reference point that defines the axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.#ctor(AGI.Foundation.Geometry.AxesEastNorthUp,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesEastNorthUp.CentralBody">
      <summary>
            Gets or sets the central body that defines the surface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.CheckForSameDefinition(AGI.Foundation.Geometry.AxesEastNorthUp)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.ComputeFixedToEastNorthUpRotation(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Computes the rotation from the central body's fixed axes to a set of east-north-up axes based on
            a specified reference point.  In these axes, the X axis points toward the local East,
            the Y axis points toward the local North, and the Z axis points in the direction of the ellipsoid surface normal.
            </summary>
      <param name="shape">The shape of the central body.</param>
      <param name="fixedReferencePoint">The position of the reference point in the central body's fixed frame.</param>
      <returns>A transformation from the ellipsoid fixed axes to east-north-up axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.ComputeFixedToEastNorthUpRotation(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Computes the rotation from the central body's fixed axes to a set of east-north-up axes based on
            a specified reference point.  In these axes, the X axis points toward the local East,
            the Y axis points toward the local North, and the Z axis points in the direction of the ellipsoid surface normal.
            </summary>
      <param name="shape">The shape of the central body.</param>
      <param name="fixedReferencePoint">The motion of the reference point in the central body's fixed frame.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just the rotation, pass 0 for this value.  To compute rotational velocity as well, pass 1.</param>
      <returns>A transformation from the ellipsoid fixed axes to east-north-up axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesEastNorthUp.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesEastNorthUp.ReferencePoint" />'s 
            <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> to a new <see cref="T:AGI.Foundation.Geometry.Axes" /> defined by the East-North-Up convention  
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" />.  Derivative information is provided if
            <see cref="T:AGI.Foundation.Geometry.Point" /> provides derivatives.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.AxesEastNorthUp.ReferencePoint" /> or 
            <see cref="P:AGI.Foundation.Geometry.AxesEastNorthUp.CentralBody" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesEastNorthUp.ReferencePoint">
      <summary>
            Gets or sets the reference point that defines the axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal">
      <summary>
            The Local Vertical, Local Horizontal (LVLH) axes which follow the motion of
            a given point over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Point" />
            and <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.ReferenceFrame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.#ctor(AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="frame">The reference frame in which this points motion is to be observed.</param>
      <param name="point">The point that defines this axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.CheckForSameDefinition(AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Point" />'s <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> to
            a new <see cref="T:AGI.Foundation.Geometry.Axes" /> defined by the Local Vertical Local Horizontal convention  
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" />.  Derivative information is provided if
            <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Point" /> provides derivatives.  An <see cref="T:System.InvalidOperationException" /> is thrown
            if <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Point" /> does not at least provide its velocity.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if either <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.ReferenceFrame" />
            or <see cref="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Point" /> has not been initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.Point">
      <summary>
            Gets or sets the point that defines this axes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesLocalVerticalLocalHorizontal.ReferenceFrame">
      <summary>
            Gets or sets the reference frame in which this points motion is to be observed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesNorthEastDown">
      <summary>
            The set of axes defined by the local North, East, and Down directions at a point with respect to
            the shape of a central body as the point moves over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.#ctor">
      <summary>
            Initialize a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.AxesNorthEastDown.ReferencePoint" /> and 
            <see cref="P:AGI.Foundation.Geometry.AxesNorthEastDown.CentralBody" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="centralBody">The central body that defines the surface.</param>
      <param name="referencePoint">The reference point that defines the axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.#ctor(AGI.Foundation.Geometry.AxesNorthEastDown,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesNorthEastDown.CentralBody">
      <summary>
            Gets or sets the central body that defines the surface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.CheckForSameDefinition(AGI.Foundation.Geometry.AxesNorthEastDown)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.ComputeFixedToNorthEastDownRotation(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Computes the rotation from the central body's fixed axes to a set of north-east-down axes based on
            a specified reference point.  In these axes, the X axis points toward the local North,
            the Y axis points toward the local East, and the Z axis points down (opposite the surface normal).
            </summary>
      <param name="shape">The shape of the central body.</param>
      <param name="fixedReferencePoint">The position of the reference point in the central body's fixed frame.</param>
      <returns>A transformation from the ellipsoid fixed axes to north-east-down axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.ComputeFixedToNorthEastDownRotation(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Int32)">
      <summary>
            Computes the rotation from the central body's fixed axes to a set of north-east-down axes based on
            a specified reference point.  In these axes, the X axis points toward the local North,
            the Y axis points toward the local East, and the Z axis points down (opposite the surface normal).
            </summary>
      <param name="shape">The shape of the central body.</param>
      <param name="fixedReferencePoint">The motion of the reference point in the central body's fixed frame.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just the rotation, pass 0 for this value.  To compute rotational velocity as well, pass 1.</param>
      <returns>A transformation from the ellipsoid fixed axes to north-east-down axes.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesNorthEastDown.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesNorthEastDown.ReferencePoint" />'s 
            <see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> to a new <see cref="T:AGI.Foundation.Geometry.Axes" /> defined by the North-East-Down convention  
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" />.  Derivative information is provided if
            <see cref="T:AGI.Foundation.Geometry.Point" /> provides derivatives.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.AxesNorthEastDown.ReferencePoint" /> or 
            <see cref="P:AGI.Foundation.Geometry.AxesNorthEastDown.CentralBody" /> was not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesNorthEastDown.ReferencePoint">
      <summary>
            Gets or sets the reference point that defines the axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal">
      <summary>
            The Vehicle Velocity, Local Horizontal (VVLH) axes which follow the motion of
            a given point over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.#ctor">
      <summary>
            Initializes a new instance.  The user must set <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Point" />
            and <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.ReferenceFrame" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.#ctor(AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.#ctor(AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance with the specified parameters.
            </summary>
      <param name="frame">The reference frame relative to which this axes is defined.</param>
      <param name="point">The point that defines this axes.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.CheckForSameDefinition(AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Point">Point's</see><see cref="P:AGI.Foundation.Geometry.ReferenceFrame.Axes" /> to
            a new <see cref="T:AGI.Foundation.Geometry.Axes" /> defined by the Vehicle Velocity Local Horizontal convention  
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  The new axes will be represented by
            a <see cref="T:AGI.Foundation.Motion`2">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            specifying the orientation of these <see cref="T:AGI.Foundation.Geometry.Axes" />.  Derivative information is provided if
            <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Point" /> provides derivatives.  An <see cref="T:System.InvalidOperationException" /> is thrown
            if <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Point" /> does not at least provide its velocity.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Point" /> or
            <see cref="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.ReferenceFrame" /> is not initialized.</exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.Point">
      <summary>
            Gets or sets the point that defines this axes with its motion.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesVehicleVelocityLocalHorizontal.ReferenceFrame">
      <summary>
            Gets or sets the reference frame relative to which this axes is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesVelocityOrbitNormal">
      <summary>
            These <see cref="T:AGI.Foundation.Geometry.Axes" /> will have its X axis be aligned with the velocity vector of the 
            given point and the Z axes will be constrained to the orbit normal vector.  The true 
            displacement from the central body will be used to constrain the platforms axes as opposed 
            to the apparent displacement.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.#ctor">
      <summary>
            Initializes a new instance. The <see cref="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CentralBody" /> is set to the 
            <see cref="T:AGI.Foundation.Celestial.EarthCentralBody">Earth</see> in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" />.  
            The <see cref="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.ReferencePoint" /> must be set before <see cref="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.#ctor(AGI.Foundation.Geometry.AxesVelocityOrbitNormal,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.#ctor(AGI.Foundation.Geometry.Point)">
      <summary>
            Initializes a new instance. The <see cref="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CentralBody" /> is set to the 
            <see cref="T:AGI.Foundation.Celestial.EarthCentralBody">Earth</see> in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" />.
            </summary>
      <param name="point">The location to make this axes from.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Celestial.CentralBody)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="point">The location to make this axes from.</param>
      <param name="centralBody">The <see cref="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CentralBody" /> that the point is around.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CentralBody">
      <summary>
            Gets and sets the <see cref="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CentralBody" /> that the <see cref="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.ReferencePoint" /> is orbiting.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.CheckForSameDefinition(AGI.Foundation.Geometry.AxesVelocityOrbitNormal)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesVelocityOrbitNormal.ReferencePoint">
      <summary>
            Gets and sets the <see cref="T:AGI.Foundation.Geometry.Point" /> used to construct these axes.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter">
      <summary>
            Represents a <see cref="T:AGI.Foundation.Geometry.DynamicMatrix" /> which in turn represents a particular
            parameter in the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateParameter">state</see> during integration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="rowDimension">The number of rows in the matrix.</param>
      <param name="columnDimension">The number of columns in the matrix.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.CheckForSameDefinition(AGI.Foundation.Geometry.DynamicMatrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.ColumnDimension">
      <summary>
            Gets the number of columns.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.ConfigureIndicesOnEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Geometry.DynamicMatrixPropagationParameter,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
        <para>
            This is called by <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> instances using <see cref="T:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter" /> so that
            the element can update the indices used to identify the individual values corresponding to this scalar in the state
            during evaluation.  In general, this should only be called from within the <see cref="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})" />
            method when configuring the indices provided by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.
            </para>
        <para>
            The <see cref="T:AGI.Foundation.EvaluatorGroup" /> will create an evaluator based on the <see cref="P:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.StateParameter" />
            and cache it for future calls.  This method updates the instance variables for the indices so that it will reflect
            the scalar's elements within the state during evaluation.  In general, this breaks the "Evaluator Pattern" by altering
            data on an evaluator after construction.  However, so long as it is done once and only once prior to any evaluation this
            is deemed as following the "Evaluator Pattern" which stipulates that an evaluator should always return the same value for
            a given time.
            </para>
      </summary>
      <param name="group">The evaluator group in which to create the <see cref="T:AGI.Foundation.Geometry.DynamicMatrixEvaluator" /> corresponding to this scalar.</param>
      <param name="matrix">The instance of the <see cref="T:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter" /> whose evaluator will be configured.</param>
      <param name="stateInputIndices">The indices representing the locations of the coordinates of this scalar in the state during propagation.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Matrix" />&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            <para>This type will usually not be used directly, it is instead used by
            <see cref="T:AGI.Foundation.Propagators.PropagationDynamicMatrix" /> behind the scenes. If this type is used, always call
            <see cref="M:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.ConfigureIndicesOnEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Geometry.DynamicMatrixPropagationParameter,AGI.Foundation.Motion{System.Int32[]})" /> prior to this method.</para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this scalar.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.RowDimension">
      <summary>
            Gets the number of rows.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.DynamicMatrixPropagationParameter.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            in cases where elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.JplDECenterOfMassPoint">
      <summary>
            The center of mass of a central body from a JPL DE file available for times between 
            <see cref="P:AGI.Foundation.Celestial.JplDE.InitialEpoch" /> and 
            <see cref="P:AGI.Foundation.Celestial.JplDE.FinalEpoch" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.#ctor">
      <summary>
            Initializes a new instance.  After construction, the user must set <see cref="P:AGI.Foundation.Geometry.JplDECenterOfMassPoint.JplDE" /> and 
            <see cref="P:AGI.Foundation.Geometry.JplDECenterOfMassPoint.CentralBody" /> prior to <see cref="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)" />. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.#ctor(AGI.Foundation.Celestial.JplDE,AGI.Foundation.Celestial.JplDECentralBody)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="jplDE">The JPL DE instance to use.</param>
      <param name="centralBody">The central body.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.#ctor(AGI.Foundation.Geometry.JplDECenterOfMassPoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.JplDECenterOfMassPoint.CentralBody">
      <summary>
            Gets or sets the central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.CheckForSameDefinition(AGI.Foundation.Geometry.JplDECenterOfMassPoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.JplDECenterOfMassPoint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  In the case of the <see cref="F:AGI.Foundation.Celestial.JplDECentralBody.Moon">Moon</see> the point is
            expressed in the <see cref="T:AGI.Foundation.Celestial.EarthCentralBody">Earth's</see><see cref="P:AGI.Foundation.Celestial.EarthCentralBody.InertialFrame">Inertial Frame</see>.
            In the case of all other bodies, the point is expressed in the <see cref="T:AGI.Foundation.Celestial.SolarSystemBarycenter" /><see cref="P:AGI.Foundation.Celestial.SolarSystemBarycenter.InertialFrame">Inertial Frame</see>.  The definitions for the <see cref="T:AGI.Foundation.Celestial.CentralBody">CentralBodies</see> are
            taken from the <see cref="M:AGI.Foundation.Celestial.CentralBodiesFacet.GetFromContext" />.
            If requested, the evaluator can produce derivatives up to third order.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">Thrown if the <see cref="P:AGI.Foundation.Geometry.JplDECenterOfMassPoint.JplDE" /> data 
            is not initialized.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the <see cref="P:AGI.Foundation.Geometry.JplDECenterOfMassPoint.CentralBody" /> is not set to a value in the enumeration
            <see cref="T:AGI.Foundation.Celestial.JplDECentralBody" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.JplDECenterOfMassPoint.JplDE">
      <summary>
            Gets or sets the JPL DE instance to use.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointCartographic">
      <summary>
            A point representing a fixed planetodetic location on a central body specified
            using <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> coordinates.  Though the point is fixed on the central body,
            it will move with the central body over time when observed in an inertial frame.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.#ctor">
      <summary>
            Initializes a new instance. The user must set <see cref="P:AGI.Foundation.Geometry.PointCartographic.CentralBody" />. 
            <see cref="P:AGI.Foundation.Geometry.PointCartographic.Location" /> is initialized to <see cref="P:AGI.Foundation.Coordinates.Cartographic.Zero" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Initializes a new instance on the specified central body and at the specified location.
            </summary>
      <param name="centralBody">The central body to which the point is attached.</param>
      <param name="location">The planetodetic location of the point on the central body, 
            relative to the central body's <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.#ctor(AGI.Foundation.Geometry.PointCartographic,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointCartographic.CentralBody">
      <summary>
            Gets or sets the central body (such as a planet) to which the point is attached.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.CheckForSameDefinition(AGI.Foundation.Geometry.PointCartographic)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCartographic.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            of this point expressed in the <see cref="P:AGI.Foundation.Celestial.CentralBody.FixedFrame">Fixed Frame</see> of the <see cref="P:AGI.Foundation.Geometry.PointCartographic.CentralBody" /> 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  This evaluator does not provide derivatives.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when the property <see cref="P:AGI.Foundation.Geometry.PointCartographic.CentralBody" />.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointCartographic.Location">
      <summary>
            Gets or sets the planetodetic location of the point relative to the central body's
            <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointCentralBodyProjection">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Point" /> representing the projection of a ray on to the surface of a <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.CentralBody" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.#ctor">
      <summary>
            Initializes a new instance. The user must set the <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.CentralBody" />, <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.Origin" />,
            and <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.Direction" /> properties.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance from a body, a ray origin, and a ray heading.
            </summary>
      <param name="body">The body that the point will be projected on.</param>
      <param name="origin">The origin of the ray which will be projected onto the body.</param>
      <param name="direction">The direction of the ray which will be projected onto the body.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointCentralBodyProjection.CentralBody">
      <summary>
            Gets or sets the central body that the point will be projected on to.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.CheckForSameDefinition(AGI.Foundation.Geometry.PointCentralBodyProjection)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointCentralBodyProjection.Direction">
      <summary>
            Gets or sets the heading of the ray to project onto the central body.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointCentralBodyProjection.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; 
            of this point expressed in the <see cref="P:AGI.Foundation.Celestial.CentralBody.FixedFrame">Fixed Frame</see> of the <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.CentralBody" /> 
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            Thrown when any of properties: <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.CentralBody" />, <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.Origin" />, or <see cref="P:AGI.Foundation.Geometry.PointCentralBodyProjection.Direction" />
            are null.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointCentralBodyProjection.Origin">
      <summary>
            Gets or sets the origin of the ray to project onto the central body.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointPropagationParameter">
      <summary>
            Represents a <see cref="T:AGI.Foundation.Geometry.Point" /> which in turns represents the position and velocity
            in an integration <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateParameter">state</see>.  This is used
            to define various geometries that depend on the state during integration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.#ctor(AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance with the given frame of integration.
            </summary>
      <param name="frame">The frame used to define the state during integration.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.ConfigureIndicesOnEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Geometry.PointPropagationParameter,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
        <para>
            This is called by <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> instances using <see cref="T:AGI.Foundation.Geometry.PointPropagationParameter" /> so that
            the element can update the indices used to identify the individual values corresponding to this point in the state
            during evaluation.  In general, this should only be called from within the <see cref="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})" />
            method when configuring the indices provided by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.
            </para>
        <para>
            The <see cref="T:AGI.Foundation.EvaluatorGroup" /> will create an evaluator based on the <see cref="P:AGI.Foundation.Geometry.PointPropagationParameter.StateParameter" /> and the <see cref="P:AGI.Foundation.Geometry.PointPropagationParameter.IntegrationFrame" />
            and cache it for future calls.  This method updates the instance variables for the indices so that it will reflect
            the point's elements within the state during evaluation.  In general, this breaks the "Evaluator Pattern" by altering
            data on an evaluator after construction.  However, so long as it is done once and only once prior to any evaluation this
            is deemed as following the "Evaluator Pattern" which stipulates that an evaluator should always return the same value for
            a given time.
            </para>
      </summary>
      <param name="group">The evaluator group in which to create the <see cref="T:AGI.Foundation.Geometry.PointEvaluator" /> corresponding to this point.</param>
      <param name="point">The instance of the <see cref="T:AGI.Foundation.Geometry.PointPropagationParameter" /> whose evaluator will be configured.</param>
      <param name="stateInputIndices">The indices representing the locations of the coordinates of this point in the state during propagation.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.CreateVectorVelocity(AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Constructs a vector which represents the derivative of this point's position.
            </summary>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the resultant <see cref="T:AGI.Foundation.Geometry.Vector">Vector's</see>
            results will be in.</param>
      <returns>The velocity vector in the requested frame.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointPropagationParameter.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>
            Gets an evaluator that can be used to find the motion of this point in its parent reference frame
            based on the state provided by evaluating the evaluator produced by the <see cref="P:AGI.Foundation.Geometry.PointPropagationParameter.StateParameter" />.  
            </para>
        <para>
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" /> instead of calling this method directly.
            See <see cref="M:AGI.Foundation.Geometry.Point.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for more details.
            </para>
        <para>This type will usually not be used directly.  It is instead used by
            <see cref="T:AGI.Foundation.Propagators.PropagationNewtonianPoint" /> behind the scenes. If this type is used, such as
            during the implementation of a type similar to or deriving from 
            <see cref="T:AGI.Foundation.Propagators.PropagationNewtonianPoint" />, always call
            <see cref="M:AGI.Foundation.Geometry.PointPropagationParameter.ConfigureIndicesOnEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Geometry.PointPropagationParameter,AGI.Foundation.Motion{System.Int32[]})" /> prior to this method.
            </para>
      </summary>
      <param name="group">The evaluator group in which to create the evaluator.</param>
      <returns>An evaluator producing the motion for this <see cref="T:AGI.Foundation.Geometry.Point" /> based 
            on the current state.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointPropagationParameter.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            This type does not have derivatives or partial derivatives with respect to any object with the exception of itself.
            Because of that the created <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" /> has a
            <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">ColumnDimension</see> of zero if this <see cref="T:AGI.Foundation.Geometry.PointPropagationParameter" />
            is not in the generalized state, and if it is in the generalized state it returns a 3x3 identity matrix.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> that will contain the created evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointPropagationParameter.IntegrationFrame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> used to define the state during integration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointPropagationParameter.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            in cases where elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarCartographicElement">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> that computes an element of a <see cref="T:AGI.Foundation.Coordinates.Cartographic" />.  This <see cref="T:AGI.Foundation.Geometry.Scalar" /> 
            can currently compute up to order 2 (acceleration).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.#ctor">
      <summary>
            Initializes a new instance.  By default this is set to 
            <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" /> in the current <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Geometry.Point,AGI.Foundation.Coordinates.CartographicElement)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="centralBody">The <see cref="P:AGI.Foundation.Geometry.ScalarCartographicElement.CentralBody" /> to use.</param>
      <param name="point">The <see cref="T:AGI.Foundation.Geometry.Point" /> to use.</param>
      <param name="element">Compute the latitude, longitude or height.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.#ctor(AGI.Foundation.Geometry.ScalarCartographicElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarCartographicElement.CentralBody">
      <summary>
            Gets or sets the <see cref="P:AGI.Foundation.Geometry.ScalarCartographicElement.CentralBody" /> to use.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarCartographicElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarCartographicElement.Element">
      <summary>
            Gets or sets the element to compute (latitude, longitude, or height).
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarCartographicElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarCartographicElement.ReferencePoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to use.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.ScalarDeltaSphericalElement">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Scalar" /> that computes the difference in the clock or cone angle, or the difference of the 
            the radius between two <see cref="T:AGI.Foundation.Geometry.Point">Points</see> relative to a common parent.  Note that if 
            <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Element" /> is set to <see cref="F:AGI.Foundation.Coordinates.SphericalElement.Cone" />, there will be a discontinuity if one of 
            the elements moves through the the 0/360 degree angle.  This can be thought of as computing the difference 
            in declination or right ascension between the two points.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.FromPoint" />, <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Vertex" /> and 
            <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.ToPoint" /> must all be set before the <see cref="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">evaluator can 
            be created</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Coordinates.SphericalElement)">
      <summary>
            Initializes a new instance. The <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Frame" /> will be set to the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> 
            of the <paramref name="primaryCentralBody" />.
            </summary>
      <param name="satellitePoint">The primary <see cref="T:AGI.Foundation.Geometry.Point" /> to subtract the <see cref="T:AGI.Foundation.Coordinates.Spherical" /> element 
            of the <see cref="P:AGI.Foundation.Celestial.CentralBody.CenterOfMassPoint" /> of the <paramref name="otherCentralBody" /> from.</param>
      <param name="primaryCentralBody">The common <see cref="T:AGI.Foundation.Celestial.CentralBody" />between <paramref name="satellitePoint" /> 
            and <paramref name="otherCentralBody" />.</param>
      <param name="otherCentralBody">The other <see cref="T:AGI.Foundation.Celestial.CentralBody" /> to complete the angle between the 
            <paramref name="satellitePoint" /> and the <paramref name="primaryCentralBody" />.</param>
      <param name="option">Which <see cref="T:AGI.Foundation.Coordinates.SphericalElement" /> to compute the difference of.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.Point,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.SphericalElement)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="fromPoint">The point to measure the angle from.</param>
      <param name="vertex">The common <see cref="T:AGI.Foundation.Geometry.Point" />between <paramref name="fromPoint" /> and <paramref name="toPoint" />.</param>
      <param name="toPoint">The other <see cref="T:AGI.Foundation.Geometry.Point" /> that completes the angle.</param>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> to observe the points in.</param>
      <param name="option">Which <see cref="T:AGI.Foundation.Coordinates.SphericalElement" /> to compute the difference of.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.#ctor(AGI.Foundation.Geometry.ScalarDeltaSphericalElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.CheckForSameDefinition(AGI.Foundation.Geometry.Scalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.CheckForSameDefinition(AGI.Foundation.Geometry.ScalarDeltaSphericalElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Element">
      <summary>
            Gets or sets which <see cref="T:AGI.Foundation.Coordinates.SphericalElement" /> to compute.  
            <see cref="F:AGI.Foundation.Coordinates.SphericalElement.Clock">The clock corresponds to the Right Ascension</see>, and the 
            <see cref="F:AGI.Foundation.Coordinates.SphericalElement.Cone"> cone corresponds to the Declination</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Frame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.FromPoint" /> 
            and the <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.ToPoint" /> will be evaluated in.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.FromPoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point">initial point</see> to measure the angle from.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;double&gt;
            of this scalar at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.ToPoint">
      <summary>
            Gets or sets the other <see cref="T:AGI.Foundation.Celestial.CentralBody" /> to compute the multi-body value with.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.Vertex">
      <summary>
            Gets or sets the vertex between the <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.FromPoint" /> and the <see cref="P:AGI.Foundation.Geometry.ScalarDeltaSphericalElement.ToPoint" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorBPlane">
      <summary>
            A vector computing the B-Plane vector of a <see cref="T:AGI.Foundation.Geometry.Point" /> relative to a <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.#ctor">
      <summary>
            Initializes a new instance.  By default the <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" /> will be Earth and the 
            <see cref="P:AGI.Foundation.Geometry.VectorBPlane.GravitationalParameter" /> will be set to <see cref="F:AGI.Foundation.Celestial.WorldGeodeticSystem1984.GravitationalParameter" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Celestial.CentralBody,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point">location</see> of the satellite approaching the <paramref name="centralBody" />.</param>
      <param name="centralBody">The <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" /> the <paramref name="location" /> is relative to.</param>
      <param name="gravitationalParameter">The gravitational parameter of <paramref name="centralBody" />.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.#ctor(AGI.Foundation.Geometry.Point,AGI.Foundation.Celestial.CentralBody,System.Double,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="location">The <see cref="T:AGI.Foundation.Geometry.Point">location</see> of the satellite approaching the <paramref name="centralBody" />.</param>
      <param name="centralBody">The <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" /> the <paramref name="location" /> is relative to.</param>
      <param name="gravitationalParameter">The gravitational parameter of <paramref name="centralBody" />.</param>
      <param name="parentReferenceFrame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the <paramref name="centralBody" /> 
            should be computed in.  If this is null then the pole vector will be used to orient the B-plane.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.#ctor(AGI.Foundation.Geometry.VectorBPlane,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody">
      <summary>
            Gets or sets the <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" /> to use.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.CheckForSameDefinition(AGI.Foundation.Geometry.VectorBPlane)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.GetBDotR">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> that represents the value of this <see cref="T:AGI.Foundation.Geometry.VectorBPlane" /> doted with the B-Plane R vector.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.Geometry.Scalar" /> that represents the value of B doted with the R vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.GetBDotT">
      <summary>
            Returns a <see cref="T:AGI.Foundation.Geometry.Scalar" /> that represents the value of this <see cref="T:AGI.Foundation.Geometry.VectorBPlane" /> doted with the B-Plane T vector.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.Geometry.Scalar" /> that represents the value of B doted with the T vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorBPlane.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the 
            <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector in its parent <see cref="T:AGI.Foundation.Geometry.Axes" />
            at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorBPlane.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter of the <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorBPlane.OrbitalPoint">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Point" /> to use when computing this <see cref="T:AGI.Foundation.Geometry.VectorBPlane" />.  
            This must provide position and velocity information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorBPlane.ParentReferenceFrame">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that the <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody" /> will be defined in. If this is 
            <see langowrd="null" /> then the Z component of the <see cref="P:AGI.Foundation.Geometry.VectorBPlane.CentralBody">CentralBodies</see> fixed frame will be used in 
            orientating the <see cref="T:AGI.Foundation.Geometry.VectorBPlane" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.VectorPropagationParameter">
      <summary>
            Represents a <see cref="T:AGI.Foundation.Geometry.Vector" /> which in turn represents the value and derivatives of a coordinate vector
            in an integration <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateParameter">state</see>.  This is used
            to define various geometries that depend on the state during integration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.#ctor(AGI.Foundation.Geometry.Axes)">
      <summary>
            Initializes a new instance with the given axes of integration.
            </summary>
      <param name="axes">The axes used to define the state during integration.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.CheckForSameDefinition(AGI.Foundation.Geometry.Vector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.ConfigureIndicesOnEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Geometry.VectorPropagationParameter,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
        <para>
            This is called by <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> instances using <see cref="T:AGI.Foundation.Geometry.VectorPropagationParameter" /> so that
            the element can update the indices used to identify the individual values corresponding to this vector in the state
            during evaluation.  In general, this should only be called from within the <see cref="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})" />
            method when configuring the indices provided by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.
            </para>
        <para>
            The <see cref="T:AGI.Foundation.EvaluatorGroup" /> will create an evaluator based on the <see cref="P:AGI.Foundation.Geometry.VectorPropagationParameter.StateParameter" /> and the <see cref="P:AGI.Foundation.Geometry.VectorPropagationParameter.IntegrationAxes" />
            and cache it for future calls.  This method updates the instance variables for the indices so that it will reflect
            the vector's elements within the state during evaluation.  In general, this breaks the "Evaluator Pattern" by altering
            data on an evaluator after construction.  However, so long as it is done once and only once prior to any evaluation this
            is deemed as following the "Evaluator Pattern" which stipulates that an evaluator should always return the same value for
            a given time.
            </para>
      </summary>
      <param name="group">The evaluator group in which to create the <see cref="T:AGI.Foundation.Geometry.VectorEvaluator" /> corresponding to this vector.</param>
      <param name="vector">The instance of the <see cref="T:AGI.Foundation.Geometry.VectorPropagationParameter" /> whose evaluator will be configured.</param>
      <param name="stateInputIndices">The indices representing the locations of the coordinates of this vector in the state during propagation.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorPropagationParameter.Dimension">
      <summary>
            Gets the dimension of the values produced by the object. For example, <see cref="T:AGI.Foundation.Geometry.Vector">Vectors</see>
            would have a dimension of three, and <see cref="T:AGI.Foundation.Geometry.Scalar">Scalars</see> of one. A <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />
            created by this type will have a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.RowDimension">"RowDimension"</see> equal to this
            property, and a <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">"ColumnDimension</see> equal to the summation
            of the dimensions of the independent variables that this object is dependent on.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this vector at a given date with respect to the axes in which it is defined.
            See <see cref="M:AGI.Foundation.Geometry.VectorPropagationParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> for details.
            <para>This type will usually not be used directly, it is instead used by
            <see cref="T:AGI.Foundation.Propagators.PropagationVector" /> behind the scenes. If this type is used, such as
            during the implementation of a type similar to or deriving from PropagationVector, always call
            <see cref="M:AGI.Foundation.Geometry.VectorPropagationParameter.ConfigureIndicesOnEvaluator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Geometry.VectorPropagationParameter,AGI.Foundation.Motion{System.Int32[]})" /> prior to this method.</para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this vector.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.VectorPropagationParameter.GetPartialDerivativesEvaluator(System.Collections.Generic.IList{AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable},AGI.Foundation.EvaluatorGroup)">
      <summary>
            This type does not have derivatives or partial derivatives with respect to any object with the exception of itself.
            Because of that the created <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" /> has a
            <see cref="P:AGI.Foundation.Geometry.DynamicMatrixEvaluator.ColumnDimension">ColumnDimension</see> of zero if this <see cref="T:AGI.Foundation.Geometry.PointPropagationParameter" />
            is not in the generalized state, and if it is in the generalized state it returns a 3x3 identity matrix.
            </summary>
      <param name="independentVariables">The list of <see cref="T:AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable" /> representing the independent
            variables that the created partial derivative evaluator calculates partials with respect to.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> that will contain the created evaluator.</param>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.Advanced.PartialDerivativesEvaluator" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorPropagationParameter.IntegrationAxes">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Axes" /> used to define the state during integration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.VectorPropagationParameter.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            in cases where elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint">
      <summary>
            The base type for constraints for use with the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.  This is 
            the definition of the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator">evaluator</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.#ctor">
      <summary>
             Initializes a new instance.  The <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.DesiredValue" /> and <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.Tolerance" /> 
             must be set before <see cref="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> can be successfully 
             called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.#ctor(AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.#ctor(System.Double,System.Double)">
      <summary>
             Initializes a new instance.
            </summary>
      <param name="desiredValue">The desired value that the <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> 
            will be driven to.</param>
      <param name="tolerance">How close the evaluated value must get to the <paramref name="desiredValue" /> 
            to consider this constraint satisfied.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.CheckForSameDefinition(AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.CreateConstraint(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator" />.  This method 
            should check the validity of any members on your concrete type (throwing a detailed <see cref="T:System.Exception" /> 
            if there is a problem), and then instantiate the 
            <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator">constraint evaluator</see>.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use to create any necessary 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> for this constraint.</param>
      <returns>The fully configured <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator">constraint evaluator</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.CreateSettings">
      <summary>
            Creates the <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> for use with a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.SolverConstraintSettings" /> for this.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.DesiredValue">
      <summary>
            Gets or sets the threshold that the <see cref="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Evaluate(AGI.Foundation.SegmentPropagation.SegmentListResults)">evaluated value</see> 
            will be compared to when solving for a particular trajectory.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator" />. 
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use to create any necessary 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> for this constraint.</param>
      <returns>The fully configured <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator">constraint evaluator</see>.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.Name">
      <summary>
            Gets or sets an optional name to identify this constraint.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.Tolerance">
      <summary>
            Gets or sets the tolerance that determines if the evaluated value equals the 
            <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint.DesiredValue" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator">
      <summary>
            The <see cref="T:AGI.Foundation.IEvaluator">evaluator</see> for <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint" /> 
            used in a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" />.  Instances of this type return some value 
            computed from the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> of all the results of propagation up to the end of the final 
            segment in the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> that has the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> 
            that has this constraint.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.#ctor(AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="definition">The <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint">definition</see> of this constraint.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.#ctor(AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Evaluate(AGI.Foundation.SegmentPropagation.SegmentListResults)">
      <summary>
            Extracts or computes a value from the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults">results</see> for the 
            entire propagation up through the final segment in the parent <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.
            </summary>
      <param name="results">The results of all the segment propagators run up through the final segment in 
            the parent <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />..</param>
      <returns>The value to compare to the <see cref="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.DesiredValue" />.  When all of 
            the constraints evaluated values match their <see cref="P:AGI.Foundation.NumericalMethods.SolverConstraintSettings.DesiredValue">desired values</see>
            (within tolerance) the function will have converged and propagation will proceed.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Identifier">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraint">identifier</see> for this evaluator. 
            It is highly discouraged to use this for anything other than identification purposes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.Name">
      <summary>
            Gets the optional name of this constraint evaluator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorConstraintEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable">
      <summary>
            The base type for variables for use with a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> that uses 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">SegmentPropagators</see> in computing its results.  This is 
            the definition of the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">evaluator</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.MaximumStep" />, <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.PerturbationValue" />, and 
            <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.Segment" /> must all be set before <see cref="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.GetEvaluator(AGI.Foundation.EvaluatorGroup)" /> 
            can be called successfully.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.#ctor(AGI.Foundation.NumericalMethods.SegmentPropagatorVariable,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.#ctor(System.Double,System.Double,AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="maximumStep">The maximum step that this variable should take.</param>
      <param name="perturbation">The perturbation that should be used when finding the derivative of a 
            <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction">functions</see> derivative with respect to this variable.</param>
      <param name="segment">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see> that this variable will operate on.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.CheckForSameDefinition(AGI.Foundation.NumericalMethods.SegmentPropagatorVariable)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.CreateSettings">
      <summary>
            Creates the <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> that the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> 
            will use.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.NumericalMethods.SolverVariableSettings" /> for this variable.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.CreateVariable(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator" />.  This method 
            should check the validity of any members on your concrete type (throwing a detailed <see cref="T:System.Exception" /> 
            if there is a problem), and then instantiate the 
            <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">variable evaluator</see>.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use to create any necessary 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> for this variable.</param>
      <returns>The fully configured <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">variable evaluator</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator" />. 
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use to create any necessary 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> for this variable.</param>
      <returns>The fully configured <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">variable evaluator</see>.</returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.MaximumStep">
      <summary>
            Gets or sets the maximum step that the <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver">solver</see> 
            may take in a single iteration.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.Name">
      <summary>
            Gets or sets an optional name for this variable.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.PerturbationValue">
      <summary>
            Gets or sets the perturbation value to use when computing a numerical derivative relative 
            to this variable of a <see cref="T:AGI.Foundation.NumericalMethods.SolvableMultivariableFunction" /> that uses 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">SegmentPropagators</see>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.Segment">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see> that this variable will act on.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable.VariableTolerance">
      <summary>
            Gets or sets the variable tolerance.  If all the variables are asked to change by 
            less than their variable tolerance, then the solver running a function with this variable 
            will not converge.  
            </summary>
    </member>
    <member name="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">
      <summary>
            The <see cref="T:AGI.Foundation.IEvaluator">evaluator</see> for the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable" /> that get 
            used by a <see cref="T:AGI.Foundation.NumericalMethods.MultivariableFunctionSolver" /> to modify some part of the 
            configurations of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments getting propagated</see> in 
            a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.#ctor(AGI.Foundation.NumericalMethods.SegmentPropagatorVariable)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="definition">The <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable">definition</see> of this.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.#ctor(AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.Evaluate(System.Double,AGI.Foundation.Infrastructure.ICloneWithContext)">
      <summary>
            Evaluates this variable by modifying the <paramref name="configuration" />. This method needs to add 
            the <paramref name="variableDelta" /> to the appropriate value in the <paramref name="configuration" />.  
            The <paramref name="configuration" /> is always the initial configuration that the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> has at its first run.
            </summary>
      <param name="variableDelta">The amount that you need to add to the appropriate value in the 
            <paramref name="configuration" />.</param>
      <param name="configuration">A copy of the <see cref="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.SegmentIdentifier">segment</see> configuration when it was first 
            propagated by the parent <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.</param>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.Identifier">
      <summary>
            Gets the <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariable">identifier</see> of this 
            <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">variable evaluator</see>.  
            Using this property for anything other than identification purposes is highly discouraged. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.Name">
      <summary>
            Gets the optional name for this <see cref="T:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator">variable</see>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.SegmentIdentifier">
      <summary>
            Gets the the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">identifier</see> of the specific 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> being acted upon by this variable.
            Using this property for anything other than identification purposes is highly discouraged. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.NumericalMethods.SegmentPropagatorVariableEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.AuxiliaryStateScalar">
      <summary>
            Represents a scalar value which may depend on integrated quantities in the state
            and is evaluated and stored for output during propagation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.#ctor(AGI.Foundation.Geometry.Scalar)">
      <summary>
            Initializes a new instance based on the given scalar value.
            </summary>
      <param name="value">The value of the scalar to store for output.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.#ctor(AGI.Foundation.Propagators.AuxiliaryStateScalar,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateScalar.AuxiliaryScalar">
      <summary>
            Gets or sets the scalar to evaluate and store for output during propagation.
            The <see cref="P:AGI.Foundation.Propagators.AuxiliaryStateScalar.Order" /> property indicates how many derivatives to evaluate.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.CheckForSameDefinition(AGI.Foundation.Propagators.AuxiliaryStateScalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateScalar.Dimension">
      <summary>
            Gets the number of entries in the auxiliary state, which is one for a <see cref="T:AGI.Foundation.Geometry.Scalar" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.GetConverter(System.Int32[])">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this auxiliary state element.
            </summary>
      <param name="auxiliaryIndices">The set of indices corresponding to the location
            of each value of this auxiliary state element in the overall auxiliary state.</param>
      <returns>The converter for this output.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateScalar.GetEvaluator(AGI.Foundation.EvaluatorGroup,System.Int32[])">
      <summary>
            Gets an evaluator which can compute the auxiliary variables based on the current time and any
            "integrated" definitional objects taken from <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">PropagationStateElements</see> 
            which are updated during integration.
            </summary>
      <param name="group">The evaluator group in which to construct the evaluator.</param>
      <param name="auxiliaryIndices">The set of indices corresponding to the location
            of each value of this auxiliary state element in the overall auxiliary state.</param>
      <returns>An evaluator which computes the auxiliary variables for this element.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateScalar.Order">
      <summary>
            Gets or sets the total number of derivatives of the <see cref="P:AGI.Foundation.Propagators.AuxiliaryStateScalar.AuxiliaryScalar" />
            to compute for the output.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.AuxiliaryStateVector">
      <summary>
            An auxiliary state vector which is not integrated with the rest of the state
            but is evaluated for the propagation output during propagation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.#ctor(AGI.Foundation.Geometry.Vector)">
      <summary>
            Initializes a new instance based on the given <see cref="T:AGI.Foundation.Geometry.Vector" />.
            </summary>
      <param name="value">The vector to output.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.#ctor(AGI.Foundation.Propagators.AuxiliaryStateVector,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateVector.AuxiliaryVector">
      <summary>
            Gets or sets the vector to include as an auxiliary state in the propagation output.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.CheckForSameDefinition(AGI.Foundation.Propagators.AuxiliaryStateVector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateVector.DefinedInAxes">
      <summary>
            Gets or sets the Axes that this vector is defined in.  If this is null then the 
            AuxiliaryStateVector will retain the same Axes as that of the AuxiliaryVector property.
             </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateVector.Dimension">
      <summary>
            Gets the dimension, which is three for a <see cref="T:AGI.Foundation.Geometry.Vector" /></summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.GetConverter(System.Int32[])">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this auxiliary state element.
            </summary>
      <param name="auxiliaryIndices">The set of indices corresponding to the location
            of each value of this auxiliary state element in the overall auxiliary state.</param>
      <returns>The converter for this output.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.AuxiliaryStateVector.GetEvaluator(AGI.Foundation.EvaluatorGroup,System.Int32[])">
      <summary>
            Gets an evaluator which can compute the auxiliary variables based on the current time and any
            "integrated" definitional objects taken from <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">PropagationStateElements</see> 
            which are updated during integration.
            </summary>
      <param name="group">The evaluator group in which to construct the evaluator.</param>
      <param name="auxiliaryIndices">The set of indices corresponding to the location
            of each value of this auxiliary state element in the overall auxiliary state.</param>
      <returns>An evaluator which computes the auxiliary variables for this element.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.AuxiliaryStateVector.Order">
      <summary>
            Gets or sets the highest order of the <see cref="T:AGI.Foundation.Geometry.Vector" /> to produce for the output.
            Zero will produce the vector's value, one will produce its value and its first derivative,
            and higher orders will produce vectors up to and including the given order.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.BallisticPropagator">
      <summary>
            This class calculates a ballistic trajectory (two body gravity only) between two locations on a <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.#ctor">
      <summary>
            Initializes a default instance. <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody" /> is set to the <see cref="P:AGI.Foundation.Celestial.CentralBodiesFacet.Earth">Earth</see>
            in the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext">CalculationContext's</see><see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" />, and
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.GravitationalParameter" /> is set to <see cref="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.GravitationalParameter" />.
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" />, <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" />, <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" />, and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> must
            be set prior to calling <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.CreatePoint" /> or <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)" />, either directly or through the relevant configuration
            methods.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.#ctor(AGI.Foundation.Celestial.CentralBody,System.Double,AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Initializes a new instance. This constructor sets the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody" />, <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.GravitationalParameter" />,
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" />, and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> properties. <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> must
            be set prior to calling <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.CreatePoint" /> or <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)" />, either directly or through the relevant configuration
            methods.
            </summary>
      <param name="centralBody">The central body that the initial and target points are located on.</param>
      <param name="gravitationalParameter">The gravitational parameter of the central body.</param>
      <param name="initialTime">The time at which the object will leave the initial position.</param>
      <param name="initialPositionInertial">The beginning of the trajectory, in the inertial frame of the central body.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.#ctor(AGI.Foundation.Propagators.BallisticPropagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.CalculateTrajectoryInformation">
      <summary>
            Creates an object that contains many metrics which describe the trajectory defined by this object. This object
            must be fully configured before this method is called.
            </summary>
      <returns>An object with general information about the trajectory.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">
      <summary>
            Gets or sets the central body that the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> and target position are located on. By default this is set
            to the <see cref="P:AGI.Foundation.Celestial.CentralBodiesFacet.Earth">Earth</see> in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> in the <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.CheckForSameDefinition(AGI.Foundation.Propagators.BallisticPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEccentricity(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory with the minimum orbital
            eccentricity. With an initial and final point on the surface of the
            central body this will correspond to a trajectory that skims the surface of the body. This trajectory is mainly used
            to determine the absolute lower bounds for a reasonable flight duration for a specific initial and final point.
            </summary>
      <param name="targetPositionFixed">The target position in the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEccentricity(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory with the minimum orbital
            eccentricity. With an initial and final point on the surface of the
            central body this will correspond to a trajectory that skims the surface of the body. This trajectory is mainly used
            to determine the absolute lower bounds for a reasonable flight duration for a specific initial and final point.
            </summary>
      <param name="targetPosition">The target position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEnergy(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory with the minimum orbital energy.
            This will also correspond to the minimum delta-V required. All other properties must be set prior to calling this method, either
            directly, on construction, or by using <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromCartographic(AGI.Foundation.Coordinates.Cartographic)" /> or
            <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromFixedCartesian(AGI.Foundation.Coordinates.Cartesian)" /></summary>
      <param name="targetPositionFixed">The target position in the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEnergy(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory with the minimum orbital energy.
            This will also correspond to the minimum delta-V required. All other properties must be set prior to calling this method, either
            directly, on construction, or by using <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromCartographic(AGI.Foundation.Coordinates.Cartographic)" /> or
            <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromFixedCartesian(AGI.Foundation.Coordinates.Cartesian)" /></summary>
      <param name="targetPosition">The target position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureFromApogeeAltitude(AGI.Foundation.Coordinates.Cartesian,System.Double)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory which, at apogee,
            reaches the specified altitude.
            </summary>
      <param name="targetPositionFixed">The target position in the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <param name="apogeeAltitude">The desired altitude of the trajectory's apogee, in meters.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureFromApogeeAltitude(AGI.Foundation.Coordinates.Cartographic,System.Double)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory which, at apogee,
            reaches the specified altitude.
            </summary>
      <param name="targetPosition">The target position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <param name="apogeeAltitude">The desired altitude of the trajectory's apogee, in meters.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureFromDeltaV(AGI.Foundation.Coordinates.Cartesian,System.Double,System.Boolean)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for a trajectory which begins with the
            specified delta-V in the fixed frame. There will typically be two solutions with the same delta-V, <paramref name="highArc" />
            specifies whether to choose the trajectory that attains a higher or lower altitude.  If the specified delta-V is too small
            for a valid trajectory then the <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEnergy(AGI.Foundation.Coordinates.Cartesian)">minimum energy</see> solution will be calculated
            <see cref="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.InsufficientDeltaV" /> will be returned.
            </summary>
      <param name="targetPositionFixed">The target position in the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <param name="deltaV">The impulsive delta-V to provide at launch, in meters per second.</param>
      <param name="highArc">If true the higher angle and altitude, longer time trajectory will be chosen.
            If false the lower angle and altitude, shorter time trajectory will be chosen.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureFromDeltaV(AGI.Foundation.Coordinates.Cartographic,System.Double,System.Boolean)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for a trajectory which begins with the
            specified velocity in the fixed frame. There will typically be two solutions with the same delta-V, <paramref name="highArc" />
            specifies whether to choose the trajectory that attains a higher or lower altitude.  If the specified delta-V is too small
            for a valid trajectory then the <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEnergy(AGI.Foundation.Coordinates.Cartographic)">minimum energy</see> solution will be calculated
            <see cref="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.InsufficientDeltaV" /> will be returned.
            </summary>
      <param name="targetPosition">The target position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <param name="deltaV">The impulsive delta-V to provide at launch, in meters per second.</param>
      <param name="highArc">If true the higher angle and altitude, longer time trajectory will be chosen.
            If false the lower angle and altitude, shorter time trajectory will be chosen.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureFromFlightDuration(AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Time.Duration)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory with the specified flight duration.
            If this duration is too short for a valid trajectory then the <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEccentricity(AGI.Foundation.Coordinates.Cartesian)">minimum eccentricity</see>
            solution will be calculated and <see cref="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.InsufficientFlightDuration" /> will be returned.
            </summary>
      <param name="targetPositionFixed">The target position in the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <param name="flightDuration">The desired flight time from the initial to target position.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureFromFlightDuration(AGI.Foundation.Coordinates.Cartographic,AGI.Foundation.Time.Duration)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> values for the trajectory with the specified flight duration.
            If this duration is too short for a valid trajectory then the <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureForMinimumEccentricity(AGI.Foundation.Coordinates.Cartographic)">minimum eccentricity</see>
            solution will be calculated and <see cref="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.InsufficientFlightDuration" /> will be returned.
            </summary>
      <param name="targetPosition">The target position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <param name="flightDuration">The desired flight time from the initial to target position.</param>
      <returns>An enumeration which reports whether the calculation successfully met the provided constraint, or
            contains an alternative solution or best guess.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromCartographic(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> property with the position in the inertial frame which corresponds to
            the given position in the fixed frame at <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" />. The <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" /> must be set prior to
            calling this method.
            </summary>
      <param name="initialPosition">The initial position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <returns>The initial position, which will also be set to the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> property.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromFixedCartesian(AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Populates the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> property with the position in the inertial frame which corresponds to
            the given position in the fixed frame at <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" />. The <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" /> must be set prior to
            calling this method.
            </summary>
      <param name="initialPositionFixed">The initial position in the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> fixed frame.</param>
      <returns>The initial position, which will also be set to the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> property.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> defining the motion of an object following the calculated trajectory.
            This object must be fully configured before this method is called.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime">
      <summary>
            Gets or sets the time at which the object arrives at its target position. Generally this property and
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" /> are calculated by calling the configuration method that corresponds to your
            desired constraint.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate at individual dates.        
            <para>
            This evaluator propagates the orbit state from the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" /> to the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" />
            based on the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" />, <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity" />, and <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.GravitationalParameter" />.  The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate,int)</see> method
            will be the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> corresponding to the orbital 
            position and velocity at the given <see cref="T:AGI.Foundation.Time.JulianDate" /> expressed in the propagator's <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.BallisticPropagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticPropagator.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter of the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody" />. By default this is set to
            <see cref="F:AGI.Foundation.Celestial.EarthGravitationalModel1996.GravitationalParameter" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition">
      <summary>
            Gets or sets the initial point of the ballistic trajectory, in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> inertial frame. You can use
            <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromCartographic(AGI.Foundation.Coordinates.Cartographic)" /> or <see cref="M:AGI.Foundation.Propagators.BallisticPropagator.ConfigureInitialPositionFromFixedCartesian(AGI.Foundation.Coordinates.Cartesian)" />
            to easily set this property from fixed coordinates if the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime" /> has already been set.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticPropagator.InitialTime">
      <summary>
            Gets or sets the time at which the object leaves the <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.InitialPosition" /> and begins its ballistic flight.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticPropagator.InitialVelocity">
      <summary>
            Gets or sets the initial velocity of the ballistic trajectory, in the
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.CentralBody">CentralBody's</see> inertial frame. Generally this property and
            <see cref="P:AGI.Foundation.Propagators.BallisticPropagator.FinalTime" /> are calculated by calling the configuration method that corresponds to your
            desired constraint.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.BallisticPropagatorSolutionType">
      <summary>
            Species the kind of solution that was calculated by a <see cref="T:AGI.Foundation.Propagators.BallisticPropagator" />, IE whether the desired trajectory was
            successfully calculated, the propagator failed to converge on a solution, or the specified constraint was invalid.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.SuccessfulCalculation">
      <summary>
            The propagator successfully calculated the trajectory. The relevant property still has the constraint value, and the others
            have been populated with their values for the calculated trajectory.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.ConvergenceFailed">
      <summary>
            The propagator was not able to converge on the specified constraint. All properties, including the constraint value, have been
            set to the value of the guess the propagator converged on.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.InsufficientDeltaV">
      <summary>
            The specified delta-V insufficient for a valid trajectory. A minimum energy/delta-V solution was calculated instead.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.ExcessiveDeltaV">
      <summary>
            The specified delta-V too high for a valid trajectory. A minimum eccentricity solution was calculated instead.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.BallisticPropagatorSolutionType.InsufficientFlightDuration">
      <summary>
            The specified time of flight was insufficient for a valid trajectory. The minimum eccentricity solution was calculated instead.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.BallisticTrajectoryInformation">
      <summary>
            An object with many metrics that describe a ballistic trajectory from an initial point to a target point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.ApogeeAltitude">
      <summary>
            Gets the altitude of the object at the apogee of its trajectory, in meters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.Azimuth">
      <summary>
            Gets the azimuth angle of the direction of the object's departure from the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialPosition" />, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">
      <summary>
            Gets the central body that the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialPosition" /> and <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalPosition" /> of the trajectory are located on.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.DeltaV">
      <summary>
            Gets the magnitude of the impulsive velocity change at the start of the trajectory in meters per second.
            This value assumes the object was initially motionless in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> fixed frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.Elevation">
      <summary>
            Gets the elevation angle of the direction of the object's departure from the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialPosition" />, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalConditionsFixed">
      <summary>
            Gets the position and velocity at the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalTime" />, in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> fixed frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalConditionsInertial">
      <summary>
            Gets the position and velocity at the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalTime" />, in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> inertial frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalPosition">
      <summary>
            Gets the final or target position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> fixed frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalTime">
      <summary>
            Gets the time at which the object arrives at the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalPosition" /></summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FlightDuration">
      <summary>
            Gets the duration of the flight from the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialPosition" /> to the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.FinalPosition" /></summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.GravitationalParameter">
      <summary>
            Gets the gravitational parameter of the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialConditionsFixed">
      <summary>
            Gets the position and velocity at the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialTime" />, in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> fixed frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialConditionsInertial">
      <summary>
            Gets the position and velocity at the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialTime" />, in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> inertial frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialPosition">
      <summary>
            Gets the initial position, as a <see cref="T:AGI.Foundation.Coordinates.Cartographic" /> in the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.CentralBody">CentralBody's</see> fixed frame.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialTime">
      <summary>
            Gets the time at which the object leaves the <see cref="P:AGI.Foundation.Propagators.BallisticTrajectoryInformation.InitialPosition" /></summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.CartesianOnePointPropagator">
      <summary>
            The base class for simple one-point propagators that produce only <see cref="T:AGI.Foundation.Motion`1" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.#ctor(AGI.Foundation.Propagators.CartesianOnePointPropagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> that represents the motion produced by this propagator.
            </summary>
      <returns>The created point.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.GetEvaluator">
      <summary>
            Gets an evaluator that can propagate at individual dates.
            <para>
            This evaluator propagates the orbit state.  The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate,int)</see> method
            will be the <see cref="T:AGI.Foundation.Motion`1" /> corresponding to the orbital 
            state at the given <see cref="T:AGI.Foundation.Time.JulianDate" /> expressed in the propagator's 
            <see cref="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.GetMotionReferenceFrame">ReferenceFrame</see>.
            </para><para>
            *Note* When evaluating with this evaluator, it may be more efficient to specify times using
            an <see cref="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">arithmetically safe TimeStandard</see> to avoid the need
            to convert in order to perform the propagation.  The length of a time step may be different in
            different <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see>.  So be careful when specifying times.
            </para></summary>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate at individual dates.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.Propagate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Calculates position (and zero or more derivatives) for regular time steps over an interval.
            <para>
            *Note* When propagating, it may be more efficient to specify times using
            an <see cref="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">arithmetically safe TimeStandard</see> to avoid the need
            to convert in order to perform the propagation.  The length of a time step may be different in
            different <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see>.  So be careful when specifying times.
            </para></summary>
      <param name="startDate">The first date for which to calculate position and velocity.</param>
      <param name="stopDate">The last date for which to calculate position and velocity.</param>
      <param name="timeStep">The Duration between each ephemeris point.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just position, pass 0.  To compute position and velocity (if available), pass 1.  And so on.</param>
      <param name="outputReferenceFrame">
            The reference frame in which the generated ephemeris data is to be expressed.
            </param>
      <returns>A list of date and motion for each step in the interval.  The <paramref name="stopDate" /> is always
            the last point in the list even when this makes the step between the second-to-last and last points less than the specified step.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.CartesianOnePointPropagator.Propagate(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Calculates position (and zero or more derivatives) for regular time steps over an interval.
            <para>
            *Note* When evaluating with this evaluator, it may be more efficient to specify times using
            an <see cref="P:AGI.Foundation.Time.TimeStandard.ArithmeticSafeStandard">arithmetically safe TimeStandard</see> to avoid the need
            to convert in order to perform the propagation.  The length of a time step may be different in
            different <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see>.  So be careful when specifying times.
            </para></summary>
      <param name="startDate">The first date for which to calculate position and velocity.</param>
      <param name="stopDate">The last date for which to calculate position and velocity.</param>
      <param name="timeStep">The Duration between each ephemeris point.</param>
      <param name="order">The order of the highest derivative to compute.  To compute just position, pass 0.  To compute position and velocity (if available), pass 1.  And so on.</param>
      <param name="outputReferenceFrame">
            The reference frame in which the generated ephemeris data is to be expressed.
            </param>
      <param name="tracker">The object to which progress is reported and that is able to cancel this operation before it is complete.</param>
      <returns>A list of date and motion for each step in the interval.  The <paramref name="stopDate" /> is always
            the last point in the list even when this makes the step between the second-to-last and last points less than the specified step.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.IPropagateCollectionFromOnePoint`1">
      <summary>
            An interface that enables propagation over multiple dates by one-point evaluating each
            date and adding the results to the collection.
            </summary>
      <typeparam name="TCollection">The type that holds the results of propagation.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Propagators.IPropagateCollectionFromOnePoint`1.CreateCollection(System.Int32)">
      <summary>
            Creates a collection of the specified size.
            </summary>
      <param name="size">The required size of the collection.</param>
      <returns>The collection.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.IPropagateCollectionFromOnePoint`1.EvaluateToCollection(`0,System.Int32,AGI.Foundation.Time.JulianDate)">
      <summary>
            Evaluates a single point and adds it to the collection at a specified index.
            </summary>
      <param name="collection">The collection to which to add the point.</param>
      <param name="index">The index at which to write the point.</param>
      <param name="date">The date at which to evaluate.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.IUpdatePriorToStep">
      <summary>
            An interface to an object created by a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> that has special behavior
            that takes place each time step prior to propagation. The
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> will call the <see cref="M:AGI.Foundation.Propagators.IUpdatePriorToStep.UpdatePriorToStep(AGI.Foundation.Time.JulianDate,AGI.Foundation.Propagators.PropagationStateArray)" /> method in this class
            to perform that behavior.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.IUpdatePriorToStep.UpdatePriorToStep(AGI.Foundation.Time.JulianDate,AGI.Foundation.Propagators.PropagationStateArray)">
      <summary>
            Called by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> each time step prior to propagation
            to perform any state updates required by the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> that created this object.
            </summary>
      <param name="date">The time of the current step.</param>
      <param name="state">The subsection of the state array needed by this object.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.J2Propagator">
      <summary>
            An analytic propagator that uses a first order J2 perturbation algorithm which models
            only the secular effects on the orbital elements.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.#ctor(AGI.Foundation.Propagators.J2Propagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.DelaunayElements,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.EquinoctialElements,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.KeplerianElements,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.ModifiedKeplerianElements,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 coefficient.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="initialConditions" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">Thrown if the <paramref name="initialConditions" /> 
            represent an open orbit (i.e. if the eccentricity is greater than or equal to unity).</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="gravitationalParameter">The gravitational parameter used to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 and J4 coefficients.</param>
      <exception cref="T:System.ArgumentException">Thrown if the <paramref name="initialConditions" /> 
            represent an open orbit (i.e. if the velocity is sufficient to escape the central body).</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.CheckForSameDefinition(AGI.Foundation.Propagators.J2Propagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate at individual dates.
            <para>
            This evaluator propagates the orbit state from <see cref="P:AGI.Foundation.Propagators.J2Propagator.InitialConditions" /> at <see cref="P:AGI.Foundation.Propagators.J2Propagator.OrbitEpoch" /> 
            based on the <see cref="P:AGI.Foundation.Propagators.J2Propagator.GravitationalParameter" />, <see cref="P:AGI.Foundation.Propagators.J2Propagator.J2ZonalHarmonicCoefficient" /> and 
            <see cref="P:AGI.Foundation.Propagators.J2Propagator.ReferenceDistance" />. The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate,int)</see> method
            will be the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> corresponding to the orbital position and velocity 
            at the given <see cref="T:AGI.Foundation.Time.JulianDate" /> expressed in the propagator's <see cref="P:AGI.Foundation.Propagators.J2Propagator.ReferenceFrame" />.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J2Propagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.J2Propagator.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter of the central body around which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J2Propagator.InitialConditions">
      <summary>
            Gets or sets the orbital elements from which to propagate.  Setting the initial conditions
            on this property will also update <see cref="P:AGI.Foundation.Propagators.J2Propagator.GravitationalParameter" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Propagators.J2Propagator.InitialConditions" /> are set to
            an open orbit.  (i.e. If <see cref="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.OrbitType" /> is not Circular
            or Elliptical).</exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.J2Propagator.J2ZonalHarmonicCoefficient">
      <summary>
            Gets or sets the non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J2Propagator.OrbitEpoch">
      <summary>
            Gets or sets the Julian date at which the <see cref="P:AGI.Foundation.Propagators.J2Propagator.InitialConditions" /> are specified.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J2Propagator.ReferenceDistance">
      <summary>
            Gets or sets the reference distance (equatorial radius) associated with the J2 coefficient.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J2Propagator.ReferenceFrame">
      <summary>
            Gets or sets the reference frame in which the ephemeris is produced.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.J4Propagator">
      <summary>
            An analytic propagator that uses a second order J2/J4 perturbation algorithm which
            models only the secular effects on the orbital elements.  J2 effects are considered
            to the second order and J4 effects are considered to the first order.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.#ctor(AGI.Foundation.Propagators.J4Propagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.DelaunayElements,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="j4UnnormalizedValue">The non-normalized J4 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 and J4 coefficients.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.EquinoctialElements,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="j4UnnormalizedValue">The non-normalized J4 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 and J4 coefficients.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.KeplerianElements,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="j4UnnormalizedValue">The non-normalized J4 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 and J4 coefficients.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.ModifiedKeplerianElements,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="j4UnnormalizedValue">The non-normalized J4 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 and J4 coefficients.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="initialConditions" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">Thrown if the <paramref name="initialConditions" /> 
            represent an open orbit (i.e. if the eccentricity is greater than or equal to unity).</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The orbital elements from which to propagate.</param>
      <param name="gravitationalParameter">The gravitational parameter used to propagate.</param>
      <param name="j2UnnormalizedValue">The non-normalized J2 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="j4UnnormalizedValue">The non-normalized J4 zonal harmonic coefficient of the central body around which to propagate.</param>
      <param name="referenceDistance">The reference distance (equatorial radius) associated with the J2 and J4 coefficients.</param>
      <exception cref="T:System.ArgumentException">Thrown if the <paramref name="initialConditions" /> 
            represent an open orbit (i.e. if the velocity is sufficient to escape the central body).</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.CheckForSameDefinition(AGI.Foundation.Propagators.J4Propagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate at individual dates.
            <para>
            This evaluator propagates the orbit state from <see cref="P:AGI.Foundation.Propagators.J4Propagator.InitialConditions" /> at <see cref="P:AGI.Foundation.Propagators.J4Propagator.OrbitEpoch" /> 
            based on the <see cref="P:AGI.Foundation.Propagators.J4Propagator.GravitationalParameter" />, <see cref="P:AGI.Foundation.Propagators.J4Propagator.J2ZonalHarmonicCoefficient" />,
            <see cref="P:AGI.Foundation.Propagators.J4Propagator.J4ZonalHarmonicCoefficient" />, and <see cref="P:AGI.Foundation.Propagators.J4Propagator.ReferenceDistance" />. The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate,int)</see> method
            will be the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> corresponding to the orbital position and velocity 
            at the given <see cref="T:AGI.Foundation.Time.JulianDate" /> expressed in the propagator's <see cref="P:AGI.Foundation.Propagators.J4Propagator.ReferenceFrame" />.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.J4Propagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.GravitationalParameter">
      <summary>
            Gets or sets the gravitational parameter of the central body around which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.InitialConditions">
      <summary>
            Gets or sets the orbital elements from which to propagate.  Setting the initial conditions
            on this property will also update <see cref="P:AGI.Foundation.Propagators.J4Propagator.GravitationalParameter" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="P:AGI.Foundation.Propagators.J4Propagator.InitialConditions" /> are set to
            an open orbit.  (i.e. If <see cref="P:AGI.Foundation.Coordinates.ModifiedKeplerianElements.OrbitType" /> is not Circular
            or Elliptical.)</exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.J2ZonalHarmonicCoefficient">
      <summary>
            Gets or sets the non-normalized J2 zonal harmonic coefficient of the central body 
            around which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.J4ZonalHarmonicCoefficient">
      <summary>
            Gets or sets the non-normalized J4 zonal harmonic coefficient of the central body 
            around which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.OrbitEpoch">
      <summary>
            Gets or sets the Julian date at which the <see cref="P:AGI.Foundation.Propagators.J4Propagator.InitialConditions" /> are specified.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.ReferenceDistance">
      <summary>
            Gets or sets the reference distance (equatorial radius) associated with the J2 and J4 coefficients.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.J4Propagator.ReferenceFrame">
      <summary>
            Gets or sets the reference frame in which the ephemeris is produced.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.NumericalIntegrationInformation">
      <summary>
            Contains information about the behavior of an integrator in a given integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalIntegrationInformation.#ctor(AGI.Foundation.NumericalMethods.StepSizeInformation,System.Double)">
      <summary>
            Create an instance based on the given information.
            </summary>
      <param name="info">Information on the behavior of the step size during integration.</param>
      <param name="stepSize">The size of the given integration step.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalIntegrationInformation.StepSizeInformation">
      <summary>
            Gets information about the behavior of the step size 
            during the integration step including whether it was altered or not.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalIntegrationInformation.StepSizeTaken">
      <summary>
            Gets the size of the step which was taken to produce the current state.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.NumericalPropagationStateHistory">
      <summary>
            Contains a collection of data resulting from propagating the state over a span of time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.#ctor(AGI.Foundation.Propagators.PropagationStateConverter,System.Boolean,AGI.Foundation.Propagators.NumericalPropagationStateHistory[])">
      <summary>
            Initializes a new instance. <see cref="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.SortingFormat" /> is set to
            <see cref="F:AGI.Foundation.Propagators.SortingFormat.Forwards">Forwards</see>.
            </summary>
      <param name="converter">A converter which contains the state and auxiliary output which can
            convert the raw data.</param>
      <param name="includeIntegrationInfo">If this is true, the collection will contain a list of 
            information about the integration process at each step.</param>
      <param name="otherCollections">Other collections to combine into this one.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.#ctor(AGI.Foundation.Propagators.PropagationStateConverter,System.Boolean,AGI.Foundation.Propagators.SortingFormat,AGI.Foundation.Propagators.NumericalPropagationStateHistory[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="converter">A converter which contains the state and auxiliary output which can
            convert the raw data.</param>
      <param name="includeIntegrationInfo">If this is true, the collection will contain a list of 
            information about the integration process at each step.</param>
      <param name="sortingFormat">The direction the parallel lists of <see cref="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Times" /> and
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.States" /> should be sorted.
            The entries of the <paramref name="otherCollections" /> will be placed into this history object in that
            order regardless of their own sorting format.</param>
      <param name="otherCollections">Other collections to combine into this one.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.#ctor(System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate},System.Collections.Generic.IList{System.Double[]},System.Collections.Generic.IList{AGI.Foundation.Propagators.NumericalIntegrationInformation},AGI.Foundation.Propagators.PropagationStateConverter)">
      <summary>
            Initializes a new instance. <see cref="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.SortingFormat" /> is set to
            <see cref="F:AGI.Foundation.Propagators.SortingFormat.Forwards">Forwards</see>.
            </summary>
      <param name="times">A list of times at which data was recorded.</param>
      <param name="states">A list of raw states recorded at each of the <paramref name="times" />.</param>
      <param name="integrationInfo">A list of information about the integration process at each of the <paramref name="times" />
            or null if no information was recorded.</param>
      <param name="converter">A converter which contains the state and auxiliary output which can
            convert the raw data.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.#ctor(System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate},System.Collections.Generic.IList{System.Double[]},System.Collections.Generic.IList{AGI.Foundation.Propagators.NumericalIntegrationInformation},AGI.Foundation.Propagators.PropagationStateConverter,AGI.Foundation.Propagators.SortingFormat)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="times">A list of times at which data was recorded.</param>
      <param name="states">A list of raw states recorded at each of the <paramref name="times" />.</param>
      <param name="integrationInfo">A list of information about the integration process at each of the <paramref name="times" />
            or null if no information was recorded.</param>
      <param name="converter">A converter which contains the state and auxiliary output which can
            convert the raw data.</param>
      <param name="sortingFormat">The direction the parallel lists of <paramref name="times" /> and <paramref name="states" /> are sorted.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Add(AGI.Foundation.Time.JulianDate,System.Double[])">
      <summary>
            Add an entry to the end of the state history.  If the time already exists in the collection, the existing
            time is overwritten.
            </summary>
      <param name="time">The time of the data.</param>
      <param name="state">The raw state at the given <paramref name="time" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Add(AGI.Foundation.Time.JulianDate,System.Double[],AGI.Foundation.Propagators.NumericalIntegrationInformation)">
      <summary>
            Add an entry to appropriate location in the state history.  If the time already exists in the collection, the existing
            state and info are overwritten.
            </summary>
      <param name="time">The time of the data.</param>
      <param name="state">The raw state at the given <paramref name="time" />.</param>
      <param name="info">The information about the integration process prior to the given <paramref name="time" />.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Count">
      <summary>
            Gets the number of entries in this collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.GetDateMotionCollection``1(System.String)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the given type based on a string identification
            corresponding to either a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> or <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement" />.
            The type must correspond to the type of the state element or it will throw an exception.
            </summary>
      <param name="id">The string identifying the state element to use to convert the raw data.</param>
      <typeparam name="T">The type returned by the state element corresponding to the <paramref name="id" />.</typeparam>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the requested type from the requested state element.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the type 'T' does not correspond to the 
            type returned by the requested state element.</exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.IntegrationInformation">
      <summary>
            Gets the list of information about the integration process at each of the <see cref="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Times" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Remove(AGI.Foundation.Time.JulianDate)">
      <summary>
            Removes entries associated with the specified time.
            </summary>
      <param name="time">The time to remove.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.RemoveAt(System.Int32)">
      <summary>
            Remove entries at a given index.
            </summary>
      <param name="index">The index at which to remove entries.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.SortingFormat">
      <summary>
            Gets the specifier for how the history is sorted.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.States">
      <summary>
            Gets the list of raw states. For processed information see the <see cref="M:AGI.Foundation.Propagators.NumericalPropagationStateHistory.GetDateMotionCollection``1(System.String)" /> method.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagationStateHistory.Times">
      <summary>
            Gets the list of times at which each set of data was recorded.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.NumericalPropagator">
      <summary>
        <para>A propagator which can advance the state from initial conditions by either taking individual
            integration steps or by propagating over a given time span.  Note that a given instance of a
            propagator is NOT thread safe.  So if there is a need to propagate a given state in different
            threads, make sure to clone the propagator for another thread using <see cref="M:AGI.Foundation.Infrastructure.CopyForAnotherThread.Copy``1(``0)" />.</para>
        <para>A NumericalPropagator is created by configuring a <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />
            and then calling <see cref="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator" />.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.Converter">
      <summary>
            Gets an instance of a converter which can convert the overall raw output
            into the output corresponding to a particular <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" />
            or <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement" /> based on a string identifier and output type.
            This is also the object to use when producing ephemeris data to create 
            interpolated <see cref="T:AGI.Foundation.Geometry.Point" /> or 
            <see cref="T:AGI.Foundation.Geometry.Vector" /> objects.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">
      <summary>
            Gets a copy of the raw state at the end of the last step taken. For processed state data
            use the <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.ConvertState``1(System.String,System.Double[])">ConvertState</see> method on the
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.Converter" /> property.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentStepSize">
      <summary>
            Gets the current step size in seconds that the integrator will take when advancing to the next time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime">
      <summary>
            Gets the time at the end of the last step taken.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.IncludeIntegratorInformationInOutput">
      <summary>
            Gets an indication whether the <see cref="T:AGI.Foundation.Propagators.NumericalIntegrationInformation" /> produced by the 
            integrator will be stored in the output produced by this propagator when it creates a
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagationStateHistory" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.InitialEpoch">
      <summary>
            Gets the time at which the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.InitialState" /> is defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.InitialState">
      <summary>
            Gets a copy of the raw initial state used to start propagation. For processed state data
            use the <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.ConvertState``1(System.String,System.Double[])">ConvertState</see> method on the
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.Converter" /> property.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.PreviousStepSize">
      <summary>
            Gets the last step size in seconds that was taken by the integrator to produce the 
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Propagate(AGI.Foundation.Time.Duration)">
      <summary>
            Propagates the state from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" />.
            The direction of propagation is determined by the sign of the <see cref="T:AGI.Foundation.Time.Duration" />
            specified.
            </summary>
      <param name="propagationTime">The (positive or negative) total time, measured from 
            the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />, over which to propagate.
            A negative duration will indicate that the propagator should propagate backwards
            in time.</param>
      <returns>The raw state vector at the given <paramref name="propagationTime" />
            away from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Epoch" /> on the state, and if <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.IncludeIntegratorInformationInOutput" />
            is true it also contains the combined integration information over the propagation and
            the average step size. Use <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.ConvertState``1(System.String,System.Double[])" /> to process this raw state
            into a useful form.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Propagate(AGI.Foundation.Time.Duration,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates the state from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" />.
            The direction of propagation is determined by the sign of the <see cref="T:AGI.Foundation.Time.Duration" />
            specified.
            </summary>
      <param name="propagationTime">The (positive or negative) total time, measured from 
            the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />, over which to propagate.
            A negative duration will indicate that the propagator should propagate backwards
            in time.</param>
      <param name="tracker">A progress tracker which will report the progress of the propagation
            from 0 percent to 100 percent.</param>
      <returns>The raw state vector at the given <paramref name="propagationTime" />
            away from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Epoch" /> on the state, and if <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.IncludeIntegratorInformationInOutput" />
            is true it also contains the combined integration information over the propagation and
            the average step size. Use <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.ConvertState``1(System.String,System.Double[])" /> to process this raw state
            into a useful form.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Propagate(AGI.Foundation.Time.Duration,System.Int32)">
      <summary>
            Propagates the state from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" />.
            The direction of propagation is determined by the sign of the <see cref="T:AGI.Foundation.Time.Duration" />
            specified.
            </summary>
      <param name="propagationTime">The (positive or negative) total time, measured from 
            the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />, over which to propagate.
            A negative duration will indicate that the propagator should propagate backwards
            in time.</param>
      <param name="outputSparsity">The interval at which to produce output samples.
            By default this should be set to one, meaning that output will be saved in the state history
            for every integration step. If a thinner (but less accurate) ephemeris is desired you can set this
            to a higher number. Two means that output is saved every other integration step, etc, etc.</param>
      <returns>A collection of arrays containing the raw state information,
            and if <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.IncludeIntegratorInformationInOutput" /> is true it also contains the combined 
            integration information over the propagation and the average step size.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Propagate(AGI.Foundation.Time.Duration,System.Int32,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates the state from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" />.
            The direction of propagation is determined by the sign of the <see cref="T:AGI.Foundation.Time.Duration" />
            specified.
            </summary>
      <param name="propagationTime">The (positive or negative) total time, measured from 
            the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />, over which to propagate.
            A negative duration will indicate that the propagator should propagate backwards
            in time.</param>
      <param name="outputSparsity">The interval at which to produce output samples.
            By default this should be set to one, meaning that output will be saved in the state history
            for every integration step. If a thinner (but less accurate) ephemeris is desired you can set this
            to a higher number. Two means that output is saved every other integration step, etc, etc.</param>
      <param name="tracker">A progress tracker which will report the progress of the propagation
            from 0 percent to 100 percent.</param>
      <returns>A collection of arrays containing the raw state information,
            and if <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.IncludeIntegratorInformationInOutput" /> is true it also contains the combined 
            integration information over the propagation and the average step size.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.PropagateUntilStop(System.Collections.Generic.IEnumerable{AGI.Foundation.StoppingConditions.StoppingConditionEvaluator},AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates forward until one of the <paramref name="conditions" /> are tripped.  This will propagate 
            <see cref="F:AGI.Foundation.NumericalMethods.IntegrationSense.Increasing" /> by default.
            </summary>
      <param name="conditions">The conditions to stop on.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>The ephemeris and information about the stopping event.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.PropagateUntilStop(System.Collections.Generic.IEnumerable{AGI.Foundation.StoppingConditions.StoppingConditionEvaluator},AGI.Foundation.NumericalMethods.IntegrationSense,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates until one of the <paramref name="conditions" /> are tripped.
            </summary>
      <param name="conditions">The conditions to stop on.</param>
      <param name="direction">The direction to search for an event.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>The ephemeris and information about the stopping event.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.PropagateUntilStop(System.Collections.Generic.IEnumerable{AGI.Foundation.StoppingConditions.StoppingConditionEvaluator},AGI.Foundation.NumericalMethods.IntegrationSense,System.Boolean,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates until one of the <paramref name="conditions" /> are tripped.
            </summary>
      <param name="conditions">The conditions to stop on.</param>
      <param name="direction">The direction to search for an event.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <param name="initializeStoppingCondition">Indicates if the <paramref name="conditions" /> should be 
            <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Initialize(AGI.Foundation.Coordinates.IMotionState)">initialized</see>.  Set this to false if 
            the <paramref name="conditions" /> have been initialized prior to this method being called.</param>
      <returns>The ephemeris and information about the stopping event.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.PropagationDirection">
      <summary>
            Gets the direction of propagation with regard to time,
            either increasing or decreasing.  To reverse the direction
            of propagation, call either 'Propagate' or 'TakeStep' with
            a duration which has the opposite sign.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Reset">
      <summary>
            Resets the propagation back to the initial conditions.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Reset(AGI.Foundation.Time.JulianDate,System.Double[])">
      <summary>
            Resets the propagation to a new set of initial conditions at the epoch time.
            </summary>
      <param name="newEpoch">The new epoch corresponding to the initial state.</param>
      <param name="newInitialState">The new initial state corresponding to the propagation epoch.
            Use the <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.AdjustState``1(System.String,System.Double[],AGI.Foundation.Motion{``0})">AdjustState</see> method on the
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.Converter" /> property to easily create a new initial state vector.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.Restep(System.Double)">
      <summary>
            Instead of advancing from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" />, reintegrate the last step that was taken by the integrator
            by the given step size to produce a new <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />.
            </summary>
      <param name="stepSize">The exact size of the step to take since the last time, which will replace 
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.PreviousStepSize" />.  The sign of the step will determine (set) the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.PropagationDirection" />.
            If the sign is positive, time will be <see cref="F:AGI.Foundation.NumericalMethods.IntegrationSense.Increasing" /> and if negative it will be
            <see cref="F:AGI.Foundation.NumericalMethods.IntegrationSense.Decreasing" /> from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />.</param>
      <returns>The indication of how propagation should proceed after this step, as produced by the
            <see cref="E:AGI.Foundation.Propagators.NumericalPropagator.StepTaken" /> event handler.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagator.StepSizeInformation">
      <summary>
            Gets information about the last step that was taken by the integrator.
            </summary>
    </member>
    <member name="E:AGI.Foundation.Propagators.NumericalPropagator.StepTaken">
      <summary>
            Gets the instance of the event handler which will be triggered after
            every time the propagator takes an integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.TakeStep">
      <summary>
            Advance the state from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" /> by taking a single integration step.
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> will be updated to reflect the new values.
            </summary>
      <returns>The indication of how propagation should proceed after this step, as produced by the
            <see cref="E:AGI.Foundation.Propagators.NumericalPropagator.StepTaken" /> event handler.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagator.TakeStep(System.Double)">
      <summary>
            Advance the state from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" /> by taking a single integration step bounded by a maximum.
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" /> will be updated to reflect the new values.
            </summary>
      <param name="maxStepSize">The maximum step size the integrator can take while advancing the state.
            The sign of this maximum step size will determine (set) the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.PropagationDirection" />.
            If positive, it will be <see cref="F:AGI.Foundation.NumericalMethods.IntegrationSense.Increasing" /> and if negative it will be
            <see cref="F:AGI.Foundation.NumericalMethods.IntegrationSense.Decreasing" /> from the <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentTime" />.</param>
      <returns>The indication of how propagation should proceed after this step, as produced by the
            <see cref="E:AGI.Foundation.Propagators.NumericalPropagator.StepTaken" /> event handler.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition">
      <summary>
        <para>The definitional object that creates a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />.</para>
        <para>It consists of the overall propagation state which represents individual scalar,
            vector, or custom parameters within
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.IntegrationElements" /> (which are integrated during propagation),
            and the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.AuxiliaryElements" /> (which are not). It also contains
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.StateCorrectors" /> which correct the IntegrationElements and their derivatives
            in between propagation steps, the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Epoch" /> of the initial conditions,
            and the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Integrator" /> which integrates the IntegrationElements.</para>
        <para>Call <see cref="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator" /> in order to create the defined <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.#ctor(AGI.Foundation.Propagators.NumericalPropagatorDefinition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Add(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement)">
      <summary>
            Adds the given auxiliary element to the set of <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.AuxiliaryElements" />
            which will be computed during propagation and stored in the raw state output.
            </summary>
      <param name="auxiliaryElement">The auxiliary element to add to the propagation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Add(AGI.Foundation.Propagators.Advanced.PropagationStateCorrector)">
      <summary>
            Adds the given state corrector to the set of <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.StateCorrectors" />
            which will operate on some or all of the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.IntegrationElements" />
            during propagation.
            </summary>
      <param name="corrector">The corrector to add to the propagation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Add(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
            Adds the given state element to the set of <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.IntegrationElements" /> 
            to be integrated by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />.
            </summary>
      <param name="stateElement">The state element to add to the state.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.AuxiliaryElements">
      <summary>
            Gets the collection of <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement">AuxiliaryStateElements</see> which together
            define the auxiliary output from the propagator.  These values are computed after each step based on
            the calculations performed during integration but are not integrated themselves.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CheckForSameDefinition(AGI.Foundation.Propagators.NumericalPropagatorDefinition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.ComputeInitialConditionsOnCreation">
      <summary>
        <para>Gets or sets whether <see cref="T:AGI.Foundation.Propagators.NumericalPropagator">propagators</see> created by this
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition">definition</see> will have the initial conditions of
            their <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.IncludeHighestDerivativeInOutput">highest derivatives</see>
            and <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement">auxiliary elements</see> computed in their
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">CurrentState</see> just after creation.</para>
        <para>This is set to true by default, however in some advanced use cases part of the propagation state
            is parameterized separately from the main propagator and not available for evaluation during the propagation creation
            process.</para>
        <para>If you are receiving exceptions from invalid parameterization during propagator creation setting this to
            false is a possible fix. In that case right after the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> is created
            its <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">CurrentState</see> will have the correct initial state values that were
            specified during the initialization of the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">state elements</see>. However, the indices
            representing the <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement">auxiliary elements</see>, or the
            <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.IncludeHighestDerivativeInOutput">highest derivative</see> information of the state
            elements if applicable, will read 0.0 instead of their actual value.
            Once propagation begins, or <see cref="M:AGI.Foundation.Propagators.NumericalPropagator.Reset">Reset</see> is called the state array will have the correct values.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreateNumericalPropagatorState">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorState" /> based on the current settings of this 
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.
            </summary>
      <returns>A <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorState" /> representing the current settings of this 
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreateNumericalPropagatorState(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorState" /> based on the current settings of this 
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use when initializing values in the 
            returned state.</param>
      <returns>A <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorState" /> representing the current settings of this 
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator">
      <summary>
            Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.
            </summary>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.
            </summary>
      <param name="group">The group to use to create and parameterize all the evaluators
            associated with the state for use during propagation.</param>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator(System.Boolean)">
      <summary>
            Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.
            </summary>
      <param name="includeIntegrationInfo">Indicates whether to store meta-data from the integrator in the output.</param>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator(System.Boolean,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.
            </summary>
      <param name="includeIntegrationInfo">Indicates whether to store meta-data from the integrator in the output.</param>
      <param name="group">The group to use to create and parameterize all the evaluators
            associated with the state for use during propagation.</param>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagatorWithoutComputingAuxiliaryState">
      <summary>
        <para>Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.</para>
        <para>This method differs from the similar <see cref="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator" /> in that
            the resulting <see cref="T:AGI.Foundation.Propagators.NumericalPropagator">NumericalPropagator's</see><see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">CurrentState</see> will have a zeroed auxiliary elements.
            This can be necessary when working with advanced use cases where part of the propagation state
            is parameterized separately from the main propagator, and thus unavailable for calculating inital auxiliary elements.</para>
      </summary>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagatorWithoutComputingAuxiliaryState(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.</para>
        <para>This method differs from the similar <see cref="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator(AGI.Foundation.EvaluatorGroup)" /> in that
            the resulting <see cref="T:AGI.Foundation.Propagators.NumericalPropagator">NumericalPropagator's</see><see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">CurrentState</see> will have a zeroed auxiliary elements.
            This can be necessary when working with advanced use cases where part of the propagation state
            is parameterized separately from the main propagator, and thus unavailable for calculating inital auxiliary elements.</para>
      </summary>
      <param name="group">The group to use to create and parameterize all the evaluators
            associated with the state for use during propagation.</param>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagatorWithoutComputingAuxiliaryState(System.Boolean)">
      <summary>
        <para>Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.</para>
        <para>This method differs from the similar <see cref="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator(System.Boolean)" /> in that
            the resulting <see cref="T:AGI.Foundation.Propagators.NumericalPropagator">NumericalPropagator's</see><see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">CurrentState</see> will have a zeroed auxiliary elements.
            This can be necessary when working with advanced use cases where part of the propagation state
            is parameterized separately from the main propagator, and thus unavailable for calculating inital auxiliary elements.</para>
      </summary>
      <param name="includeIntegrationInfo">Indicates whether to store meta-data from the integrator in the output.</param>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagatorWithoutComputingAuxiliaryState(System.Boolean,AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Creates an object which can propagate the state over spans of time
            or manually step the state from one time to the next.</para>
        <para>This method differs from the similar <see cref="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.CreatePropagator(System.Boolean,AGI.Foundation.EvaluatorGroup)" /> in that
            the resulting <see cref="T:AGI.Foundation.Propagators.NumericalPropagator">NumericalPropagator's</see><see cref="P:AGI.Foundation.Propagators.NumericalPropagator.CurrentState">CurrentState</see> will have a zeroed auxiliary elements.
            This can be necessary when working with advanced use cases where part of the propagation state
            is parameterized separately from the main propagator, and thus unavailable for calculating inital auxiliary elements.</para>
      </summary>
      <param name="includeIntegrationInfo">Indicates whether to store meta-data from the integrator in the output.</param>
      <param name="group">The group to use to create and parameterize all the evaluators
            associated with the state for use during propagation.</param>
      <returns>The propagator which can advance the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Epoch">
      <summary>
            Gets or sets the time at which the initial conditions for each <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> are defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.IntegrationElements">
      <summary>
            Gets the collection of <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">IntegrationStateElements</see> which together
            define the state for the numerical integrator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Integrator">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.NumericalMethods.NumericalIntegrator" /> to use to integrate the
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.IntegrationElements" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.PhaseParameter">
      <summary>
            Gets or sets a parameter which represents the propagation phase.  In general,
            users should never need to explicitly set this property.  It should only be set
            when multiple <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> objects are running in the same <see cref="T:AGI.Foundation.EvaluatorGroup" />,
            such as when elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the phase of the exterior propagator and the
            phase of the interior propagator.  In these cases, it is up to the user to ensure
            that both the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> and all of its elements are configured with the same parameter.
            Otherwise, the definition will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Remove(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement)">
      <summary>
            Remove the given auxiliary element from the propagation.
            This will prevent the instance of this auxiliary element from being
            evaluated during propagated.
            </summary>
      <param name="auxiliaryElement">The auxiliary element to remove from propagation.</param>
      <returns>True if the auxiliary element was successfully removed; otherwise, false.
            This also returns false if the auxiliary element was not found in the current list.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Remove(AGI.Foundation.Propagators.Advanced.PropagationStateCorrector)">
      <summary>
            Remove the given state corrector from the propagation.
            This will prevent the instance of this corrector from operating on the 
            state elements during propagation.
            </summary>
      <param name="corrector">The state corrector to remove from propagation.</param>
      <returns>True if the state corrector was successfully removed; otherwise, false.
            This also returns false if the state corrector was not found in the list.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorDefinition.Remove(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
            Remove the given state element from the representation of the state.
            This will prevent the instance of this state element from being
            propagated.
            </summary>
      <param name="stateElement">The state element to remove from the state.</param>
      <returns>True if the state element was successfully removed; otherwise, false.
            This also returns false if the state element was not found in the current state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.StateCorrectors">
      <summary>
            Gets the collection of correctors which are called after each step but before values are recorded.
            The correctors operate on the last step taken to correct the state and its derivatives for any
            anomalies or constraint conditions encountered during the integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorDefinition.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            in cases where elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> and all of its elements are configured with the same parameter.
            Otherwise, the definition will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.NumericalPropagatorState">
      <summary>
            A <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState">state</see> representing every propagated value in a particular <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.#ctor(AGI.Foundation.Propagators.NumericalPropagatorState,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.#ctor(AGI.Foundation.Time.JulianDate,System.Collections.Generic.ICollection{AGI.Foundation.Propagators.Advanced.PropagationStateElement},System.Collections.Generic.ICollection{AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement})">
      <summary>
            Initialize a new instance.
            </summary>
      <param name="epoch">The time at which the initial values of the elements are valid at.</param>
      <param name="integrationElements">The <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> that will be propagated.</param>
      <param name="auxiliaryElements">The <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement" /> that will be computed along the 
            <paramref name="integrationElements" /> during propagation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.#ctor(AGI.Foundation.Time.JulianDate,System.Collections.Generic.ICollection{AGI.Foundation.Propagators.Advanced.PropagationStateElement},System.Collections.Generic.ICollection{AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement},AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initialize a new instance.
            </summary>
      <param name="epoch">The time at which the initial values of the elements are valid at.</param>
      <param name="integrationElements">The <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> that will be propagated.</param>
      <param name="auxiliaryElements">The <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement" /> that will be computed along the 
            <paramref name="integrationElements" /> during propagation.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use when creating this state.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.#ctor(System.Double[],AGI.Foundation.Time.JulianDate,AGI.Foundation.Propagators.NumericalPropagatorState)">
      <summary>
            Initializes an instance that copies all of the information from the <paramref name="oldState" /> except for the 
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorState.CurrentState" /> and <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorState.CurrentDate" />.
            </summary>
      <param name="state">The new current state.</param>
      <param name="currentDate">The date of the current state.</param>
      <param name="oldState">The state to use to initialize all other properties.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.AuxiliaryElements">
      <summary>
            Gets names of the auxiliary elements.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.AvailableElements">
      <summary>
            Gets the names of all of the elements in this state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.Converter">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Propagators.PropagationStateConverter" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.CurrentDate">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Time.JulianDate" /> that this state is valid.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.CurrentState">
      <summary>
            Gets a copy of the raw state.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.Epoch">
      <summary>
            Gets the epoch that the propagated started from.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.GetDefinitionHashCode">
      <summary>
        Gets a hash code representing the definition of this object.
      </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.GetMotion``1(System.String)">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Motion`1" /> stored in this state specified by the <paramref name="elementName" />.
            </summary>
      <param name="elementName">The name of the <see cref="T:AGI.Foundation.Motion`1" /> in this state.</param>
      <typeparam name="T">The type of the stored <see cref="T:AGI.Foundation.Motion`1" /> (<see cref="T:AGI.Foundation.Coordinates.Cartesian" />, <see cref="T:System.Double" />, etc...).</typeparam>
      <returns>The <see cref="T:AGI.Foundation.Motion`1" /> of the <paramref name="elementName" /> in this state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.GetValue``1(System.String)">
      <summary>
            Gets the value specified by the <paramref name="elementName" />.
            </summary>
      <param name="elementName">The name of the value in this state.</param>
      <typeparam name="T">The type of the stored value (<see cref="T:AGI.Foundation.Coordinates.Cartesian" />, <see cref="T:System.Double" />, etc...).</typeparam>
      <returns>The value of the <paramref name="elementName" /> in this state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.IntegrationElements">
      <summary>
            Gets names of the integration elements.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.IsSameDefinition(System.Object)">
      <summary>
        Determines if this object has the same definition as another object.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if this object has the same definition as the specified one.
        false if the other object is null, a different type
        than this one, or if this object and the specified one have different definitions.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.ModifyMotion``1(System.String,AGI.Foundation.Motion{``0})">
      <summary>
            Modifies this instance of <see cref="T:AGI.Foundation.Coordinates.IMotionState" /> with the <see cref="T:AGI.Foundation.Motion`1" /> of the 
            specified <paramref name="elementName">element</paramref> updated.
            </summary>
      <param name="elementName">The name of the element to change.</param>
      <param name="newValue">The new values for the <paramref name="elementName">element</paramref>.</param>
      <typeparam name="T">The type that the <see cref="T:AGI.Foundation.Motion`1" /> described by the <paramref name="elementName" /> 
            is.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.ModifyValue``1(System.String,``0)">
      <summary>
            Modifies the <paramref name="elementName">element</paramref> in this instance of <see cref="T:AGI.Foundation.Coordinates.IGeneralState" /> 
            with the <paramref name="newValue" />.
            </summary>
      <param name="elementName">The name of the element to change.</param>
      <param name="newValue">The new value for the <paramref name="elementName">element</paramref>.</param>
      <typeparam name="T">The type that the value described by the <paramref name="elementName">element</paramref> is.</typeparam>
    </member>
    <member name="P:AGI.Foundation.Propagators.NumericalPropagatorState.PropagationParameter">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation" /> based on the <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorState.CurrentState" />, <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorState.Epoch" />, 
            and <see cref="P:AGI.Foundation.Propagators.NumericalPropagatorState.CurrentDate" /> of this state. This is useful for when you need to evaluate an 
            <see cref="T:AGI.Foundation.IEvaluator">evaluator</see> outside of propagation that was parameterized in a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.NumericalPropagatorState.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationEventArgs">
      <summary>
            Provides information about the current propagation event conditions and provides a 
            means of indicating how the propagation should continue.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationEventArgs.#ctor(AGI.Foundation.Time.JulianDate,System.Double[],AGI.Foundation.Time.JulianDate,System.Double[],AGI.Foundation.Propagators.PropagationEventTrigger,AGI.Foundation.NumericalMethods.StepSizeInformation)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="previousTime">The time at the beginning of the current step.</param>
      <param name="previousState">The raw state at the beginning of the current step.</param>
      <param name="currentDate">The time at the end of the current step when the event is fired.</param>
      <param name="currentState">The raw state at the end of the current step when the event is fired.</param>
      <param name="trigger">Indication of which method triggered this event.</param>
      <param name="info">Information about the last step taken by the integrator.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.CurrentState">
      <summary>
            Gets the raw state at the end of the current step when this event is fired.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.CurrentTime">
      <summary>
            Gets the time at the end of the current step when this event is fired.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.Indication">
      <summary>
            Gets or sets an indication of how the propagator should continue after this event.
            By default, the propagation will continue, unless the event handler indicates
            a different condition.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.PreviousState">
      <summary>
            Gets the raw state at the beginning of the current step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.PreviousTime">
      <summary>
            Gets the time at the beginning of the current step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.StepSizeInformation">
      <summary>
            Gets information about the last step taken by the integrator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationEventArgs.StopPropagation">
      <summary>
            Sets the <see cref="P:AGI.Foundation.Propagators.PropagationEventArgs.Indication" /> to <see cref="F:AGI.Foundation.Propagators.PropagationEventIndication.StopPropagationAfterStep" />
            to prevent further propagation after this step.  To continue propagation after stopping it,
            call <see cref="M:AGI.Foundation.Propagators.NumericalPropagator.Propagate(AGI.Foundation.Time.Duration)" /> again or take steps manually by calling
            <see cref="M:AGI.Foundation.Propagators.NumericalPropagator.TakeStep" /> or <see cref="M:AGI.Foundation.Propagators.NumericalPropagator.Restep(System.Double)" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationEventArgs.Trigger">
      <summary>
            Gets information about which method triggered this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationEventIndication">
      <summary>
            An indication of how the propagator should proceed.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationEventIndication.ContinuePropagation">
      <summary>
            Continue the current propagation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationEventIndication.StopPropagationAfterStep">
      <summary>
            Stop the propagation after the current step.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationEventTrigger">
      <summary>
            Indicates which kind of propagation method triggered the 
            <see cref="E:AGI.Foundation.Propagators.NumericalPropagator.StepTaken" /> event.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationEventTrigger.NewStep">
      <summary>
            Indicates that the event was triggered by taking a new step to advance the state.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationEventTrigger.Restep">
      <summary>
            Indicates that the event was triggered by the propagator repropagating the previous step.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationScalar">
      <summary>
            An <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> representing a scalar value to be integrated over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.#ctor(AGI.Foundation.Propagators.PropagationScalar,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.#ctor(System.Double[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="initialValues">The value and its derivatives at the starting epoch of propagation.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.AdaptiveWeights">
      <summary>
            Gets or sets the weights to be applied to the scalar values when
            computing the error which determines how to adapt the step size during integration.
            This is in addition to any weights used in the integration algorithm
            itself.  If not set, the weights are initialized to 1.0 as a default value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.CheckForSameDefinition(AGI.Foundation.Propagators.PropagationScalar)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this state element.  This method is also responsible
            for configuring the state parameter and the state input indices on any parameterized
            geometry types used by this element.  Each parameterized geometry type will have
            a static configuration method which will allow it to configure itself in a particular
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.
            </summary>
      <param name="group">The evaluator group in which to configure the parameters.</param>
      <param name="stateInputIndices">The set of indices corresponding to the location
            of each value or derivative of this state element in the overall state.</param>
      <returns>The output instance associated with this state element.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationScalar.GetDerivatives(AGI.Foundation.EvaluatorGroup)">
      <summary>
            This is used by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> to obtain an instance of a state element evaluator 
            that can compute the derivatives of this element of the state during propagation.  
            It cannot be used outside of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> as the geometry for the propagation state
            will be unavailable.
            </summary>
      <param name="group">The group in which to create the evaluator and its dependents.</param>
      <returns>The evaluator that can compute the derivatives of this element of the state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.InitialState">
      <summary>
            Gets or sets the initial value and its derivatives up to the order
            of the <see cref="P:AGI.Foundation.Propagators.PropagationScalar.ScalarDerivative" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.IntegrationValue">
      <summary>
        <para>Gets a <see cref="T:AGI.Foundation.Geometry.Scalar" /> object that is parameterized on this scalar value during integration.</para>
        <para>This scalar is only valid while the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> is running.
            For more general use a <see cref="T:AGI.Foundation.Geometry.ScalarInterpolator" /> should be created from the
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagationStateHistory" /> produced by the propagator.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.Order">
      <summary>
            Gets the order of the differential equation corresponding to this element.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.ScalarDerivative">
      <summary>
            Gets or sets the derivative of the highest <see cref="P:AGI.Foundation.Propagators.PropagationScalar.Order" /> which specifies the motion of this scalar 
            parameter over time.  The order that this scalar represents will be determined by the number of values
            entered for the <see cref="P:AGI.Foundation.Propagators.PropagationScalar.InitialState" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationScalar.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            when multiple <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> objects are running in the same <see cref="T:AGI.Foundation.EvaluatorGroup" />,
            such as when elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationStage">
      <summary>
            An enumerator that communicates the which stage of propagation an evaluator is called during.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationStage.UpdatePriorToStep">
      <summary>
            The call occurs at the beginning of the step, prior to propagation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationStage.PropagationStep">
      <summary>
            The call occurs during propagation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationStage.CorrectionAfterStep">
      <summary>
            The call occurs at the end of the step, after propagation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.PropagationStage.OutsideOfPropagation">
      <summary>
            This signifies that the evaluation was not made as part of propagation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationStateArray">
      <summary>
            Provides a means of specifying an indexable object which represents a set of values mapping a 
            subset of the overall state elements.  The sub-elements are defined by a set of indices
            into the overall state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateArray.#ctor(System.Double[],System.Int32[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="state">The overall state array.</param>
      <param name="indices">The indices specifying the elements of this sub-state.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateArray.Equals(System.Object)">
      <summary>
            Returns true if this object is equivalent to the given object.
            </summary>
      <param name="obj">The object to test.</param>
      <returns>True if the given object is equivalent to this object.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateArray.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationStateArray.IndicesIntoOverallState">
      <summary>
            Gets the set of indices for each substate element which represent the 
            indices into the <see cref="P:AGI.Foundation.Propagators.PropagationStateArray.OverallState" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationStateArray.Item(System.Int32)">
      <summary>
            Gets or sets the value of the element at the given sub-state index.
            The value represents the element in the overall state at 
            </summary>
      <param name="index">The index into this substate (not the index into the overall state).</param>
      <returns>The value at the given substate index.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationStateArray.Length">
      <summary>
            Gets the length of this substate.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateArray.op_Equality(AGI.Foundation.Propagators.PropagationStateArray,AGI.Foundation.Propagators.PropagationStateArray)">
      <summary>
            Determines whether two instances are <see cref="M:AGI.Foundation.Propagators.PropagationStateArray.Equals(System.Object)">equal</see>.
            </summary>
      <param name="left">The left hand argument to compare.</param>
      <param name="right">The right hand argument to compare.</param>
      <returns>True if the two instances are equivalent.  Otherwise, false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateArray.op_Inequality(AGI.Foundation.Propagators.PropagationStateArray,AGI.Foundation.Propagators.PropagationStateArray)">
      <summary>
            Determines whether two instances are not <see cref="M:AGI.Foundation.Propagators.PropagationStateArray.Equals(System.Object)">equal</see>.
            </summary>
      <param name="left">The left hand argument to compare.</param>
      <param name="right">The right hand argument to compare.</param>
      <returns>True if the two instances are not equivalent.  Otherwise, false.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationStateArray.OverallState">
      <summary>
            Gets the overall state array which this substate maps into.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationStateConverter">
      <summary>
            A converter which can take raw data from the output of propagation and turn it into useful
            data by using <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> and <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement" />
            converter types to convert to their corresponding output types.  For instance, a 
            <see cref="T:AGI.Foundation.Propagators.PropagationVector" /> defines its values using <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> types.  So
            if the user enters an element identification corresponding to a <see cref="T:AGI.Foundation.Propagators.PropagationVector" />,
            it can convert the raw data into the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> data
            containing the vector value and its derivatives.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateConverter.AdjustState``1(System.String,System.Double[],AGI.Foundation.Motion{``0})">
      <summary>
            Adjust a subset of the overall state to new values based on the requested element.
            </summary>
      <param name="elementID">The identifier specifying which element's state values to update.</param>
      <param name="stateToAdjust">The overall state to adjust.  Remember that if modifying the 
            <see cref="P:AGI.Foundation.Propagators.NumericalPropagator.InitialState" />, the array will be a copy and needs to be reinitialized
            by passing the adjusted instance of a copy to <see cref="M:AGI.Foundation.Propagators.NumericalPropagator.Reset(AGI.Foundation.Time.JulianDate,System.Double[])" />.</param>
      <param name="newStateValues">The new state element values for the requested element.</param>
      <typeparam name="T">The type corresponding to the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> of
            the requested element.</typeparam>
      <returns>True if the update was successful.  Otherwise, if the specified new values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateConverter.AdjustStateFromElement(System.String,System.Double[],AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Adjust the subset of the overall raw state corresponding to this element to new values.
            </summary>
      <param name="elementID">The string identifying which propagation state element to use when converting the raw state.
            (<see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter" /> does not output its element as a <see cref="T:AGI.Foundation.Motion`1">Motion</see>
            of double arrays, so auxiliary state element IDs are not supported.)</param>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="stateElementValues">The new values and derivatives for the requested element
            represented as an array.  To obtain an instance of this array, call <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.GetElementFromState(System.String,System.Double[])" />.</param>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateConverter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateConverter.ConvertState``1(System.String,System.Double[])">
      <summary>
            Convert a given state and auxiliary values to useful data based on the given element.
            </summary>
      <param name="elementID">The string identifying which propagation state or auxiliary state element to use when converting the raw state.</param>
      <param name="state">The raw state.</param>
      <typeparam name="T">The type corresponding to the output of the requested <paramref name="elementID" />.
            For instance, if requesting an <paramref name="elementID" /> corresponding to an instance of a
            <see cref="T:AGI.Foundation.Propagators.PropagationVector" /> the type should be <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> but if the 
            <paramref name="elementID" /> corresponds to an instance of a <see cref="T:AGI.Foundation.Propagators.PropagationScalar" />
            the type should be double.</typeparam>
      <returns>The values corresponding to the output of the requested element for the given state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationStateConverter.ElementIDs">
      <summary>
            Gets a collection of the propagated and auxiliary element identification strings
            enumerating the elements within the state that this converter represents.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateConverter.GetDateMotionCollection``1(System.String,System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate},System.Collections.Generic.IList{System.Double[]})">
      <summary>
            Convert a set of time indexed data to a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> based on a given element.
            </summary>
      <param name="elementID">The string identifying which propagation state or auxiliary state element to use when converting the raw state.</param>
      <param name="times">The times at which the state was recorded.</param>
      <param name="state">The raw states recorded at each of the <paramref name="times" />.</param>
      <typeparam name="T">The type corresponding to the output of the requested <paramref name="elementID" />.
            For instance, if requesting an <paramref name="elementID" /> corresponding to an instance of a
            <see cref="T:AGI.Foundation.Propagators.PropagationVector" /> the type should be <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> but if the 
            <paramref name="elementID" /> corresponds to an instance of a <see cref="T:AGI.Foundation.Propagators.PropagationScalar" />
            the type should be double.</typeparam>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the type of the requested state element output.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationStateConverter.GetElementFromState(System.String,System.Double[])">
      <summary>
            Produces this state element's values and their derivatives from the overall raw state.
            </summary>
      <param name="elementID">The string identifying which propagation state element to use when converting the raw state.
            (<see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter" /> does not output its element as a <see cref="T:AGI.Foundation.Motion`1">Motion</see>
            of double arrays, so auxiliary state element IDs are not supported.
            Use <see cref="M:AGI.Foundation.Propagators.PropagationStateConverter.ConvertState``1(System.String,System.Double[])" /> instead.)</param>
      <param name="overallState">The overall raw state from which to produce this element's array.</param>
      <returns>A representation of the values of the requested state element as arrays corresponding to the 
            representation of the element.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationStateConverter.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagationVector">
      <summary>
            A <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> representing a vector value to be integrated over time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.#ctor(AGI.Foundation.Coordinates.Cartesian[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="initialValues">The initial value of the vector and its derivatives 
            at the starting epoch of propagation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.#ctor(AGI.Foundation.Propagators.PropagationVector,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.AdaptiveWeights">
      <summary>
            Gets or sets the weights to be applied to the scalar values when
            computing the error which determines how to adapt the step size during integration.
            This is in addition to any weights used in the integration algorithm
            itself.  If not set, the weights are initialized to 1.0 as a default value.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.CheckForSameDefinition(AGI.Foundation.Propagators.PropagationVector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this state element.  This method is also responsible
            for configuring the state parameter and the state input indices on any parameterized
            geometry types used by this element.  Each parameterized geometry type will have
            a static configuration method which will allow it to configure itself in a particular
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.
            </summary>
      <param name="group">The evaluator group in which to configure the parameters.</param>
      <param name="stateInputIndices">The set of indices corresponding to the location
            of each value or derivative of this state element in the overall state.</param>
      <returns>The output instance associated with this state element.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagationVector.GetDerivatives(AGI.Foundation.EvaluatorGroup)">
      <summary>
            This is used by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> to obtain an instance of a state element evaluator 
            that can compute the derivatives of this element of the state during propagation.  
            It cannot be used outside of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> as the geometry for the propagation state
            will be unavailable.
            </summary>
      <param name="group">The group in which to create the evaluator and its dependents.</param>
      <returns>The evaluator that can compute the derivatives of this element of the state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.InitialState">
      <summary>
            Gets or sets the initial vector and its derivatives up to the order
            of the <see cref="P:AGI.Foundation.Propagators.PropagationVector.VectorDerivative" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.IntegrationValue">
      <summary>
        <para>Gets a <see cref="T:AGI.Foundation.Geometry.Vector" /> object that is parameterized on a vector value in the state during integration.</para>
        <para>This vector is only valid while the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> is running.
            For more general use a <see cref="T:AGI.Foundation.Geometry.VectorInterpolator" /> should be created from the
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagationStateHistory" /> produced by the propagator.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.Order">
      <summary>
            Gets the order of the differential equation corresponding to this element.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.PropagationAxes">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Axes" /> in which the propagation occurs.  These are the axes in which the 
            <see cref="P:AGI.Foundation.Propagators.PropagationVector.VectorDerivative" /> is represented.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            when multiple <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> objects are running in the same <see cref="T:AGI.Foundation.EvaluatorGroup" />,
            such as when elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagationVector.VectorDerivative">
      <summary>
            Gets or sets the derivative of the highest <see cref="P:AGI.Foundation.Propagators.PropagationVector.Order" /> which specifies the motion of this vector 
            parameter over time.  The order that this vector represents will be determined by the number of values
            entered for the <see cref="P:AGI.Foundation.Propagators.PropagationVector.InitialState" /> (its Order plus one).
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.PropagatorPoint">
      <summary>
            A point with its location computed by a propagator.  To create an instance of this class,
            call a propagator method that returns an instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagatorPoint.#ctor(AGI.Foundation.Propagators.PropagatorPoint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagatorPoint.#ctor(System.Object)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="propagator">The propagator associated with this point.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagatorPoint.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagatorPoint.CheckForSameDefinition(AGI.Foundation.Propagators.PropagatorPoint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagatorPoint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.PropagatorPoint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.PropagatorPoint.Propagator">
      <summary>
            Gets the propagator associated with this point.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4Elements">
      <summary>
            A set of orbital elements intended to be propagated with the SGP4 propagator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Elements.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Elements.#ctor(AGI.Foundation.Propagators.Sgp4Elements)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.ArgumentOfPerigee">
      <summary>
            Gets or sets the argument of perigee, in degrees.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.BStar">
      <summary>
            Gets or sets the BSTAR drag term, in units of 1 / EarthRadii.
            This term represents a modification of the ballistic coefficient
            (Coefficient of drag times area over mass).  The value is modified
            by one half atmospheric density and expressed in units of inverse
            Earth radii.  Source: <a href="https://celestrak.com/columns/v04n03/">https://celestrak.com/</a></summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Elements.Clone">
      <summary>
        Clones this object.
      </summary>
      <returns>
        A new instance which is a copy of this object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.Eccentricity">
      <summary>
            Gets or sets the eccentricity
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.Epoch">
      <summary>
            Gets or sets the epoch at which these initial conditions are defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.Inclination">
      <summary>
            Gets or sets the inclination, in degrees
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.MeanAnomaly">
      <summary>
            Gets or sets the mean anomaly, in degrees.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.MeanMotion">
      <summary>
            Gets or sets the mean motion, in revolutions per day.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.RawEpoch">
      <summary>
            Gets or sets the epoch at which these initial conditions are defined,
            represented in the standard form: YYDDD.DDDD.  Note: this will
            be represented to as much precision as possible and will not reflect
            the <see cref="P:AGI.Foundation.Propagators.TwoLineElementSet.RawEpoch" /> taken from a 
            <see cref="T:AGI.Foundation.Propagators.TwoLineElementSet" /> format.  To represent the correct
            precision for a TLE, use the <see cref="T:AGI.Foundation.Propagators.TwoLineElementSet" /> type instead.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.RightAscensionOfAscendingNode">
      <summary>
            Gets or sets the right ascension of the ascending node, in degrees
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Elements.SwitchingMethod">
      <summary>
            Gets or sets the method to use when switching between this element set and the following element set.
            By default, this is <see cref="T:AGI.Foundation.Propagators.Sgp4ElementsSwitchByEpoch" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach">
      <summary>
            An algorithm which determines when to switch from one element set to another 
            by propagating each element set against the next to determine the the time
            at which the range between the positions of the two orbits is the smallest.
            This may not represent the most accurate position for the orbit at all times.
            However, it will minimize discontinuities which may result from fitting the
            newer element set to the correct orbit.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach.#ctor">
      <summary>
            Create a new instance using a default <see cref="T:AGI.Foundation.Propagators.Sgp4Propagator" />
            to test the element sets.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach.#ctor(AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach.#ctor(AGI.Foundation.Propagators.Sgp4Propagator)">
      <summary>
            Create a new instance using the given propagator to test the element sets.
            </summary>
      <param name="propagator">The propagator to use to test the element sets.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach.GetSwitchTime(AGI.Foundation.Propagators.Sgp4Elements,AGI.Foundation.Propagators.Sgp4Elements)">
      <summary>
            Determine the intervals of time covered by each element set.
            The intervals should not overlap.
            </summary>
      <param name="previous">The previous element set from which to transition.</param>
      <param name="next">The next element set to which to transition.</param>
      <returns>The intervals of time and their corresponding element sets.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4ElementsSwitchByClosestApproach.Propagator">
      <summary>
            Gets the propagator used to test for the closest approach between two element sets.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4ElementsSwitchByEpoch">
      <summary>
            An algorithm which determines when to switch from one element set to another 
            by comparing their respective <see cref="P:AGI.Foundation.Propagators.Sgp4Elements.Epoch" /> values.  The
            first element set is used up until the epoch of the second and the last element
            set is used after its epoch.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByEpoch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Propagators.Sgp4ElementsSwitchByEpoch" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByEpoch.GetSwitchTime(AGI.Foundation.Propagators.Sgp4Elements,AGI.Foundation.Propagators.Sgp4Elements)">
      <summary>
            Determine the intervals of time covered by each element set.
            The intervals should not overlap.
            </summary>
      <param name="previous">The previous element set from which to transition.</param>
      <param name="next">The next element set to which to transition.</param>
      <returns>The intervals of time and their corresponding element sets.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4ElementsSwitchByMidpoint">
      <summary>
            An algorithm which determines when to switch from one element set to another 
            by comparing their respective <see cref="P:AGI.Foundation.Propagators.Sgp4Elements.Epoch" /> values.  The
            first element set is used up until the midpoint in time between the epoch of the 
            first and the epoch of the second.  The last element set is used from the 
            midpoint in time between its epoch and the epoch of the set before it.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByMidpoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Propagators.Sgp4ElementsSwitchByMidpoint" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitchByMidpoint.GetSwitchTime(AGI.Foundation.Propagators.Sgp4Elements,AGI.Foundation.Propagators.Sgp4Elements)">
      <summary>
            Determine the intervals of time covered by each element set.
            The intervals should not overlap.
            </summary>
      <param name="previous">The previous element set from which to transition.</param>
      <param name="next">The next element set to which to transition.</param>
      <returns>The intervals of time and their corresponding element sets.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4ElementsSwitching">
      <summary>
            An algorithm for determining when to switch from one set of elements to another.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitching.#ctor">
      <summary>
            Create a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitching.#ctor(AGI.Foundation.Propagators.Sgp4ElementsSwitching,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4ElementsSwitching.GetSwitchTime(AGI.Foundation.Propagators.Sgp4Elements,AGI.Foundation.Propagators.Sgp4Elements)">
      <summary>
            Determine the intervals of time covered by each element set.
            The intervals should not overlap.
            </summary>
      <param name="previous">The previous element set from which to transition.</param>
      <param name="next">The next element set to which to transition.</param>
      <returns>The intervals of time and their corresponding element sets.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4Propagator">
      <summary>
            Propagates an orbit using the NORAD SGP4/SDP4 model as defined by the Center for Space Standards and Innovation (CSSI).
            More information and the algorithm's code can be found at <a href="http://www.centerforspace.com">www.centerforspace.com</a>.
            <para>
            Note that the SGP4 propagator performs its propagation using the <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">TAI time standard</see>.
            If the user asks for a propagation over an interval and timestep specified in <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime">UTC</see>, 
            the system interprets this to mean that the reported values should be in <see cref="P:AGI.Foundation.Time.TimeStandard.CoordinatedUniversalTime">UTC</see>.  
            However, in order to compute the correct timespans (potentially propagating through leap seconds), the system will convert to 
            <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">TAI</see> in order to compare times.  Since the length of
            a second is different in various time standards, the stepsize is measured in the time standard the user specifies even though the
            comparisons and propagation occurs in <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">TAI</see>.  
            If the length of a given time step is important, this may be a necessary calculation.
            However, the performance of the SGP4 propagation can be improved by specifying input times in 
            <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">TAI</see>.
            </para><para>
            The acceleration returned from the SGP4Propagator is identical to the J4Propagator, which is an approximation used to prevent
            code using this propagator from being unable to provide analysis in the absence of acceleration.
            In STK Components, there are a number of places that expect or require acceleration information from propagators.  
            In order to support this, the Sgp4Propagator will return an acceleration when asked.  However, because the SGP4 theory 
            does not explicitly contain a representation of the acceleration and the velocity of the SGP4 theory does not correspond 
            exactly with the position, the acceleration returned for SGP4 is an approximation.  Compared with numerical differentiation 
            of the position, the velocity returned from the SGP4 theory can have a discrepancy anywhere from a few millimeters to 
            several meters.  Since the acceleration perturbations from drag and third body effects are several orders of magnitude less
            than gravitational effects, the J4 perturbations are used here to approximate the acceleration for SGP4.
            </para></summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.#ctor">
      <summary>
            Initializes a new instance with default values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.#ctor(AGI.Foundation.Propagators.Sgp4Elements)">
      <summary>
            Constructs a new instance of an <see cref="T:AGI.Foundation.Propagators.Sgp4Propagator" /> using the specified initial conditions.
            </summary>
      <param name="initialConditions">The initial conditions from which to propagate.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="initialConditions" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.#ctor(AGI.Foundation.Propagators.Sgp4Propagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Propagators.Sgp4Elements})">
      <summary>
            Constructs a new instance of an <see cref="T:AGI.Foundation.Propagators.Sgp4Propagator" /> using the specified initial conditions.
            </summary>
      <param name="elementSets">The initial conditions from which to propagate.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.CheckForSameDefinition(AGI.Foundation.Propagators.Sgp4Propagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> that represents the motion produced by this propagator.
            </summary>
      <returns>The created point.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.ElementSets">
      <summary></summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.EstimateElements(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput)">
      <summary>
            Produces a batch least squares fit for a given set of trajectory observations (states).  The specified position and velocity
            provide the values to use as the state expected at the requested output epoch in the configuration.  The estimation takes
            this state and uses <see cref="M:AGI.Foundation.Propagators.Sgp4Propagator.MeanElementsAtEpoch(AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)" /> to produce an initial guess for the least squares.
            </summary>
      <param name="ephemerisInTEME">The set of time indexed state observations over which to perform the fit.</param>
      <param name="epochPosition">The position at the requested <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.OutputEpoch" /> in the 
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" /> frame.</param>
      <param name="epochVelocity">The velocity at the requested <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.OutputEpoch" /> in the 
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" /> frame.</param>
      <param name="configuration">Additional configuration data indicating how to perform the fit and whether to solve for 
            the BStar drag term. This can also prescribe a value for BStar to use when estimating the elements.</param>
      <returns>A result containing the estimated <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" /> and associated information from the fit.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.EstimateElements(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput)">
      <summary>
            Produces a batch least squares fit for a given set of trajectory observations (states).
            This overload will take the first position and velocity after the requested <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.OutputEpoch" />
            in the <paramref name="ephemerisInTEME" /> and use <see cref="M:AGI.Foundation.Propagators.Sgp4Propagator.MeanElementsAtEpoch(AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)" /> to
            produce an initial guess.
            </summary>
      <param name="ephemerisInTEME">The set of time indexed state observations over which to perform the fit.</param>
      <param name="configuration">Additional configuration data indicating how to perform the fit and whether 
            to solve for the BStar drag term.  This can also prescribe a value for BStar to use 
            when estimating the elements.</param>
      <returns>A result containing the estimated <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" /> and associated information from the fit.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate at individual dates.  
            <para>
            This evaluator propagates the orbit state from <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.InitialConditions" /> 
            around the Earth.  The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate,int)</see> method
            will be the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> corresponding to the orbital 
            position and velocity at the given <see cref="T:AGI.Foundation.Time.JulianDate" /> expressed in the <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" />'s 
            <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame">TrueEquatorMeanEquinoxFrame</see>.
            </para><para>
            *Note* When evaluating with this evaluator, it will be more efficient to specify times using
            the <see cref="P:AGI.Foundation.Time.TimeStandard.InternationalAtomicTime">TAI time standard</see> to avoid the need
            to convert in order to perform the propagation.  The length of a time step may be different in
            different <see cref="T:AGI.Foundation.Time.TimeStandard">TimeStandards</see>.  So be careful when specifying times.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.InitialConditions">
      <summary>
            Gets or sets the first set of elements in the <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.ElementSets" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="value" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.MeanElementsAtEpoch(AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian)">
      <summary>
            Produces an element set from a given <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> state at a given time.  Since SGP4 uses
            perturbations, the classical orbital elements produced by <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" /> may
            not correspond to the specified position and velocity when propagated as SGP4 elements.  This method
            performs a simple iteration to correct the classical elements so that the resulting SGP4 elements will
            represent the specified position and velocity at the given time as accurately as possible. This will 
            assume that the <see cref="P:AGI.Foundation.Propagators.Sgp4Elements.BStar" /> value is zero.
            </summary>
      <param name="date">The epoch of the state.</param>
      <param name="posInTEME">The position in the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />.</param>
      <param name="velInTEME">The velocity in the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />.</param>
      <returns>The mean SGP4 elements which will produce the given state when evaluated at the given time.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.MeanElementsAtEpoch(AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Int32)">
      <summary>
            Produces an element set from a given <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> state at a given time.  Since SGP4 uses
            perturbations, the classical orbital elements produced by <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" /> may
            not correspond to the specified position and velocity when propagated as SGP4 elements.  This method
            performs a simple iteration to correct the classical elements so that the resulting SGP4 elements will
            represent the specified position and velocity at the given time as accurately as possible. This will 
            assume that the <see cref="P:AGI.Foundation.Propagators.Sgp4Elements.BStar" /> value is zero.
            </summary>
      <param name="date">The epoch of the state.</param>
      <param name="posInTEME">The position in the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />.</param>
      <param name="velInTEME">The velocity in the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />.</param>
      <param name="maximumIterations">The maximum number of iterations to perform when trying to match the specified state.</param>
      <returns>The mean SGP4 elements which will produce the given state when evaluated at the given time.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.MeanElementsAtEpoch(AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartesian,AGI.Foundation.Coordinates.Cartesian,System.Int32,System.Double)">
      <summary>
            Produces an element set from a given <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> state at a given time.  Since SGP4 uses
            perturbations, the classical orbital elements produced by <see cref="T:AGI.Foundation.Coordinates.ModifiedKeplerianElements" /> may
            not correspond to the specified position and velocity when propagated as SGP4 elements.  This method
            performs a simple iteration to correct the classical elements so that the resulting SGP4 elements will
            represent the specified position and velocity at the given time as accurately as possible. This will 
            use the specified value for <see cref="P:AGI.Foundation.Propagators.Sgp4Elements.BStar" /> in the resulting element set. Also,
            note that this method may have difficulty converging for perfectly circular orbits.
            </summary>
      <param name="date">The epoch of the state.</param>
      <param name="posInTEME">The position in the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />.</param>
      <param name="velInTEME">The velocity in the <see cref="P:AGI.Foundation.Celestial.EarthCentralBody.TrueEquatorMeanEquinoxFrame" />.</param>
      <param name="maximumIterations">The maximum number of iterations to perform when trying to match the specified state.</param>
      <param name="bStarValue">Specifies the value of <see cref="P:AGI.Foundation.Propagators.Sgp4Elements.BStar" /> to use when producing the
            set of SGP4 elements which match the given state.</param>
      <returns>The mean SGP4 elements which will produce the given state when evaluated at the given time.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.ReferenceFrame">
      <summary>
            Gets True Equator, Mean Equinox (TEME) Of Epoch, the coordinate system in which SGP4 produces ephemeris.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput">
      <summary>
            A class containing configuration information for the static estimation methods
            available on the <see cref="T:AGI.Foundation.Propagators.Sgp4Propagator" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.#ctor(AGI.Foundation.Time.JulianDate)">
      <summary>
            Initializes a new instance with the given requested output epoch for the estimated <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" />.
            </summary>
      <param name="outputEpoch">The requested epoch for the estimated <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" />.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.BStarDragValue">
      <summary>
            Gets or sets the value for the BStar drag value to use for the <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" />.
            If <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.SolveForDrag" /> is false, this value of BStar will not be modified when solving
            for the resulting elements.  This is useful in cases where trying to solve for BStar may cause
            instability in the least squares iterations.  By default, this value is zero.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.ConvergenceTolerance">
      <summary>
            Gets or sets the convergence tolerance to use when solving.  By default, the value is 1e-4.
            This is used to determine when the normalized root mean square error of the residuals
            has converged.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.MaxIterations">
      <summary>
            Gets or sets the maximum iterations to perform when solving.  By default, the value is 20.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.OutputEpoch">
      <summary>
            Gets or sets the output epoch for the estimated <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.SolveForDrag">
      <summary>
            Gets or sets a value indicating whether to attempt to solve for the BStar drag value.  
            By default, this value is true.  If false, the system will use the <see cref="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationInput.BStarDragValue" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput">
      <summary>
            A class containing the estimated <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" /> along with the associated
            information from the fit.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.#ctor">
      <summary>
            Initialize a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.#ctor(System.Int32)">
      <summary>
            Initialize a new instance and initialize the residual data 
            for the given number of observations.
            </summary>
      <param name="numPts">The number of observations in the input data.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.DragDisabled">
      <summary>
            Gets a value indicating whether the estimation of drag was disabled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.EstimatedElements">
      <summary>
            Gets the estimated set of elements representing the ephemeris at epoch.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.FinalPositionResiduals">
      <summary>
            Gets an array of the final position errors between the input position and the estimated position.
            Note that if the data is unavailable, this value will be null.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.FinalRootMeanSquareError">
      <summary>
            Gets the final value of the root mean square error of the estimated fit.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.InitialPositionResiduals">
      <summary>
            Gets an array of the initial position errors between the input position and the estimated position.
            Note that if the data is unavailable, this value will be null.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.InitialRootMeanSquareError">
      <summary>
            Gets the initial value of the root mean square error of the estimated fit.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.IterationsUsed">
      <summary>
            Gets a value indicating the number of iterations used for the solution.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.MeanMotionDot">
      <summary>
            Gets the first time derivative of mean motion, in units of revolutions per day squared.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.MeanMotionDotDot">
      <summary>
            Gets the second time derivative of mean motion, in units of revolutions per day cubed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Sgp4Propagator.Sgp4EstimationOutput.NumberOfObservations">
      <summary>
            Gets the number of observations used for the fit (corresponding to the number of states in the input).
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.SortingFormat">
      <summary>
            An enumeration that defines the order in which entries in a <see cref="T:AGI.Foundation.Propagators.NumericalPropagationStateHistory" />
            are sorted.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.SortingFormat.Forwards">
      <summary>
            Entries which occur earlier chronologically have a lower index than entries which occur later.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.SortingFormat.Reverse">
      <summary>
            Entries which occur later chronologically have a lower index than entries which occur earlier.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.StateTransitionMatrix">
      <summary>
        <para>An extended state transition matrix, if consider parameters are not used then it functions as a normal state transition matrix:
            mapping the value of the state parameters from one time to another time.</para>
        <para>The state transition matrix represents the transformation
            from the state at one time to the state at another time. This can be used as an alternative to propagating a state in time
            with <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />, but is more often used in order to find the time-varying covariance of the state. This is
            because the construction of a <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" /> entails the linearization of the state, and
            in most cases calculating the derivatives of the state transition matrix takes as long or longer as calculating
            the derivatives of the state.</para>
        <para>To find the covariance of a state over time a <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" /> is propagated with a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            and the resulting data is used to create the covariance information for the same period using
            <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.PopulateCovarianceCollection(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Matrix},AGI.Foundation.Propagators.TransitionType)" />.</para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.#ctor(AGI.Foundation.Propagators.StateTransitionMatrix,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.AddConsiderParameter(AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable)">
      <summary>
            Adds a consider parameter to the <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />. Consider parameters can be used when calculating covariance
            for a state parameter. The transitions are not actually calculated for a consider parameter, however the values of the consider
            parameter do affect those of the state parameters. For example, if you weren't interested in examining how the uncertainty of
            the coefficient of drag evolved over time, but were interested in how it's uncertainty affected the uncertainty of the state
            parameters, then you would add it as a consider parameter.
            </summary>
      <param name="considerParameter">The consider parameter to add to those tracked in the <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.AddStateParameter(AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable,AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable)">
      <summary>
        <para>Adds a state parameter to the <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />. The state parameters added here
            make up the state represented by the state transition matrix. The <paramref name="stateDerivative" /> of the <paramref name="stateParameter" /> is
            needed in order to calculate the derivative of the state transition matrix so that it can be integrated.</para>
      </summary>
      <param name="stateParameter">The state parameter to add to those tracked in the <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.</param>
      <param name="stateDerivative">The derivative of the given state parameter.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.CheckForSameDefinition(AGI.Foundation.Propagators.StateTransitionMatrix)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.ConsiderDimension">
      <summary>
            Gets the summed dimension of all of the consider parameters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetConsiderParameter(System.Int32)">
      <summary>
            Gets the consider parameter at the specified index which has been added to this <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.
            </summary>
      <param name="index">The index of the consider parameter to retrieve.</param>
      <returns>A reference to the consider parameter at the specified location.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this state element.  This method is also responsible
            for configuring the state parameter and the state input indices on any parameterized
            geometry types used by this element.  Each parameterized geometry type will have
            a static configuration method which will allow it to configure itself in a particular
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.
            </summary>
      <param name="group">The evaluator group in which to configure the parameters.</param>
      <param name="stateInputIndices">The set of indices corresponding to the location
            of each value or derivative of this state element in the overall state.</param>
      <returns>The output instance associated with this state element.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetDerivatives(AGI.Foundation.EvaluatorGroup)">
      <summary>
            This is used by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> to obtain an instance of a state element evaluator 
            that can compute the derivatives of this element of the state during propagation.  
            It cannot be used outside of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> as the geometry for the propagation state
            will be unavailable.
            </summary>
      <param name="group">The group in which to create the evaluator and its dependents.</param>
      <returns>The evaluator that can compute the derivatives of this element of the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetStateDerivative(System.Int32)">
      <summary>
            Gets the state derivative at the specified index which has been added to this <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.
            </summary>
      <param name="index">The index of the state derivative to retrieve.</param>
      <returns>A reference to the state derivative at the specified location.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetStateParameter(System.Int32)">
      <summary>
            Gets the state parameter at the specified index which has been added to this <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.
            </summary>
      <param name="index">The index of the state parameter to retrieve.</param>
      <returns>A reference to the state parameter at the specified location.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetStateUpdater(AGI.Foundation.EvaluatorGroup)">
      <summary>
        <para>Creates an object that will update the state of the <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" /> in between propagation steps, if necessary.</para>
        <para>If <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.TransitionType" /> is <see cref="F:AGI.Foundation.Propagators.TransitionType.PiecewiseTransition">PiecewiseTransition</see>
            then the matrices produced during propagation represent the transition matrices from the previous time step to their own time step.
            This means that at the beginning of each propagation step the value of the state transition matrix must be reset to the identity matrix.</para>
        <para>If <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.TransitionType" /> is <see cref="F:AGI.Foundation.Propagators.TransitionType.EpochTransition">EpochTransition</see>
            then the matrices produced during propagation represent the transition matrices from the epoch to their own time step,
            and this reset is not necessary.</para>
      </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> the state updater will be part of.</param>
      <returns>Null if <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.TransitionType" /> is <see cref="F:AGI.Foundation.Propagators.TransitionType.EpochTransition">TransitionType.EpochTransition</see>,
            otherwise an <see cref="T:AGI.Foundation.Propagators.IUpdatePriorToStep" /> to reset the
            matrix to Identity at the beginning of each propagation step.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.IndexOfConsiderParameter(AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable)">
      <summary>
            Searches for the specified <paramref name="considerParameter" /> and returns the index which
            can be used to access it via <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetConsiderParameter(System.Int32)" /> or <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.RemoveConsiderParameterAt(System.Int32)" />.
            </summary>
      <param name="considerParameter">The consider parameter to search for.</param>
      <returns>The index of the <paramref name="considerParameter" /> if found, -1 otherwise.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.IndexOfStateDerivative(AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable)">
      <summary>
            Searches for the specified <paramref name="stateDerivative" /> and returns the index which
            can be used to access it via <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetStateDerivative(System.Int32)" /> or <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.RemoveStateParameterAt(System.Int32)" />.
            </summary>
      <param name="stateDerivative">The state derivative to search for.</param>
      <returns>The index of the <paramref name="stateDerivative" /> if found, -1 otherwise.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.IndexOfStateParameter(AGI.Foundation.NumericalMethods.Advanced.IPartialDifferentiable)">
      <summary>
            Searches for the specified <paramref name="stateParameter" /> and returns the index which
            can be used to access it via <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.GetStateParameter(System.Int32)" /> or <see cref="M:AGI.Foundation.Propagators.StateTransitionMatrix.RemoveStateParameterAt(System.Int32)" />.
            </summary>
      <param name="stateParameter">The state parameter to search for.</param>
      <returns>The index of the <paramref name="stateParameter" /> if found, -1 otherwise.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.InitialConsiderTransitionMatrix">
      <summary>
        <para>Gets or sets the optional user-specified initial consider transition matrix. In general this should be left
            null and the default value will be used instead. The default initial state takes the form of a
            <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.StateDimension" /> by <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.ConsiderDimension" /> zero matrix.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.InitialStateTransitionMatrix">
      <summary>
        <para>Gets or sets the optional user-specified initial state transition matrix. In general this should be left
            null and the default value will be used instead. The default initial state takes the form of a
            <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.StateDimension" /> by <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.StateDimension" /> identity matrix.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.IntegrationDynamicMatrix">
      <summary>
        <para>Gets a <see cref="T:AGI.Foundation.Geometry.DynamicMatrix" /> which is parameterized on the value of the
            <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" /> during integration.</para>
        <para>This matrix is only valid while the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> is running.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.LinearDimension">
      <summary>
        <para>Gets the linear dimension of the <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" /></para>
        <para>The StateTransitionMatrix takes the form of a square matrix of dimensions L x L, where L is equal to
            N, the total dimension of the state parameters (<see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.StateDimension" />) plus Q,
            the total dimension of the consider parameters (<see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.ConsiderDimension" />). The
            <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix">StateTransitionMatrix's</see>
            dimension as far as the propagation state is concerned is L squared, and that is what the <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.Dimension" />
            property returns. This property returns the value of L.</para>
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.NumberOfConsiderParameters">
      <summary>
            Gets the number of consider parameters that have been added to this <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.NumberOfStateParameters">
      <summary>
            Gets the number of state parameters and derivatives that have been added to this <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.Order">
      <summary>
            Gets the order of the differential equation corresponding to this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.PopulateCovarianceCollection(AGI.Foundation.Coordinates.Matrix,AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.Matrix},AGI.Foundation.Propagators.TransitionType)">
      <summary>
            Transforms an initial covariance matrix forward in time using the given collection of
            <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix">state transition matrices</see>.
            </summary>
      <param name="initialCovariance">The initial covariance matrix that corresponds with the first time step in the collection.</param>
      <param name="stateTransitionMatrices">The <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the state transition matrices and their
            corresponding times to be used to move the covariance values forward in time.</param>
      <param name="transitionType">Indicates type of the given state transition matrices.
            See also <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.TransitionType" />.</param>
      <returns>A new date motion collection of covariances which corresponds to the state transition matrices.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.RemoveConsiderParameterAt(System.Int32)">
      <summary>
            Removes the consider parameter at the given <paramref name="index" />.
            </summary>
      <param name="index">The index of the consider parameter to be removed.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.StateTransitionMatrix.RemoveStateParameterAt(System.Int32)">
      <summary>
            Removes the state parameter at the given <paramref name="index" />, as well as its derivative.
            </summary>
      <param name="index">The index of the state parameter and derivative to remove.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.StateDimension">
      <summary>
            Gets the summed dimension of all of the state parameters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            when multiple <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> objects are running in the same <see cref="T:AGI.Foundation.EvaluatorGroup" />,
            such as when elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StateTransitionMatrix.TransitionType">
      <summary>
            Gets or sets whether this <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" /> is operating in epoch or piecewise mode.
            By default this is set to <see cref="F:AGI.Foundation.Propagators.TransitionType.EpochTransition">TransitionType.EpochTransition</see>,
            which means that the state transition matrix at each time step transforms the state from the epoch state to the state at
            that time step.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse">
      <summary>
            Stores the ephemeris computed by a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> and information about how the 
            propagation was stopped.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse.#ctor(System.Double,AGI.Foundation.Time.JulianDate,AGI.Foundation.StoppingConditions.StoppingCondition,System.Boolean,AGI.Foundation.Propagators.NumericalPropagationStateHistory)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="value">The value of the stopping condition at the stop.</param>
      <param name="date">The date the value was computed at.</param>
      <param name="conditionStoppedOn">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> that stopped the function.</param>
      <param name="aborted">A flag indicated if the function run was aborted.</param>
      <param name="results">The results computed by the function.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse.Aborted">
      <summary>
            Gets whether or not the function run aborted.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse.ConditionStoppedOn">
      <summary>
            Gets the <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition">definition</see> of the stopping condition
            that stopped the function.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse.FinalDate">
      <summary>
            Gets the date at which propagation stopped.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse.PropagationHistory">
      <summary>
            Gets the results that the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> computed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.StoppedNumericalPropagatorResponse.ValueOfCondition">
      <summary>
            Gets the value as computed by the stopping condition.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.TransitionType">
      <summary>
            An enumeration that defines the format of transformation described by a <see cref="T:AGI.Foundation.Propagators.StateTransitionMatrix" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.TransitionType.EpochTransition">
      <summary>
            The state transition matrix will first equal the <see cref="P:AGI.Foundation.Propagators.StateTransitionMatrix.InitialStateTransitionMatrix" /> at the propagation epoch
            and will integrate continuously throughout propagation. This means that the StateTransitionMatrix at each
            time step will be the matrix that transitions from the initial epoch to that time step.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Propagators.TransitionType.PiecewiseTransition">
      <summary>
            Every time step the StateTransitionMatrix will be reverted to the Identity matrix
            prior to propagation. This means that the StateTransitionMatrix at each time step will transition the state
            from the previous time step to that current time step.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.TwoBodyPropagator">
      <summary>
            Propagates an orbit using a simple two-body model.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.DelaunayElements)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="elements" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="elements">The elements from which to propagate.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.EquinoctialElements)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="elements" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="elements">The elements from which to propagate.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.KeplerianElements)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="elements" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="elements">The elements from which to propagate.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Coordinates.ModifiedKeplerianElements)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="elements" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="elements">The elements from which to propagate.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Geometry.ReferenceFrame,AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="orbitEpoch">The Julian date at which the initial conditions are defined.</param>
      <param name="referenceFrame">
            The reference frame in which the <paramref name="initialConditions" /> are defined.
            Generally this should be the <see cref="P:AGI.Foundation.Celestial.CentralBody.InertialFrame" /> of the central body
            around which you are propagating.  See the Remarks section for more information.
            </param>
      <param name="initialConditions">The elements from which to propagate.</param>
      <param name="gravitationalParameter">The gravitational parameter for the central body around which to propagate.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="initialConditions" /> do not contain velocity information.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate at individual dates.        
            <para>
            This evaluator propagates the orbit state from <see cref="P:AGI.Foundation.Propagators.TwoBodyPropagator.InitialConditions" /> at <see cref="P:AGI.Foundation.Propagators.TwoBodyPropagator.OrbitEpoch" /> 
            based on the <see cref="P:AGI.Foundation.Propagators.TwoBodyPropagator.GravitationalParameter" />.  The result of the 
            <see cref="M:AGI.Foundation.Function`2.Evaluate(`0,System.Int32)">Evaluate(JulianDate,int)</see> method
            will be the <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see> corresponding to the orbital 
            position and velocity at the given <see cref="T:AGI.Foundation.Time.JulianDate" /> expressed in the propagator's <see cref="P:AGI.Foundation.Propagators.TwoBodyPropagator.ReferenceFrame" />.
            </para></summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoBodyPropagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoBodyPropagator.GravitationalParameter">
      <summary>
            Gets the gravitational parameter for the central body around which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoBodyPropagator.InitialConditions">
      <summary>
            Gets or sets the orbital elements from which to propagate.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoBodyPropagator.OrbitEpoch">
      <summary>
            Gets or sets the Julian date at which the <see cref="P:AGI.Foundation.Propagators.TwoBodyPropagator.InitialConditions" /> of
            the orbit are defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoBodyPropagator.ReferenceFrame">
      <summary>
            Gets or sets the reference frame in which the ephemeris is produced.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.TwoLineElementSet">
      <summary>
            A NORAD two-line element set (TLE).  Note that the precision of most TLE's is limited by the 
            string representations in the TLE.  The resulting ephemeris has a precision on the order of kilometers.
            When creating a TLE based on orbital elements, it is important to note that information will be lost
            when converting precise elements into a string representation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.#ctor">
      <summary>
            Initializes a new Two Line Element Set with default parameters.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.#ctor(AGI.Foundation.Propagators.Sgp4Elements,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Initializes a new Two Line Element Set (TLE) from a set of <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" /> and additional
            meta-data contained in the TLE format.
            </summary>
      <param name="elements">The elements specifying the essential orbit ephemeris data.</param>
      <param name="name">The name of the satellite to appear on the line just prior to the TLE.</param>
      <param name="satelliteNumber">The NORAD satellite catalog number, as a string.</param>
      <param name="classification">The single character classification for the satellite.  All civilian
            space objects are classified with 'U' for 'Unclassified'.</param>
      <param name="internationalDesignator">The international catalog number assigned by the 
            World Data Center-A for Rockets and Satellites.</param>
      <param name="meanMotionDot">The first time derivative of the mean motion at epoch.</param>
      <param name="meanMotionDotDot">The second time derivative of the mean motion at epoch.</param>
      <param name="elementNumber">A number assigned to indicate the number of times this ephemeris has been regenerated.</param>
      <param name="revolutions">The number of times the spacecraft has passed through its ascending node (since launch).</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.#ctor(AGI.Foundation.Propagators.TwoLineElementSet)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.#ctor(System.String)">
      <summary>
            Initializes a new Two Line Element Set from a string representation of the TLE.
            An invalid checksum value will be silently ignored.
            </summary>
      <param name="tle">The TLE represented in the standard format.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new Two Line Element Set from a string representation of the TLE
            and optionally verifies the checksums.
            </summary>
      <param name="tle">The TLE represented in the standard format.</param>
      <param name="verifyChecksums">true to verify the checksums and throw an 
            exception if they are invalid.  false to ignore the checksums.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when any of the following conditions are met:
            <list type="bullet"><item><description><paramref name="tle" /> contains more than two lines.</description></item><item><description><paramref name="tle" /> has an invalid checksum for line 1 or line 2.</description></item><item><description><paramref name="tle" /> has an invalid format for line 1 or line 2.</description></item></list></exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.#ctor(System.String,System.Boolean,System.Char[])">
      <summary>
            Initializes a new Two Line Element Set from a string representation of the TLE
            and optionally verifies the checksums.
            </summary>
      <param name="tle">The TLE represented in the standard format.</param>
      <param name="verifyChecksums">true to verify the checksums and throw an 
            exception if they are invalid.  false to ignore the checksums.</param>
      <param name="whiteSpaceCharacterSet">An array of Unicode characters to be treated as white space within the TLE string.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when any of the following conditions are met:
            <list type="bullet"><item><description><paramref name="tle" /> contains more than two lines.</description></item><item><description><paramref name="tle" /> has an invalid checksum for line 1 or line 2.</description></item><item><description><paramref name="tle" /> has an invalid format for line 1 or line 2.</description></item></list></exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.ChecksumLine1">
      <summary>
            Gets or sets the checksum for line 1.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.ChecksumLine2">
      <summary>
            Gets or sets the checksum for line 2.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.Classification">
      <summary>
            Gets or sets the classification.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.Clone">
      <summary>
        Clones this object.
      </summary>
      <returns>
        A new instance which is a copy of this object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.ElementNumber">
      <summary>
            Gets or sets the element number
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.EphemerisType">
      <summary>
            Gets or sets the ephemeris type. 0=SGP4/SDP4 (as appropriate), 1=SGP, 2=SGP4, 3=SDP4, 4=SGP8, 5=SDP8.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.Epoch">
      <summary>
            Gets or sets the epoch at which these initial conditions are defined.
            Note: The epoch will only be represented to the precision of the <see cref="T:AGI.Foundation.Propagators.TwoLineElementSet" />
            format from the <see cref="P:AGI.Foundation.Propagators.TwoLineElementSet.RawEpoch" />.  For greater precision, use <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" /> directly.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.InternationalDesignator">
      <summary>
            Gets or sets the international designator
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.MeanMotionDot">
      <summary>
            Gets or sets the first derivative of mean motion divided by two, in revolutions per day squared.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.MeanMotionDotDot">
      <summary>
            Gets or sets the second derivative of mean motion divided by six, in revolutions per day cubed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.Name">
      <summary>
            Gets or sets the spacecraft name
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.RawEpoch">
      <summary>
            Gets or sets the epoch at which these initial conditions are defined,
            represented in the standard form: YYDDD.DDDD.  Note: this will
            be represented to only the precision of the <see cref="T:AGI.Foundation.Propagators.TwoLineElementSet" /> format.
            For greater precision, use <see cref="T:AGI.Foundation.Propagators.Sgp4Elements" /> directly.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.RevolutionNumber">
      <summary>
            Gets or sets the revolution number at epoch.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.TwoLineElementSet.SatelliteNumber">
      <summary>
            Gets or sets the satellite number.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleString">
      <summary>
            Returns a TLE string representing this <see cref="T:AGI.Foundation.Propagators.TwoLineElementSet" /> in the standard NORAD format,
            <a href="http://www.celestrak.com/NORAD/documentation/tle-fmt.asp">described by CelesTrak</a>.  The
            format consists of two or three lines with a new line after each.  If the <see cref="P:AGI.Foundation.Propagators.TwoLineElementSet.Name" /> is not
            null and not empty, the output contains three lines where the first
            is the result of <see cref="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleStringLine0" />, the second is the result of
            <see cref="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleStringLine1" />, and the third is the result of <see cref="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleStringLine2" />.
            If the name is null or empty, line zero is omitted.  In either case, the lines are separated by
            your platform's new line string, usually "\n" or "\r\n".
            </summary>
      <returns>The TLE string.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            The properties of this instance cannot be represented as a TLE string because a value is outside the
            allowed range or the <see cref="P:AGI.Foundation.Propagators.TwoLineElementSet.Name" /> property is longer than 24 characters.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleStringLine0">
      <summary>
            Returns line 0 of the TLE represented in standard NORAD format,
            <a href="http://www.celestrak.com/NORAD/documentation/tle-fmt.asp">described by CelesTrak</a>.
            Line 0 contains the <see cref="P:AGI.Foundation.Propagators.TwoLineElementSet.Name" /> padded to 24 characters.
            The returned line does not contain any new line or line break characters.
            </summary>
      <returns>Line 0 of the TLE string.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            The properties of this instance cannot be represented as a TLE string because the
            <see cref="P:AGI.Foundation.Propagators.TwoLineElementSet.Name" /> property is longer than 24 characters.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleStringLine1">
      <summary>
            Returns line 1 of the TLE represented in standard NORAD format,
            <a href="http://www.celestrak.com/NORAD/documentation/tle-fmt.asp">described by CelesTrak</a>.
            Line 1 contains the classification, international designator, epoch, etc.
            The returned line does not contain any new line or line break characters.
            </summary>
      <returns>Line 1 of the TLE string.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            The properties of this instance cannot be represented as a TLE string because a value is outside the
            allowed range.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.ToTleStringLine2">
      <summary>
            Returns line 2 of the TLE represented in standard NORAD format,
            <a href="http://www.celestrak.com/NORAD/documentation/tle-fmt.asp">described by CelesTrak</a>.
            Line 2 contains the inclination, right ascension of the ascending node, eccentricity, etc.
            The returned line does not contain any new line or line break characters.
            </summary>
      <returns>Line 2 of the TLE string.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">
            The properties of this instance cannot be represented as a TLE string because a value is outside the
            allowed range.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.TwoLineElementSet.VerifyChecksum(System.String)">
      <summary>
            Verifies the checksum of the specified TLE line.
            </summary>
      <param name="line">The TLE line to verify.</param>
      <returns>true if the checksum matches the rest of the line, otherwise false.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Waypoint">
      <summary>
            Defines the characteristics at a waypoint.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.#ctor(AGI.Foundation.Propagators.Waypoint,AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Coordinates.Cartographic,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="previousWaypoint">The previous waypoint in the route.</param>
      <param name="shape">
            The shape model on which the waypoints are specified.  This will typically be 
            <c>CentralBodiesFacet.GetFromContext().Earth.Shape</c>.
            </param>
      <param name="location">The planetodetic location of the new waypoint.</param>
      <param name="groundSpeed">The speed at which to arrive at this waypoint.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Coordinates.Cartographic,System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="date">The date at which the waypoint is achieved.</param>
      <param name="location">The planetodetic position at the waypoint.</param>
      <param name="groundSpeed">The speed tangent to the ellipsoid surface.</param>
      <param name="rateOfClimb">The velocity normal to the ellipsoid surface.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Waypoint.Date">
      <summary>
            Gets the date at which the waypoint is achieved.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.Equals(AGI.Foundation.Propagators.Waypoint)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Waypoint.GroundSpeed">
      <summary>
            Gets the speed tangent to the ellipsoid surface.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Waypoint.Location">
      <summary>
            Gets the planetodetic position at the waypoint.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.op_Equality(AGI.Foundation.Propagators.Waypoint,AGI.Foundation.Propagators.Waypoint)">
      <summary>
        Returns true if the two instances are exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> represents the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Waypoint.op_Inequality(AGI.Foundation.Propagators.Waypoint,AGI.Foundation.Propagators.Waypoint)">
      <summary>
        Returns true if the two instances are not exactly equal.
      </summary>
      <param name="left">
        The instance to compare to <paramref name="right" />.
      </param>
      <param name="right">
        The instance to compare to <paramref name="left" />.
      </param>
      <returns>
        true if <paramref name="left" /> does not represent the same value as <paramref name="right" />; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Waypoint.RateOfClimb">
      <summary>
            Gets the velocity normal to the ellipsoid surface.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.WaypointCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Propagators.Waypoint">Waypoints</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointCollection.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointCollection.#ctor(System.Collections.Generic.IList{AGI.Foundation.Propagators.Waypoint})">
      <summary>Initializes a new instance.</summary>
      <param name="list">The list that is wrapped by the new waypoint collection.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.WaypointPropagator">
      <summary>
            Propagates a path connecting waypoints relative to an ellipsoid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.#ctor(AGI.Foundation.Celestial.CentralBody,System.Collections.Generic.IList{AGI.Foundation.Propagators.Waypoint})">
      <summary>
            Initializes a waypoint propagator.
            </summary>
      <param name="centralBody">The reference central body.</param>
      <param name="waypoints">The list of waypoints that define the path and motion.</param>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="waypoints" /> does not contain at least two items.
            </exception>
      <exception cref="T:System.ArithmeticException">Thrown when the waypoint collection does not model
            constant accelerations between the waypoints.</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.#ctor(AGI.Foundation.Propagators.WaypointPropagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.WaypointPropagator.AvailabilityIntervals">
      <summary>
        Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> over which data is available.
        If the availability interval is infinite, this returns
        <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.CheckForSameDefinition(AGI.Foundation.Propagators.CartesianOnePointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.CheckForSameDefinition(AGI.Foundation.Propagators.WaypointPropagator)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.ConstructConstantVelocityWaypointPropagator(AGI.Foundation.Celestial.CentralBody,System.Collections.Generic.IList{AGI.Foundation.Time.JulianDate},System.Collections.Generic.IList{AGI.Foundation.Coordinates.Cartographic})">
      <summary>
            Creates a waypoint propagator from a list of times and locations. The object will travel from point to point
            at a constant ground speed and rate of climb, with discontinuous jumps in those parameters at the waypoints.
            </summary>
      <param name="centralBody">The reference central body.</param>
      <param name="times">The list of times the point will be at the given <paramref name="positions" />.</param>
      <param name="positions">The list of positions the point will be at the given <paramref name="times" />.</param>
      <returns>A waypoint propagator where each coordinate is visited at the specified time, while traveling at constant speed
            between coordinates.</returns>
      <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="times" /> and <paramref name="positions" /> lists have different numbers of elements,
            or do not contain at least two items each.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.DetermineDuration(System.Double,System.Double,System.Double)">
      <summary>
            Assuming constant acceleration, determines the duration from the provided parameters.
            </summary>
      <param name="displacement">The total displacement between the initial and final points (distance).</param>
      <param name="initialVelocity">The velocity at the initial point (distance per time).</param>
      <param name="finalVelocity">The velocity at the final point (distance per time).</param>
      <returns>The total duration between the initial and final points (time).</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.DetermineFinalVelocity(System.Double,System.Double,System.Double)">
      <summary>
            Assuming constant acceleration, determines the final velocity from the provided parameters.
            </summary>
      <param name="displacement">The total displacement between the initial and final points (distance).</param>
      <param name="duration">The total duration between the initial and final points (time).</param>
      <param name="initialVelocity">The velocity at the initial point (distance per time).</param>
      <returns>The velocity at the final point (distance per time).</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.DetermineInitialVelocity(System.Double,System.Double,System.Double)">
      <summary>
            Assuming constant acceleration, determines the initial velocity from the provided parameters.
            </summary>
      <param name="displacement">The total displacement between the initial and final points (distance).</param>
      <param name="duration">The total duration between the initial and final points (time).</param>
      <param name="finalVelocity">The velocity at the final point (distance per time).</param>
      <returns>The velocity at the initial point (distance per time).</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.WaypointPropagator.Ellipsoid">
      <summary>
            Gets the reference ellipsoid.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can propagate the position of the path of a platform over time as it traverses the given 
            collection of <see cref="P:AGI.Foundation.Propagators.WaypointPropagator.Waypoints" /> using great arcs across the reference <see cref="P:AGI.Foundation.Propagators.WaypointPropagator.Ellipsoid" /> shape model.  
            The resulting evaluator will produce the <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> position
            for a given <see cref="T:AGI.Foundation.Time.JulianDate" /> within the range of the waypoint data represented by <see cref="P:AGI.Foundation.Propagators.WaypointPropagator.TimeInterval" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="group" /> is null.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.GetMotionReferenceFrame">
      <summary>
            Gets the reference frame in which the motion is defined.
            </summary>
      <returns>The reference frame.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.WaypointPropagator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.WaypointPropagator.ReferenceFrame">
      <summary>
            Gets the reference frame in which ephemeris information is produced.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.WaypointPropagator.TimeInterval">
      <summary>
            Gets the time interval over which the propagator can supply ephemeris.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.WaypointPropagator.Waypoints">
      <summary>
            Gets the list of waypoints.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement">
      <summary>
            Represents a set of variables which are computed and stored in the propagation output
            but are not integrated with the state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.#ctor(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.GetConverter(System.Int32[])">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this auxiliary state element.
            </summary>
      <param name="auxiliaryIndices">The set of indices corresponding to the location
            of each value of this auxiliary state element in the overall auxiliary state.</param>
      <returns>The converter for this output.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.GetEvaluator(AGI.Foundation.EvaluatorGroup,System.Int32[])">
      <summary>
            Gets an evaluator which can compute the auxiliary variables based on the current time and any
            "integrated" definitional objects taken from <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">PropagationStateElements</see> 
            which are updated during integration.
            </summary>
      <param name="group">The evaluator group in which to construct the evaluator.</param>
      <param name="auxiliaryIndices">The set of indices corresponding to the location
            of each value of this auxiliary state element in the overall auxiliary state.</param>
      <returns>An evaluator which computes the auxiliary variables for this element.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.Identification">
      <summary>
            Gets the string identifying this instance in the overall output.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement.Order">
      <summary>
            Gets or sets the order of this auxiliary state.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter">
      <summary>
            Base class for output associated with an <see cref="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElement" />.
            This represents the indexed auxiliary state, and a means of 
            converting the raw output information back into useful information specific
            to this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.#ctor(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Copies an existing instance of the class.
            </summary>
      <param name="existingInstance">An existing instance of the class.</param>
      <param name="context">The <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> which describes the copy operation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.#ctor(System.String,System.Int32[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="indices">The indices of the individual values in the overall auxiliary state.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.AuxiliaryIndices">
      <summary>
            Gets the indices into the auxiliary state output.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.ConvertState``1(System.Double[])">
      <summary>
            Convert the raw auxiliary state into this instance's <see cref="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.TypeOfOutput">Type</see>
            and its derivatives.
            </summary>
      <param name="auxiliaryState">The raw auxiliary state to convert.</param>
      <typeparam name="T">The <see cref="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.TypeOfOutput" /> produced by this instance.</typeparam>
      <returns>The value and its derivatives corresponding to the auxiliary state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.Order" />) within this element.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.Identification">
      <summary>
            Gets the string identifying this instance in the overall output.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.Order">
      <summary>
            Gets the order of this auxiliary state.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementConverter.TypeOfOutput">
      <summary>
            Gets the type associated with the output of this instance.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator">
      <summary>
            Abstract base class for the evaluator produced by an auxiliary state variable.
            This evaluator is responsible for efficiently computing the auxiliary variables to
            add them to the propagation output.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.#ctor(AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.ComputeAuxiliary(AGI.Foundation.Time.JulianDate,AGI.Foundation.Propagators.PropagationStateArray)">
      <summary>
            Compute the auxiliary variable values and store them in the auxiliary state.
            </summary>
      <param name="time">The current time at which to evaluate.</param>
      <param name="auxiliaryArray">The auxiliary state in which to store the computed auxiliary values.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.AuxiliaryStateElementEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter">
      <summary>
            Represents output associated with a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> corresponding
            to a set of <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> values.
            This represents the indexed state, and a means of 
            converting the raw output information back into a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.#ctor(AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Copies an existing instance of the class.
            </summary>
      <param name="existingInstance">An existing instance of the class.</param>
      <param name="context">The <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> which describes the copy operation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.#ctor(System.String,AGI.Foundation.Motion{System.Int32[]},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="stateIndices">The indices of the individual values and their derivatives in the overall state.</param>
      <param name="initialState">The values of the state at the epoch of the overall <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.#ctor(System.String,AGI.Foundation.Motion{System.Int32[]},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Cartesian},AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="stateIndices">The indices of the individual values and their derivatives in the overall state.</param>
      <param name="initialState">The values of the state at the epoch of the overall <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</param>
      <param name="weights">A set of weights associated with each value in the state to use when performing adaptive
            step control with an <see cref="T:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.AdjustStateFromElement(System.Double[],AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Adjust the subset of the overall raw state corresponding to this element to new values.
            </summary>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="stateElementValues">The new values and derivatives for the requested element
            represented as an array.  To obtain an instance of this array, call <see cref="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.GetElementFromState(System.Double[])" />.</param>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.AdjustStateWithType``1(System.Double[],AGI.Foundation.Motion{``0})">
      <summary>
            Adjust the subset of the raw state corresponding to this element to new values.
            </summary>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="newStateElement">The new values and derivatives for the requested element.</param>
      <typeparam name="T">The type corresponding to the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> of
            this element.</typeparam>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="newStateElement" />
            are not an instance of <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see>.</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.ConvertState``1(System.Double[])">
      <summary>
            Convert the raw state into this instance's <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput">Type</see>
            and its derivatives.
            </summary>
      <param name="overallState">The raw state to convert.</param>
      <typeparam name="T">The <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> produced by this instance.</typeparam>
      <returns>The value and its derivatives corresponding to the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.ConvertState(System.Double[])">
      <summary>
            Convert the raw state into a <see cref="T:AGI.Foundation.Coordinates.Cartesian">Cartesian</see>
            and its derivatives.
            </summary>
      <param name="overallState">The raw state to convert.</param>
      <returns>The value and its derivatives corresponding to the state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.GetElementFromState(System.Double[])">
      <summary>
            Produces this state element's values and their derivatives from the overall raw state.
            </summary>
      <param name="overallState">The overall raw state from which to produce this element's array.</param>
      <returns>A representation of the values of this state as arrays of length <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension" /> in
            a motion of this element's <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> minus one.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.CartesianStateElementConverter.TypeOfOutput">
      <summary>
            Gets the type associated with the output of this instance.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter">
      <summary>
            Converts output associated with a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> corresponding
            to a set of <see cref="T:AGI.Foundation.Coordinates.Matrix" /> values back and forth
            between its raw indexed state, and a <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Matrix&gt;</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.#ctor(AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Copies an existing instance of the class.
            </summary>
      <param name="existingInstance">An existing instance of the class.</param>
      <param name="context">The <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> which describes the copy operation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.#ctor(System.String,AGI.Foundation.Motion{System.Int32[]},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Matrix})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="stateIndices">The indices of the individual values and their derivatives in the overall state.</param>
      <param name="initialState">The values of the state at the epoch of the overall <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.#ctor(System.String,AGI.Foundation.Motion{System.Int32[]},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Matrix},AGI.Foundation.Motion{AGI.Foundation.Coordinates.Matrix})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="stateIndices">The indices of the individual values and their derivatives in the overall state.</param>
      <param name="initialState">The values of the state at the epoch of the overall <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</param>
      <param name="weights">A set of weights associated with each value in the state to use when performing adaptive
            step control with an <see cref="T:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.AdjustStateFromElement(System.Double[],AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Adjust the subset of the overall raw state corresponding to this element to new values.
            </summary>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="stateElementValues">The new values and derivatives for the requested element
            represented as an array.  To obtain an instance of this array, call <see cref="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.GetElementFromState(System.Double[])" />.</param>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.AdjustStateWithType``1(System.Double[],AGI.Foundation.Motion{``0})">
      <summary>
            Adjust the subset of the raw state corresponding to this element to new values.
            </summary>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="newStateElement">The new values and derivatives for the requested element.</param>
      <typeparam name="T">The type corresponding to the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> of
            this element.</typeparam>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="newStateElement" />
            are not an instance of <see cref="T:AGI.Foundation.Motion`1">Motion&lt;Cartesian&gt;</see>.</exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.ConvertState(System.Double[])">
      <summary>
            Convert the raw state into a <see cref="T:AGI.Foundation.Coordinates.Matrix" />
            and its derivatives.
            </summary>
      <param name="overallState">The raw state to convert.</param>
      <returns>The value and its derivatives corresponding to the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.ConvertState``1(System.Double[])">
      <summary>
            Convert the raw state into this instance's <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput">Type</see>
            and its derivatives.
            </summary>
      <param name="overallState">The raw state to convert.</param>
      <typeparam name="T">The <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> produced by this instance.</typeparam>
      <returns>The value and its derivatives corresponding to the state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.GetElementFromState(System.Double[])">
      <summary>
            Produces this state element's values and their derivatives from the overall raw state.
            </summary>
      <param name="overallState">The overall raw state from which to produce this element's array.</param>
      <returns>A representation of the values of this state as arrays of length <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension" /> in
            a motion of this element's <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> minus one.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.MatrixStateElementConverter.TypeOfOutput">
      <summary>
            Gets the type associated with the output of this instance.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation">
      <summary>
            Represents information about the current integration step during propagation.
            This is used by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> to parameterize the geometry
            based on the raw state and to obtain derivative information from the corresponding
            differential equations.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.#ctor(AGI.Foundation.NumericalMethods.DerivativeMode,AGI.Foundation.Time.JulianDate,System.Double,System.Double[],System.Double[])">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="mode">The current mode of derivative evaluation.</param>
      <param name="epoch">The time at which the independent variable is zero.</param>
      <param name="epochSeconds">The seconds elapsed since the propagation <paramref name="epoch" />.</param>
      <param name="state">The current overall state, including memory for storing the auxiliary variables.</param>
      <param name="derivatives">The current derivatives of the dependent variables in the state 
            (not including auxiliary variables).  This is set by the derivative evaluators during integration.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.DerivativeMode">
      <summary>
            Gets the current mode in which the derivatives are to be evaluated.  This specifies
            whether to evaluate the entire set of derivatives or whether to evaluate an approximation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.Derivatives">
      <summary>
            Gets the array representing the current derivatives of the dependent variables.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.Epoch">
      <summary>
            Gets the epoch of propagation from which the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.SecondsSinceEpoch" /> is measured.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.SecondsSinceEpoch">
      <summary>
            Gets the current value of the independent variable.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationEvaluationInformation.State">
      <summary>
            Gets the current values of the dependent variables.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationPointElement">
      <summary>
            A <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" /> describing an integrated point.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationPointElement.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationPointElement.#ctor(AGI.Foundation.Propagators.Advanced.PropagationPointElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationPointElement.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationPointElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationPointElement.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationPointElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationPointElement.IntegrationFrame">
      <summary>
            Gets the frame of the integrated point.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationPointElement.IntegrationPoint">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Geometry.Point" /> of the integrated position.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStageParameter">
      <summary>
            Represents the stagee of propagation as a parameter when defining types used 
            during propagation that depend on the stage.  This type is used internally
            to coordinate the state of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> with the geometry
            needed by the various force models and equations of motion.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStageParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStageParameter" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStageParameter.DefaultInstance">
      <summary>
            Gets the default instance of this parameter used by the <see cref="T:AGI.Foundation.EvaluatorGroup" /> to identify
            objects which are parameterized on the <see cref="T:AGI.Foundation.Propagators.PropagationStage" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStageParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator">
      <summary>
            Members of this class calculate corrections to a propagated state after the integration step.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.#ctor(AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.AvailabilityIntervals">
      <summary>
        Gets a <see cref="T:AGI.Foundation.Time.TimeIntervalCollection" /> over which data is available.
        If the availability interval is infinite, this returns
        <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.CorrectAfterStep(AGI.Foundation.Propagators.Advanced.PropagationStepInformation)">
      <summary>
            Calculates the last steps state corrections.
            </summary>
      <param name="info">Holds the time and substate information before and after the last
            integration step.</param>
      <returns>The corrections to this corrector's subsection of the state array.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.CorrectAfterStep(AGI.Foundation.Propagators.Advanced.PropagationStepInformation,System.Nullable{AGI.Foundation.Propagators.PropagationStateArray})">
      <summary>
            Calculates the last steps state corrections, as well as the acceleration correction needed by a multistep integrator.
            </summary>
      <param name="info">Holds the time and substate information before and after the last
            integration step.</param>
      <param name="accelerationCorrection">This step's derivative correction will be summed into this substate.</param>
      <returns>The corrections to this corrector's subsection of the state array.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.Identifications">
      <summary>
            Gets the list of strings that identify the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">Propagation State Elements</see>
            that are altered by this state correction evaluator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector">
      <summary>
            A definitional object which creates a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateCorrectionEvaluator" /> to calculate
            a post-integration correction to a propagated state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.#ctor(AGI.Foundation.Propagators.Advanced.PropagationStateCorrector,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationStateCorrector)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.GetCorrectionEvaluator">
      <summary>
            This method creates an evaluator to calculate the post integration correction.
            </summary>
      <returns>A type that evaluates post integration correction.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateCorrector.GetCorrectionEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            This method creates an evaluator to calculate the post integration correction.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>A type that evaluates post integration correction.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement">
      <summary>
            Represents a portion of a combined state used during numerical integration.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.#ctor(AGI.Foundation.Propagators.Advanced.PropagationStateElement,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.CheckForSameDefinition(AGI.Foundation.Propagators.Advanced.PropagationStateElement)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.GetConverter(AGI.Foundation.EvaluatorGroup,AGI.Foundation.Motion{System.Int32[]})">
      <summary>
            Gets an instance of an output type which can convert the output of propagation
            back into the native type of this state element.  This method is also responsible
            for configuring the state parameter and the state input indices on any parameterized
            geometry types used by this element.  Each parameterized geometry type will have
            a static configuration method which will allow it to configure itself in a particular
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.
            </summary>
      <param name="group">The evaluator group in which to configure the parameters.</param>
      <param name="stateInputIndices">The set of indices corresponding to the location
            of each value or derivative of this state element in the overall state.</param>
      <returns>The output instance associated with this state element.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.GetDerivatives(AGI.Foundation.EvaluatorGroup)">
      <summary>
            This is used by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> to obtain an instance of a state element evaluator 
            that can compute the derivatives of this element of the state during propagation.  
            It cannot be used outside of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> as the geometry for the propagation state
            will be unavailable.
            </summary>
      <param name="group">The group in which to create the evaluator and its dependents.</param>
      <returns>The evaluator that can compute the derivatives of this element of the state.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElement.GetStateUpdater(AGI.Foundation.EvaluatorGroup)">
      <summary>
            By default this method returns null. If a concrete base class of this type represents an element that has special
            behavior that takes place each time step prior to propagation, then override this method to produce an <see cref="T:AGI.Foundation.Propagators.IUpdatePriorToStep" />
            object that the <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> will call every time step.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> the state updater will be part of.</param>
      <returns>Null</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Identification">
      <summary>
            Gets or sets the string identifying this instance in the overall output.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.IncludeHighestDerivativeInOutput">
      <summary>
            Gets or sets whether to include the derivative computed at each step with the output.
            If this is true, the output converted from the raw state will contain the derivative
            associated with the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Order" /> of  the differential equation.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.Order">
      <summary>
            Gets the order of the differential equation corresponding to this element.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElement.StateParameter">
      <summary>
            Gets or sets a parameter which represents the state during propagation.  In general,
            users should never need to explicitly set this property.  It should only be set
            when multiple <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> objects are running in the same <see cref="T:AGI.Foundation.EvaluatorGroup" />,
            such as when elements of a state require additional instances of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />
            inside their implementation in order to produce their values.  In such cases, it may
            be necessary to distinguish between the state of the exterior propagator and the
            state of the interior propagator.  In these cases, it is up to the user to ensure
            that both the state and all of its elements are configured with the same parameter.
            Otherwise, the state will throw an exception when creating its propagator.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter">
      <summary>
            Base class for output associated with a <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" />.
            This represents the indexed state, and a means of 
            converting the raw output information back into useful information specific
            to this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.#ctor(AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
            Copies an existing instance of the class.
            </summary>
      <param name="existingInstance">An existing instance of the class.</param>
      <param name="context">The <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> which describes the copy operation.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.#ctor(System.String,AGI.Foundation.Motion{System.Int32[]},AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="stateIndices">The indices of the individual values and their derivatives in the overall state.</param>
      <param name="initialState">The values of the state at the epoch of the overall <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.#ctor(System.String,AGI.Foundation.Motion{System.Int32[]},AGI.Foundation.Motion{System.Double[]},AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="identification">A string identifying this instance in the overall output.</param>
      <param name="stateIndices">The indices of the individual values and their derivatives in the overall state.</param>
      <param name="initialState">The values of the state at the epoch of the overall <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.</param>
      <param name="weights">A set of weights associated with each value in the state to use when performing adaptive
            step control with an <see cref="T:AGI.Foundation.NumericalMethods.Advanced.AdaptiveNumericalIntegrator" />.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.AdaptiveWeights">
      <summary>
            Gets or sets the weights to be applied to the state elements when
            computing the error which determines how to adapt the step size during integration.
            This is in addition to any weights used in the integration algorithm
            itself.  The weights are initialized to default values of one based on the
            <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> and <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension" /> of the state element.
            The order of the motion is one less than the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> and each
            array is of length <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.AdjustStateFromElement(System.Double[],AGI.Foundation.Motion{System.Double[]})">
      <summary>
            Adjust the subset of the overall raw state corresponding to this element to new values.
            </summary>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="stateElementValues">The new values and derivatives for the requested element
            represented as an array.  To obtain an instance of this array, call <see cref="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.GetElementFromState(System.Double[])" />.</param>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.AdjustStateWithType``1(System.Double[],AGI.Foundation.Motion{``0})">
      <summary>
            Adjust the subset of the raw state corresponding to this element to new values.
            </summary>
      <param name="overallRawState">The overall raw state to adjust.</param>
      <param name="newStateElement">The new values and derivatives for the requested element.</param>
      <typeparam name="T">The type corresponding to the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> of
            this element.</typeparam>
      <returns>True if the update was successful.  Otherwise, if the specified new element values did
            not contain enough derivatives or there was some other problem completing the update, this returns false.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.ConvertState``1(System.Double[])">
      <summary>
            Convert the raw state into this instance's <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput">Type</see>
            and its derivatives.
            </summary>
      <param name="overallState">The raw state to convert.</param>
      <typeparam name="T">The <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput" /> produced by this instance.</typeparam>
      <returns>The value and its derivatives corresponding to the state.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension">
      <summary>
            Gets the number of parameters (per <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" />) within this element.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.GetElementFromState(System.Double[])">
      <summary>
            Produces this state element's values and their derivatives from the overall raw state.
            </summary>
      <param name="overallState">The overall raw state from which to produce this element's array.</param>
      <returns>A representation of the values of this state as arrays of length <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension" /> in
            a motion of this element's <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> minus one.</returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Identification">
      <summary>
            Gets the string identifying this instance in the overall output.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.InitialState">
      <summary>
            Gets the initial values of this element of the state and their derivatives.
            The size of the initial state is its <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Dimension" /> and the order of
            the motion is one less than the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> of the differential equation 
            defining the derivative of this element.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order">
      <summary>
            Gets the order of the differential equation corresponding to this element.
            This corresponds to one greater than the Order of the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.InitialState" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.StateIndices">
      <summary>
            Gets the indices locating each variable of this element within the overall state.
            The motion represents the value of this state element and its derivatives up to but not including
            the <see cref="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.Order" /> of the differential equation defining the state's derivative. 
            The indices will be set by the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" /> when this element is added.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementConverter.TypeOfOutput">
      <summary>
            Gets the type associated with the output of this instance.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator">
      <summary>
            Abstract base class for the evaluator produced by an <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateElement" />.
            This evaluator is responsible for efficiently computing the derivatives of the state.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.#ctor(AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.AddDerivatives(AGI.Foundation.Time.JulianDate,AGI.Foundation.NumericalMethods.DerivativeMode,AGI.Foundation.Propagators.PropagationStateArray)">
      <summary>
            Based on the given <see cref="T:AGI.Foundation.NumericalMethods.DerivativeMode" />, compute the requested kind of derivative and 
            add (don't set) it to the given array.
            </summary>
      <param name="time">The current time.</param>
      <param name="mode">An enumeration indicating what kind of derivatives to compute.  
            Make sure to heed which derivatives are requested so as not to represent the derivatives
            more than once.</param>
      <param name="derivativeArray">The output array in which to add the resulting derivatives.</param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.IsTimeVarying">
      <summary>
        Gets a value indicating whether or not the value of this evaluator changes with time.  If
        false, the evaluator is assumed to return the same value for any
        input <see cref="T:AGI.Foundation.Time.JulianDate" />.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateElementEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStateParameter">
      <summary>
            Represents the state of integration as a parameter when defining types used 
            during integration that depend on the state.  This type is used internally
            to coordinate the state of a <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" /> with the geometry
            needed by the various force models and equations of motion.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Propagators.Advanced.PropagationStateParameter" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStateParameter.DefaultInstance">
      <summary>
            Gets the default instance of this parameter used by the <see cref="T:AGI.Foundation.EvaluatorGroup" /> to identify
            objects which are parameterized on the <see cref="T:AGI.Foundation.Propagators.NumericalPropagatorDefinition" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStateParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="T:AGI.Foundation.Propagators.Advanced.PropagationStepInformation">
      <summary>
            Represents information about the current integration step needed for state correction.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Propagators.Advanced.PropagationStepInformation.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Propagators.PropagationStateArray,AGI.Foundation.Propagators.PropagationStateArray)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="initialTime">The time corresponding to the dependent variable values at the beginning of the step.</param>
      <param name="finalTime">The time corresponding to the dependent variable values at the end of the step.</param>
      <param name="initialState">The dependent variables at the beginning of the step.</param>
      <param name="finalState">The dependent variables at the end of the step.</param>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStepInformation.FinalState">
      <summary>
            Gets the values of the dependent variables at the end of the current integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStepInformation.FinalTime">
      <summary>
            Gets the time at the end of the current integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStepInformation.InitialState">
      <summary>
            Gets the values of the dependent variables at the beginning of the current integration step.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Propagators.Advanced.PropagationStepInformation.InitialTime">
      <summary>
            Gets the time at the beginning of the current integration step.
            </summary>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">
      <summary>
        <para>
            The base class defining the definition of a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  Segments 
            will define how an <see cref="T:AGI.Foundation.Coordinates.IMotionState" /> will be propagated.  That initial state 
            will be passed into the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagators</see><see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagateSegment(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)">PropagateSegment</see> method.  Consider wrapping another 
            lower level propagator in your <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  Multiple segments can be strung 
            together, one running after the previous, and the initial state of each segment will be initialized 
            with the final state of the previous one.
            </para>
        <para>
            It is a good idea to design custom segments to support being the 
            first segment that is run.  However if it truly makes no sense for a 
            custom segment to not be the first segment, then a detailed <see cref="T:System.Exception" /> should be thrown 
            when <see cref="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.GetSegmentPropagator" /> is called and no previous segment is included.
            </para>
        <para>
            Segments should also have a specific configuration type that goes along with it.  This configuration 
            object will store mutable values that a parent segment could modify.  The 
            configuration object should generally not have every single property of the segment, only the ones that 
            make sense.  The configuration will assist in editing the properties it stores.</para>
        <a href="../Programmer%27s%20Guide/Overview/SegmentedPropagator/Segments.html">See the Overview documentation for more 
            detail for how to use segments.</a>
      </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.#ctor(AGI.Foundation.SegmentPropagation.SegmentDefinition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.CheckForSameDefinition(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.CreateSegmentPropagator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Creates, configures and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for this 
            segment.  This method should check that all of the required properties on the 
            concrete instance are configured properly before constructing the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> to be returned. 
            </summary>
      <param name="group">The group to use during creation.</param>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. 
            Some segments will require the previousSegment to be set, whereas other will require that the 
            previous segment not be null, whereas others will only use information from 
            it if provided.  It is up to you writing a concrete type to enforce what makes sense for your 
            particular segment in this method.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> for this segment.</returns>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentDefinition.Elements">
      <summary>
            Gets the names of all of the elements that this segment is propagating. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.GetElementsAdapter(System.String)">
      <summary>
            Returns the uninitialized adapter for the given <paramref name="element" />.  The 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">StateElementAdapters</see> handle the various 
            transformations of the propagated elements between segments (for example, if 
            the integration <see cref="T:AGI.Foundation.Geometry.ReferenceFrame">frame</see> of a point being propagated changes 
            from one <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> to another, the 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> is what handles that transformation between 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see>). All elements propagated by this segment must have
            an <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> returned by this method (even if that <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> 
            simply returns the original state). 
            If multiple segments are getting propagated by this segment (as as <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" /> would), this 
            must return the adapter of the <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" /> of the <paramref name="element" /> for the final 
            known <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see> getting propagated.
            </summary>
      <param name="element">The element whose <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" /> is needed.</param>
      <returns>The <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> with the 
            <paramref name="element">element's</paramref> defined-in set.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.GetSegmentPropagator">
      <summary>
            Creates, configures and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for this 
            segment. This method assumes that no previous segment is needed to configure 
            this segments <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see>.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> for this segment.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.GetSegmentPropagator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates, configures and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for this 
            segment. This method assumes that no previous segment is needed to configure 
            this segments <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see>.
            </summary>
      <param name="group">The group to use during creation.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> for this segment.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.GetSegmentPropagator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Creates, configures and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for this 
            segment.
            </summary>
      <param name="group">The group to use during creation.</param>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. 
            Some segments require that the previous segment not be null, whereas others will 
            only use information from it if provided.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> for this segment.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.GetSegmentPropagator(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Creates, configures and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for this 
            segment.
            </summary>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. 
            Some segments require that the previous segment not be null, whereas others will 
            only use information from it if provided.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> for this segment.</returns>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentDefinition.Name">
      <summary>
            Gets or sets a name to describe the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>.  This is optional 
            and is only for your convenience.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentDefinition.PropagationDirection">
      <summary>
            Gets or sets the direction that this segment will be initially propagated.  If this segment propagates 
            multiple segments, it should be the direction of the first segment getting propagated.  If you are using a 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> that depends on time, the time span of 
            those stopping conditions must match this property (for example, a 
            <see cref="T:AGI.Foundation.StoppingConditions.DurationStoppingCondition" /> must have a negative 
            <see cref="P:AGI.Foundation.StoppingConditions.DurationStoppingCondition.Threshold" /> if 
            this is set to <see cref="F:AGI.Foundation.NumericalMethods.IntegrationSense.Decreasing" />, otherwise the condition will never be tripped).
            </summary>
    </member>
    <member name="E:AGI.Foundation.SegmentPropagation.SegmentDefinition.PropagationFinishedEvent">
      <summary>
            An event that gets fired when propagation finishes.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentDefinition.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentList">
      <summary>
            A class that holds a list of <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">SegmentDefinitions</see> that gets 
            propagated in series.  When this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">types propagator</see> is propagated, 
            you may always safely cast the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see> returned to 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" />.  This is a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" />, so you can 
            nest a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" /> in another <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.#ctor">
      <summary>
            Initializes a new instance.  At least one <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> must be 
            added to the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.#ctor(AGI.Foundation.SegmentPropagation.SegmentList,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.CheckForSameDefinition(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.CheckForSameDefinition(AGI.Foundation.SegmentPropagation.SegmentList)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.CreateSegmentPropagator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Creates, configures and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for this 
            segment.  This method should check that all of the required properties on the 
            concrete instance are configured properly before constructing the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> to be returned. 
            </summary>
      <param name="group">The group to use during creation.</param>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. 
            Some segments will require the previousSegment to be set, whereas other will require that the 
            previous segment not be null, whereas others will only use information from 
            it if provided.  It is up to you writing a concrete type to enforce what makes sense for your 
            particular segment in this method.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> for this segment.</returns>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentList.Elements">
      <summary>
            Gets the names of all of the elements that this segment is propagating. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.GetElementsAdapter(System.String)">
      <summary>
            Returns the uninitialized adapter for the given <paramref name="element" />.  The 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">StateElementAdapters</see> handle the various 
            transformations of the propagated elements between segments (for example, if 
            the integration <see cref="T:AGI.Foundation.Geometry.ReferenceFrame">frame</see> of a point being propagated changes 
            from one <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> to another, the 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> is what handles that transformation between 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see>). All elements propagated by this segment must have
            an <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> returned by this method (even if that <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> 
            simply returns the original state). 
            If multiple segments are getting propagated by this segment (as as <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" /> would), this 
            must return the adapter of the <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" /> of the <paramref name="element" /> for the final 
            known <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see> getting propagated.
            </summary>
      <param name="element">The element whose <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter" /> is needed.</param>
      <returns>The <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapter</see> with the 
            <paramref name="element">element's</paramref> defined-in set.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.GetFirstSegmentDefinitionByName(System.String)">
      <summary>
            Loops over the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments" /> in this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" /> and returns the first 
            one with the specified <see cref="P:AGI.Foundation.SegmentPropagation.SegmentDefinition.Name" />, or null if a 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see> with that <paramref name="segmentName" /> is not in the list
            </summary>
      <param name="segmentName">The name of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> to look for</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> configured with the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment propagators</see> of all 
            of this <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments">definitions segments</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.GetSegmentListPropagator">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">propagator for this segment list</see>.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> configured with the propagators of all 
            of this <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments">definitions segments</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.GetSegmentListPropagator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">propagator for this segment list</see>.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use when making <see cref="T:AGI.Foundation.IEvaluator">evaluators</see>.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> configured with the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment propagators</see> of all 
            of this <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments">definitions segments</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.GetSegmentListPropagator(AGI.Foundation.EvaluatorGroup,AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">propagator</see> for this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use when making <see cref="T:AGI.Foundation.IEvaluator">evaluators</see>.</param>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. </param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> configured with the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment propagators</see> of all 
            of this <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments">definitions segments</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentList.GetSegmentListPropagator(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Creates and returns the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">propagator for this segment list</see>.
            </summary>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>. </param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> configured with the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment propagators</see> of all 
            of this <see cref="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments">definitions segments</see>.</returns>
    </member>
    <member name="E:AGI.Foundation.SegmentPropagation.SegmentList.PropagationFinishedEvent">
      <summary>
            An event that gets fired when propagation finishes.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentList.Segments">
      <summary>
            Gets the segments that will get propagated.  It is recommended that you do not add the 
            same <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> more than once.  You will be limited in what results 
            you can easily extract from a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" />, and the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListConfiguration" /> will only return the configuration of the first 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> made from that <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> in the list.
            </summary>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentListConfiguration">
      <summary>
            The configuration for a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.  This stores a collection of the 
            configurations of all the segments in the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.#ctor(AGI.Foundation.SegmentPropagation.SegmentListConfiguration,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.ContainsSegmentConfiguration(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Checks to see if the <paramref name="segment" /> has a configuration stored in this.
            </summary>
      <param name="segment">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> to check for.</param>
      <returns>true if the <paramref name="segment" /> has a configuration 
            stored in this, false otherwise</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.ContainsSegmentConfiguration(System.String)">
      <summary>
            Checks to see if a segment configuration with the <paramref name="segmentName" /> exists in this.  
            This will search recursively through all 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListConfiguration">SegmentListConfigurations</see> that are stored in this.
            </summary>
      <param name="segmentName">The name of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> to check for.</param>
      <returns>true if the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> with the 
            <paramref name="segmentName" /> has a configuration stored in this, false otherwise</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.GetSegmentsConfiguration(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Gets the segment configuration for the <paramref name="segment" />, or null if there is no 
            configuration for the <paramref name="segment" /> in this.
            </summary>
      <param name="segment">Which segments configuration to return.</param>
      <returns>The configuration of the <paramref name="segment" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.GetSegmentsConfiguration(System.String)">
      <summary>
            Gets the segment configuration for the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> with the 
            <paramref name="segmentName" />, or null if there is no 
            configuration in this for such a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.
            </summary>
      <param name="segmentName">The name of the segment whose configuration is desired..</param>
      <returns>The configuration of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> with the <paramref name="segmentName" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.RemoveSegmentConfiguration(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Removes the configuration of the <paramref name="segment" /> from this configuration.
            </summary>
      <param name="segment">The segments whose configuration we are removing.</param>
      <returns>true if the segment was removed sucessfully, false otherwise.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListConfiguration.SetSegmentConfiguration(AGI.Foundation.SegmentPropagation.SegmentDefinition,AGI.Foundation.Infrastructure.ICloneWithContext)">
      <summary>
            Stores the configuration of the <paramref name="segment" />.  When attempting to add the 
            <paramref name="segment" /> that happens to be stored in a nested <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />, this 
            method will drill down to the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListConfiguration" /> of the <paramref name="segment">segments</paramref> 
            immediate parent <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.
            </summary>
      <param name="segment">The segment whose <paramref name="configuration" /> we are storing.</param>
      <param name="configuration">The configuration of the <paramref name="segment" />.</param>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">
      <summary>
            The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> for <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.  Each 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> in the list will be propagated sequentially and 
            a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> will be returned.  Note that there are several 
            virtual methods on this type that must be overridden if you are extending this type.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.#ctor(AGI.Foundation.SegmentPropagation.SegmentDefinition,AGI.Foundation.SegmentPropagation.SegmentList,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="previousSegment">The previous segment.</param>
      <param name="segmentDefinition">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" /> that is making this.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use in making any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> needed by the <paramref name="segmentDefinition" />.</param>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.#ctor(AGI.Foundation.SegmentPropagation.SegmentListPropagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.CreateNewConfiguration">
      <summary>
            Creates a new configuration for this segment.  Derived types should override this and return 
            their configuration that inherits from <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListConfiguration" />.
            </summary>
      <returns>A new instance of the configuration for this segment.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.PropagateSegment(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            The method that actually propagates the segment.  This should never be called directly; 
            instead call the <see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate" /> method that takes the desired parameters. 
            </summary>
      <param name="cumulativeResults">The results of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> that contains this segment.  This may
            be null if this segment is being propagated independent of a 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />.  In the simple case, this is only needed to provide the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.StateForNextSegment">initial state</see> that this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> should 
            start propagating from.  However, if the concrete <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> will propagate multiple segments, 
            then the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.StateForNextSegment" /> must be set after each individual <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> 
            is propagated.  You may also need to maintain the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> collection to 
            avoid having the same <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> included twice (the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> for each <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> 
            gets added automatically to the <paramref name="cumulativeResults" /> when it is propagated).  Also, if there is even 
            the possibility of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> needing to back up into a previous segment, the 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.RegenerateEphemerisForOverallTrajectory" /> method after each child <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> is 
            propagated.</param>
      <param name="editedConfiguration">The segment configuration that some 
            other segment has determined that this segment should run. If it is null then use the 
            segments <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.OriginalConfiguration" />.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  This method must fill in all of the relevant 
            properties in the returned results.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.PropagateSegmentList">
      <summary>
            Propagates the list of segments of this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />.
            </summary>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> of the propagation.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.PropagateSegmentList(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Propagates this starting from the <paramref name="initialState" />.
            </summary>
      <param name="initialState">The state to propagate this from.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> of this propagation.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.PropagateSegmentList(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.SegmentPropagation.SegmentListConfiguration,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">propagators</see> list of segments.
            </summary>
      <param name="cumulativeResults">The overall <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults">results</see> 
            of propagation up to this point.  This will be null if this segment is the top level segment.</param>
      <param name="configuration">The segment configuration that some 
            other segment has determined that this segment should run. If it is null then the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.OriginalConfiguration">segments original configuration</see> will be used.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> of this propagation.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.PropagateSegments(AGI.Foundation.SegmentPropagation.SegmentListResults,System.Collections.Generic.IList{AGI.Foundation.SegmentPropagation.SegmentPropagator},AGI.Foundation.Coordinates.IMotionState,AGI.Foundation.SegmentPropagation.SegmentListConfiguration,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates the <paramref name="segmentsToPropagate">passed in segments</paramref>.  Instead of returning some 
            set of <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" />, this method will add the results of the <paramref name="segmentsToPropagate" /> 
            to the <paramref name="resultsToFillIn" />.
            </summary>
      <param name="resultsToFillIn">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults">results</see> of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> 
            that is calling this static method.  These results must have the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.ParentResults" /> and 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.Propagator">Propagator</see> set.</param>
      <param name="segmentsToPropagate">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">SegmentPropagators</see> that should be propagated.</param>
      <param name="initialState">The initial state to propagate from.  This may be null if the 
            first segment in the <paramref name="segmentsToPropagate" /> can propagate without a passed in state.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <param name="configuration">The segment configuration that some 
            other segment has determined that this segment should run. If it is null then the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.OriginalConfiguration">segments original configuration</see> of the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.Propagator" /> of the <paramref name="resultsToFillIn" /> will be used.</param>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListPropagator.PropagateTo(AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.Coordinates.IMotionState)">
      <summary>
        <para>
            Propagates a segment to the time or independent variable specified in the <paramref name="offset" />. 
            This method is needed to assist the case when <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments</see> might 
            overlap. If a later <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments</see> realizes that it needs to find a different
            final state from this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />, this method should be used to find that new final state.
            </para>
        <para>Consider calling <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.PropagateToAssumingTimeBasedStates(AGI.Foundation.Time.JulianDate,AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.SegmentPropagation.SegmentListResults)" /> or 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.PropagateToAssumingDoubleBasedStates(System.Double,AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.SegmentPropagation.SegmentListResults)" /> instead of this method directly.</para>
      </summary>
      <param name="results">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see> previously computed by this 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  When used with a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />, the results of the actual 
            nested <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> should be passed in.</param>
      <param name="offset">A <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> containing the independent variable 
            to propagate to.</param>
      <returns>The <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> at the independent variable specified in the <paramref name="offset" />.</returns>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentListPropagator.Segments">
      <summary>
            Gets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">SegmentPropagators</see> that will be propagated.
            </summary>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentListResults">
      <summary>
            The <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> returned by a propagated <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />.  
            Note that if your custom <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> has the possibility of propagating multiple 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments</see> sequentially, it should return a 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> even if it ends up propagating a single segment.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.#ctor(AGI.Foundation.SegmentPropagation.SegmentPropagator,AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="propagator">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that is generating these results.</param>
      <param name="initialState">The initial state that the overall <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" /> will be propagated from.</param>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentListResults.FinalSegmentResult">
      <summary>
            Gets the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> of the final <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> propagated.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.GetDateMotionCollectionOfOverallTrajectory``1(System.String)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" /> from the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory">EphemerisForOverallTrajectory</see>.  
            The state type stored must be <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState" />.  Use the 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetMotionCollection``1(System.String)">GetMotionCollection</see> 
            method if the states stored are not time based.  Note that this will return the ephemeris from the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory">EphemerisForOverallTrajectory</see> of every stored 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> making no attempt at to transform them into the same <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> 
            or <see cref="T:AGI.Foundation.Geometry.Axes" />.  If the <paramref name="element" /> happened to be propagated in different defined-in's, you 
            must either call <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.GetDateMotionCollectionOfOverallTrajectory(System.String,AGI.Foundation.Geometry.ReferenceFrame)" /> if a <see cref="T:AGI.Foundation.Geometry.Point" /> was propagated, 
            or handle the transformations yourself.
            </summary>
      <param name="element">The element whose data you want.</param>
      <typeparam name="T">The type (double, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />...) that the 
            <paramref name="element" /> is.</typeparam>
      <returns>The <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.GetDateMotionCollectionOfOverallTrajectory(System.String,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" /> in the specified 
            <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> from the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" />.  
            This method assumes that you are asking for an entry that is of type <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> 
            and that the <paramref name="element" /> in the state is of that type.  The state type stored must be 
            <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState" />.
            </summary>
      <param name="element">The element whose data you want.</param>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that you want the returned collection in.</param>
      <returns>The <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.GetResultsOfSegment(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            This method will do a recursive search through the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> and return the 
            first <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> that correspond with the <paramref name="segment" />, or 
            null if the requested segments results are not in this.  
            </summary>
      <param name="segment">The <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.Identifier">identification</see> of segment whose 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> will be returned.</param>
      <returns>The requested <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" />, or null if there are no 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> of the <paramref name="segment" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.GetSegmentBoundaryTimes">
      <summary>
            Returns the intervals of propagation of each <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>.  
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">Segments</see> that are instantaneous will have their start 
            and stop times be equal to each other.
            </summary>
      <returns>The propagation intervals of each <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.IsSegmentContainedInThisList(AGI.Foundation.SegmentPropagation.SegmentDefinition)">
      <summary>
            Returns true if the <paramref name="segment" /> was propagated by the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that produced this list of <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" />.  Be aware 
            that it will return true once it finds the first <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> 
            made with the matching <paramref name="segment" />.
            </summary>
      <param name="segment">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> to check this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> 
            for.</param>
      <returns>true if the <paramref name="segment" /> was propagated by 
            the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator">propagator</see> that produced this results, false otherwise.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.PropagateToAssumingDoubleBasedStates(System.Double,AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.SegmentPropagation.SegmentListResults)">
      <summary>
            When a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> needs to go back and start at a point before the end of the 
            previous segment, this method can be used to get that exact state to start at.  This will <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapt</see> the state 
            such that it is in the defined-ins of the segment right before the current segment.  This method will take 
            care of setting all of the nested segments <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory">overall 
            ephemeris lists</see> properly.  This method assumes 
            that you are propagating based on a <see cref="T:System.Double" /> and as such the states stored in this and all segments in this list must be 
            <see cref="T:AGI.Foundation.Coordinates.IDoubleBasedState">IDoubleBasedState</see>.
            </summary>
      <param name="doubleToGetExactStateAt">The <see cref="T:System.Double" /> that you need to start propagating from.</param>
      <param name="currentSegmentResult">The <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> of the current segment that needs to start somewhere in the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> of a previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  This must include the fully configured 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapters</see>.</param>
      <param name="currentOverallResults">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> to search through.  This should 
            be the cumulative results passed into the current segments propagate method.</param>
      <returns>The complete <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> at the <paramref name="doubleToGetExactStateAt">specified double to start propagating from</paramref>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.PropagateToAssumingTimeBasedStates(AGI.Foundation.Time.JulianDate,AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.SegmentPropagation.SegmentListResults)">
      <summary>
            When a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> needs to go back and start at a point before the end of the 
            previous segment, this method can be used to get that exact state to start at.  This will <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapt</see> the state 
            such that it is in the defined-ins of the segment right before the current segment.  This method will take 
            care of setting all of the nested segments <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory">overall 
            ephemeris lists</see> properly.  This method assumes 
            that you are propagating in time and as such the states stored in this and all segments in this list must be 
            <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState">ITimeBasedStates</see>.
            </summary>
      <param name="dateToGetExactStateAt">The <see cref="T:AGI.Foundation.Time.JulianDate" /> that you need to start propagating from.</param>
      <param name="currentSegmentResult">The <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> of the current segment that needs to start somewhere in the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> of a previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  This must include the fully configured 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapters</see>.</param>
      <param name="currentOverallResults">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> to search through.  This should 
            be the cumulative results passed into the current segments propagate method.</param>
      <returns>The complete <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> at the <paramref name="dateToGetExactStateAt">specified time to start propagating from</paramref>.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentListResults.RegenerateEphemerisForOverallTrajectory">
      <summary>
            Clears the current ephemeris for this results and regenerates it based on the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory">overall ephemeris's</see> of all of this 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">result's child segments</see>. This should be called right before this is returned to the parent segment 
            or user, or when a segment had to change the results of previous segments 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" />.  This method will properly 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapt</see> all of the child <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> to the proper defined-in's of the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> that made these results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">
      <summary>
            Gets the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults">results</see> of each 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> in the order that they were propagated.
            </summary>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentPropagationEventArgs">
      <summary>
            Provides information about the current <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator's</see> propagation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagationEventArgs.#ctor(AGI.Foundation.SegmentPropagation.SegmentResults)">
      <summary>
            Instantiates a new instance.
            </summary>
      <param name="results">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see> for the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> raising this event.</param>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagationEventArgs.Results">
      <summary>
            Gets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see> for the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segment</see> raising this event.
            </summary>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">
      <summary>
            The abstract type for a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment's</see> propagator.  
            This is the type that will actually perform the propagation and produce 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.#ctor(AGI.Foundation.SegmentPropagation.SegmentDefinition,AGI.Foundation.SegmentPropagation.SegmentDefinition,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="previousSegment">The previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see>.  If a 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> is creating its child <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagators</see>, it should 
            pass in its previous segment to its first child segment.</param>
      <param name="creator">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> creating this propagator.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> to use when creating <see cref="T:AGI.Foundation.IEvaluator">evaluators</see>.</param>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.#ctor(AGI.Foundation.SegmentPropagation.SegmentPropagator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.Adapters">
      <summary>
            Gets a list of the <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">StateElementAdapters</see> that this 
            segment can use in its propagation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.DefaultStateAdaptation(AGI.Foundation.Coordinates.IMotionState,AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Performs the default <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adaptation</see> of the elements 
            in the <paramref name="initialState" /> into the <paramref name="finalState" />.  Note that 
            elements that do not exist in both states will not be adapted.
            </summary>
      <param name="initialState">The initial state whose <see cref="T:AGI.Foundation.Motion`1">Motions</see> will be 
            transformed in some way by the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.Adapters" /> and set in the <paramref name="finalState" />.</param>
      <param name="finalState">The state that will be set with the adapted values fron the <paramref name="initialState" />.</param>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.Identifier">
      <summary>
            Gets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">definition</see> that created this propagator.  
            This is to only be used as an identifier; if you are doing anything else with it 
            besides using it as an identifier, that is probably a bug.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.Name">
      <summary>
            Gets the name of this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.OriginalConfiguration">
      <summary>
            Gets the original configuration for this segment to use.  This must get set when
            this propagator is constructed.
            This should be ignored during propagation if a configuration is passed into the 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagateSegment(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)" /> method.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate">
      <summary>
            Propagates the segment assuming no initial state is passed in. Some segments do not require an 
            initial state to be passed in.  However other segments do; such types should override this method 
            and provide a detailed error message in a proper <see cref="T:System.Exception" /> in such a case. 
            </summary>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Propagates the segment starting from the <paramref name="initialState" />.
            </summary>
      <param name="initialState">The initial state for this segment to propagate from.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate(AGI.Foundation.Coordinates.IMotionState,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates the segment starting from the <paramref name="initialState" />. 
            </summary>
      <param name="initialState">The initial state for this segment to propagate from.</param>
      <param name="editedConfiguration">The segment configuration that some 
            other segment has determined that this segment should run. If it is null then use the 
            segments original configuration.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate(AGI.Foundation.Coordinates.IMotionState,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates the segment starting from the <paramref name="initialState" />.
            </summary>
      <param name="initialState">The initial state for this segment to propagate from.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate(AGI.Foundation.SegmentPropagation.SegmentListResults)">
      <summary>
            Propagates the segment. 
            </summary>
      <param name="cumulativeResults">The results of all propagation up to this point.  This may be null
            if this segment is not being propagated in a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            Propagates the segment with the given parameters. 
            </summary>
      <param name="cumulativeResults">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see> of propagation 
            up to this point.</param>
      <param name="editedConfiguration">The segment configuration that some 
            other segment has determined that this segment should run.  If it is null then use this 
            segments <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.OriginalConfiguration" />.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagateSegment(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            The method that actually propagates the segment.  This should never be called directly; 
            instead call the <see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate" /> method that takes the desired parameters. 
            </summary>
      <param name="cumulativeResults">The results of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> that contains this segment.  This may
            be null if this segment is being propagated independent of a 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />.  In the simple case, this is only needed to provide the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.StateForNextSegment">initial state</see> that this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> should 
            start propagating from.  However, if the concrete <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> will propagate multiple segments, 
            then the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.StateForNextSegment" /> must be set after each individual <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> 
            is propagated.  You may also need to maintain the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentListResults.SegmentResults" /> collection to 
            avoid having the same <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> included twice (the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> for each <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> 
            gets added automatically to the <paramref name="cumulativeResults" /> when it is propagated).  Also, if there is even 
            the possibility of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> needing to back up into a previous segment, the 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.RegenerateEphemerisForOverallTrajectory" /> method after each child <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> is 
            propagated.</param>
      <param name="editedConfiguration">The segment configuration that some 
            other segment has determined that this segment should run. If it is null then use the 
            segments <see cref="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.OriginalConfiguration" />.</param>
      <param name="progressTracker">An optional <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see>.  
            How long the segment will take to propagate generally is now known ahead of time, so the reported 
            progress completed is set to -1.  But you can cancel propagation with the tracker.</param>
      <returns>This <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">segments propagation results</see>.  This method must fill in all of the relevant 
            properties in the returned results.  See the documentation of the 
            derived type to determine if these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults" /> may be case to a more specific type.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagateTo(AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.Coordinates.IMotionState)">
      <summary>
        <para>
            Propagates a segment to the time or independent variable specified in the <paramref name="offset" />. 
            This method is needed to assist the case when <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments</see> might 
            overlap. If a later <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">segments</see> realizes that it needs to find a different
            final state from this <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />, this method should be used to find that new final state.
            </para>
        <para>Consider calling <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.PropagateToAssumingTimeBasedStates(AGI.Foundation.Time.JulianDate,AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.SegmentPropagation.SegmentListResults)" /> or 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentListResults.PropagateToAssumingDoubleBasedStates(System.Double,AGI.Foundation.SegmentPropagation.SegmentResults,AGI.Foundation.SegmentPropagation.SegmentListResults)" /> instead of this method directly.</para>
      </summary>
      <param name="results">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see> previously computed by this 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  When used with a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />, the results of the actual 
            nested <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> should be passed in.</param>
      <param name="offset">A <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> containing the independent variable 
            to propagate to.</param>
      <returns>The <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> at the independent variable specified in the <paramref name="offset" />.</returns>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagationDirection">
      <summary>
            Gets the initial direction of propagation.
            </summary>
    </member>
    <member name="E:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagationFinishedEvent">
      <summary>
            An event that gets fired when propagation finishes.  This event gets 
            fired off in this base type; it should not be run in the <see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagateSegment(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)" /> method.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.UpdateProgressTrackerAndReturnIfCanceled(AGI.Foundation.ITrackCalculationProgress)">
      <summary>
            A helper method to handle the <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see> that 
            the various <see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.Propagate" /> methods have.  Because how long propagation will take 
            cannot be known ahead of time, the progress is reported as -1.  You can however use the 
            <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see> to cancel propagation.
            </summary>
      <param name="progressTracker">The <see cref="T:AGI.Foundation.ITrackCalculationProgress">progress tracker</see> that can be 
            used to cancel propagation.</param>
      <returns>true if propagation should stop, false otherwise.</returns>
    </member>
    <member name="T:AGI.Foundation.SegmentPropagation.SegmentResults">
      <summary>
            The results computed by a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  Most 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">Segment Propagators</see> return a type derived from this type; 
            see the documentation for those segments for more information.  When a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> 
            propagates, it must fill in all of the relevant values in this type before it returns its results.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.#ctor(AGI.Foundation.SegmentPropagation.SegmentPropagator)">
      <summary>
            Initializes a new instance.  This constructor will add all of 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapters</see> included with the <paramref name="propagator" /> to this.
            </summary>
      <param name="propagator">The <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that is generating these results.</param>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.Adapters">
      <summary>
            Gets the list of <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapters</see> needed to transform the states of 
            this results to the next.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.AddEphemerid(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Adds the <paramref name="state" /> to the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EntireComputedEphemeris" /> and 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" /> and checks that all of the elements in the 
            <paramref name="state" /> are included in the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.Identifiers" />. 
            </summary>
      <param name="state">The <see cref="T:AGI.Foundation.Coordinates.IMotionState" /> to add to this set of results.</param>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.Canceled">
      <summary>
            Gets or sets if propagation run was canceled.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.Configuration">
      <summary>
            Gets or sets the segment configuration that was used to 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagate the segment</see> that made these results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.EntireComputedEphemeris">
      <summary>
            Gets the entire ephemeris computed by the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />. This may include ephemeris 
            points that should be ignored when looking at the objects overall trajectory. Examples of why this may not 
            match the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" /> may be because a later segment had to start at some 
            point before the end of this segment, or because the segment computed additional ephemerides to aid with 
            interpolation.  In order to work with the rest of the library, the elements in this list 
            should be in time ascending order (if the states are <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState">ITimeBasedStates</see>) 
            even if the segment was propagated backwards.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory">
      <summary>
            Gets the ephemeris that should be used to represent the objects trajectory. This list of ephemeris 
            points should be entirely contained in the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EntireComputedEphemeris" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetDateMotionCollection``1(System.String,System.Collections.Generic.IList{AGI.Foundation.Coordinates.IMotionState})">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" />.  The state type in the 
            <paramref name="ephemeris" /> must be <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState" />.  Use the 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetMotionCollection``1(System.String,System.Collections.Generic.IList{AGI.Foundation.Coordinates.IMotionState})" /> method if the states stored are not time based.  
            Note that this method will not make any attempt to transform the returned <see cref="T:AGI.Foundation.DateMotionCollection`1" /> into 
            its defined-in <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> or <see cref="T:AGI.Foundation.Geometry.Axes" />.  If the <paramref name="ephemeris" /> has 
            elements in different frames or axes, the returned collection will too.
            </summary>
      <param name="element">The element whose data you want.</param>
      <param name="ephemeris">The list of <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState">states</see> to extract the <paramref name="ephemeris" /> of <paramref name="element" /> from.</param>
      <typeparam name="T">The type (<see cref="T:System.Double" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />...) that the <paramref name="element" /> is.</typeparam>
      <returns>The <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetDateMotionCollectionOfOverallTrajectory``1(System.String)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" /> from the 
            <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" />.  The state type stored must be 
            <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState" />.  Use the <see cref="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetMotionCollection``1(System.String)" /> method if the 
            states stored are not time based.
            Note that this method will not make any attempt to transform the returned <see cref="T:AGI.Foundation.DateMotionCollection`1" /> into 
            its defined-in <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> or <see cref="T:AGI.Foundation.Geometry.Axes" />.  
            </summary>
      <param name="element">The element whose data you want.</param>
      <typeparam name="T">The type (double, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />...) that the 
            <paramref name="element" /> is.</typeparam>
      <returns>The <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetDateMotionCollectionOfOverallTrajectory(System.String,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" /> in the specified 
            <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> from the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" />.  
            This method assumes that you are asking for an entry that is of type <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> 
            and that the <paramref name="element" /> in the state is of that type.  The state type stored must be 
            <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState" />.
            </summary>
      <param name="element">The element whose data you want.</param>
      <param name="frame">The <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> that you want the returned collection in.</param>
      <returns>The <see cref="T:AGI.Foundation.DateMotionCollection`1" /> of the <paramref name="element" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetElementDefinedIn(System.String)">
      <summary>
            Gets the object that the <paramref name="element" /> was defined in.  Generally this is an <see cref="T:AGI.Foundation.Geometry.Axes" /> or
            <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />.  If this returns null then either the <paramref name="element" /> 
            has no defined in object, or the <paramref name="element" /> was not propagated by the segment that made this results.
            </summary>
      <param name="element">The element whose defined in object is requested.</param>
      <returns>The <see cref="T:AGI.Foundation.Geometry.Axes" />, <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" />, or general object that the <paramref name="element" /> is represented in.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetMotionCollection``1(System.String)">
      <summary>
            Returns a collection of <see cref="T:AGI.Foundation.Motion`1" /> of the <paramref name="element" /> 
            from the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" />.  This will not make any attempt to transform the 
            returned ephemeris into a consistent <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> or <see cref="T:AGI.Foundation.Geometry.Axes" />.
            </summary>
      <param name="element">The elements whose data is stored in this results.</param>
      <typeparam name="T">The type of the <see cref="T:AGI.Foundation.Motion`1" /> to be returned.</typeparam>
      <returns>A list of the <see cref="T:AGI.Foundation.Motion`1" /> of the <paramref name="element" />.</returns>
    </member>
    <member name="M:AGI.Foundation.SegmentPropagation.SegmentResults.GetMotionCollection``1(System.String,System.Collections.Generic.IList{AGI.Foundation.Coordinates.IMotionState})">
      <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1" /> of the <paramref name="element" />.  
            </summary>
      <param name="element">The element whose data you want.</param>
      <param name="ephemeris">The list of <see cref="T:AGI.Foundation.Coordinates.IMotionState">states</see> to extract the <paramref name="ephemeris" /> of <paramref name="element" /> from.</param>
      <typeparam name="T">The type (<see cref="T:System.Double" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />...) that the <paramref name="element" /> is.</typeparam>
      <returns>The <see cref="T:AGI.Foundation.Motion`1">Motions{T}</see> of the <paramref name="element" /> from the <paramref name="ephemeris" />.</returns>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.Identifiers">
      <summary>
            Gets the names of all of the elements propagated by the segment.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.InitialState">
      <summary>
            Gets or sets the initial <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> that the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> was propagated from.  If any processing was done to 
            the initial <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> passed into the 
            <see cref="M:AGI.Foundation.SegmentPropagation.SegmentPropagator.PropagateSegment(AGI.Foundation.SegmentPropagation.SegmentListResults,AGI.Foundation.Infrastructure.ICloneWithContext,AGI.Foundation.ITrackCalculationProgress)" /> method (such as applying 
            <see cref="T:AGI.Foundation.Coordinates.StateElementAdapter">adapters</see> or initializing a different 
            <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> with the passed in initial 
            <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see>) that modified <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> 
            should be set here instead of the passed in <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.OverrideSegmentListEphemeris">
      <summary>
            Gets or sets if the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that created these results requires 
            the parent <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> to update its <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" />.  
            This must be true if this segment needed to start at some point other than 
            at the end of the previous <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />.  Otherwise leave this as false.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.ParentResults">
      <summary>
            Gets or sets the results of the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListResults" /> that contains the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />
            that created these results.  This gets set automatically by the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" /> that 
            propagated the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that made these results.  It will be null 
            if the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that created this was not propagated in a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentListPropagator" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.PropagationDirection">
      <summary>
            Gets what direction propagation initially occurred.  For a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentList" />, this should 
            be the direction of the first <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> it is propagating.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.Propagator">
      <summary>
            Gets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that was used to make this set of results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.SegmentCompletelyOverriddenByOverlappingSegment">
      <summary>
            Gets or sets if a <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> after the one that made these results stepped back so 
            far that the <see cref="P:AGI.Foundation.SegmentPropagation.SegmentResults.EphemerisForOverallTrajectory" /> is empty.  So if you have 4 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />, and the fourth <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see> needs to back up all 
            the way to the first <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator">propagator</see>, this property should be set to 
            true for the second and third set of results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.SegmentIdentifier">
      <summary>
            Gets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition" /> that made the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that 
            created these <see cref="T:AGI.Foundation.SegmentPropagation.SegmentResults">results</see>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.SegmentOverrideStartsIn">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.SegmentPropagation.SegmentDefinition">segment</see> that the 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> that created this set of results starts 
            in if this segment needs to start before the end of the previous segment.  
            This is only needed if another segment overlaps with this one.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.StateForNextSegment">
      <summary>
            Gets or sets the final state to be passed to the next <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" />. Each 
            <see cref="T:AGI.Foundation.SegmentPropagation.SegmentPropagator" /> must set this before it returns its results.
            </summary>
    </member>
    <member name="P:AGI.Foundation.SegmentPropagation.SegmentResults.StopAllPropagation">
      <summary>
            Gets or sets if all propagation must stop and whatever results
            have been computed should be returned.  
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.CityType">
      <summary>
            Indicates the type of City in STK's City Database.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CityType.Unspecified">
      <summary>
            A city for which a type has not be specified.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CityType.PopulatedPlace">
      <summary>
            A city that has been categorized as a populated place.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CityType.AdministrationCenter">
      <summary>
            A city that serves as an administration center.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CityType.NationalCapital">
      <summary>
            A city that serves as the national capital.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CityType.TerritorialCapital">
      <summary>
            A city that serves as the territorial capital.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.CovarianceReadOptions">
      <summary>
            An enumerator describing the different options for reading Covariance from an ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CovarianceReadOptions.DoNotReadCovariance">
      <summary>
            Instructs the reader to ignore any Covariance that exists.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CovarianceReadOptions.ReadOnlyPositionCovariance">
      <summary>
            Instructs the reader to ignore velocity covariance data if it exists in the ephemeris file,
            and instead only read the position terms.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.CovarianceReadOptions.ReadAllFileCovariance">
      <summary>
            Instructs the reader to read in the format of covariance data specified in the ephemeris file.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFile">
      <summary>
        <para>
            Reads from and writes to STK attitude (.a) files.  STK attitude files can express orientation and angular velocity,
            and are useful for getting this type of data into and out of STK.
            </para>
        <para>
            To read an STK attitude file, call the <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.String)" /> method to read the data into memory,
            and then call the <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.CreateAxes" /> method to create a time-varying <see cref="T:AGI.Foundation.Geometry.Axes" />
            representing the attitude data in the file.
            </para>
        <para>
            You can also build an <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> instance by calling the various
            <strong>Configure...</strong>
            methods such as <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ConfigureFromAxesInterpolator(AGI.Foundation.Geometry.AxesInterpolator)" />.  Once you've built an appropriate
            <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> instance, you can save it to a file or another stream by calling
            <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.WriteTo(System.IO.TextWriter)" />.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ConfigureFromAxes(AGI.Foundation.Geometry.Axes,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32)">
      <summary>
            Configures this instance with values computed by sampling an <see cref="T:AGI.Foundation.Geometry.Axes" /> over an interval with
            a fixed step.  The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Data" /> property is replaced with a new instance of <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions" />,
            or <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatAngVels" /> (depending on the value of the
            <paramref name="order" /> property) and any existing information stored in that instance is lost.
            The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Properties" /> are not modified, but values pulled from <see cref="T:AGI.Foundation.Geometry.Axes" /> will take precedence
            over values in the <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Properties" /> collection when writing this instance using <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.WriteTo(System.IO.TextWriter)" />.
            The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.Interpolator" /> property is not configured, so you may want to call
            <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ConfigureInterpolation(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32)" /> after calling this method.
            </summary>
      <param name="axes">The axes from which to sample orientations and optionally angular velocities.</param>
      <param name="start">The first date at which to sample the axes.</param>
      <param name="stop">The last date at which to sample the axes.</param>
      <param name="step">
            The step between successive samples.  The duration between the second-to-last and last samples will
            be smaller than this step if the interval is not evenly disable by the step.
            </param>
      <param name="order">
            The number of derivatives to include in the file.  0 includes orientation only and 1 (or greater) also
            includes angular velocity.
            </param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ConfigureFromAxesInterpolator(AGI.Foundation.Geometry.AxesInterpolator)">
      <summary>
            Configures the instance to represent the attitude and interpolation stored in an <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" />.
            The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Data" /> property is replaced with a new instance of <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions" />,
             or <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatAngVels" /> (depending on the number of derivatives
            available from the <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" />) and any existing information stored in that instance
            is lost.  The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Properties" /> are not modified, but values pulled from <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" />
            will take precedence over values in the <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Properties" /> collection when writing this instance using
            <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.WriteTo(System.IO.TextWriter)" />.
            </summary>
      <param name="axesInterpolator">
            The <see cref="T:AGI.Foundation.Geometry.AxesInterpolator" /> with which to configure this instance.  The point's
            <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.Interpolator" /> and <see cref="P:AGI.Foundation.Geometry.AxesInterpolator.ReferenceAxes" />
            properties, as well as the interpolator's <see cref="P:AGI.Foundation.NumericalMethods.RotationalMotionInterpolator.Data" /> property,
            must not be null.
            </param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ConfigureInterpolation(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32)">
      <summary>
            Configures the <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Attitude.Interpolator" /> to use the specified interpolation algorithm
            and polynomial degree.  The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Data" /> property must be set before calling this method.
            </summary>
      <param name="interpolationAlgorithm">The interpolation algorithm to use.</param>
      <param name="interpolationDegree">The degree of the polynomial to use for interpolation.</param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.CreateAxes">
      <summary>
            Creates an <see cref="T:AGI.Foundation.Geometry.Axes" /> whose time-varying orientation is computed by interpolating
            over the attitude data held by this instance.
            </summary>
      <returns>The axes.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">The <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.Data" /> property is null.</exception>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.Data">
      <summary>
            Gets or sets the attitude data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.Properties">
      <summary>
            Gets a dictionary of key and value pairs in the STK attitude file.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.PropertiesWithUnsupportedValues">
      <summary>
            Gets a dictionary of property names and values for the properties with values specified in the file that
            are not supported by the <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> reader.  Any information contained in these
            properties may not be captured by the reader.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader)">
      <summary>
            Reads an STK attitude (.a) file from a <see cref="T:System.IO.TextReader" />.  The
            <see cref="T:System.IO.TextReader" /> can be a <see cref="T:System.IO.StreamReader" /> for reading
            from a file, a <see cref="T:System.IO.StringReader" /> for reading from a string,
            or any number of other types.  See the Remarks section of the
            documentation of <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkAttitudeFileOptions)" /> for detailed information.
            </summary>
      <param name="reader">The reader from which to read the attitude.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> instance containing the read attitude file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK attitude file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkAttitudeFileOptions)">
      <summary>
            Reads an STK attitude (.a) file from a <see cref="T:System.IO.TextReader" />.  The
            <see cref="T:System.IO.TextReader" /> can be a <see cref="T:System.IO.StreamReader" /> for reading
            from a file, a <see cref="T:System.IO.StringReader" /> for reading from a string,
            or any number of other types.  See the
            Remarks section for more information.
            </summary>
      <param name="reader">The reader from which to read the attitude.</param>
      <param name="readOptions">An object containing any additional instructions for the read process.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> instance containing the read attitude file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK attitude file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.String)">
      <summary>
            Reads an STK attitude (.a) file from a specified file.  See the
            Remarks section of the
            documentation of <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkAttitudeFileOptions)" /> for detailed information.
            </summary>
      <param name="fileName">The name of the file from which to read the attitude.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> instance containing the read attitude file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK attitude file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.String,AGI.Foundation.Stk.StkAttitudeFileOptions)">
      <summary>
            Reads an STK attitude (.a) file from a specified file.  See the
            Remarks section of the
            documentation of <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkAttitudeFileOptions)" /> for detailed information.
            </summary>
      <param name="fileName">The name of the file from which to read the attitude.</param>
      <param name="readOptions">An object containing any additional instructions for the read process.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> instance containing the read attitude file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK attitude file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.UnsupportedProperties">
      <summary>
            Gets a dictionary of property names and values for the properties that are contained in the file but that
            are not supported by the <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" /> reader.  Any information contained in these properties
            may not be captured by the reader.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.Version">
      <summary>
            Gets or sets the attitude file version.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.WriteTo(System.IO.TextWriter)">
      <summary>
            Writes this instance to a <see cref="T:System.IO.TextWriter" /> in the STK attitude file (.a) format.
            The <see cref="T:System.IO.TextWriter" /> can be a <see cref="T:System.IO.StreamWriter" /> for writing to a file,
            a <see cref="T:System.IO.StringWriter" /> for writing to a string, or any number of other types.
            </summary>
      <param name="writer">The writer to which to write this instance.</param>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">Thrown when the attitude file is in an unknown format.</exception>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFile.Attitude">
      <summary>
            The base class for attitude data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.Attitude.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.Attitude" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.Attitude.CreateAxes">
      <summary>
            Creates an <see cref="T:AGI.Foundation.Geometry.Axes" /> whose time-varying orientation is computed by interpolating
            over the attitude data held by this instance.
            </summary>
      <returns>The point.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.Attitude.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this attitude data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.Attitude.Name">
      <summary>
            Gets the name of this attitude format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.Attitude.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatAngVels">
      <summary>
            A class that holds the data in the attitude file when the attitude file is in the
            "AttitudeTimeQuatAngVels" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatAngVels.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatAngVels" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatAngVels.Name">
      <summary>
            Gets the name of this attitude format.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions">
      <summary>
            A class that holds the data in the attitude file when the attitude file is in the
            "AttitudeTimeQuaternions" or "AttitudeTimeQuatScalarFirst" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.AttitudeData">
      <summary>
            Gets or sets the attitude data relative to <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.CoordinateAxes" />. 
            Note that the convention here is not the usual convention elsewhere in STK Components,
            and instead represents the convention used in the STK Attitude Files themselves.
            See the remarks for more information or use <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.ConvertToStkAttitudeConvention(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.ConvertFromStkAttitudeConvention(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Converts raw attitude data from the STK Desktop convention used by <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.AttitudeData" /> 
            to use the STK Components standard for representing attitude, which expresses the derivatives 
            in the body frame instead of the frame in which the body is defined.
            </summary>
      <param name="data">The attitude data in the STK Desktop convention.</param>
      <returns>The attitude data in the STK Components convention.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.ConvertToStkAttitudeConvention(AGI.Foundation.DateMotionCollection{AGI.Foundation.Coordinates.UnitQuaternion,AGI.Foundation.Coordinates.Cartesian})">
      <summary>
            Converts raw attitude data from the STK Components convention to use the STK Desktop convention
            used by <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.AttitudeData" />, which expresses the derivatives 
            in the body frame instead of the frame in which the body is defined.
            </summary>
      <param name="data">The attitude data in the STK Components convention.</param>
      <returns>The attitude data in the STK Desktop convention.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.CoordinateAxes">
      <summary>
            Gets or sets the axes in which the data is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.CreateAxes">
      <summary>
            Creates an <see cref="T:AGI.Foundation.Geometry.Axes" /> whose time-varying orientation is computed by interpolating
            over the attitude data held by this instance.
            </summary>
      <returns>The point.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this attitude data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.Name">
      <summary>
            Gets the name of this attitude format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuaternions.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatScalarFirst">
      <summary>
            A class that holds the data in the attitude file when the attitude file is in the
            "AttitudeTimeQuatScalarFirst" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatScalarFirst.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatScalarFirst" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFile.AttitudeTimeQuatScalarFirst.Name">
      <summary>
            Gets the name of this attitude format.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFileOptions">
      <summary>
            Specifies options for reading and creating an <see cref="T:AGI.Foundation.Stk.StkAttitudeFile" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkAttitudeFileOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkAttitudeFileOptions" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFileOptions.IgnorePropertiesWithUnsupportedValues">
      <summary>
            Gets or sets a value indicating whether <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkAttitudeFileOptions)" />
            will ignore a property in the attitude file if the property has a value that the reader does not understand.
            If this property is false, the reader will throw an <see cref="T:System.IO.InvalidDataException" />
            when it encounters such a property.  If this property is true, the reader will note the
            property with the unsupported value in the <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.PropertiesWithUnsupportedValues" />
            collection but will otherwise ignore it, which can result in incorrect interpretation of the data in the
            attitude file.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFileOptions.IgnoreUnsupportedProperties">
      <summary>
            Gets or sets a value indicating whether <see cref="M:AGI.Foundation.Stk.StkAttitudeFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkAttitudeFileOptions)" />
            will ignore a property in the attitude file that it does not understand.  If this property is
            false, the reader will throw an <see cref="T:System.IO.InvalidDataException" /> when it encounters
            such a property.  If this property is true, the reader will note the unsupported property
            in the <see cref="P:AGI.Foundation.Stk.StkAttitudeFile.UnsupportedProperties" /> collection but will otherwise ignore it, which can
            result in incorrect interpretation of the data in the attitude file.  Setting this property to
            true will also cause the reader to ignore attitude blocks in an unsupported format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFileOptions.OverrideScenarioEpoch">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:AGI.Foundation.Stk.StkAttitudeFileOptions.ScenarioEpoch" /> specified on this instance
            overrides the one specified in the attitude file itself.  If this property is true,
            <see cref="P:AGI.Foundation.Stk.StkAttitudeFileOptions.ScenarioEpoch" /> must be specified and the times of all attitude points will be relative to
            that epoch.  If this property is false, the scenario epoch specified in the
            attitude file itself is used, if available, and the value of the <see cref="P:AGI.Foundation.Stk.StkAttitudeFileOptions.ScenarioEpoch" /> is used
            only if the file does not specify an epoch.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkAttitudeFileOptions.ScenarioEpoch">
      <summary>
            Gets or sets the epoch relative to which all times in the attitude file are specified.  This property
            is only used if <see cref="P:AGI.Foundation.Stk.StkAttitudeFileOptions.OverrideScenarioEpoch" /> is true or if the attitude file
            does not specify a scenario epoch.  
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkAttitudeFileVersion">
      <summary>
            Indicates the possible versions of an STK attitude file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkAttitudeFileVersion.Unknown">
      <summary>
            Version which corresponds to an unrecognized version stamp in an STK attitude file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkAttitudeFileVersion.V43">
      <summary>
            Version 4.3 format which corresponds to a stk.v.4.3 version stamp in an STK attitude file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkAttitudeFileVersion.V60">
      <summary>
            Version 6.0 format which corresponds to a stk.v.6.0 version stamp in an STK attitude file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkAttitudeFileVersion.V80">
      <summary>
            Version 8.0 format which corresponds to a stk.v.8.0 version stamp in an STK attitude file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkAttitudeFileVersion.V90">
      <summary>
            Version 9.0 format which corresponds to a stk.v.9.0 version stamp in an STK attitude file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkAttitudeFileVersion.V100">
      <summary>
            Version 10.0 format which corresponds to a stk.v.10.0 version stamp in an STK attitude file.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkCityDatabase">
      <summary>
            Provides access to an STK city database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabase.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="directory">The directory in which the city database is located.</param>
      <param name="baseFileName">The base filename (without extension) of the database within the directory.</param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabase.GetCentralBody">
      <summary>
            Enumerates the Central Bodies in the database.
            </summary>
      <returns>An enumerable list of the Central Bodies in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabase.GetCityType">
      <summary>
            Enumerates the Types of cities in the database.
            </summary>
      <returns>An enumerable list of Types of cities in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabase.GetCountry">
      <summary>
            Enumerates the Countries in the database.
            </summary>
      <returns>An enumerable list of the Countries in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabase.GetEntries">
      <summary>
            Enumerates all of the entries in the database.
            </summary>
      <returns>An enumerable list of entries in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabase.GetEntries(AGI.Foundation.Stk.StkCityDatabaseQuery)">
      <summary>
            Enumerates all of the entries in the database matching a specified query.
            </summary>
      <param name="query">The query that returned entries must match.</param>
      <returns>An enumerable list of entries in the database that match the query.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabase.LastUpdateDate">
      <summary>
            Gets the last update date reported in the Generic Database (.gd) file, or <see cref="F:AGI.Foundation.Time.GregorianDate.MinValue" />
            if the file does not exist or does not contain a LastUpdate field.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabase.Version">
      <summary>
            Gets the version number reported in the Generic Database (.gd) file, or "Unknown" if
            the file does not exist or does not contain a Version field.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkCityDatabaseEntry">
      <summary>
            Contains information about a city in the STK City Database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabaseEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkCityDatabaseEntry" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.CentralBodyName">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Celestial.CentralBody" /> of the City.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.CityName">
      <summary>
            Gets or sets the City name.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.CountryName">
      <summary>
            Gets or sets a Country name of the City.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Latitude">
      <summary>
            Gets or sets the Latitude of the City, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Longitude">
      <summary>
            Gets or sets the Longitude of the City, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Population">
      <summary>
            Gets or sets a Population of the City.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.ProvinceName">
      <summary>
            Gets or sets a Province name of the City.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.ProvinceRank">
      <summary>
            Gets or sets a Province Rank of the City.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseEntry.TypeOfCity">
      <summary>
            Gets or sets a Type of the City.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkCityDatabaseQuery">
      <summary>
            A query against the STK City database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabaseQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkCityDatabaseQuery" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.CentralBodyName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.CentralBodyName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.CityName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.CityName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.CountryName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.CountryName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkCityDatabaseQuery.Matches(AGI.Foundation.Stk.StkCityDatabaseEntry)">
      <summary>
            Determines if an entry matches this query.
            </summary>
      <param name="entry">The entry to check.</param>
      <returns>true if the entry matches this query, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.MaximumLatitude">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Latitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.MaximumLongitude">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Longitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.MinimumLatitude">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Latitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.MinimumLongitude">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.Longitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.ProvinceName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.ProvinceName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkCityDatabaseQuery.TypeOfCity">
      <summary>
            Gets or sets a value that the <see cref="P:AGI.Foundation.Stk.StkCityDatabaseEntry.TypeOfCity" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkDatabaseFrequencyRange">
      <summary>
            Represents a range of frequencies in an STK database file.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkDatabaseFrequencyRange.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkDatabaseFrequencyRange" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkDatabaseFrequencyRange.HighFrequency">
      <summary>
            Gets or sets the high frequency of the range, in megahertz.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkDatabaseFrequencyRange.LowFrequency">
      <summary>
            Gets or sets the low frequency of the range, in megahertz.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile">
      <summary>
        <para>
            Reads from and writes to STK ephemeris (.e) files.  STK ephemeris files can express position, velocity,
            acceleration, and covariance information, and are useful for getting this type of data into and out
            of STK.
            </para>
        <para>
            To read an STK ephemeris file, call the <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.String)" /> method to read the data into memory,
            and then call the <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.CreatePoint" /> method to create a time-varying <see cref="T:AGI.Foundation.Geometry.Point" />
            representing the ephemeris data in the file.  Similarly, call <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.CreateCovarianceIntepolator" />
            to obtain the <see cref="T:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator" /> representing the covariance
            data in the file.
            </para>
        <para>
            You can also build an <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> instance by calling the various
            <strong>Configure...</strong>
            methods such as <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ConfigureFromPointInterpolator(AGI.Foundation.Geometry.PointInterpolator)" />.  Once you've built an appropriate
            <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> instance, you can save it to a file or another stream by calling
            <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.WriteTo(System.IO.TextWriter)" />.
            </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ConfigureFromPoint(AGI.Foundation.Geometry.Point,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,System.Int32)">
      <summary>
            Configures this instance with values computed by sampling a <see cref="T:AGI.Foundation.Geometry.Point" /> over an interval with
            a fixed step.  The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Data" /> property is replaced with a new instance of <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos" />,
            <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVel" />, or <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVelAcc" /> (depending on the value of the
            <paramref name="order" /> property) and any existing information stored in that instance is lost.
            The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Properties" /> are not modified, but values pulled from <see cref="T:AGI.Foundation.Geometry.Point" /> will take precedence
            over values in the <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Properties" /> collection when writing this instance using <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.WriteTo(System.IO.TextWriter)" />.
            The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.Interpolator" /> property is not configured, so you may want to call
            <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ConfigureInterpolation(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32)" /> after calling this method.
            </summary>
      <param name="point">The point from which to sample positions and optionally velocities and accelerations.</param>
      <param name="start">The first date at which to sample the point.</param>
      <param name="stop">The last date at which to sample the point.</param>
      <param name="step">
            The step between successive samples.  The duration between the second-to-last and last samples will
            be smaller than this step if the interval is not evenly disable by the step.
            </param>
      <param name="order">
            The number of derivatives to include in the file.  0 includes position only, 1 also includes velocity, and
            2 (or greater) also includes acceleration.
            </param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ConfigureFromPointInterpolator(AGI.Foundation.Geometry.PointInterpolator)">
      <summary>
            Configures the instance to represent the ephemeris and interpolation stored in a <see cref="T:AGI.Foundation.Geometry.PointInterpolator" />.
            The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Data" /> property is replaced with a new instance of <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos" />,
            <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVel" />, or <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVelAcc" /> (depending on the number of derivatives
            available from the <see cref="T:AGI.Foundation.Geometry.PointInterpolator" />) and any existing information stored in that instance
            is lost.  The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Properties" /> are not modified, but values pulled from <see cref="T:AGI.Foundation.Geometry.PointInterpolator" />
            will take precedence over values in the <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Properties" /> collection when writing this instance using
            <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.WriteTo(System.IO.TextWriter)" />.
            </summary>
      <param name="pointInterpolator">
            The <see cref="T:AGI.Foundation.Geometry.PointInterpolator" /> with which to configure this instance.  The point's
            <see cref="P:AGI.Foundation.Geometry.PointInterpolator.Interpolator" /> and <see cref="P:AGI.Foundation.Geometry.PointInterpolator.ReferenceFrame" />
            properties, as well as the interpolator's <see cref="P:AGI.Foundation.NumericalMethods.TranslationalMotionInterpolator.Data" /> property,
            must not be null.
            </param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ConfigureInterpolation(AGI.Foundation.NumericalMethods.Advanced.InterpolationAlgorithm,System.Int32)">
      <summary>
            Configures the <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.Interpolator" /> to use the specified interpolation algorithm
            and polynomial degree.  The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Data" /> property must be set before calling this method.
            </summary>
      <param name="interpolationAlgorithm">The interpolation algorithm to use.</param>
      <param name="interpolationDegree">The degree of the polynomial to use for interpolation.</param>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceData">
      <summary>
            Gets or sets the covariance data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.CreateCovarianceIntepolator">
      <summary>
            Creates a <see cref="T:AGI.Foundation.NumericalMethods.Covariance3By3SizeAndOrientationInterpolator" /> for interpolating
            over the covariance data held by this instance.
            </summary>
      <returns>The interpolator</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceData" /> property is null.</exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> whose time-varying position is computed by interpolating
            over the ephemeris data held by this instance.
            </summary>
      <returns>The point.</returns>
      <exception cref="T:AGI.Foundation.PropertyInvalidException">The <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.Data" /> property is null.</exception>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Data">
      <summary>
            Gets or sets the ephemeris data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Properties">
      <summary>
            Gets a dictionary of key and value pairs in the STK ephemeris file.  After an <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> is
            read, this dictionary contains all of the key and value pairs in the file.  When writing an
            <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" />, these properties are written back to the file, but only if another
            property does not offer an authoritative value.  For example, if the <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.CoordinateSystem" />
            property is set, any "CoordinateSystem" property in this collection will be overwritten.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.PropertiesWithUnsupportedValues">
      <summary>
            Gets a dictionary of property names and values for the properties with values specified in the file that
            are not supported by the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> reader.  Any information contained in these
            properties may not be captured by the reader.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader)">
      <summary>
            Reads an STK ephemeris (.e) file from a <see cref="T:System.IO.TextReader" />.  The
            <see cref="T:System.IO.TextReader" /> can be a <see cref="T:System.IO.StreamReader" /> for reading
            from a file, a <see cref="T:System.IO.StringReader" /> for reading from a string,
            or any number of other types.  See the Remarks section of the
            documentation of <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkEphemerisFileOptions)" /> for detailed information.
            </summary>
      <param name="reader">The reader from which to read the ephemeris.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> instance containing the read ephemeris file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK ephemeris file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkEphemerisFileOptions)">
      <summary>
            Reads an STK ephemeris (.e) file from a <see cref="T:System.IO.TextReader" />.  The
            <see cref="T:System.IO.TextReader" /> can be a <see cref="T:System.IO.StreamReader" /> for reading
            from a file, a <see cref="T:System.IO.StringReader" /> for reading from a string,
            or any number of other types.  See the
            Remarks section for more information.
            </summary>
      <param name="reader">The reader from which to read the ephemeris.</param>
      <param name="readOptions">An object containing any additional instructions for the read process.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> instance containing the read ephemeris file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK ephemeris file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.String)">
      <summary>
            Reads an STK ephemeris (.e) file from a file.  See the
            Remarks section of the
            documentation of <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkEphemerisFileOptions)" /> for detailed information.
            </summary>
      <param name="fileName">The name of the file from which to read the ephemeris.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> instance containing the read ephemeris file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK ephemeris file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.String,AGI.Foundation.Stk.StkEphemerisFileOptions)">
      <summary>
            Reads an STK ephemeris (.e) file from a file.  See the
            Remarks section of the
            documentation of <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkEphemerisFileOptions)" /> for detailed information.
            </summary>
      <param name="fileName">The name of the file from which to read the ephemeris.</param>
      <param name="readOptions">An object containing any additional instructions for the read process.</param>
      <returns>An <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> instance containing the read ephemeris file.</returns>
      <exception cref="T:System.IO.InvalidDataException">
            Thrown when the STK ephemeris file is invalid or it contains unsupported properties or property values.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.SegmentBoundaryTimes">
      <summary>
            Gets or sets the list of segment boundary times in the STK ephemeris file.
            Segment boundary times are times that should not be interpolated over. 
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.UnsupportedProperties">
      <summary>
            Gets a dictionary of property names and values for the properties that are contained in the file but that
            are not supported by the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" /> reader.  Any information contained in these properties
            may not be captured by the reader.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Version">
      <summary>
            Gets or sets the ephemeris file version.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.WriteTo(System.IO.TextWriter)">
      <summary>
            Writes this instance to a <see cref="T:System.IO.TextWriter" /> in the STK ephemeris file (.e) format.
            The <see cref="T:System.IO.TextWriter" /> can be a <see cref="T:System.IO.StreamWriter" /> for writing to a file,
            a <see cref="T:System.IO.StringWriter" /> for writing to a string, or any number of other types.
            </summary>
      <param name="writer">The writer to which to write this instance.</param>
      <exception cref="T:AGI.Foundation.UnsupportedCaseException">Thrown when the ephemeris file is in an unknown format.</exception>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.Covariance">
      <summary>
            The base class for covariance data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.Covariance.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.Covariance" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Covariance.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Covariance.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this covariance data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Covariance.Name">
      <summary>
            Gets the name of this covariance format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Covariance.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos">
      <summary>
            A class that holds the covariance data in the ephemeris file when the ephemeris file is in the
            "CovarianceTimePos" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos.CovarianceData">
      <summary>
            Gets or sets the covariance data..
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this covariance data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos.Name">
      <summary>
            Gets the name of this covariance format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePos.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel">
      <summary>
            A class that holds the covariance data in the ephemeris file when the ephemeris file is in the
            "CovarianceTimePosVel" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel.CovarianceData">
      <summary>
            Gets or sets the covariance data..
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this covariance data.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel.Name">
      <summary>
            Gets the name of this covariance format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.CovarianceTimePosVel.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit">
      <summary>
            The supported distance units of measure for ephemeris and covariance information.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit.Meters">
      <summary>
            Distance units are in meters.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit.Kilometers">
      <summary>
            Distance units are in kilometers.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit.Feet">
      <summary>
            Distance units are in feet.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit.Kilofeet">
      <summary>
            Distance units are in kilofeet.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit.NauticalMiles">
      <summary>
            Distance units are in nautical miles.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFile.DistanceUnit.StatuteMiles">
      <summary>
            Distance units are in statute miles.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris">
      <summary>
            The base class for ephemeris data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> whose time-varying position is computed by interpolating
            over the ephemeris data held by this instance.
            </summary>
      <returns>The point.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this ephemeris data.  This
            property may be null if no interpolator was specified or if the "InterpolationMethod"
            in the file was not available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.Ephemeris.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisLLATimePos" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.CentralBody">
      <summary>
            Gets or sets the central body relative to which the longitude, latitude, and altitude
            are defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> whose time-varying position is computed by interpolating
            over the ephemeris data held by this instance.
            </summary>
      <returns>The point.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.EphemerisData">
      <summary>
            Gets or sets the ephemeris data relative to <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this ephemeris data.  This
            property may be null if no interpolator was specified or if the "InterpolationMethod"
            in the file was not available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePos.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePosVel">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisLLATimePosVel" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePosVel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePosVel" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLATimePosVel.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisLLRTimePos" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.CentralBody">
      <summary>
            Gets or sets the central body relative to which the longitude, latitude, and radius
            are defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> whose time-varying position is computed by interpolating
            over the ephemeris data held by this instance.
            </summary>
      <returns>The point.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.EphemerisData">
      <summary>
            Gets or sets the ephemeris data relative to <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.CentralBody" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this ephemeris data.  This
            property may be null if no interpolator was specified or if the "InterpolationMethod"
            in the file was not available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePos.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePosVel">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisLLRTimePosVel" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePosVel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePosVel" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisLLRTimePosVel.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisTimePos" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.CoordinateSystem">
      <summary>
            Gets or sets the reference frame in which the data is defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.CreatePoint">
      <summary>
            Creates a <see cref="T:AGI.Foundation.Geometry.Point" /> whose time-varying position is computed by interpolating
            over the ephemeris data held by this instance.
            </summary>
      <returns>The point.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.DistanceUnit">
      <summary>
            Gets the distance unit of the ephemeris and covariance information.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.EphemerisData">
      <summary>
            Gets or sets the ephemeris data relative to <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.CoordinateSystem" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.Interpolator">
      <summary>
            Gets or sets the interpolator to use to interpolate this ephemeris data.  This
            property may be null if no interpolator was specified or if the "InterpolationMethod"
            in the file was not available.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePos.Times">
      <summary>
            Gets the times of the data points.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVel">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisTimePosVel" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVel" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVel.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVelAcc">
      <summary>
            A class that holds the data in the ephemeris file when the ephemeris file is in the
            "EphemerisTimePosVelAcc" format.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVelAcc.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVelAcc" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFile.EphemerisTimePosVelAcc.Name">
      <summary>
            Gets the name of this ephemeris format.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFileOptions">
      <summary>
            This class contains options for reading and creating an <see cref="T:AGI.Foundation.Stk.StkEphemerisFile" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkEphemerisFileOptions.#ctor">
      <summary>
            Creates an instance of the class with default read options.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFileOptions.CovarianceOptions">
      <summary>
            Gets or sets the options for reading in the covariance data of an ephemeris file.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFileOptions.IgnorePropertiesWithUnsupportedValues">
      <summary>
            Gets or sets a value indicating whether <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkEphemerisFileOptions)" />
            will ignore a property in the ephemeris file if the property has a value that the reader does not understand.
            If this property is false, the reader will throw an <see cref="T:System.IO.InvalidDataException" />
            when it encounters such a property.  If this property is true, the reader will note the
            property with the unsupported value in the <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.PropertiesWithUnsupportedValues" />
            collection but will otherwise ignore it, which can result in incorrect interpretation of the data in the
            ephemeris file.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFileOptions.IgnoreUnsupportedProperties">
      <summary>
            Gets or sets a value indicating whether <see cref="M:AGI.Foundation.Stk.StkEphemerisFile.ReadFrom(System.IO.TextReader,AGI.Foundation.Stk.StkEphemerisFileOptions)" />
            will ignore a property in the ephemeris file that it does not understand.  If this property is
            false, the reader will throw an <see cref="T:System.IO.InvalidDataException" /> when it encounters
            such a property.  If this property is true, the reader will note the unsupported property
            in the <see cref="P:AGI.Foundation.Stk.StkEphemerisFile.UnsupportedProperties" /> collection but will otherwise ignore it, which can
            result in incorrect interpretation of the data in the ephemeris file.  Setting this property to
            true will also cause the reader to ignore ephemeris blocks in an unsupported format.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFileOptions.OverrideScenarioEpoch">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:AGI.Foundation.Stk.StkEphemerisFileOptions.ScenarioEpoch" /> specified on this instance
            overrides the one specified in the ephemeris file itself.  If this property is true,
            <see cref="P:AGI.Foundation.Stk.StkEphemerisFileOptions.ScenarioEpoch" /> must be specified and the times of all ephemeris points will be relative to
            that epoch.  If this property is false, the scenario epoch specified in the
            ephemeris file itself is used, if available, and the value of the <see cref="P:AGI.Foundation.Stk.StkEphemerisFileOptions.ScenarioEpoch" /> is used
            only if the file does not specify an epoch.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkEphemerisFileOptions.ScenarioEpoch">
      <summary>
            Gets or sets the epoch relative to which all times in the ephemeris file are specified.  This property
            is only used if <see cref="P:AGI.Foundation.Stk.StkEphemerisFileOptions.OverrideScenarioEpoch" /> is true or if the ephemeris file
            does not specify a scenario epoch.  
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkEphemerisFileVersion">
      <summary>
            Indicates the possible versions of an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.Unknown">
      <summary>
            Version which corresponds to an unrecognized version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V410">
      <summary>
            Version 4.1.0 format which corresponds to a stk.v.4.0 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V42">
      <summary>
            Version 4.2 format which corresponds to a stk.v.4.2 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V43">
      <summary>
            Version 4.3 format which corresponds to a stk.v.4.3 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V62">
      <summary>
            Version 6.2 format which corresponds to a stk.v.6.2 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V80">
      <summary>
            Version 8.0 format which corresponds to a stk.v.8.0 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V90">
      <summary>
            Version 9.0 format which corresponds to a stk.v.9.0 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Stk.StkEphemerisFileVersion.V100">
      <summary>
            Version 10.0 format which corresponds to a stk.v.10.0 version stamp in an STK ephemeris file.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkFacilityDatabase">
      <summary>
            Provides access to an STK facility database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabase.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="directory">The directory in which the facility database is located.</param>
      <param name="baseFileName">The base filename (without extension) of the database within the directory.</param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabase.GetCentralBody">
      <summary>
            Enumerates the Central Bodies of the facilities in the database.
            </summary>
      <returns>An enumerable list of the Central Bodies in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabase.GetEntries">
      <summary>
            Enumerates all of the entries in the database.
            </summary>
      <returns>An enumerable list of entries in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabase.GetEntries(AGI.Foundation.Stk.StkFacilityDatabaseQuery)">
      <summary>
            Enumerates all of the entries in the database matching a specified query.
            </summary>
      <param name="query">The query that returned entries must match.</param>
      <returns>An enumerable list of entries in the database that match the query.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabase.GetNetwork">
      <summary>
            Enumerates the Networks of the facilities in the database.
            </summary>
      <returns>An enumerable list of the Networks of facilities in the database.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabase.LastUpdateDate">
      <summary>
            Gets the last update date reported in the Generic Database (.gd) file, or <see cref="F:AGI.Foundation.Time.GregorianDate.MinValue" />
            if the file does not exist or does not contain a LastUpdate field.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabase.Version">
      <summary>
            Gets the version number reported in the Generic Database (.gd) file, or "Unknown" if
            the file does not exist or does not contain a Version field.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkFacilityDatabaseEntry">
      <summary>
            Contains information about a facility in the STK Facility Database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabaseEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkFacilityDatabaseEntry" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Altitude">
      <summary>
            Gets or sets the Altitude of the facility, in meters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.CentralBodyName">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Celestial.CentralBody" /> of the Facility.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.FacilityName">
      <summary>
            Gets or sets the Facility name.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Latitude">
      <summary>
            Gets or sets the Latitude of the facility, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Longitude">
      <summary>
            Gets or sets the Longitude of the facility, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.NetworkName">
      <summary>
            Gets or sets a Network name of the Facility.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkFacilityDatabaseQuery">
      <summary>
            A query against the STK Facility database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabaseQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkFacilityDatabaseQuery" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.CentralBodyName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.CentralBodyName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.FacilityName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.FacilityName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkFacilityDatabaseQuery.Matches(AGI.Foundation.Stk.StkFacilityDatabaseEntry)">
      <summary>
            Determines if an entry matches this query.
            </summary>
      <param name="entry">The entry to check.</param>
      <returns>true if the entry matches this query, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.MaximumAltitude">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Altitude" /> in meters that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.MaximumLatitude">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Latitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.MaximumLongitude">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Longitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.MinimumAltitude">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Altitude" /> in meters that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.MinimumLatitude">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Latitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.MinimumLongitude">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.Longitude" /> in radians that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkFacilityDatabaseQuery.NetworkName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkFacilityDatabaseEntry.NetworkName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkSatelliteDatabase">
      <summary>
            Provides access to an STK satellite database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabase.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="directory">The directory in which the satellite database is located.</param>
      <param name="baseFileName">The base filename (without extension) of the database within the directory.</param>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabase.GetEntries">
      <summary>
            Enumerates all of the entries in the database.
            </summary>
      <returns>An enumerable list of entries in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabase.GetEntries(AGI.Foundation.Stk.StkSatelliteDatabaseQuery)">
      <summary>
            Enumerates all of the entries in the database matching a specified query.
            </summary>
      <param name="query">The query that returned entries must match.</param>
      <returns>An enumerable list of entries in the database that match the query.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabase.GetMissions">
      <summary>
            Enumerates the missions of the spacecraft in the database.
            </summary>
      <returns>An enumerable list of the missions in the database.</returns>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabase.GetOwners">
      <summary>
            Enumerates the owners of the spacecraft in the database.
            </summary>
      <returns>An enumerable list of the owners in the database.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabase.LastUpdateDate">
      <summary>
            Gets the last update date reported in the Generic Database (.gd) file, or <see cref="F:AGI.Foundation.Time.GregorianDate.MinValue" />
            if the file does not exist or does not contain a LastUpdate field.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabase.Version">
      <summary>
            Gets the version number reported in the Generic Database (.gd) file, or "Unknown" if
            the file does not exist or does not contain a Version field.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkSatelliteDatabaseEntry">
      <summary>
            Contains information about a satellite in the <see cref="T:AGI.Foundation.Stk.StkSatelliteDatabase"> STK Satellite Database</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkSatelliteDatabaseEntry" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Active">
      <summary>
            Gets or sets the value indicating whether the spacecraft is currently active.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Apogee">
      <summary>
            Gets or sets the height of the apogee above the Earth's surface, in meters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.CommonName">
      <summary>
            Gets or sets a common name for the satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.FrequencyRanges">
      <summary>
            Gets the list of downlink frequencies known for this satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Inclination">
      <summary>
            Gets or sets the inclination, in radians, between the plane of the orbit and the
            equatorial plane of the planet.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.InternationalDesignator">
      <summary>
            Gets or sets the international designator for the satellite.  This is a
            unique number assigned to all objects achieving orbit and observed by U.S. Strategic
            Command (USSTRATCOM).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.LastDatabaseUpdate">
      <summary>
            Gets or sets the date of the last database update.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.LaunchDateString">
      <summary>
            Gets or sets the date and time of the launch.
            The format is YYYYMMDDHHMM in UTC.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.LaunchSite">
      <summary>
            Gets or sets the abbreviated launch site of the satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Mass">
      <summary>
            Gets or sets the mass, in kilograms.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Mission">
      <summary>
            Gets or sets the mission category of the satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.OfficialName">
      <summary>
            Gets or sets the official name for the satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.OrbitDescription">
      <summary>
            Gets or sets a description of the orbit.  This is either "Decayed" plus the date in YYYYMMDD format
            of the orbit decay, or a description of the orbit.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Owner">
      <summary>
            Gets or sets the owner (country) of the satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Perigee">
      <summary>
            Gets or sets the height of the perigee above the Earth's surface, in meters.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Period">
      <summary>
            Gets or sets the time, in seconds, for the satellite to complete one revolution of
            the Earth.  This number is rounded to the nearest tenth of a minute.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.SatelliteNumber">
      <summary>
            Gets or sets the satellite (SSC) number.  This is a 5-digit number
            assigned by U.S. Strategic Command (USSTRATCOM) as part of the NORAD catalog.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.TwoLineElementSet">
      <summary>
            Gets or sets the two-line element set for this satellite.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.WriteUp">
      <summary>
            Gets or sets the arbitrary write-up text associated with this satellite.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Stk.StkSatelliteDatabaseQuery">
      <summary>
            A query against the STK satellite database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Stk.StkSatelliteDatabaseQuery" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.Active">
      <summary>
            Gets or sets the value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Active" /> that is required
            in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.CommonName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.CommonName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.InternationalDesignator">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.InternationalDesignator" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.Matches(AGI.Foundation.Stk.StkSatelliteDatabaseEntry)">
      <summary>
            Determines if an entry matches this query.
            </summary>
      <param name="entry">The entry to check.</param>
      <returns>true if the entry matches this query, otherwise false.</returns>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MaximumApogee">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Apogee" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MaximumInclination">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Inclination" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MaximumPerigee">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Perigee" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MaximumPeriod">
      <summary>
            Gets or sets the maximum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Period" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MinimumApogee">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Apogee" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MinimumInclination">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Inclination" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MinimumPerigee">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Perigee" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.MinimumPeriod">
      <summary>
            Gets or sets the minimum value of <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Period" /> that
            is allowed in order for the entry to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.Mission">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Mission" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.OfficialName">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.OfficialName" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.Owner">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.Owner" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Stk.StkSatelliteDatabaseQuery.SatelliteNumber">
      <summary>
            Gets or sets a regular expression that the <see cref="P:AGI.Foundation.Stk.StkSatelliteDatabaseEntry.SatelliteNumber" />
            must match in order to be included in the query.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.CircularRange">
      <summary>
            The possible options that a numerical value could be limited to when it represents an angle.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.CircularRange.NotCircular">
      <summary>
            The value is not an angle.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.CircularRange.ZeroToTwoPi">
      <summary>
            Specifies that the value should be adjusted such that it is between zero and two pi.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.CircularRange.NegativePiToPi">
      <summary>
            Specifies that the value should be adjusted such that it is between negative pi and pi.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ConditionCheckCallback">
      <summary>
            The delegate type that is used by the <see cref="T:AGI.Foundation.StoppingConditions.DelegateStoppingCondition" /> to compute the value used 
            in determining if propagation should stop.
            </summary>
      <param name="currentState">The state to check.</param>
      <returns>The value extracted from the <paramref name="currentState" /> to be used by the condition.</returns>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ConstraintSatisfiedCallback">
      <summary>
            The delegate that is used by the <see cref="T:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint" /> to determine
            if the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> is satisfied.
            </summary>
      <param name="currentState">The state to check.</param>
      <returns>
        <see langowrd="true" /> if the constraint is satisfied, false otherwise.</returns>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.DelegateStoppingCondition">
      <summary>
            A stopping condition that will stop a function by search for thresholds and extrema 
            from values of a <see cref="T:AGI.Foundation.StoppingConditions.ConditionCheckCallback" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.#ctor">
      <summary>
            Initializes a new instance.  By default the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" /> is set to 0 and the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" /> is set to 
            <see cref="F:AGI.Foundation.StoppingConditions.StopType.AnyThreshold" />.  At a minimum, the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.FunctionTolerance" /> or 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.IndependentVariableTolerance" />, and <see cref="P:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.Callback" /> 
            must be set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.#ctor(AGI.Foundation.StoppingConditions.ConditionCheckCallback,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="valueTolerance">The tolerance between the value returned by <see cref="P:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.Callback" /> and the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for a threshold or extrema.</param>
      <param name="type">Specifies what type of threshold or extrema this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> is attempting to stop on.</param>
      <param name="callback">The <see cref="T:AGI.Foundation.StoppingConditions.ConditionCheckCallback" /> that will provide values to sample.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.#ctor(AGI.Foundation.StoppingConditions.ConditionCheckCallback,System.Double,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to stop the function on. This value is ignored if the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" />
            is not a threshold.</param>
      <param name="valueTolerance">The tolerance between the value returned by <paramref name="callback" /> and the 
            <paramref name="threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for an event.</param>
      <param name="type">Specifies what type of threshold or extrema this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> is attempting to find.</param>
      <param name="callback">The <see cref="T:AGI.Foundation.StoppingConditions.ConditionCheckCallback" /> that will provide values to sample.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.#ctor(AGI.Foundation.StoppingConditions.DelegateStoppingCondition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.Callback">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.StoppingConditions.ConditionCheckCallback" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.DelegateStoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> for use in the functions that can be stopped. 
            Any properties that are unique to your derived type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DelegateStoppingCondition.InitializeConditionCallback">
      <summary>
            Gets or sets a delegate to initialize this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition">condition</see> 
            with the initial state.  If computing the value that is getting sampled does not require initializing 
            itself with the initial state of propagation, this can be null.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> where the method that checks if the state at a stop satisfies
            this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> is specified by a delegate.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.  At a minimum, the <see cref="P:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.ConstraintSatisfactionCallback" /> must be 
            set before the <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)"> the evaluator is created</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.ConstraintSatisfiedCallback,AGI.Foundation.StoppingConditions.WhenToCheckConstraint)">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.ConstraintSatisfactionCallback" /> will 
            handle all value computation and comparisons.
            </summary>
      <param name="constraintSatisfactionCallback">The delegate that will determine if this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> is satisfied or not.</param>
      <param name="whenToCheck">Should this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> be checked when the stop is 
            detected or when the exact stop is found.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.ConstraintSatisfactionCallback">
      <summary>
            Gets or sets the delegate that will return true or 
            true depending on if the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> is satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> with an 
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived type should 
            be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DelegateStoppingConditionConstraint.InitializerCallback">
      <summary>
            Gets or sets the delegate that will initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" />.  
            It will be called after the <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Initialize(AGI.Foundation.Coordinates.IMotionState)" /> method. This 
            can be <see langowrd="null" /> if evaluating the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> doesn't 
            require information from the initial state of propagation.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.DurationStoppingCondition">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> that will stop after a given <see cref="T:AGI.Foundation.Time.Duration" /> has passed. 
            Note that the sign of the value in the <see cref="T:AGI.Foundation.Time.Duration" /> matters; if you are propagating backwards you will
            need to use a negative <see cref="P:AGI.Foundation.StoppingConditions.DurationStoppingCondition.DurationThreshold" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.#ctor">
      <summary>
            Initializes a new instance.  By default the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" /> is set to 0 and the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" /> is set to 
            <see cref="F:AGI.Foundation.StoppingConditions.StopType.AnyThreshold" />.  The <see cref="P:AGI.Foundation.StoppingConditions.DurationStoppingCondition.DurationThreshold" /> must be set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.#ctor(AGI.Foundation.StoppingConditions.DurationStoppingCondition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.#ctor(AGI.Foundation.Time.Duration)">
      <summary>
            Initializes a new instance.  Since this is <see cref="T:AGI.Foundation.StoppingConditions.IKnownDateStoppingConditionEvaluator">an exact stopping condition</see>, 
            the tolerances will be ignored and left as 0.
            </summary>
      <param name="durationThreshold">The <see cref="T:AGI.Foundation.Time.Duration" /> to use as a threshold.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.DurationStoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingCondition.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> for use in the functions that can be stopped. 
            Any properties that are unique to your derived type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DurationStoppingCondition.DurationThreshold">
      <summary>
            Gets or sets the threshold <see cref="T:AGI.Foundation.Time.Duration" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DurationStoppingCondition.Threshold">
      <summary>
            Gets or sets the total duration of the threshold in seconds.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> that determines its satisfaction based on the
            <see cref="T:AGI.Foundation.Time.Duration" /> that has passed during propagation.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.Threshold" /> and <see cref="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.Tolerance" /> must be set before the 
            <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)"> the evaluator is created</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.#ctor(AGI.Foundation.Time.Duration,AGI.Foundation.Time.Duration,AGI.Foundation.StoppingConditions.WhenToCheckConstraint,AGI.Foundation.StoppingConditions.InequalityCondition,System.Boolean)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to compare with the computed <see cref="T:AGI.Foundation.Time.Duration" />.</param>
      <param name="tolerance">The tolerance to use when comparing the <paramref name="threshold" /> with the 
            computed <see cref="T:AGI.Foundation.Time.Duration" />.</param>
      <param name="whenToCheck">Should this constraint be checked when the stop is detected or when the 
            exact stop is found.</param>
      <param name="inequality">How to compare the computed value with the <paramref name="threshold" />.</param>
      <param name="useAbsoluteValue">Should the absolute value of the <paramref name="threshold" /> from the epoch be used.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.CreateThresholdEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            with an <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived 
            type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.DurationThreshold">
      <summary>
            Gets or sets the threshold used to compare with the computed <see cref="T:AGI.Foundation.Time.Duration" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.DurationTolerance">
      <summary>
            Gets or sets the tolerance to be used when comparing the computed <see cref="T:AGI.Foundation.Time.Duration" /> with the <see cref="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.Threshold" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.Threshold">
      <summary>
            Gets or sets the threshold to compare with the value evaluated by the 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" />.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.DurationStoppingConditionConstraint.Tolerance">
      <summary>
            Gets or sets the tolerance to use when comparing the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" /> to the value evaluated 
            by the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.IKnownDateStoppingConditionEvaluator">
      <summary>
            An interface to be added to <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> that knows what 
            <see cref="T:AGI.Foundation.Time.JulianDate" /> it will stop on.  Usually because both the propagator and the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> are based entirely on time (for example:
            you are propagating a satellite forward in time and you want to stop propagating after a
            given amount of time).
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.IKnownDateStoppingConditionEvaluator.CheckForExactCrossing(AGI.Foundation.Coordinates.ITimeBasedState,System.Double)">
      <summary>
            Checks to see if the state is at the exact threshold.
            </summary>
      <param name="state">The state that should be at the exact threshold.</param>
      <param name="threshold">The threshold, in seconds, that the state should be at.</param>
      <returns>true if at the threshold.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.IKnownDateStoppingConditionEvaluator.ComputeStepToExactEvent(AGI.Foundation.Coordinates.ITimeBasedState,System.Double)">
      <summary>
            Returns the time that, if the function steps to, will put it on the exact threshold. This value should be
            ignored unless the step that whatever root finding algorithm is being used is greater than what this
            method returns.
            </summary>
      <param name="state">The current state.</param>
      <param name="threshold">The threshold, in seconds, to try to step to.</param>
      <returns>The step that should be exactly at the threshold for this condition.</returns>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.InequalityCondition">
      <summary>
            The criteria for comparing one value to another.  Generally for use with 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">constraints</see> that use a threshold to determine if they 
            are satisfied or not, like the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.Equals">
      <summary>
            Does whatever value equal the threshold given.  When using this with a 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" /> it is best to only use this option with something 
            that is incremented slowly.  A common error is to have the constraints 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.InequalityCriteria" /> set to <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.Equals" />, but the 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" /> will only equal its threshold at one 
            instant, and when the propagator happens to miss that exact spot, the propagation never stops.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.NotEquals">
      <summary>
            Does whatever value not equal the threshold given.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThan">
      <summary>
            Is the value greater than the threshold given.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThanOrEqual">
      <summary>
            Is the value greater than or equal to the threshold given.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThanMinimum">
      <summary>
            Is the value greater than the lowest value computed up to now.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.LessThan">
      <summary>
            Is the value less than the threshold given.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.LessThanOrEqual">
      <summary>
            Is the value less than or equal to the threshold given.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.InequalityCondition.LessThanMaximum">
      <summary>
            Is the value less than the largest value computed up to now.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.InitializeCallback">
      <summary>
            The delegate type that lets the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> or 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> be initialized. 
            This will be run in the <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Initialize(AGI.Foundation.Coordinates.IMotionState)" /> method.
            </summary>
      <param name="initialState">The initial state of the function getting run.</param>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> that determines its satisfaction on the current 
            <see cref="T:AGI.Foundation.Time.JulianDate" /> relative to a stored <see cref="T:AGI.Foundation.Time.JulianDate" />. 
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.  At a minimum, the <see cref="P:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.Threshold" />, <see cref="P:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.Tolerance" />,  
            and <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.WhenToCheck" /> 
            must all be set before the <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">evaluator is created</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.#ctor(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.Duration,AGI.Foundation.StoppingConditions.WhenToCheckConstraint,AGI.Foundation.StoppingConditions.InequalityCondition)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to compare with the <see cref="P:AGI.Foundation.Coordinates.ITimeBasedState.CurrentDate">states time</see>.</param>
      <param name="tolerance">The tolerance to use when comparing the <paramref name="threshold" /> with 
            the <see cref="P:AGI.Foundation.Coordinates.ITimeBasedState.CurrentDate">states time</see>.</param>
      <param name="whenToCheck">Should this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> be checked 
            when the stop is detected or when the exact stop is found.</param>
      <param name="inequality">How to compare the computed value with the <paramref name="threshold" />.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> with an 
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived type should 
            be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.InequalityCriteria">
      <summary>
            Gets or sets how the calculated value should be checked to the threshold in the concrete type. 
            This works by checking the relation between the computed value and the threshold defined on the 
            derived type.  So for example, if the computed value is 7000, the threshold is 6000 and this 
            property set to <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThan" />, this constraint will be satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.Threshold">
      <summary>
            Gets or sets the threshold used to compare with the states <see cref="T:AGI.Foundation.Time.JulianDate">time</see>.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.Tolerance">
      <summary>
            Gets or sets the tolerance to be used when comparing the computed states time with the <see cref="P:AGI.Foundation.StoppingConditions.JulianDateStoppingConditionConstraint.Threshold" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold" /> that wraps another 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" />, but allows the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Threshold" /> 
            to be changed at runtime.  That threshold is based on time and as such can be propagated to exactly.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold.#ctor(AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionEvaluator,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="original">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> that this type is wrapping.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> used to create this.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold.CheckForExactCrossing(AGI.Foundation.Coordinates.ITimeBasedState,System.Double)">
      <summary>
            Checks to see if the state is at the exact threshold.
            </summary>
      <param name="state">The state that should be at the exact threshold.</param>
      <param name="threshold">The threshold, in seconds, that the state should be at.</param>
      <returns>true if at the threshold.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold.ComputeStepToExactEvent(AGI.Foundation.Coordinates.ITimeBasedState,System.Double)">
      <summary>
            Returns the time that, if the function steps to, will put it on the exact threshold. This value should be
            ignored unless the step that whatever root finding algorithm is being used is greater than what this
            method returns.
            </summary>
      <param name="state">The current state.</param>
      <param name="threshold">The threshold, in seconds, to try to step to.</param>
      <returns>The step that should be exactly at the threshold for this condition.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.KnownDateStoppingConditionEvaluatorWithMutableThreshold.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ScalarStoppingCondition">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> that will stop propagation by search for thresholds and extrema 
            from values of a <see cref="P:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.Scalar" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.#ctor">
      <summary>
            Initializes a new instance.  By default the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" /> 
            is set to 0 and the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" /> is set to 
            <see cref="F:AGI.Foundation.StoppingConditions.StopType.AnyThreshold" />.  The 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.FunctionTolerance" /> or <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.IndependentVariableTolerance" />, 
            and <see cref="P:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.Scalar" /> must be set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.#ctor(AGI.Foundation.Geometry.Scalar,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="valueTolerance">The tolerance between the value returned by <paramref name="scalar" /> and the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for an event.</param>
      <param name="type">Specifies what type of threshold or extrema this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> is attempting to stop on.</param>
      <param name="scalar">The <see cref="T:AGI.Foundation.Geometry.Scalar" /> that will provide values to sample.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.#ctor(AGI.Foundation.Geometry.Scalar,System.Double,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to stop the function on. This value is ignored if the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" />
            is not a threshold.</param>
      <param name="valueTolerance">The tolerance between the value returned by <paramref name="scalar" /> and the 
            <paramref name="threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for an event.</param>
      <param name="type">Specifies what type of threshold or extrema this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> is attempting to stop on.</param>
      <param name="scalar">The <see cref="T:AGI.Foundation.Geometry.Scalar" /> that will provide values to sample.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.#ctor(AGI.Foundation.StoppingConditions.ScalarStoppingCondition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ScalarStoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> for use in the functions that can be stopped. 
            Any properties that are unique to your derived type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ScalarStoppingCondition.Scalar">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Geometry.Scalar" /> that will computed at every propagation 
            step to form a function that will be sampled to determine if propagation should stop.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> that compares the value of a <see cref="P:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.Scalar" /> 
            at the time of a state with a threshold.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.  By default the 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" /> is set to 0   The 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Tolerance" /> and <see cref="P:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.Scalar" /> must be set 
            before the <see cref="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">evaluator can be created</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.#ctor(AGI.Foundation.Geometry.Scalar,System.Double,System.Double,AGI.Foundation.StoppingConditions.WhenToCheckConstraint,AGI.Foundation.StoppingConditions.InequalityCondition,System.Boolean)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="scalar">The <see cref="P:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.Scalar" /> that will compute a value to compare with the 
            <paramref name="threshold" />.</param>
      <param name="threshold">The threshold to compare with the value of the <paramref name="scalar" />.</param>
      <param name="tolerance">The tolerance to use when comparing the <paramref name="threshold" /> with the value 
            of the <paramref name="scalar" />.</param>
      <param name="whenToCheck">Should this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> should be checked,.</param>
      <param name="inequality">How to compare the computed value with the <paramref name="threshold" />.</param>
      <param name="useAbsoluteValue">Should the absolute value of the value of the <paramref name="scalar" /> be used.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.CreateThresholdEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            with an <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived 
            type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.Scalar">
      <summary>
            Gets or sets the <see cref="P:AGI.Foundation.StoppingConditions.ScalarStoppingConditionConstraint.Scalar" /> whose <see cref="T:AGI.Foundation.Geometry.ScalarEvaluator">evaluator</see> will compute the 
            value to compare with the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingCondition">
      <summary>
        <para>A stopping condition will 
            get evaluated at every step of propagation, and treat some value based on the computed state 
            as a function.  That function will then be sampled to find events such as thresholds and 
            extrema and propagation will be signaled to stop when a specified event is found.  This is the 
            definition of the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">Evaluator</see> that will actually produce 
            the value.  
            </para>
        <para>
          <a href="../Programmer%27s%20Guide/Overview/SegmentedPropagator/StoppingConditions.html">See the Overview documentation for more 
            detail for how to use Stopping Conditions.</a>
        </para>
      </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.#ctor(AGI.Foundation.StoppingConditions.StoppingCondition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.#ctor(System.Double,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to stop the function on. This value is ignored if the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" /> is not a threshold.</param>
      <param name="valueTolerance">The tolerance between the value computed and the 
            <paramref name="threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for a threshold or extrema.</param>
      <param name="type">Specifies what type of threshold or extrema this stopping condition is attempting to stop on.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.AngularSetting">
      <summary>
            Gets or sets the range a value should be cropped to if the value computed is a angle, or indicates that the value 
            computed is not an angle.  By default this is set to <see cref="F:AGI.Foundation.StoppingConditions.CircularRange.NotCircular" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints">
      <summary>
            Gets additional <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">constraints</see> on the stopping condition.  
            The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">constraints</see> allow you to add extra criteria to whether 
            an event should be considered valid to stop on.  See 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">their help</see> for more information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> for use in the functions that can be stopped. 
            Any properties that are unique to your derived type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.FreezeAggregatedObjects">
      <summary>
        Called by <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.Freeze" /> to also freeze any objects that are considered to be a part of this object.
        Derived classes which contain additional aggregated objects MUST override this method, call the base
        implementation, and freeze aggregated objects introduced by the derived class. The objects that need to be
        frozen in this method are frequently created in this object's constructor and are not settable via
        properties.
      </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.FunctionTolerance">
      <summary>
            Gets or sets how close the function value must get to the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" /> to be considered equal to.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> for use in the 
            <see cref="T:AGI.Foundation.Propagators.NumericalPropagator" />.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingCondition.GetMutableStoppingCondition(AGI.Foundation.EvaluatorGroup)">
      <summary>
            There are times when the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Threshold" /> of the needs to 
            be mutable at runtime.  This method will return such a stopping condition. If your 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> can stop on an exact independent variable you may need 
            to create a type that is a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold" /> and inherits 
            from the interface you have that provides the means to determine that exact independent variable, 
            see <see cref="T:AGI.Foundation.StoppingConditions.IKnownDateStoppingConditionEvaluator" /> for an example.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.IndependentVariableTolerance">
      <summary>
            Gets or sets how small the span between the left and right independent variable 
            can be before the condition is considered stopped, in seconds.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.Name">
      <summary>
            Gets or sets an optional name for this stopping condition.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.SatisfiedCallback">
      <summary>
            Gets or sets a callback that is executed when this condition is satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.StopOnEventNumber">
      <summary>
            Gets or sets how many times the threshold must be met, or how many extrema must be found before stopping.
            If a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> finds a valid stop except for a 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">constraint</see> being unsatisfied, that will not count as a crossing.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold">
      <summary>
            Gets or sets the threshold to stop at.  This value is ignored if the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" /> 
            indicates to stop on an extrema.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition">
      <summary>
            Gets or sets the type of the event to stop on (extrema, threshold, ...).
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">
      <summary>
            The definition for a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" />.  These constraints act as
            additional criteria for a <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.  The 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">constraints</see> will take the current state of propagation 
            and return a <see cref="T:System.Boolean" /> for if this state is aloud to potentially stop propagation.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.WhenToCheckConstraint)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="whenToCheck">Specified whether this this condition be checked when a stop is detected or found.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> with an 
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived type should 
            be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Creates and initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> for use in the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" />.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual constraint.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.Name">
      <summary>
            Gets or sets the optional name of this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionConstraint.WhenToCheck">
      <summary>
            Gets or sets when to check the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> (when a stop is detected or found).
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">
      <summary>
            The evaluator for a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.  The 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> will be checked at one of two times 
            and return a <see cref="T:System.Boolean" /> indicating if the state checked can be used to stop propagation (if the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> also determines if propagation should stop).
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionConstraint)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="definition">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">definition</see> that is creating this.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.AreConstraintsSatisfied(System.Collections.Generic.IList{AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator},AGI.Foundation.Coordinates.IMotionState,AGI.Foundation.StoppingConditions.WhenToCheckConstraint)">
      <summary>
            Loop through the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Constraints">constraints on a stopping condition</see>
            and see if their <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> are satisfied by the 
            <paramref name="state" /> given when a relevant event is detected.
            </summary>
      <param name="constraints">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> to check.</param>
      <param name="state">The <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> to check.</param>
      <param name="whenCheckIsOccurring">Specifies when this method was called during propagation.  Only the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> with the matching setting will be checked.</param>
      <returns>true if all of the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> that 
            should be checked will work with the <paramref name="state" />, and propagation should stop. false 
            otherwise, and propagation should continue.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.CheckCurrentState(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            This method gets called every time a new <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> is checked 
            by the parent <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see>.  This method 
            should be used when the criteria of your <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> 
            needs to check every computed state, such as the case with the 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> need to keep track of extrema if its 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.InequalityCriteria" /> is set to 
            <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThanMinimum" /> or <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.LessThanMaximum" />.
            </summary>
      <param name="currentState">The state to check at every step of propagation.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Initialize(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> with the 
            <paramref name="initialState" />.  This is useful for when the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> is comparing the current
            value with the initial (such as something related to the duration of propagation).
            </summary>
      <param name="initialState">The <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> to initialize with.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.IsConstraintSatisfied(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            This method will examine from the state and return true if this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> is satisfied, and false 
            if not.  
            </summary>
      <param name="state">The state to check.</param>
      <returns>true if this constraint is satisfied, false otherwise.  
            When all <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> return true, then the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see> may stop propagation if it too is 
            satisfied.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.Name">
      <summary>
            Gets an optional name for this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator.WhenToCheck">
      <summary>
            Gets when to check the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> 
            (when an event is detected or exactly found).  See the documentation of 
            <see cref="T:AGI.Foundation.StoppingConditions.WhenToCheckConstraint" /> to help decide which one to pick.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">
      <summary>
            The type that actually evaluates a value from the state of propagation that can be used to stop
            the propagation.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.#ctor(AGI.Foundation.StoppingConditions.StoppingCondition,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="creator">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> that defines this.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> used to create this.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.AngularSetting">
      <summary>
            Gets the indication that the value being computed is an angle and, if so, should that angle be between 
            negative PI and PI, or if it should be between 0 and 2*PI.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Constraints">
      <summary>
            Gets the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> that must also be 
            satisfied for this stopping condition to stop propagation.  If a constraint prevents an event 
            from stopping propagation, it will not increment the count that gets compared to the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.StopOnEventNumber" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.DiscontinuityTolerance">
      <summary>
            Gets the tolerance to use to detect discontinuities in the value computed by the stopping condition.
            If the difference between two function values is greater than this value, then it should be considered
            a discontinuity and not counted as an event. It is up to the function sampling the stopping condition value
            to use this to detect discontinuities.  This is <see cref="F:System.Double.PositiveInfinity" /> if 
            the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.AngularSetting" /> is <see cref="F:AGI.Foundation.StoppingConditions.CircularRange.NotCircular" />, or <see cref="F:System.Math.PI" /> for 
            the other <see cref="T:AGI.Foundation.StoppingConditions.CircularRange">CircularRange</see> values.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.EvaluateRawValue(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Returns the raw value before it is bound by circular constraints.  This method does not need 
            to deal with the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.AngularSetting" />.
            </summary>
      <param name="state">The state from which to extract the value.</param>
      <returns>The value before it is bound by circular constraints.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.FunctionTolerance">
      <summary>
            Gets how close the function value must get to the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Threshold" /> to be considered equal to.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.GetCachingWrapper">
      <summary>
        Gets a version of this evaluator that caches the previously computed value so that if it is evaluated
        twice at the same date the computation is done only once.
      </summary>
      <returns>
        A caching version of this evaluator.  If a caching version is not available, or if this object
        does its own caching, this should be returned by this method.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.GetValue(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Compute the value of the stopping condition from the <paramref name="state" />.  This method will
            put the raw value into the circular bounds (if the function is circular).
            </summary>
      <param name="state">The state to check.</param>
      <returns>The value to use when exploring this condition while looking for an event.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Identifier">
      <summary>
            Gets the <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition">definition</see> that created this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" />.  This is to be used only for identification of 
            this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> and related items.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.IndependentVariableTolerance">
      <summary>
            Gets how small the span between the left and right independent variable can be before the 
            function is considered stopped.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Initialize(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
        <para>Initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> with the initial state of propagation.  
            This method is useful if the value that the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> evaluates 
            is related to the initial state (for example, if this
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> value is the span of time from the start of propagation 
            to whatever the current time is, you will need to store that initial date in the derived type).  
            </para>
        <para>When overriding this method, the base method must be called.</para>
      </summary>
      <param name="initialState">The initial state of propagation.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Name">
      <summary>
            Gets an optional name for this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.SatisfiedCallback">
      <summary>
            Gets a delegate that is executed when this condition is satisfied. Edits to the state that gets sent 
            in this delegate will be ignored unless the returned enumeration is 
            <see cref="F:AGI.Foundation.StoppingConditions.StoppingConditionTriggeredBehavior.StopFunction">that propagation should stop.</see></summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.StopOnEventNumber">
      <summary>
            Gets how many times an event should be found before stopping.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Threshold">
      <summary>
            Gets the threshold to stop at.  This value is ignored if the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.TypeOfStoppingCondition" /> 
            is not one of the threshold types.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.TypeOfStoppingCondition">
      <summary>
            Gets the type of the stop (local extrema, any threshold, ...)
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> that wraps another <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see>, 
            but allows the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.Threshold" /> to be changed after the 
            <see cref="M:AGI.Foundation.StoppingConditions.StoppingCondition.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">evaluator is created</see>.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionEvaluator,AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="original">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> that this type is wrapping.</param>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup" /> used to create this.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.#ctor(AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.EvaluateRawValue(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            Returns the raw value before it is bound by circular constraints.  This method does not need 
            to deal with the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.AngularSetting" />.
            </summary>
      <param name="state">The state from which to extract the value.</param>
      <returns>The value before it is bound by circular constraints.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.GetAvailabilityIntervals(AGI.Foundation.Time.TimeIntervalCollection)">
      <summary>
        Gets the intervals over which data is available.  If the availability interval is
        infinite, this returns <see cref="P:AGI.Foundation.Time.TimeIntervalCollection.Infinite" />.
      </summary>
      <param name="consideredIntervals">
        The intervals over which availability information is needed.  Note that the returned availability
        intervals may indicate availability outside of these intervals of consideration.
      </param>
      <returns>The collection of availability intervals.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.Initialize(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
        <para>Initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> with the initial state of propagation.  
            This method is useful if the value that the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> evaluates 
            is related to the initial state (for example, if this
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> value is the span of time from the start of propagation 
            to whatever the current time is, you will need to store that initial date in the derived type).  
            </para>
        <para>When overriding this method, the base method must be called.</para>
      </summary>
      <param name="initialState">The initial state of propagation.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.IsAvailable(AGI.Foundation.Time.JulianDate)">
      <summary>
        Returns true if valid data is available for this Julian date, otherwise returns false.
      </summary>
      <param name="date">Date for which to check availability.</param>
      <returns>
        true if valid data is available for this Julian date, otherwise returns false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.ResetThreshold(System.Double)">
      <summary>
            Sets this conditions threshold with the entered value.
            </summary>
      <param name="value">The new threshold.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.Threshold">
      <summary>
            Gets the threshold to stop at.  This value is ignored if the <see cref="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator.TypeOfStoppingCondition" /> 
            is not one of the threshold types.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.UpdateEvaluatorReferences(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
        Updates the evaluator references held by this object using the reference-to-reference
        mapping in the specified <see cref="T:AGI.Foundation.Infrastructure.CopyContext" />.
      </summary>
      <param name="context">The context that specifies the reference mapping.</param>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold.WrappedCondition">
      <summary>
            Gets the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">condition</see> that this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluatorWithMutableThreshold">mutable stopping condition</see> is wrapping. 
            If anything inherits from this type, it should leverage this property, not store an instance 
            of the wrapped <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">condition</see> itself.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingConditionTriggeredBehavior">
      <summary>
            Describes how propagation should behave after a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see> 
            has been satisfied.  This allows the user who subscribes to the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.SatisfiedCallback" /> 
            event to control how or if propagation will continue.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StoppingConditionTriggeredBehavior.StopFunction">
      <summary>
            Stops propagation of the function.  This is the default behavior since the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.SatisfiedCallback" /> 
            is only called when the <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition">condition</see> is otherwise ready to truly stop propagation.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StoppingConditionTriggeredBehavior.ContinueToNextEvent">
      <summary>
            Continues propagation until the next time a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see> 
            is triggered.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StoppingConditionTriggeredBehavior.ContinueAndResetCounter">
      <summary>
            Continues propagation until the next time a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see> 
            is triggered and it resets the iteration counter.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StoppingTriggeredCallback">
      <summary>
            A delegate that gets triggered when a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> is satisfied.
            </summary>
      <param name="initialState">The initial state of the function getting run.</param>
      <returns>How or if propagation should continue.</returns>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.StopType">
      <summary>
            An enumeration listing the possible events in a function that can be detected by a <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StopType.AnyThreshold">
      <summary>
            Any threshold.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StopType.ThresholdIncreasing">
      <summary>
            A threshold that is increasing.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StopType.ThresholdDecreasing">
      <summary>
            A threshold that is decreasing.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StopType.AnyExtrema">
      <summary>
            Any extrema.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StopType.LocalMinimum">
      <summary>
            A minimum.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.StopType.LocalMaximum">
      <summary>
            A maximum.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> that will compute a single value and compare it 
            to a <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold">threshold</see> to determine 
            if this constraint is satisfied.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.#ctor(System.Double,System.Double,AGI.Foundation.StoppingConditions.WhenToCheckConstraint,AGI.Foundation.StoppingConditions.InequalityCondition,System.Boolean)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to compare with the value that gets evaluated.</param>
      <param name="tolerance">The tolerance to use when comparing the <paramref name="threshold" /> with 
            the evaluated value.</param>
      <param name="whenToCheck">Specified whether this this condition be checked when a stop is detected or found.</param>
      <param name="inequality">Specifies how the value gets evaluated by this constraint gets compared to the 
            <paramref name="threshold" />.</param>
      <param name="useAbsoluteValue">Specifies if the absolute value of the computed value should be used when 
            compared to the <paramref name="threshold" /> or not.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> with an 
            <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived type should 
            be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" />.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.CreateThresholdEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            with an <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived 
            type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.InequalityCriteria">
      <summary>
            Gets or sets how the calculated value should be checked to the threshold in the concrete type. 
            This works by checking the relation between the computed value and the threshold defined on the 
            derived type.  So for example, if the computed value is 7000, the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" /> is 6000 
            and this property set to <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThan" />, this constraint will be 
            satisfied.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold">
      <summary>
            Gets or sets the threshold to compare with the value evaluated by the 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" />.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Tolerance">
      <summary>
            Gets or sets the tolerance to use when comparing the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" /> to the value evaluated 
            by the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.UseAbsoluteValue">
      <summary>
            Gets or sets the option specifying if the the magnitude of the computed value should be used when 
            compared to the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">
      <summary>
            The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">evaluator</see> for a <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" />.  
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.#ctor(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="definition">The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint">definition</see> that is 
            creating this.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.#ctor(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.CheckCurrentState(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            This method gets called every time a new <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> is checked 
            by the parent <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see>.  This method 
            should be used when the criteria of your <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator" /> 
            needs to check every computed state, such as the case with the 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> need to keep track of extrema if its 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.InequalityCriteria" /> is set to 
            <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.GreaterThanMinimum" /> or <see cref="F:AGI.Foundation.StoppingConditions.InequalityCondition.LessThanMaximum" />.
            </summary>
      <param name="currentState">The state to check at every step of propagation.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.EvaluateSingleValue(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
        <para>
            This method will return the value that will be compared to the 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold">Threshold</see>.  This method does not 
            need to deal with the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.UseAbsoluteValue" />.
            </para>
      </summary>
      <param name="state">The current <see cref="T:AGI.Foundation.Coordinates.IMotionState">state</see> of propagation.</param>
      <returns>The value of the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">constraint</see>.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.IsConstraintSatisfied(AGI.Foundation.Coordinates.IMotionState)">
      <summary>
            This method will examine from the state and return true if this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> is satisfied, and false 
            if not.  
            </summary>
      <param name="state">The state to check.</param>
      <returns>true if this constraint is satisfied, false otherwise.  
            When all <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> return true, then the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping condition</see> may stop propagation if it too is 
            satisfied.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.SimpleCheck(System.Double,System.Double,System.Double,System.Boolean,AGI.Foundation.StoppingConditions.InequalityCondition,System.Double,System.Double)">
      <summary>
            Performs a simple check of the <paramref name="currentValue" /> against a <paramref name="threshold" /> 
            and <paramref name="tolerance" />. The <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.UseAbsoluteValue" /> flag and the 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.InequalityCriteria" /> options are used in this method to determine if this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> is satisfied with the <paramref name="currentValue" />.  
            This method should be called in the <see cref="M:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.IsConstraintSatisfied(AGI.Foundation.Coordinates.IMotionState)" /> method if your constraint is 
            simply computing a value to be compared to a threshold.
            </summary>
      <param name="currentValue">The current value as computed by the concrete type.  This value does not 
            need to have been processed with the <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.UseAbsoluteValue" /> property.</param>
      <param name="threshold">The threshold from the concrete type.</param>
      <param name="tolerance">The tolerance from the concrete type.</param>
      <param name="greatestValue">The greatest value that the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            has computed up to this point.</param>
      <param name="lowestValue">The smallest value that the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            has computed up to this point.</param>
      <param name="inequalityCriteria">The <see cref="T:AGI.Foundation.StoppingConditions.InequalityCondition" /> that should be used to 
            compare the <paramref name="currentValue" /> to the <paramref name="threshold" />.</param>
      <param name="useAbsoluteValue">Whether or not the absolute value of the <paramref name="currentValue" /> 
            should be used when determining if the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            is satisfied.</param>
      <returns>true if the <paramref name="currentValue" /> satisfies the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> taking into account the 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator.InequalityCriteria" />. false otherwise</returns>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> that samples the value of a 
            <see cref="T:AGI.Foundation.Motion`1">Motion{double}</see> stored in an <see cref="T:AGI.Foundation.Coordinates.IMotionState" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.ElementName" />, <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.FunctionTolerance" /> or 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.IndependentVariableTolerance" /> 
            must be set <see cref="M:AGI.Foundation.StoppingConditions.StoppingCondition.GetEvaluator(AGI.Foundation.EvaluatorGroup)">before the evaluator is created</see>.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.#ctor(AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.#ctor(System.String,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="valueTolerance">The tolerance between the value of the <paramref name="element" /> in the 
            <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState">state</see> and the <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for a threshold or extrema.</param>
      <param name="type">Specifies what type of threshold or extrema this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> is attempting to stop on.</param>
      <param name="element">The name of the element in the state to sample when looking for an event.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.#ctor(System.String,System.Double,System.Double,System.Double,AGI.Foundation.StoppingConditions.StopType)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="threshold">The threshold to stop the function on. This value is ignored if the 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.TypeOfStoppingCondition" /> is not a threshold.</param>
      <param name="valueTolerance">The tolerance between the value of the <paramref name="element" /> in the 
            <see cref="T:AGI.Foundation.Coordinates.ITimeBasedState">state</see> and the <paramref name="threshold" />.</param>
      <param name="timeTolerance">The smallest time span to search for a threshold or extrema.</param>
      <param name="type">Specifies what type of threshold or extrema this <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" /> is attempting to stop on.</param>
      <param name="element">The name of the element in the state to sample when looking for an event.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.StoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.CreateEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Initialize the actual <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator" /> for use in the functions that can be stopped. 
            Any properties that are unique to your derived type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used by actual condition and its 
            <see cref="P:AGI.Foundation.StoppingConditions.StoppingCondition.Constraints" />.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingCondition" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.ElementName">
      <summary>
            Gets or sets the name of the element in the state that should be sampled by this condition.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingCondition.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint">
      <summary>
            A <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> that compares a value stored in an <see cref="T:AGI.Foundation.Coordinates.IMotionState" />
            to a specified threshold.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.#ctor">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.ElementName" /> and 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Tolerance" /> must be set before the 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">evaluator</see> is created.
            </summary>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.#ctor(AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint,AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.#ctor(System.String,System.Double,System.Double,AGI.Foundation.StoppingConditions.WhenToCheckConstraint,AGI.Foundation.StoppingConditions.InequalityCondition,System.Boolean)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="elementName">The element in the state to compare to the <paramref name="threshold" />.</param>
      <param name="threshold">The threshold to compare with the <paramref name="elementName">element in the state</paramref>.</param>
      <param name="tolerance">The tolerance to use when comparing the <paramref name="threshold" /> with the value of the 
            <paramref name="elementName">element in the state</paramref>.</param>
      <param name="whenToCheck">Should this <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> be checked when the stop is 
            detected or when the exact stop is found.</param>
      <param name="inequality">How to compare the computed value with the <paramref name="threshold" />.</param>
      <param name="useAbsoluteValue">Should the absolute value of the 
            <paramref name="elementName">element in the state</paramref> be used.</param>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.CheckForSameDefinition(AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.CreateThresholdEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Create and initialize the <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator" /> 
            with an <see cref="T:AGI.Foundation.EvaluatorGroup" />.  Any properties that are unique to your derived 
            type should be checked here to ensure they are valid.
            </summary>
      <param name="group">The <see cref="T:AGI.Foundation.EvaluatorGroup">group</see> to use to initialize any 
            <see cref="T:AGI.Foundation.IEvaluator">evaluators</see> that will be used during evaluation.</param>
      <returns>The <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraintEvaluator">evaluator</see> for this 
            <see cref="T:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint" />.</returns>
    </member>
    <member name="P:AGI.Foundation.StoppingConditions.ValueInStateStoppingConditionConstraint.ElementName">
      <summary>
            Gets or sets the name of the element in the state to compare with the 
            <see cref="P:AGI.Foundation.StoppingConditions.ThresholdStoppingConditionConstraint.Threshold" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.StoppingConditions.WhenToCheckConstraint">
      <summary>
            An enumeration specifying when a <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraint" /> should be checked.  
            Since the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">stopping conditions</see> are usually 
            numerically sampled, there is a moment when an event is detected, but not exactly found to 
            within tolerance.  
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.WhenToCheckConstraint.AtExactEvent">
      <summary>
            Check when an exact event has been found.  If the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> result may change between when a 
            event is detected and when it is exactly found, then checking the 
            <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraints</see> at the exact event 
            will be more robust than checking when it is detected.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StoppingConditions.WhenToCheckConstraint.WhenEventIsDetected">
      <summary>
            Check when a event is detected.  If the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionConstraintEvaluator">constraint</see> 
            is not likely to be near its critical
            value when the <see cref="T:AGI.Foundation.StoppingConditions.StoppingConditionEvaluator">condition</see> is, then checking when a 
            event is detected should prevent the stopping condition function from honing in on an exact event 
            which can improve performance.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.AzimuthElevationMask">
      <summary>
            An azimuth-elevation mask which defines a region of visibility defined by the horizon.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.AzimuthElevationMask.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.AzimuthElevationMask.#ctor(AGI.Foundation.Celestial.CentralBody,AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Initializes a new instance centered at the specified planetodetic position on the
            specified central body.
            </summary>
      <param name="centralBody">The central body on which the mask is defined.</param>
      <param name="position">The planetodetic position at the center of the mask.</param>
    </member>
    <member name="M:AGI.Foundation.Terrain.AzimuthElevationMask.#ctor(AGI.Foundation.Coordinates.Cartographic)">
      <summary>
            Initializes a new instance centered at the specified planetodetic position.
            </summary>
      <param name="position">The planetodetic position at the center of the mask.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.AzimuthElevationMask.CentralBody">
      <summary>
            Gets or sets the central body to which this mask is relative.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.AzimuthElevationMask.GetMaximumObscuredElevation(AGI.Foundation.Terrain.ElevationMask,AGI.Foundation.Terrain.ElevationMask,System.Double,System.Double)">
      <summary>
            Computes the maximum elevation angle that is obscured as of a specified distance
            along an azimuth ray between two <see cref="T:AGI.Foundation.Terrain.ElevationMask" /> instances.
            </summary>
      <param name="firstElevationMask">The first elevation mask bounding the azimuth.</param>
      <param name="secondElevationMask">The second elevation mask bounding the azimuth.</param>
      <param name="azimuth">The azimuth between the two masks along which to search.</param>
      <param name="distance">The distance along the azimuthal ray to search for obscuration.</param>
      <returns>The maximum elevation angle that is obscured along the specified ray 
            from the origin to the specified distance.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.AzimuthElevationMask.GetMaximumObscuredElevation(System.Double,System.Double)">
      <summary>
            Computes the maximum elevation angle that is obscured as of a specified distance
            along an azimuth ray.
            </summary>
      <param name="azimuth">The azimuth, in radians.</param>
      <param name="distance">The maximum linear distance along the azimuth ray to consider.</param>
      <returns>
            The maximum obscured elevation angle, in radians.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Terrain.AzimuthElevationMask.Position">
      <summary>
            Gets or sets the planetodetic position of the observer for the mask.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.ElevationMask">
      <summary>
            The elevation mask along a particular azimuth ray of an <see cref="T:AGI.Foundation.Terrain.AzimuthElevationMask" />.
            This class defines how the view is obscured in a particular direction.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.ElevationMask.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.ElevationMask.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="azimuth">The azimuth of the ray, in radians.</param>
      <param name="elevation">The maximum obscured elevation along the ray, in radians.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.ElevationMask.Azimuth">
      <summary>
            Gets or sets the azimuth of the ray, in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.ElevationMask.Elevation">
      <summary>
            Gets or sets the maximum obscured elevation angle along the ray, in radians.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.ElevationRise">
      <summary>
            Describes a rise in obscured elevation angle along a particular azimuth ray of an
            <see cref="T:AGI.Foundation.Terrain.AzimuthElevationMask" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.ElevationRise.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.ElevationRise.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="distance">The distance, in meters, at which the maximum obscured elevation angle rise occurs.</param>
      <param name="elevation">The new maximum obscured elevation angle.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.ElevationRise.Distance">
      <summary>
            Gets or sets the linear distance at which the maximum obscured elevation angle rise occurs.  The distance is measured
            from the origin of the mask to the obscured point along the given <see cref="P:AGI.Foundation.Terrain.ElevationRise.Elevation" /> angle.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.ElevationRise.Elevation">
      <summary>
            Gets or sets the new maximum obscured elevation angle.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.EllipsoidTerrainProvider">
      <summary>
            A very simple terrain provider that returns 0.0 whenever asked for a height.
            This class adapts an ellipsoid to act like a terrain provider.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.#ctor">
      <summary>
            Initializes a new instance with the <see cref="P:AGI.Foundation.Celestial.CentralBody.Shape" /> and
            <see cref="P:AGI.Foundation.Celestial.CentralBody.FixedFrame" /> from the <see cref="T:AGI.Foundation.Celestial.EarthCentralBody" />
            in the <see cref="T:AGI.Foundation.Celestial.CentralBodiesFacet" /> in the current <see cref="T:AGI.Foundation.Infrastructure.CalculationContext" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.#ctor(AGI.Foundation.Geometry.Shapes.Ellipsoid,AGI.Foundation.Geometry.ReferenceFrame)">
      <summary>
            Initializes a new instance with the specified shape and fixed frame.
            </summary>
      <param name="shape">The ellipsoid shape in which the longitude, latitude, and altitude are specified.</param>
      <param name="shapeFixedFrame">The reference frame fixed to the ellipsoid.</param>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.GetFirstPartials(System.Double,System.Double)">
      <summary>
            Get the partial derivatives of height with respect to the specified longitude and
            latitude relative to the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  
            </summary>
      <param name="longitude">The longitude, in radians.  Requesting derivatives for a longitude 
            less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting derivatives for a latitude 
            less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The partial derivatives with respect to longitude and latitude, 
            with units of meters of height per radian.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.GetHeight(System.Double,System.Double)">
      <summary>
          Gets the interpolated height of the terrain at the specified longitude and latitude using the default
          interpolator for this terrain provider.
        </summary>
      <param name="longitude">
          The longitude, in radians.  Requesting a height for a longitude less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.
        </param>
      <param name="latitude">
          The latitude, in radians.  Requesting a height for a latitude less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.
        </param>
      <returns>
          The height, in meters, or <see cref="F:System.Double.NaN" /> if the height is not available at the requested longitude and latitude.
        </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.GetHeightNativeUnits(System.Double,System.Double)">
      <summary>
          Gets the interpolated height of the terrain at the specified longitude and latitude.
        </summary>
      <param name="longitude">The longitude, in the native units of the terrain provider.</param>
      <param name="latitude">The latitude, in the native units of the terrain provider.</param>
      <returns>
          The height, in the native units of the terrain provider, or <see cref="F:System.Double.NaN" /> if the height is not available at the requested longitude and latitude.
        </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.GetSecondPartials(System.Double,System.Double)">
      <summary>
            Get the second order (mixed) partial derivatives of height with respect to the specified 
            longitude and latitude relative to the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  
            </summary>
      <param name="longitude">The longitude, in radians.  Requesting derivatives for a longitude 
            less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting derivatives for a latitude 
            less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The second order (mixed) partial derivatives with respect to longitude and latitude, 
            with units of meters of height per radian squared.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.PreloadExtent(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Loads the terrain data in a given extent into the terrain cache.  This method does not return
            until the terrain data is fully loaded.  All terrain data within the extent is loaded into
            memory even if doing so would exceed the <see cref="T:AGI.Foundation.Terrain.TerrainCacheGroup">TerrainCacheGroup's</see><see cref="P:AGI.Foundation.Terrain.TerrainCacheGroup.MaximumSize" />.  Furthermore, the loaded terrain data is locked
            in memory (meaning it will not be unloaded) until the user calls <see cref="M:AGI.Foundation.Terrain.TerrainProvider.UnloadExtent(AGI.Foundation.Coordinates.CartographicExtent)" />.
            This method is safe to call from any thread.
            </summary>
      <param name="extent">The extent for which to load terrain data, in radians.</param>
    </member>
    <member name="M:AGI.Foundation.Terrain.EllipsoidTerrainProvider.UnloadExtent(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Unloads the cached terrain data for a given extent.  This method unloads all cached
            regions where any part of the region falls within the extent.  It does not return
            until the regions have been unloaded.  However, if a region within the extent is
            being used in another thread while this method is executing, the region may be
            reloaded immediately after this method unloads it.  This method is safe to call
            from any thread.
            </summary>
      <param name="extent">The extent for which to unload terrain, in radians.</param>
    </member>
    <member name="T:AGI.Foundation.Terrain.FirstPartialsOfHeight">
      <summary>
            A set of first order partial derivatives of terrain height with respect to
            longitude and latitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.FirstPartialsOfHeight.#ctor(System.Double,System.Double)">
      <summary>
            Create a new instance.
            </summary>
      <param name="partialLongitude">The partial derivative with respect to longitude.</param>
      <param name="partialLatitude">The partial derivative with respect to latitude.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.FirstPartialsOfHeight.IsUndefined">
      <summary>
            Gets a value indicating whether the values for the partials are not <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.FirstPartialsOfHeight.LatitudePartial">
      <summary>
            Gets the first order partial derivative of terrain height with respect to latitude.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.FirstPartialsOfHeight.LongitudePartial">
      <summary>
            Gets the first order partial derivative of terrain height with respect to longitude.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.FirstPartialsOfHeight.Undefined">
      <summary>
            Gets a static instance representing values for the partials such that they are undefined (<see cref="F:System.Double.NaN" />).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.FirstPartialsOfHeight.Zero">
      <summary>
            Gets a static instance representing values for the partials equal to zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.HeightReference">
      <summary>
            An enumeration that identifies the reference for the heights returned by
            <see cref="M:AGI.Foundation.Terrain.TerrainProvider.GetHeight(System.Double,System.Double)" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Terrain.HeightReference.Shape">
      <summary>
            The returned height is relative to the surface of the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Terrain.HeightReference.ReferenceSurface">
      <summary>
            The returned height is relative to another surface identified by <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ReferenceSurface" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.IAzimuthElevationMask">
      <summary>
            Given a direction described as an azimuth angle, and a distance in that
            direction, this interface provides the maximum elevation angle that
            is obscured along the line of sight.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.IAzimuthElevationMask.CentralBody">
      <summary>
            Gets the central body to which this mask is relative.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.IAzimuthElevationMask.GetMaximumObscuredElevation(System.Double,System.Double)">
      <summary>
            Computes the maximum elevation angle that is obscured as of a specified distance
            along an azimuth ray.
            </summary>
      <param name="azimuth">The azimuth, in radians.</param>
      <param name="distance">The maximum distance along the azimuth ray to consider.</param>
      <returns>The maximum obscured elevation angle, in radians.</returns>
    </member>
    <member name="P:AGI.Foundation.Terrain.IAzimuthElevationMask.Position">
      <summary>
            Gets the planetodetic position of the observer for the mask.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.IAzimuthElevationMaskService">
      <summary>
            Provides an <see cref="T:AGI.Foundation.Terrain.IAzimuthElevationMask" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.IAzimuthElevationMaskService.Mask">
      <summary>
            Gets the azimuth-elevation mask.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.SecondPartialsOfHeight">
      <summary>
            A set of second order mixed partial derivatives of terrain height with respect to
            longitude and latitude.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.SecondPartialsOfHeight.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Create a new instance.
            </summary>
      <param name="partialLongitudeLongitude">The second partial derivative with respect to longitude.</param>
      <param name="partialLatitudeLatitude">The second partial derivative with respect to latitude.</param>
      <param name="partialLongitudeLatitude">The mixed partial derivative with respect to longitude and latitude.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.SecondPartialsOfHeight.IsUndefined">
      <summary>
            Gets a value indicating whether the values for the partials are not <see cref="F:System.Double.NaN" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.SecondPartialsOfHeight.LatitudeLatitudePartial">
      <summary>
            Gets the second partial derivative with respect to latitude.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.SecondPartialsOfHeight.LongitudeLatitudeMixedPartial">
      <summary>
            Gets the mixed partial derivative with respect to longitude and latitude.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.SecondPartialsOfHeight.LongitudeLongitudePartial">
      <summary>
            Gets the second partial derivative with respect to longitude.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.SecondPartialsOfHeight.Undefined">
      <summary>
            Gets a static instance representing values for the partials such that they are undefined (<see cref="F:System.Double.NaN" />).
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.SecondPartialsOfHeight.Zero">
      <summary>
            Gets a static instance representing values for the partials equal to zero.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.TerrainCache">
      <summary>
            A cache of terrain data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Terrain.TerrainCache" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainCache.Group">
      <summary>
            Gets the <see cref="T:AGI.Foundation.Terrain.TerrainCacheGroup" /> that contains this cache.  
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainCache.LeastRecentlyUsedRegion">
      <summary>
          Gets the region in this cache that was least recently used.
        </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCache.LoadRegion(AGI.Foundation.Terrain.TerrainRegion)">
      <summary>
          Loads the specified region into the cache.
        </summary>
      <param name="region">The region to load.</param>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCache.RemoveRegion(AGI.Foundation.Terrain.TerrainRegion)">
      <summary>
          Removes the specified region from the cache.
        </summary>
      <param name="region">The region to remove.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainCache.Size">
      <summary>
          Gets the total memory, in bytes, used by all regions in the cache.
        </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.TerrainCacheGroup">
      <summary>
            A group of terrain caches.  Each group has its own thread for loading terrain regions.
            A group can also limit the total memory used by all caches in the group.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheGroup.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheGroup.AddCache(AGI.Foundation.Terrain.TerrainCache)">
      <summary>
            Adds a cache to the group.
            </summary>
      <param name="cache">The cache to add.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainCacheGroup.CurrentTimeStamp">
      <summary>
            Gets a time stamp that can be used for relative ordering of accesses to caches
            and regions within this cache group.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainCacheGroup.Default">
      <summary>
            Gets the default group.  Additional groups can be created to isolate groups of terrain.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainCacheGroup.MaximumSize">
      <summary>
            Gets or sets the maximum size, in bytes, of this cache group.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the provided maximum size is less than zero.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheGroup.RequestRegionLoad(AGI.Foundation.Terrain.TerrainRegion)">
      <summary>
            Requests that a region be loaded into cache.  This method returns immediately without loading
            the region and the region is later loaded in the cache group's thread.
            </summary>
      <param name="region">The region to load.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this cache group is asked to load a region belonging to a different cache group.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheGroup.StartCacheThread">
      <summary>
            Starts the thread associate with this cache group.  It is not normally necessary to
            call this method because constructing an instance of <see cref="T:AGI.Foundation.Terrain.TerrainCacheGroup" />
            will start the thread automatically.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheGroup.StopCacheThread">
      <summary>
            Stops the thread associated with this cache group.  This method does not return until the
            thread has stopped.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if attempting to stop a thread that is already stopping or stopped.</exception>
    </member>
    <member name="T:AGI.Foundation.Terrain.TerrainCacheTimeStamp">
      <summary>
            A time stamp used to indicate, in a relative sense, when various terrain
            regions were last utilized.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.CompareTo(AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
        Compares this instance with another instance of the same type.
      </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>
        A value indicating the relative order of the objects being compared.  The return value has these meanings:
        <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>
              This instance is less than <paramref name="other" />.
            </description></item><item><term>Zero</term><description>
              This instance is equal to <paramref name="other" />.
            </description></item><item><term>Greater than zero</term><description>
              This instance is greater than <paramref name="other" />.
            </description></item></list></returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.Equals(AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.Equals(System.Object)">
      <summary>
        Indicates whether another object is exactly equal to this instance.
      </summary>
      <param name="obj">
        The object to compare to this instance.
      </param>
      <returns>
        true if <paramref name="obj" /> is an instance of this type and represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.GetHashCode">
      <summary>
        Returns a hash code for this instance, which is suitable for use in hashing algorithms and data structures like a hash table.
      </summary>
      <returns>
        A hash code for the current object.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.op_Equality(AGI.Foundation.Terrain.TerrainCacheTimeStamp,AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
            Returns true if <paramref name="left" /> is equal to <paramref name="right" />.
            </summary>
      <param name="left">The left time stamp.</param>
      <param name="right">The right time stamp.</param>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.op_GreaterThan(AGI.Foundation.Terrain.TerrainCacheTimeStamp,AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
            Returns true if <paramref name="left" /> is greater than <paramref name="right" />.
            </summary>
      <param name="left">The left time stamp.</param>
      <param name="right">The right time stamp.</param>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.op_GreaterThanOrEqual(AGI.Foundation.Terrain.TerrainCacheTimeStamp,AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
            Returns true if <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </summary>
      <param name="left">The left time stamp.</param>
      <param name="right">The right time stamp.</param>
      <returns>true if <paramref name="left" /> is greater than or equal to <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.op_Inequality(AGI.Foundation.Terrain.TerrainCacheTimeStamp,AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
            Returns true if <paramref name="left" /> is not equal to <paramref name="right" />.
            </summary>
      <param name="left">The left time stamp.</param>
      <param name="right">The right time stamp.</param>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.op_LessThan(AGI.Foundation.Terrain.TerrainCacheTimeStamp,AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
            Returns true if <paramref name="left" /> is less than <paramref name="right" />.
            </summary>
      <param name="left">The left time stamp.</param>
      <param name="right">The right time stamp.</param>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainCacheTimeStamp.op_LessThanOrEqual(AGI.Foundation.Terrain.TerrainCacheTimeStamp,AGI.Foundation.Terrain.TerrainCacheTimeStamp)">
      <summary>
            Returns true if <paramref name="left" /> is less than or equal to <paramref name="right" />.
            </summary>
      <param name="left">The left time stamp.</param>
      <param name="right">The right time stamp.</param>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />, otherwise false.</returns>
    </member>
    <member name="T:AGI.Foundation.Terrain.TerrainProvider">
      <summary>
            The base class for all terrain providers.  Terrain providers describe the surface of a central body
            by providing heights relative to an idealized ellipsoidal shape or relative to another
            terrain provider.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Terrain.TerrainProvider" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.BoundingExtent">
      <summary>
            Gets the smallest rectangular extent that bounds the terrain provided by this terrain provider.
            The returned extent's edges are expressed in radians.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.BoundingExtentNativeUnits">
      <summary>
            Gets the smallest rectangular extent that bounds the terrain provided by this terrain provider.
            The returned extent's edges are expressed in the native units of the terrain provider.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetFirstPartials(System.Double,System.Double)">
      <summary>
            Get the partial derivatives of height with respect to the specified longitude and
            latitude relative to the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  
            </summary>
      <param name="longitude">The longitude, in radians.  Requesting derivatives for a longitude 
            less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting derivatives for a latitude 
            less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The partial derivatives with respect to longitude and latitude, 
            with units of meters of height per radian.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetGradient(System.Double,System.Double)">
      <summary>
        <para>
            Get the interpolated gradient of height with respect to the terrain at the specified longitude and
            latitude relative to the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  This method produces a vector representing
            the gradient of height in the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ShapeFixedFrame" />.
            </para>
        <para>
            Note: The direction for the gradient is defined for use as the outward facing surface normal direction.
            To obtain the directional derivative for the height (rate of change of height with respect to time), 
            take the negative gradient and dot it with a unit vector along the desired azimuth (change in height with respect to distance), 
            times the speed along that direction in meters/second.  
            </para>
        <para>
            The gradient, as defined above, is parallel to the upward facing <see cref="M:AGI.Foundation.Terrain.TerrainProvider.GetNormal(System.Double,System.Double)">terrain surface normal</see>,
            but its magnitude indicates the rate of change in the height at that location.
            </para>
      </summary>
      <param name="longitude">The longitude, in radians.  Requesting a gradient for a longitude less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting a gradient for a latitude less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The gradient vector in the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ShapeFixedFrame" /> at the given location, 
            with units of meters of height per meters of surface distance.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetHeight(System.Double,System.Double)">
      <summary>
          Gets the interpolated height of the terrain at the specified longitude and latitude using the default
          interpolator for this terrain provider.
        </summary>
      <param name="longitude">
          The longitude, in radians.  Requesting a height for a longitude less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.
        </param>
      <param name="latitude">
          The latitude, in radians.  Requesting a height for a latitude less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.
        </param>
      <returns>
          The height, in meters, or <see cref="F:System.Double.NaN" /> if the height is not available at the requested longitude and latitude.
        </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetHeightNativeUnits(System.Double,System.Double)">
      <summary>
          Gets the interpolated height of the terrain at the specified longitude and latitude.
        </summary>
      <param name="longitude">The longitude, in the native units of the terrain provider.</param>
      <param name="latitude">The latitude, in the native units of the terrain provider.</param>
      <returns>
          The height, in the native units of the terrain provider, or <see cref="F:System.Double.NaN" /> if the height is not available at the requested longitude and latitude.
        </returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetHeightRelativeToShape(System.Double,System.Double)">
      <summary>
            Gets the interpolated height of the terrain at the specified longitude and latitude relative to
            the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  This method takes into account the heights of any
            reference surfaces.
            </summary>
      <param name="longitude">The longitude, in radians.  Requesting a height for a longitude less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting a height for a latitude less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The height of terrain relative to <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />, in meters.</returns>
      <exception cref="T:System.InvalidOperationException">In order to use the <see cref="M:AGI.Foundation.Terrain.TerrainProvider.GetHeightRelativeToShape(System.Double,System.Double)" /> method, 
            all reference surfaces must have the same <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" /> and <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ShapeFixedFrame" /> as the terrain provider 
            on which the method is called.</exception>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetHessian(System.Double,System.Double)">
      <summary>
        <para>
            Get the interpolated hessian matrix based on the function of height with respect to the specified longitude and
            latitude relative to the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  This method produces a matrix representing
            the mixed second order partial derivatives of height in the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ShapeFixedFrame" />.
            </para>
        <para>
            Note: The direction for the gradient and hessian is defined for use with the directional derivative on the surface.
            The gradient is defined to be orthogonal to the terrain surface with its surface projection in the direction
            of the greatest increase in the height.  To obtain the second directional derivative for the height 
            (acceleration of height along a particular azimuth), take the negative of the hessian then pre and post multiply
            it by the velocity vector along the desired azimuth.  Then add the negative gradient dotted with the derivative
            of the velocity vector along the surface.  
            </para>
      </summary>
      <param name="longitude">The longitude, in radians.  Requesting a gradient for a longitude less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting a gradient for a latitude less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The hessian matrix expressed in the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ShapeFixedFrame" /> at the given location, 
            with units of meters of height per meters of surface distance squared.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetNormal(System.Double,System.Double)">
      <summary>
            Get the normal vector to the terrain surface at the specified location.
            </summary>
      <param name="longitude">The longitude, in radians.  Requesting a gradient for a longitude less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting a gradient for a latitude less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>If the <paramref name="longitude" /> and <paramref name="latitude" /> are within the 
            <see cref="P:AGI.Foundation.Terrain.TerrainProvider.BoundingExtent" />, this returns the surface normal.  Otherwise, it returns <see cref="P:AGI.Foundation.Coordinates.UnitCartesian.Undefined" />.</returns>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.GetSecondPartials(System.Double,System.Double)">
      <summary>
            Get the second order (mixed) partial derivatives of height with respect to the specified 
            longitude and latitude relative to the provider's <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" />.  
            </summary>
      <param name="longitude">The longitude, in radians.  Requesting derivatives for a longitude 
            less than -PI or greater than PI will always return <see cref="F:System.Double.NaN" />.</param>
      <param name="latitude">The latitude, in radians.  Requesting derivatives for a latitude 
            less than -PI/2 or greater than PI/2 will always return <see cref="F:System.Double.NaN" />.</param>
      <returns>The second order (mixed) partial derivatives with respect to longitude and latitude, 
            with units of meters of height per radian squared.</returns>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.HeightReference">
      <summary>
            Gets an enumeration indicating whether the heights returned by the <see cref="M:AGI.Foundation.Terrain.TerrainProvider.GetHeight(System.Double,System.Double)" /> method
            are relative to the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" /> or to the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ReferenceSurface" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.MinimumSampleSpacing">
      <summary>
            Reports the smallest distance between the successive height samples of the terrain data.
            If the return value is 0.0 then the minimum sample spacing is unknown.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.NativeToMeters">
      <summary>
            Gets the value to multiple a height in the native units of the terrain provider
            to convert it to meters.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.PreloadExtent(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Loads the terrain data in a given extent into the terrain cache.  This method does not return
            until the terrain data is fully loaded.  All terrain data within the extent is loaded into
            memory even if doing so would exceed the <see cref="T:AGI.Foundation.Terrain.TerrainCacheGroup">TerrainCacheGroup's</see><see cref="P:AGI.Foundation.Terrain.TerrainCacheGroup.MaximumSize" />.  Furthermore, the loaded terrain data is locked
            in memory (meaning it will not be unloaded) until the user calls <see cref="M:AGI.Foundation.Terrain.TerrainProvider.UnloadExtent(AGI.Foundation.Coordinates.CartographicExtent)" />.
            This method is safe to call from any thread.
            </summary>
      <param name="extent">The extent for which to load terrain data, in radians.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.RadiansToNative">
      <summary>
            Gets the value to multiply an angle in radians by in order to convert it to the
            internal units of the terrain provider.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.ReferenceSurface">
      <summary>
            Gets the reference surface.  The <see cref="M:AGI.Foundation.Terrain.TerrainProvider.GetHeight(System.Double,System.Double)" /> method returns heights relative
            to this reference surface.  If this property is null, the heights are relative to the
            surface of the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" /> ellipsoid instead.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.Shape">
      <summary>
            Gets the shape on which the longitude and latitude are defined.  If <see cref="P:AGI.Foundation.Terrain.TerrainProvider.ReferenceSurface" />
            is null, the heights returned by <see cref="M:AGI.Foundation.Terrain.TerrainProvider.GetHeight(System.Double,System.Double)" /> are relative to this ellipsoid as well.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainProvider.ShapeFixedFrame">
      <summary>
            Gets the reference frame fixed to the <see cref="P:AGI.Foundation.Terrain.TerrainProvider.Shape" /> in which the
            longitude and latitude are defined.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainProvider.UnloadExtent(AGI.Foundation.Coordinates.CartographicExtent)">
      <summary>
            Unloads the cached terrain data for a given extent.  This method unloads all cached
            regions where any part of the region falls within the extent.  It does not return
            until the regions have been unloaded.  However, if a region within the extent is
            being used in another thread while this method is executing, the region may be
            reloaded immediately after this method unloads it.  This method is safe to call
            from any thread.
            </summary>
      <param name="extent">The extent for which to unload terrain, in radians.</param>
    </member>
    <member name="T:AGI.Foundation.Terrain.TerrainRegion">
      <summary>
            A region of terrain.  Terrain regions are the unit of caching used by
            <see cref="T:AGI.Foundation.Terrain.TerrainCache" /> and <see cref="T:AGI.Foundation.Terrain.TerrainCacheGroup" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainRegion.#ctor(AGI.Foundation.Terrain.TerrainCache)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="cache">The cache that owns this region.</param>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainRegion.Cache">
      <summary>
            Gets the cache associated with this region.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainRegion.Equals(AGI.Foundation.Terrain.TerrainRegion)">
      <summary>
        Indicates whether another instance of this type is exactly equal to this instance.
      </summary>
      <param name="other">
        The instance to compare to this instance.
      </param>
      <returns>
        true if <paramref name="other" /> represents the same value as this instance; otherwise, false.
      </returns>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainRegion.IsLockedInMemory">
      <summary>
            Gets or sets a value indicating whether this region is locked in memory.
            A locked region will not be unloaded, even if the cache is full and this
            is the least recently used region.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainRegion.LastAccess">
      <summary>
            Gets the time stamp of the last time this region was accessed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainRegion.Size">
      <summary>
            Gets the size, in bytes, of this region.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Terrain.TerrainRegion.Status">
      <summary>
            Gets or sets the current status of this region.
            Only the cache associated with this region should set the value of this property.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Terrain.TerrainRegion.UpdateLastAccess">
      <summary>
            Updates the last access time of this terrain region with the current time stamp
            of the cache group associated with this region.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Terrain.TerrainRegionStatus">
      <summary>
            Indicates the status of a region of terrain.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Terrain.TerrainRegionStatus.Requested">
      <summary>
            It has been requested that this region be loaded into the cache, but that has not happened yet.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Terrain.TerrainRegionStatus.Loading">
      <summary>
            The region is being loaded but is not yet ready for use.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Terrain.TerrainRegionStatus.Loaded">
      <summary>
            The region has been loaded into the cache and is ready to use.
            </summary>
    </member>
  </members>
</doc>