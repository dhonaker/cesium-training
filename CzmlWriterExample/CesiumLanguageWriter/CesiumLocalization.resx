<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentTypeInvalid" xml:space="preserve">
    <value>The argument is not an expected type for the method.</value>
  </data>
  <data name="CannotRepresentLeapSecondAsUTCJulianDate" xml:space="preserve">
    <value>JulianDate cannot represent the moment of a leap second with the UTC time standard.</value>
  </data>
  <data name="DayOfYearOutOfRange" xml:space="preserve">
    <value>The Day of Year must be between 1 and 366 inclusive.</value>
  </data>
  <data name="GregorianDateFormatInvalid" xml:space="preserve">
    <value>Invalid format string.</value>
  </data>
  <data name="GregorianDateInvalidCharacter" xml:space="preserve">
    <value>Invalid character {0} in format specifier.</value>
  </data>
  <data name="GregorianDateInvalidCharacterAtEnd" xml:space="preserve">
    <value>Invalid character {0} at the end of the format specifier.</value>
  </data>
  <data name="GregorianDateInvalidFormatSpecifier" xml:space="preserve">
    <value>{0} is not one of the format specifier characters defined for DateTimeFormatInfo.</value>
  </data>
  <data name="GregorianDateOrderOfMonthAndDateNotDefined" xml:space="preserve">
    <value>Order of month and date is not defined by {0}.</value>
  </data>
  <data name="GregorianDateOrderOfYearMonthAndDateNotDefined" xml:space="preserve">
    <value>Order of year, month and date is not defined by {0}.</value>
  </data>
  <data name="GregorianDateOrderOfYearMonthAndDateNotSupported" xml:space="preserve">
    <value>Order of year, month and date defined by {0} is not supported.</value>
  </data>
  <data name="GregorianDateQuoteNotTerminated" xml:space="preserve">
    <value>A quote was not terminated.</value>
  </data>
  <data name="GregorianDateStringNotRecognized" xml:space="preserve">
    <value>Input {0} was not recognized as a valid GregorianDate.</value>
  </data>
  <data name="HourMinuteSecondInvalidArgument" xml:space="preserve">
    <value>One or more of the hour, minute, and second arguments is outside of the acceptable range.</value>
  </data>
  <data name="InvalidReferenceString" xml:space="preserve">
    <value>The provided reference string is not in the correct format.</value>
  </data>
  <data name="MagnitudeMustNotBeInfinite" xml:space="preserve">
    <value>The magnitude of the provided coordinates must not be infinite.</value>
  </data>
  <data name="MagnitudeMustNotBeZero" xml:space="preserve">
    <value>The magnitude of the provided coordinates must not be zero.</value>
  </data>
  <data name="MismatchedNumberOfDatesAndValues" xml:space="preserve">
    <value>This collection must have the same number of elements as the "dates" collection.</value>
  </data>
  <data name="MotionMustContainValue" xml:space="preserve">
    <value>A Motion instance must be constructed with at least one value.</value>
  </data>
  <data name="MustBeConstructedFromSpecificNumberOfElements" xml:space="preserve">
    <value>An object of the type {0} must be constructed from an array with at least {1} elements.</value>
  </data>
  <data name="TaiAbbreviation" xml:space="preserve">
    <value>TAI</value>
  </data>
  <data name="TaiName" xml:space="preserve">
    <value>International Atomic Time</value>
  </data>
  <data name="UnknownEnumerationValue" xml:space="preserve">
    <value>The enumeration has an invalid or unsupported value.</value>
  </data>
  <data name="UtcAbbreviation" xml:space="preserve">
    <value>UTC</value>
  </data>
  <data name="UtcName" xml:space="preserve">
    <value>Coordinated Universal Time</value>
  </data>
  <data name="WriterAlreadyClosed" xml:space="preserve">
    <value>The Cesium writer cannot be closed because it is not open.</value>
  </data>
  <data name="WriterAlreadyOpen" xml:space="preserve">
    <value>The Cesium writer cannot be opened because it is already opened.  Please close the previous element before opening a new one.</value>
  </data>
  <data name="WriterNotOpen" xml:space="preserve">
    <value>The Cesium writer cannot be used to write elements because it is not currently open.  This usually indicates an attempt to use a writer after is has been closed.</value>
  </data>
  <data name="YearMonthDayInvalidArgument" xml:space="preserve">
    <value>One or more of the year, month, and day arguments is outside of the acceptable range.</value>
  </data>
</root>