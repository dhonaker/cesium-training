<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>AGI.Foundation.Tracking</name>
  </assembly>
  <members>
    <member name="T:AGI.Foundation.StkComponentsTracking">
      <summary>
            Version information for the STK Components Tracking library.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsTracking.DisplayVersion">
      <summary>
            The display version of the library: <c>2015 r2</c>.
            </summary>
    </member>
    <member name="F:AGI.Foundation.StkComponentsTracking.Version">
      <summary>
            The numeric version of the library: <c>15.2.379.0</c>.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Transaction">
      <summary>
            A transaction within the software transactional memory (STM) system.  All reads made in a transaction
            will see a consistent snapshot of the <see cref="T:AGI.Foundation.TransactionContext" />.  A transaction
            will only successfully commit if no update it has made conflicts with any
            concurrent updates that have been committed since the transaction was started.  For more
            information, see the <a href="../Programmer's Guide/Overview/Tracking/Transactions.html">Software Transactional Memory</a>
            overview.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Transaction.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Begins a new transaction.  Be sure to <see cref="M:AGI.Foundation.Transaction.Dispose" />,
            <see cref="M:AGI.Foundation.Transaction.Commit" />, or <see cref="M:AGI.Foundation.Transaction.Abort" /> this transaction as soon as you
            are done using it.  Keeping transactions open for a long time will substantially
            increase the memory usage and slow the performance of the software transactional
            memory system.  You should generally use
            <see cref="M:AGI.Foundation.TransactionContext.DoTransactionally(System.Action{AGI.Foundation.Transaction})">TransactionContext.DoTransactionally</see>
            instead of constructing a transaction directly.
            </summary>
      <param name="context">
            The context in which this transaction operates.  The new transaction can only be used to
            access transacted values in this context.
            </param>
    </member>
    <member name="M:AGI.Foundation.Transaction.Abort">
      <summary>
            Aborts this transactions.  Any changes made by this transaction will be discarded.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)">
      <summary>
            Adds a modification to this transaction.  This method is intended to be called within
            custom <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedObject" /> implementations.
            </summary>
      <param name="modifiedObject">The modified object.</param>
      <param name="details">
            Details about the modification that will be passed to the modified object's
            <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Commit(AGI.Foundation.Transaction,System.Object)" />, <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Abort(AGI.Foundation.Transaction,System.Object)" />,
            <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Cleanup(System.Object)" />, and <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.ValidateModification(AGI.Foundation.Transaction,System.Object)" />
            methods.
            </param>
    </member>
    <member name="M:AGI.Foundation.Transaction.Commit">
      <summary>
            Commits this transaction so that its changes are visible to other transactions.
            This method may throw <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" /> if another transaction
            modifies one of the same values as this transaction and the other transaction commits first.
            Use <see cref="M:AGI.Foundation.TransactionContext.DoTransactionally(System.Action{AGI.Foundation.Transaction})" /> to automatically retry conflicting
            exceptions.
            </summary>
      <exception cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException">
            Raised when another transaction modifies one of the same values as this one and the other
            transaction commits first.  It can also be raised when a method like
            <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.EnsureValue(AGI.Foundation.Transaction)" /> has been called within this transaction
            and the value was changed by another transaction.  Use
            <see cref="M:AGI.Foundation.TransactionContext.DoTransactionally(System.Action{AGI.Foundation.Transaction})" /> to automatically retry conflicting exceptions.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Transaction.Context">
      <summary>
            Gets the transaction context in which this transaction operates.  This transaction can
            only be used to access transacted objects in this context.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Transaction.Dispose">
      <summary>
            Disposes this transaction.   It is safe to call this method on a transaction that
            has already been committed or aborted.  If it has not already been committed or
            aborted, it will be aborted.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Transaction.IsActive">
      <summary>
            Gets a value indicating whether or not this transaction is still active.
            A transaction is active from the time it is constructed until <see cref="M:AGI.Foundation.Transaction.Commit" />,
            <see cref="M:AGI.Foundation.Transaction.Abort" />, or <see cref="M:AGI.Foundation.Transaction.Dispose" /> is called on it.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Transaction.Number">
      <summary>
            Gets the number of this transaction.  Multiple transactions may share a single number and
            the number of a transaction may change when it is committed.
            </summary>
    </member>
    <member name="T:AGI.Foundation.TransactionalSelectCallback`1">
      <summary>
            This defines the delegate TransactionalSelectCallback, which is used whenever
            tranactionally invoking a callback that needs to have a return value. This delegate
            contains only one argument, which is the tranaction, and returns a variable of type
            TResult.
            </summary>
      <param name="arg">The tranaction in which the callback is executed.</param>
      <typeparam name="TResult">The return type of the callback.</typeparam>
      <returns>The return value of the callback.</returns>
    </member>
    <member name="T:AGI.Foundation.TransactionContext">
      <summary>
            A context for a group of transactions in the software transactional memory (STM) system.  Different
            contexts can be thought of as separate in-memory databases.  A <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1" /> 
            exists within exactly one context and can
            only be read or modified by a <see cref="T:AGI.Foundation.Transaction" /> within the same context.
            </summary>
    </member>
    <member name="M:AGI.Foundation.TransactionContext.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="E:AGI.Foundation.TransactionContext.Committed">
      <summary>
            Raised each time that a transaction is committed in this context.
            </summary>
    </member>
    <member name="M:AGI.Foundation.TransactionContext.DoTransactionally(System.Action{AGI.Foundation.Transaction})">
      <summary>
            Executes the provided callback within a transaction, and automatically commits the
            transaction when the callback returns.  If the transaction conflicts (it raises
            a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" />), the callback is executed again
            with a new transaction.  This process continues until the transaction commits
            successfully.
            </summary>
      <param name="callback">The callback to execute transactionally.</param>
    </member>
    <member name="M:AGI.Foundation.TransactionContext.SelectTransactionally``1(AGI.Foundation.TransactionalSelectCallback{``0})">
      <summary>
            Executes the provided callback within a transaction, and automatically commits the
            transaction when the callback returns. If the transaction conflicts (it raises
            a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" />), the callback is executed again
            with a new transaction.  This process continues until the transaction commits
            successfully. When the transaction commits successfully, the value returned by
            the provided callback is returned by this method.
            </summary>
      <param name="selector">The callback to execute transactionally.</param>
      <typeparam name="TResult">The return type of the callback.</typeparam>
      <returns>The return value of the callback when executed.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.AxesFromArchive`1">
      <summary>
            An <see cref="T:AGI.Foundation.Geometry.Axes" /> whose orientation is defined by archived tracking data.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.#ctor(AGI.Foundation.Geometry.AxesFromArchive{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.#ctor(AGI.Foundation.Tracking.TrackingArchive{`0},System.Object)">
      <summary>
            Initializes a new instance to use a specified archive and entity.
            </summary>
      <param name="archive">The archive from which to obtain orientation data.</param>
      <param name="entityIdentifier">The identifier of the entity whose orientation is to be obtained from the archive.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFromArchive`1.Archive">
      <summary>
            Gets or sets the archive from which to obtain orientation data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.CheckForSameDefinition(AGI.Foundation.Geometry.AxesFromArchive{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.AxesFromArchive`1.EntityIdentifier">
      <summary>
            Gets or sets the identifier of the entity whose orientation is to be obtained from the archive.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.AxesFromArchive`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />,<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this axes at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.EntityAxes`1">
      <summary>
            An <see cref="T:AGI.Foundation.Geometry.Axes" /> that obtains its value from from a tracking entity implementing
            <see cref="T:AGI.Foundation.Tracking.IEntityOrientation" />.  This axes can only be used in an evaluator that is parameterized
            on <see cref="P:AGI.Foundation.Geometry.EntityAxes`1.EntityParameter" /> and <see cref="P:AGI.Foundation.Geometry.EntityAxes`1.TransactionParameter" />.  See the
            <a href="../Programmer's Guide/Overview/Tracking/Parameterization.html">Evaluator Parameterization</a> topic for more information.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.#ctor">
      <summary>
            Initializes a new instance representing the orientation of the entity described by
            <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.#ctor(AGI.Foundation.Geometry.EntityAxes{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.#ctor(AGI.Foundation.Tracking.EntityParameter{`0})">
      <summary>
            Initializes a new instance representing the orientation of the specified entity parameter.
            </summary>
      <param name="entityParameter">
            The entity parameter specifying the entity from which this axes should get its
            orientation.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.CheckForSameDefinition(AGI.Foundation.Geometry.Axes)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.CheckForSameDefinition(AGI.Foundation.Geometry.EntityAxes{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.EntityAxes`1.EntityParameter">
      <summary>
            Gets or sets the entity parameter specifying the entity from which this axes should
            get its orientation.  By default, this is <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityAxes`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the transformation from this axes' parent axes to
            this axes represented by a <see cref="T:AGI.Foundation.Motion`2">Motion</see>
            &lt;<see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" />, <see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt; at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.         
            Consider using the methods of <see cref="T:AGI.Foundation.Geometry.GeometryTransformer" />
            instead of calling this method directly.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Axes.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.EntityAxes`1.TransactionParameter">
      <summary>
            Gets or sets the transaction parameter specifying the transaction that will be used
            when obtaining information from the entity.  By default this is
            <see cref="P:AGI.Foundation.Infrastructure.Threading.TransactionParameter.Instance" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.EntityPoint`1">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Point" /> that obtains its value from from a tracking entity implementing
            <see cref="T:AGI.Foundation.Tracking.IEntityPosition" />.  This point can only be used in an evaluator that is parameterized
            on <see cref="P:AGI.Foundation.Geometry.EntityPoint`1.EntityParameter" /> and <see cref="P:AGI.Foundation.Geometry.EntityPoint`1.TransactionParameter" />.  See the
            <a href="../Programmer's Guide/Overview/Tracking/Parameterization.html">Evaluator Parameterization</a> topic for more information.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.#ctor">
      <summary>
            Initializes a new instance representing the position of the entity described by
            <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.#ctor(AGI.Foundation.Geometry.EntityPoint{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.#ctor(AGI.Foundation.Tracking.EntityParameter{`0})">
      <summary>
            Initializes a new instance representing the position of the specified entity parameter.
            </summary>
      <param name="entityParameter">
            The entity parameter specifying the entity from which this point should get its
            position.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.CheckForSameDefinition(AGI.Foundation.Geometry.EntityPoint{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.EntityPoint`1.EntityParameter">
      <summary>
            Gets or sets the entity parameter specifying the entity from which this point should
            get its position.  By default, this is <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.EntityPoint`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.  
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />. 
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.EntityPoint`1.TransactionParameter">
      <summary>
            Gets or sets the transaction parameter specifying the transaction that will be used
            when obtaining information from the entity.  By default this is
            <see cref="P:AGI.Foundation.Infrastructure.Threading.TransactionParameter.Instance" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Geometry.PointFromArchive`1">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Point" /> whose position is defined by archived tracking data.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.#ctor(AGI.Foundation.Geometry.PointFromArchive{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.#ctor(AGI.Foundation.Tracking.TrackingArchive{`0},System.Object)">
      <summary>
            Initializes a new instance to use a specified archive and entity.
            </summary>
      <param name="archive">The archive from which to obtain position data.</param>
      <param name="entityIdentifier">The identifier of the entity whose position is to be obtained from the archive.</param>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointFromArchive`1.Archive">
      <summary>
            Gets or sets the archive from which to obtain position data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.CheckForSameDefinition(AGI.Foundation.Geometry.Point)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.CheckForSameDefinition(AGI.Foundation.Geometry.PointFromArchive{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.PointFromArchive`1.EntityIdentifier">
      <summary>
            Gets or sets the identifier of the entity whose position is to be obtained from the archive.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.PointFromArchive`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the <see cref="T:AGI.Foundation.Motion`1">Motion</see>&lt;<see cref="T:AGI.Foundation.Coordinates.Cartesian" />&gt;
            of this point at a given <see cref="T:AGI.Foundation.Time.JulianDate" />.
            Adds the evaluator to the <see cref="T:AGI.Foundation.EvaluatorGroup" />.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>An evaluator for this Point.</returns>
    </member>
    <member name="T:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1">
      <summary>
            A <see cref="T:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView" /> that gets the current sensor shape from a tracking entity
            implementing <see cref="T:AGI.Foundation.Tracking.IEntitySensorFieldOfView" />.  This type can only be used in an evaluator that
            is parameterized on <see cref="P:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.EntityParameter" /> and <see cref="P:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.TransactionParameter" />.  See the
            <a href="../Programmer's Guide/Overview/Tracking/Parameterization.html">Evaluator Parameterization</a> topic for more information.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.#ctor">
      <summary>
            Initializes a new instance representing the position of the entity described by
            <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.#ctor(AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.#ctor(AGI.Foundation.Tracking.EntityParameter{`0})">
      <summary>
            Initializes a new instance representing the position of the specified entity parameter.
            </summary>
      <param name="entityParameter">
            The entity parameter specifying the entity from which this point should get its
            position.
            </param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.CheckForSameDefinition(AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.CheckForSameDefinition(AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.EntityParameter">
      <summary>
            Gets or sets the entity parameter specifying the entity from which this point should
            get its position.  By default, this is <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets an evaluator that can be used to find the shape of the sensor field-of-view volume
            at a given date.  While this evaluator is allowed to return completely different types of sensors
            at different times, some clients of this class, such as
            <see cref="T:AGI.Foundation.Access.Constraints.SensorVolumeConstraint">SensorVolumeConstraint</see>,
            require more consistency.  See <see cref="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetRepresentativeFieldOfView" /> for more information.
            </summary>
      <param name="group">
      The group with which to associate the new evaluator.  By grouping evaluators
      that are often evaluated at the same Julian dates, common computations can be performed only once
      for the entire group instead of multiple times for each evaluator.
    </param>
      <returns>The evaluator.</returns>
    </member>
    <member name="M:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.GetRepresentativeFieldOfView">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> that is representative of the ones that are produced by
            evaluating the <see cref="T:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfViewEvaluator" /> returned by
            <see cref="M:AGI.Foundation.Geometry.Shapes.DynamicSensorFieldOfView.GetEvaluator" />.  In many cases, this property can be null.
            However, when using this sensor with
            <see cref="T:AGI.Foundation.Access.Constraints.SensorVolumeConstraint">SensorVolumeConstraint</see>
            to constrain access over an interval, this property must return a representative instance so that
            access can be set up properly.  The representative instance must by the same type (such as
            <see cref="T:AGI.Foundation.Geometry.Shapes.ComplexConic" /> or <see cref="T:AGI.Foundation.Geometry.Shapes.RectangularPyramid" />) as the instances returned by
            the evaluator.  Furthermore, the general shape of the sensor must be the same.  For example,
            if the representative sensor has a hole, then all sensors returned by the evaluator must have
            holes as well.  The size of the hole is still allowed to change with time, however.  To be precise,
            this method must return a <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> with the exact same number of items in the
            collection returned by <see cref="M:AGI.Foundation.Geometry.Shapes.Solid.GetEnclosureDescriptions" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Geometry.Shapes.EntityDynamicSensorFieldOfView`1.TransactionParameter">
      <summary>
            Gets or sets the transaction parameter specifying the transaction that will be used
            when obtaining information from the entity.  By default this is
            <see cref="P:AGI.Foundation.Infrastructure.Threading.TransactionParameter.Instance" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.TransactedObject">
      <summary>
            An object that participates in the software transactional memory (STM) system
            via <see cref="T:AGI.Foundation.TransactionContext" /> and <see cref="T:AGI.Foundation.Transaction" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.#ctor(AGI.Foundation.TransactionContext,System.Object)">
      <summary>
            Initializes a new instance with a specified owner.
            </summary>
      <param name="context">The context in which this object can be modified.</param>
      <param name="owner">The object that owns this transacted object.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Abort(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Aborts the specified modification.
            </summary>
      <param name="transaction">The aborting transaction.</param>
      <param name="modificationDetails">
            The modification to abort.  This is the object that was passed to
            <see cref="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)" />.
            </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.CheckTransaction(AGI.Foundation.Transaction)">
      <summary>
            Verifies that a specified transaction is in the same context as this
            transacted object and throws an <see cref="T:System.ArgumentException" /> if it is not.
            </summary>
      <param name="transaction">The transaction to verify.</param>
      <exception cref="T:System.ArgumentException">
            The specified transaction is in a different context than this transacted object.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Cleanup(System.Object)">
      <summary>
            Cleans up modifications that are no longer visible to any transaction.
            </summary>
      <param name="modificationDetails">
            The last modification that is still visible to transactions.  Any modifications
            after this one can be cleaned up.
            </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Commit(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Commits the specified modification.
            </summary>
      <param name="transaction">The committing transaction.</param>
      <param name="modificationDetails">
            The modification to commit.  This is the object that was passed to
            <see cref="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)" />.
            </param>
      <returns>
            The data to pass to the <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Notify(System.Object,AGI.Foundation.Transaction)" /> method after all transacted objects have been committed.
            If this method returns null, <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Notify(System.Object,AGI.Foundation.Transaction)" /> will not be called.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactedObject.Context">
      <summary>
            Gets the transaction context in which this object can be modified.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Notify(System.Object,AGI.Foundation.Transaction)">
      <summary>
            Notifies interested parties of changes to this transacted object.
            </summary>
      <param name="notifyDetails">
            The instance returned by <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Commit(AGI.Foundation.Transaction,System.Object)" />.  Usually this contains details of the modification.
            </param>
      <param name="chainedTransaction">
            A transaction that can be used to make additional changes that will be committed immediately after
            the current transaction finishes committing.  This parameter may be null, in which
            case a new transaction should be created for this purpose and returned.
            </param>
      <returns>
        <paramref name="chainedTransaction" /> if it is non-null, or the new chained transaction if
            <paramref name="chainedTransaction" /> was null and a chained transaction
            was required.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactedObject.Owner">
      <summary>
            Gets the object that owns this transacted object, or null if this object
            does not have an owner.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.ValidateModification(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Verifies a modification to ensure that it is still valid after other transactions
            have potentially committed modifications to this object.
            </summary>
      <param name="transaction">The validating transaction.</param>
      <param name="modificationDetails">
            The modification to validate.  This is the object that was passed to
            <see cref="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)" />.
            </param>
      <returns>
            true if the modification is still valid; otherwise false.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1">
      <summary>
            A property that participates in the software transactional memory (STM) system.  The property's
            value must be read and modified in the context of a <see cref="T:AGI.Foundation.Transaction" />, which guarantees
            snapshot isolation for all properties in a <see cref="T:AGI.Foundation.TransactionContext" />.
            </summary>
      <typeparam name="T">
            The type of the property.  This type must be immutable (meaning it cannot be changed after it
            is constructed) or it must be treated as such.
            </typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.#ctor(AGI.Foundation.TransactionContext,System.Object)">
      <summary>
            Initializes a new property with a specified context and owner.
            The value of the property will be the default value for the type <typeparamref name="T" />.
            </summary>
      <param name="context">The context in which this property can be read and modified.</param>
      <param name="owner">The object that owns this property.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.#ctor(AGI.Foundation.TransactionContext,System.Object,`0)">
      <summary>
            Initializes a new property with a specified context, owner, and value.
            </summary>
      <param name="context">The context in which this property can be read and modified.</param>
      <param name="owner">The object that owns this property.</param>
      <param name="value">The initial value of the property.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.Abort(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Aborts the specified modification.
            </summary>
      <param name="transaction">The aborting transaction.</param>
      <param name="modificationDetails">
            The modification to abort.  This is the object that was passed to
            <see cref="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)" />.
            </param>
    </member>
    <member name="E:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.Changed">
      <summary>
            Raised when a transaction that changes this property is <see cref="E:AGI.Foundation.TransactionContext.Committed" />.
            See the Remarks section for more information.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.Cleanup(System.Object)">
      <summary>
            Cleans up modifications that are no longer visible to any transaction.
            </summary>
      <param name="modificationDetails">
            The last modification that is still visible to transactions.  Any modifications
            after this one can be cleaned up.
            </param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.Commit(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Commits the specified modification.
            </summary>
      <param name="transaction">The committing transaction.</param>
      <param name="modificationDetails">
            The modification to commit.  This is the object that was passed to
            <see cref="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)" />.
            </param>
      <returns>
            The data to pass to the <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Notify(System.Object,AGI.Foundation.Transaction)" /> method after all transacted objects have been committed.
            If this method returns null, <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Notify(System.Object,AGI.Foundation.Transaction)" /> will not be called.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.EnsureValue(AGI.Foundation.Transaction)">
      <summary>
            At <see cref="M:AGI.Foundation.Transaction.Commit" /> time, ensures that the value of this property, as seen by a
            given <see cref="T:AGI.Foundation.Transaction" />, has not changed.  If another transaction commits a change to this
            property after the specified <paramref name="transaction" /> starts, the specified <paramref name="transaction" />
            will throw <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" /> when it is committed.
            </summary>
      <param name="transaction">The transaction in which to ensure that the value of the property does not change.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.GetValue(AGI.Foundation.Transaction)">
      <summary>
            Gets the value of this transacted property in the context of the given transaction,
            guaranteeing snapshot isolation.  See the Remarks section for more information.
            </summary>
      <param name="transaction">
            The transaction in which to obtain the value of the property.
            </param>
      <returns>The value.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.Notify(System.Object,AGI.Foundation.Transaction)">
      <summary>
            Notifies interested parties of changes to this transacted object.
            </summary>
      <param name="notifyDetails">
            The instance returned by <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactedObject.Commit(AGI.Foundation.Transaction,System.Object)" />.  Usually this contains details of the modification.
            </param>
      <param name="chainedTransaction">
            A transaction that can be used to make additional changes that will be committed immediately after
            the current transaction finishes committing.  This parameter may be null, in which
            case a new transaction should be created for this purpose and returned.
            </param>
      <returns>
        <paramref name="chainedTransaction" /> if it is non-null, or the new chained transaction if
            <paramref name="chainedTransaction" /> was null and a chained transaction
            was required.
            </returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.SetValue(AGI.Foundation.Transaction,`0)">
      <summary>
            Sets the value of this property in the context of the specified transaction.  The changed value
            will not be visible to other transactions until <see cref="M:AGI.Foundation.Transaction.Commit" /> is called.
            Calling this method may cause a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" /> to be raised at
            <see cref="M:AGI.Foundation.Transaction.Commit" /> time.  See the Remarks section for more information.
            </summary>
      <param name="transaction">The transaction in which to set the value.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.ToString">
      <summary>
            Get a <see cref="T:System.String" /> that represents the value of this transacted property.
            </summary>
      <returns>The value of this transacted property.</returns>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1.ValidateModification(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Verifies a modification to ensure that it is still valid after other transactions
            have potentially committed modifications to this object.
            </summary>
      <param name="transaction">The validating transaction.</param>
      <param name="modificationDetails">
            The modification to validate.  This is the object that was passed to
            <see cref="M:AGI.Foundation.Transaction.AddModification(AGI.Foundation.Infrastructure.Threading.TransactedObject,System.Object)" />.
            </param>
      <returns>
            true if the modification is still valid; otherwise false.
            </returns>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.TransactedPropertyChangedEventArgs`1">
      <summary>
            Contains information about a change to a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1" />.
            </summary>
      <typeparam name="T">The type of value held by the property.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedPropertyChangedEventArgs`1.#ctor(AGI.Foundation.TransactionContext,`0,`0)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="context">The <see cref="T:AGI.Foundation.TransactionContext" /> to use.</param>
      <param name="oldValue">The old value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactedPropertyChangedEventArgs`1.ChainedTransaction">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Transaction" /> that can be used to make additional changes that will
            be committed immediately after the current transaction finishes committing.
            It is not necessary (or allowed) to explicitly call <see cref="M:AGI.Foundation.Transaction.Commit" /> on this transaction
            because it will automatically be called at the appropriate time.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactedPropertyChangedEventArgs`1.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactedPropertyChangedEventArgs`1.NewValue">
      <summary>
            Gets the new value of the property.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactedPropertyChangedEventArgs`1.OldValue">
      <summary>
            Gets the old value of the property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.TransactionCommittedEventArgs">
      <summary>
            Contains information about a committed transaction during the
            <see cref="E:AGI.Foundation.TransactionContext.Committed" /> event.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactionCommittedEventArgs.ChainedTransaction">
      <summary>
            Gets a <see cref="T:AGI.Foundation.Transaction" /> that can be used to make additional changes that will
            be committed immediately after the current transaction finishes committing.
            It is not necessary (or allowed) to explicitly call <see cref="M:AGI.Foundation.Transaction.Commit" /> on this transaction
            because it will automatically be called at the appropriate time.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactionCommittedEventArgs.CommittedObjects">
      <summary>
            Gets an enumerable list of the transacted objects (such as <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1" />)
            that are committed as part of this transaction.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionCommittedEventArgs.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactionCommittedEventArgs.Version">
      <summary>
            Gets the version number of the committed transaction.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException">
      <summary>
            An exception that is thrown when the <see cref="T:AGI.Foundation.Transaction" /> being committed conflicts with another
            transaction already committed.  The current transaction must be retried.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionConflictException.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data. 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionConflictException.#ctor(System.String)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="message">The message associated with the exception.</param>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionConflictException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="message">The message associated with the exception.</param>
      <param name="innerException">The inner exception that caused this exception.</param>
    </member>
    <member name="T:AGI.Foundation.Infrastructure.Threading.TransactionParameter">
      <summary>
            The placeholder for a parameterized <see cref="T:AGI.Foundation.Transaction" /> within an evaluator.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionParameter" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactionParameter.DefaultValue">
      <summary>
            Gets or sets the default value to use for this parameter if no parameter
            is specified at the time of evaluator parameterization.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Infrastructure.Threading.TransactionParameter.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Infrastructure.Threading.TransactionParameter.Instance">
      <summary>
            Gets the default evaluator parameter for specifying a transaction.  If an evaluator needs to be
            parameterized with multiple transactions, you can create additional instances by simply
            using the <see cref="M:AGI.Foundation.Infrastructure.Threading.TransactionParameter.#ctor">default constructor</see>.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.AccessEntityFilter`1">
      <summary>
            An <see cref="T:AGI.Foundation.Tracking.EntityFilter`1" /> that filters entities based on
            the results of an <see cref="T:AGI.Foundation.Access.AccessQuery" />.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.#ctor(AGI.Foundation.Tracking.AccessEntityFilter{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Initializes a new instance.  The <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" /> property must be set and then the
            <see cref="M:AGI.Foundation.Tracking.AccessEntityFilter`1.ApplyChanges" /> method must be called before this filter can be used.
            </summary>
      <param name="context">The transaction context used by this filter.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.#ctor(AGI.Foundation.TransactionContext,AGI.Foundation.Access.AccessConstraint)">
      <summary>
            Initializes a new instance with a specified constraint as the <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" />.  The filter is ready
            to be used immediately after it is constructed.
            </summary>
      <param name="context">The transaction context used by this filter.</param>
      <param name="constraint">
            The constraint.  Only entities for which this query returns
            <see cref="F:AGI.Foundation.Access.AccessClassification.AccessExists" /> will be matched by this filter.
            </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.#ctor(AGI.Foundation.TransactionContext,AGI.Foundation.Access.AccessQuery)">
      <summary>
            Initializes a new instance with a specified <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" />.
            </summary>
      <param name="context">The transaction context used by this filter.</param>
      <param name="query">
            The <see cref="T:AGI.Foundation.Access.AccessQuery" />.  Only entities for which this query returns
            <see cref="F:AGI.Foundation.Access.AccessClassification.AccessExists" /> will be matched by this filter.
            </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.#ctor(AGI.Foundation.TransactionContext,AGI.Foundation.Access.AccessQuery,System.IServiceProvider)">
      <summary>
            Initializes a new instance with a specified <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" /> and <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.TimeObserver" />.
            The filter is ready to be used immediately after it is constructed.
            </summary>
      <param name="context">The transaction context used by this filter.</param>
      <param name="query">
            The <see cref="T:AGI.Foundation.Access.AccessQuery" />.  Only entities for which this query returns
            <see cref="F:AGI.Foundation.Access.AccessClassification.AccessExists" /> will be matched by this filter.
            </param>
      <param name="timeObserver">the time observer that will be used to evaluate the <paramref name="query" />.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.ApplyChanges">
      <summary>
            Applies the changes to this filter.  This method must be called after setting
            the <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" />, <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.TransactionParameter" />, or
            <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.EntityParameter" /> properties in order for the changes to take effect.  It is also necessary to call
            this method after changing any of the objects referenced directly or indirectly by these properties.
            Changes will take effect the next time after calling this method that entities are redistributed
            within the filter chain with a call to <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.CheckForSameDefinition(AGI.Foundation.Tracking.AccessEntityFilter{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.CheckForSameDefinition(AGI.Foundation.Tracking.EntityFilter{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.EntityMatchingSetup(AGI.Foundation.Transaction)">
      <summary>
            Allows the filter to perform any filter-specific setup at the start of entity
            matching.  This method is called by <see cref="M:AGI.Foundation.Tracking.EntityFilter`1.BeginEntityMatching(AGI.Foundation.Transaction)" />.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="P:AGI.Foundation.Tracking.AccessEntityFilter`1.EntityParameter">
      <summary>
            Gets or sets the entity parameter placeholder in the <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" />.
            By default, this is <see cref="P:AGI.Foundation.Tracking.EntityParameter`1.Instance">EntityParameter&lt;TEntity&gt;.First</see>.
            <see cref="M:AGI.Foundation.Tracking.AccessEntityFilter`1.ApplyChanges" /> must be called after setting this property in order for
            the change to take effect.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.EnumerateDependencies(AGI.Foundation.Infrastructure.DependencyEnumerator)">
      <summary>
        Enumerates the dependencies of this object by calling
        <see cref="M:AGI.Foundation.Infrastructure.DependencyEnumerator.Enumerate``1(``0)" /> for each object that this object directly depends upon.
        Derived classes which contain additional dependencies MUST override this method, call the base
        implementation, and enumerate dependencies introduced by the derived class.
      </summary>
      <param name="enumerator">The enumerator that is informed of the dependencies of this object.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.AccessEntityFilter`1.IsMatch(AGI.Foundation.Transaction,`0)">
      <summary>
            Returns true if the provided entity fits the filter criteria.
            </summary>
      <param name="transaction">The transaction used for getting values from the entity.</param>
      <param name="entity">The entity to be filtered.</param>
      <returns>True if the entity meets the filter criteria, false otherwise.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Access.AccessQuery" />.  Only entities for which this query returns
            <see cref="F:AGI.Foundation.Access.AccessClassification.AccessExists" /> will be matched by this filter.
            <see cref="M:AGI.Foundation.Tracking.AccessEntityFilter`1.ApplyChanges" /> must be called after setting this property in order for
            the change to take effect.  If this query is a composite query (such as 
            <see cref="T:AGI.Foundation.Access.AccessQueryAnd" />), it is usually necessary to have its
            <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.TimeObserver" /> property set to one of the
            participants in the query.  If this query is an <see cref="T:AGI.Foundation.Access.AccessConstraint" />, the
            <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.TimeObserver" /> property can be null.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.AccessEntityFilter`1.TimeObserver">
      <summary>
            Gets or sets the <see cref="T:System.IServiceProvider" /> that will be used to
            evaluate the <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" />. 
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.AccessEntityFilter`1.TransactionParameter">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Transaction" /> parameter placeholder in the <see cref="P:AGI.Foundation.Tracking.AccessEntityFilter`1.Query" />.
            By default, this is <see cref="P:AGI.Foundation.Infrastructure.Threading.TransactionParameter.Instance">TransactionParameter.Instance</see>.
            <see cref="M:AGI.Foundation.Tracking.AccessEntityFilter`1.ApplyChanges" /> must be called after setting this property in order for
            the change to take effect.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.ArchivedProperty">
      <summary>
            Describes a property of a tracking entity.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.ArchivedProperty.#ctor(System.String,System.Type)">
      <summary>
            Constructs a new instance with a null parent.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="propertyType">The type of property.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.ArchivedProperty.#ctor(System.String,System.Type,AGI.Foundation.Tracking.ArchivedProperty)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="propertyType">The type of property.</param>
      <param name="parentProperty">The parent</param>
    </member>
    <member name="P:AGI.Foundation.Tracking.ArchivedProperty.Name">
      <summary>
            Gets the name of the property.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.ArchivedProperty.ParentProperty">
      <summary>
            Gets the parent property if this is a sub-property.  If this property
            is not a sub-property, this property will be null.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.ArchivedProperty.PropertyType">
      <summary>
            Gets the type of the property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces">
      <summary>
            Contains methods related to the interfaces that are commonly implemented on entity classes,
            such as <see cref="T:AGI.Foundation.Tracking.IEntityLastUpdate" /> and <see cref="T:AGI.Foundation.Tracking.IEntityPosition" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityAcceleration">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityAcceleration" /> interface.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityAcceleration.AccelerationName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityAcceleration.Acceleration" /> property.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityAcceleration.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityIdentifier">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityIdentifier" /> interface.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityIdentifier.EntityIdentifierName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityLastUpdate">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityLastUpdate" /> interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityLastUpdate.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityLastUpdate.LastUpdateName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityLastUpdate.LastUpdate" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityOrientation">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityOrientation" /> interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityOrientation.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityOrientation.OrientationName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityOrientation.Orientation" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityPosition">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityPosition" /> interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityPosition.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityPosition.PositionName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityPosition.Position" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalAcceleration">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityRotationalAcceleration" /> interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalAcceleration.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalAcceleration.RotationalAccelerationName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityRotationalAcceleration.RotationalAcceleration" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalVelocity">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityRotationalVelocity" /> interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalVelocity.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalVelocity.RotationalVelocityName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityRotationalVelocity.RotationalVelocity" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityVelocity">
      <summary>
            Contains methods related to the <see cref="T:AGI.Foundation.Tracking.IEntityVelocity" /> interface.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityVelocity.AddToSchema``1(AGI.Foundation.Tracking.EntitySchema{``0})">
      <summary>
            Adds the properties defined by this interface to the specified schema.
            </summary>
      <param name="schema">The schema to which to add the properties defined by this interface.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityVelocity.VelocityName">
      <summary>
            The name of the <see cref="P:AGI.Foundation.Tracking.IEntityVelocity.Velocity" /> property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.DelegateEntityFilter`1">
      <summary>
            An <see cref="T:AGI.Foundation.Tracking.EntityFilter`1" /> that filters entities based on
            the result of the specified callback.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.#ctor(AGI.Foundation.Tracking.DelegateEntityFilter{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Creates a new instance with the specified context,
            <see cref="P:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatchMethod" /> must be set and <see cref="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.ApplyChanges" />
            called before the filter can be used.
            </summary>
      <param name="context">The transaction context to be used.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.#ctor(AGI.Foundation.TransactionContext,AGI.Foundation.Tracking.IsMatchCallback{`0})">
      <summary>
            Creates a new instance with the specified context and match
            function.  The filter is ready to be used immediately.
            </summary>
      <param name="context">The transaction context to be used.</param>
      <param name="isMatchMethod">The method to call for the <see cref="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatch(AGI.Foundation.Transaction,`0)" /> method.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.ApplyChanges">
      <summary>
            Applies the changes to this filter.  This method must be called after setting the
            <see cref="P:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatchMethod" /> property in order for the change to take effect.
            Changes will take effect the next time after calling this method that entities are redistributed
            within the filter chain with a call to <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.CheckForSameDefinition(AGI.Foundation.Tracking.DelegateEntityFilter{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.CheckForSameDefinition(AGI.Foundation.Tracking.EntityFilter{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.EntityMatchingSetup(AGI.Foundation.Transaction)">
      <summary>
            Allows the filter to perform any filter-specific setup at the start of entity
            matching.  This method is called by <see cref="M:AGI.Foundation.Tracking.EntityFilter`1.BeginEntityMatching(AGI.Foundation.Transaction)" />.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatch(AGI.Foundation.Transaction,`0)">
      <summary>
            Indicates if the entity matches this filter by returning the
            result of calling <see cref="P:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatchMethod" /> with the provided
            transaction and entity.
            </summary>
      <param name="transaction">The transaction used for getting values from the entity.</param>
      <param name="entity">The entity to be filtered.</param>
      <returns>True if the entity meets the filter criteria, false otherwise.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatchMethod">
      <summary>
            Gets or sets the delegate which will be called to evaluate
            <see cref="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.IsMatch(AGI.Foundation.Transaction,`0)" />.
            <see cref="M:AGI.Foundation.Tracking.DelegateEntityFilter`1.ApplyChanges" /> must be called after setting this property in order for
            the change to take effect.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityDescriptor`1">
      <summary>
            Describes a family of entities.  Generally, each user-defined entity class has one
            instance of a class derived from <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" /> associated with it.
            The <see cref="P:AGI.Foundation.Tracking.EntityDescriptor`1.Default" /> property specifies the default descriptor to be used with an entity type.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityDescriptor`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" /> class</summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityDescriptor`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityDescriptor`1.Default">
      <summary>
            Gets or sets the default descriptor for this type of entity.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityDescriptor`1.Get``1">
      <summary>
            Gets the specified service from this entity descriptor.
            </summary>
      <typeparam name="TDescriptorService">The type of the service to retrieve.</typeparam>
      <returns>The requested service.</returns>
      <exception cref="T:AGI.Foundation.ServiceNotAvailableException">
            The specified service is not provided by this entity descriptor.
            </exception>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityFilter`1">
      <summary>
            The base class for classes that are used with <see cref="T:AGI.Foundation.Tracking.EntityFilterChain`1" /> to
            filter entities into different <see cref="T:AGI.Foundation.Tracking.EntitySet`1">EntitySets</see> based on their properties.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.#ctor(AGI.Foundation.Tracking.EntityFilter{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Initializes a new instance with the specified context.
            See the <a href="../Programmer's Guide/Overview/Tracking/Filters.html">Filtering</a> topic for more information.
            </summary>
      <param name="context">The transaction context to be used by this filter.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.BeginEntityMatching(AGI.Foundation.Transaction)">
      <summary>
            Indicates to the filter that the <see cref="T:AGI.Foundation.Tracking.EntityFilterChain`1" /> has begun
            matching entities to filters as part of a <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities" />
            operation.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.CheckForSameDefinition(AGI.Foundation.Tracking.EntityFilter{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.EndEntityMatching(AGI.Foundation.Transaction)">
      <summary>
            Indicates to the filter that the <see cref="T:AGI.Foundation.Tracking.EntityFilterChain`1" /> has finished
            matching entities to filters as part of a <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities" />
            operation.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.EntityMatchingCleanup(AGI.Foundation.Transaction)">
      <summary>
            Allows the filter to perform any filter-specific cleanup at the end of entity
            matching.  This method is called by <see cref="M:AGI.Foundation.Tracking.EntityFilter`1.EndEntityMatching(AGI.Foundation.Transaction)" />.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.EntityMatchingSetup(AGI.Foundation.Transaction)">
      <summary>
            Allows the filter to perform any filter-specific setup at the start of entity
            matching.  This method is called by <see cref="M:AGI.Foundation.Tracking.EntityFilter`1.BeginEntityMatching(AGI.Foundation.Transaction)" />.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.IsMatch(AGI.Foundation.Transaction,`0)">
      <summary>
            Returns true if the provided entity fits the filter criteria.
            </summary>
      <param name="transaction">The transaction used for getting values from the entity.</param>
      <param name="entity">The entity to be filtered.</param>
      <returns>True if the entity meets the filter criteria, false otherwise.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityFilter`1.IsThreadSafe">
      <summary>
        Gets a value indicating if the methods on this instance are safe to call from
        multiple threads simultaneously.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilter`1.Match(AGI.Foundation.Transaction,`0)">
      <summary>
            Checks an entity against this filter and adds it to the <see cref="P:AGI.Foundation.Tracking.EntityFilter`1.MatchingEntities" /> collection
            if it matches.
            </summary>
      <param name="transaction">The transaction used for getting values from the entity.</param>
      <param name="entity">The entity to be filtered.</param>
      <returns>
            true if the entity matched this filter and was added to the <see cref="P:AGI.Foundation.Tracking.EntityFilter`1.MatchingEntities" />
            collection; otherwise false.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityFilter`1.MatchingEntities">
      <summary>
            Gets the set of entities that match this filter.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityFilterChain`1">
      <summary>
            Groups entities into <see cref="T:AGI.Foundation.Tracking.EntitySet`1">EntitySets</see> with
            a series of filters.  See the <a href="../Programmer's Guide/Overview/Tracking/Filters.html">Filtering</a> topic
            for more information.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.#ctor(AGI.Foundation.Tracking.EntityFilterChain{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.#ctor(AGI.Foundation.Tracking.EntitySet{`0},AGI.Foundation.Tracking.MatchingStrategy)">
      <summary>
            Initializes a new instance using the provided <see cref="T:AGI.Foundation.Tracking.EntitySet`1" />
            and value indicating if entities should be matched against multiple filters.
            </summary>
      <param name="inputEntities">The entity set to be processed.</param>
      <param name="matchingStrategy">The entity matching strategy to be used.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.ApplyChanges">
      <summary>
            Applies any changes so that they take effect the next time <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities" />
            is invoked.  It is necessary to call this method after setting the <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.InputEntities" />
            and <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.MatchingStrategy" /> properties and after modifying the <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" /> collection.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.CheckForSameDefinition(AGI.Foundation.Tracking.EntityFilterChain{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters">
      <summary>
            Gets the list of filters being managed by this chain.  After changing this collection,
            you must call <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.ApplyChanges" /> in order for the changes to take effect.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityFilterChain`1.HomelessEntities">
      <summary>
            Gets the set of entities that do not match any of the filters in the chain.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityFilterChain`1.InputEntities">
      <summary>
            Gets or sets the input entity set being filtered.  After setting this property,
            you must call <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.ApplyChanges" /> in order for the change to take effect.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityFilterChain`1.MatchingStrategy">
      <summary>
            Gets or sets the <see cref="T:AGI.Foundation.Tracking.MatchingStrategy" /> used to place
            entities into the <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" />
            collection. You must call <see cref="M:AGI.Foundation.Tracking.EntityFilterChain`1.ApplyChanges" /> in order for
            the change to take effect.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities">
      <summary>
            Redistributes all entities in <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.InputEntities" />
            among the specified <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" /> using a new 
            <see cref="T:AGI.Foundation.Transaction" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterChain`1.RedistributeEntities(AGI.Foundation.Transaction)">
      <summary>
            Redistributes all entities in <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.InputEntities" />
            among the specified <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" /> using the provided
            <see cref="T:AGI.Foundation.Transaction" />.
            </summary>
      <param name="transaction">The transaction to be used to match entities.</param>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityFilterCollection`1">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Tracking.EntityFilter`1">EntityFilters</see>.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.#ctor">
      <summary>Initializes a new instance.</summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.#ctor(AGI.Foundation.Tracking.EntityFilterCollection{`0},AGI.Foundation.Infrastructure.CopyContext)">
      <summary>Initializes a new instance as a copy of an existing instance.</summary>
      <param name="existingInstance">The existing instance to copy.</param>
      <param name="context">
      A <see cref="T:AGI.Foundation.Infrastructure.CopyContext" /> that controls the depth of the copy.
    </param>
      <exception cref="T:System.ArgumentNullException">
      Thrown when the parameter <paramref name="existingInstance" /> is null.
    </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.#ctor(System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.EntityFilter{`0}})">
      <summary>
            Initializes a new instance that contains elements copied from the specified collection.
            </summary>
      <param name="filterCollection">The collection whose elements are copied to the new collection.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{AGI.Foundation.Tracking.EntityFilter{`0}})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.CheckForSameDefinition(AGI.Foundation.Tracking.EntityFilterCollection{`0})">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityFilterCollection`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObjectCollection`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObjectCollection{`0})" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityParameter`1">
      <summary>
            The placeholder for a parameterized entity within an evaluator.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityParameter`1.#ctor">
      <summary>
            Creates a new instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityParameter`1.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)">
      <summary>
        Checks to determine if another instance has the same definition as this instance and
        returns true if it does.  Derived classes MUST override this method and check
        all new fields introduced by the derived class for definitional equivalence.  It is NOT necessary
        to check base class fields because the base class will already have done that.  When overriding this method,
        you should NOT call the base implementation because it will return false for all derived-class instances.
        Derived classes should check the type of <paramref name="other" /> to preserve the symmetric nature of <see cref="M:AGI.Foundation.Infrastructure.IEquatableDefinition.IsSameDefinition(System.Object)" />.
      </summary>
      <param name="other">The other instance to compare to this one.</param>
      <returns>
        true if the two objects are defined equivalently, otherwise false.
      </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityParameter`1.Clone(AGI.Foundation.Infrastructure.CopyContext)">
      <summary>
      Clones this object using the specified context.
    </summary>
      <param name="context">The context to use to perform the copy.</param>
      <returns>
      A new instance which is a copy of this object.
    </returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityParameter`1.ComputeCurrentDefinitionHashCode">
      <summary>
        Computes a hash code based on the current properties of this object. Derived classes MUST override this
        method and compute a hash code that combines: a unique hash code seed, the base implementation result, and
        the hash codes of all new fields introduced by the derived class which are used in the
        <see cref="M:AGI.Foundation.Infrastructure.DefinitionalObject.CheckForSameDefinition(AGI.Foundation.Infrastructure.DefinitionalObject)" /> method.
      </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityParameter`1.DefaultValue">
      <summary>
            Gets or sets the default value to use for this parameter if no parameter
            is specified at the time of evaluator parameterization.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntityParameter`1.GetEvaluator(AGI.Foundation.EvaluatorGroup)">
      <summary>
            Gets the placeholder evaluator associated with this parameter.
            </summary>
      <param name="group">The group in which to obtain the evaluator.</param>
      <returns>The placeholder evaluator.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntityParameter`1.Instance">
      <summary>
            Gets the default evaluator parameter for specifying an entity.  If an evaluator needs to be
            parameterized with multiple entities, you can create additional instances by simply
            using the <see cref="M:AGI.Foundation.Tracking.EntityParameter`1.#ctor">default constructor</see>.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityPropertyGetter`1">
      <summary>
            Represents a method to get the value of a property on an entity.
            </summary>
      <param name="transaction">The transaction to use to get the entity's property.</param>
      <param name="entity">The entity on which to get the value.</param>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>The property value.</returns>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityPropertySetter`1">
      <summary>
            Represents a method to set the value of a property on an entity.
            </summary>
      <param name="transaction">The transaction to use to set the entity's property.</param>
      <param name="entity">The entity on which to set the value.</param>
      <param name="value">The new property value.</param>
      <typeparam name="TEntity">The type of the entity.</typeparam>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntitySchema`1">
      <summary>
            Describes the archived schema for an entity.  An instance of this schema is provided to
            <see cref="T:AGI.Foundation.Tracking.TrackingArchive`1" /> via the <see cref="T:AGI.Foundation.Tracking.IEntityArchiveDescriptor`1" /> interface on
            an <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySchema`1.#ctor(System.Type)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="entityIdentifierType">
            The type of the <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" /> of this entity type.
            </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySchema`1.AddProperty``1(System.String,AGI.Foundation.Tracking.EntityTransactedPropertyGetter{`0,``0})">
      <summary>
            Adds a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1" /> to the schema.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="transactedPropertyGetter">A callback to use to obtain the <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1" />.</param>
      <typeparam name="T">The type of the property.</typeparam>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySchema`1.EntityIdentifierType">
      <summary>
            Gets the type of the <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" /> of this entity type.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySchema`1.Properties">
      <summary>
            Gets the collection of properties in this schema.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySchema`1.PropertyCount">
      <summary>
            Gets the number of properties in this schema.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntitySchemaProperty`1">
      <summary>
            A property in an <see cref="T:AGI.Foundation.Tracking.EntitySchema`1" />.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySchemaProperty`1.#ctor(System.String,System.Type,AGI.Foundation.Tracking.EntityPropertyGetter{`0},AGI.Foundation.Tracking.EntityPropertySetter{`0})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
      <param name="getter">A callback to get the value of the property.</param>
      <param name="setter">A callback to set the value of the property.</param>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySchemaProperty`1.Getter">
      <summary>
            Gets a callback to get the value of the property.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySchemaProperty`1.Setter">
      <summary>
            Gets a callback to set the value of the property.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntitySet`1">
      <summary>
            This class holds and manages a collection of tracked entities.  All interactions with instances
            of this class must happen inside a <see cref="T:AGI.Foundation.Transaction" />, guaranteeing snapshot
            isolation.  See the <a href="../Programmer's Guide/Overview/Tracking/Transactions.html">Software Transactional Memory</a>
            overview topic for more information.
            </summary>
      <typeparam name="TEntity">The type of entity in the set.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="context">
            The transaction context that is shared by all entities in this entity set.
            </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.#ctor(AGI.Foundation.TransactionContext,System.Object)">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="context">The transaction context that is shared by all entities in this entity set.</param>
      <param name="owner">The owner of this entity set.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.Add(AGI.Foundation.Transaction,`0)">
      <summary>
            Adds an entity.
            </summary>
      <param name="transaction">The transaction in which to add the entity.</param>
      <param name="entity">The entity to add.</param>
    </member>
    <member name="E:AGI.Foundation.Tracking.EntitySet`1.Changed">
      <summary>
            Raised when entities are added to or removed from this entity set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.Clear(AGI.Foundation.Transaction)">
      <summary>
            Removes all entities from this entity set.
            </summary>
      <param name="transaction">The transaction in which to remove all entities.</param>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySet`1.Context">
      <summary>
            Gets the context used for transactions on this entity set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.Ensure(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Ensures that the entity with a specified <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" />
            is not removed or replaced with a different entity with the same identifier before
            a transaction is committed.  If another transaction commits first and removes or replaces
            the entity, the transaction will raise a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" />
            when it is committed.  It is valid to call this method with an <paramref name="id" />
            that is not present in the entity set.  In that case, a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" />
            will be thrown if an entity with <paramref name="id" /> is added to the entity set in
            another transaction.
            </summary>
      <param name="transaction">The transaction for which to ensure an entity identifier.</param>
      <param name="id">The entity identifier to ensure.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.EnsureAll(AGI.Foundation.Transaction)">
      <summary>
            Ensures that the entity set does not change at all before the transaction is committed.
            If another transaction commits first and makes any changes to the entity set at all,
            this transaction will raise a <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactionConflictException" /> when it
            is committed.
            </summary>
      <param name="transaction">The transaction for which the entity set should not change.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.GetCount(AGI.Foundation.Transaction)">
      <summary>
            Gets the number of entities in this entity set.
            </summary>
      <param name="transaction">The transaction in which to retrieve the number of entities.</param>
      <returns>The number of entities in this entity set.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.GetEntities(AGI.Foundation.Transaction)">
      <summary>
            Gets an enumerable collection of all the entities in the entity set.
            </summary>
      <param name="transaction">The transaction in which to enumerate the entities.</param>
      <returns>The enumerable collection of entities.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.GetEntityById(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Gets the entity with the given <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" />.
            </summary>
      <param name="transaction">The transaction in which to get the entity.</param>
      <param name="id">The ID of the entity to retrieve.</param>
      <returns>
            The entity with the specified ID, or null if no entity with
            the given ID exists.
            </returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySet`1.Owner">
      <summary>
            Gets the owner of this entity set.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.Remove(AGI.Foundation.Transaction,System.Object)">
      <summary>
            Removes an entity.
            </summary>
      <param name="transaction">The transaction in which to remove the entity.</param>
      <param name="id">The ID of the entity to remove.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySet`1.Remove(AGI.Foundation.Transaction,`0)">
      <summary>
            Removes an entity.
            </summary>
      <param name="transaction">The transaction in which to remove the entity.</param>
      <param name="entity">The entity to remove.</param>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntitySetChangedEventArgs`1">
      <summary>
            Holds information about changes to an <see cref="T:AGI.Foundation.Tracking.EntitySet`1" />.
            </summary>
      <typeparam name="TEntity">The type of entity in the set.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.EntitySetChangedEventArgs`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{System.Object})">
      <summary>
            Initializes a new instance.
            </summary>
      <param name="added">The collection of added entities.</param>
      <param name="removed">The collection of identifiers of removed entities.</param>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySetChangedEventArgs`1.Added">
      <summary>
            Gets the collection of added entities.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.EntitySetChangedEventArgs`1.RemovedIdentifiers">
      <summary>
            Gets the collection of identifiers of removed entities.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.EntityTransactedPropertyGetter`2">
      <summary>
            Represents a method to get a transacted property on an entity.
            </summary>
      <param name="entity">The entity on which to get the transacted property.</param>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <typeparam name="T">The type of the transacted property.</typeparam>
      <returns>A <see cref="T:AGI.Foundation.Infrastructure.Threading.TransactedProperty`1" />.</returns>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityAcceleration">
      <summary>
            An interface to a tracking entity that has acceleration.  To obtain the reference frame
            in which the acceleration is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityAcceleration.Acceleration">
      <summary>
            Gets the transactional property that holds the acceleration of the entity.  To obtain the reference frame
            in which the acceleration is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityArchiveDescriptor`1">
      <summary>
            An interface implemented by a class derived from <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" /> to specify
            information about how an entity is archived.
            </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityArchiveDescriptor`1.Archivers">
      <summary>
            Gets the default list of archivers needed for archiving this type of entity.
            </summary>
      <returns>The list of archivers.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.IEntityArchiveDescriptor`1.CreateEntity(AGI.Foundation.TransactionContext,System.Object)">
      <summary>
            Creates a new entity with the given identifier.
            </summary>
      <param name="context">The context in which to create the entity.</param>
      <param name="entityIdentifier">The identifier of the new entity.</param>
      <returns>The new entity.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityArchiveDescriptor`1.Schema">
      <summary>
            Gets the schema to use for archiving this type of entity.
            </summary>
      <returns>The schema.</returns>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityIdentifier">
      <summary>
            An interface to a tracking entity that has an identifier.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier">
      <summary>
            Gets the identifier of this entity.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityLastUpdate">
      <summary>
            An interface to a tracking entity that describes the last time
            the entity was updated.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityLastUpdate.LastUpdate">
      <summary>
            Gets the transactional property that can be used to get or set the
            time the entity was last updated.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityOrientation">
      <summary>
            An interface to a tracking entity that has an orientation.  To obtain the axes in
            which the orientation is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityOrientation.Orientation">
      <summary>
            Gets the transactional property that holds the orientation of the entity.  To obtain the
            axes in which the orientation is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityOrientationDescriptor">
      <summary>
            An interface implemented by a class derived from <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" /> to specify the
            <see cref="T:AGI.Foundation.Geometry.Axes" /> in which <see cref="P:AGI.Foundation.Tracking.IEntityOrientation.Orientation" /> is defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes">
      <summary>
            Gets the axes in which <see cref="P:AGI.Foundation.Tracking.IEntityOrientation.Orientation" /> is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityPosition">
      <summary>
            An interface to a tracking entity that has a position described as an X, Y, and Z
            coordinate.  To obtain the reference frame in which the position is defined,
            get the <see cref="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityPosition.Position">
      <summary>
            Gets the transactional property that holds the position of the entity.  To obtain the reference frame
            in which the position is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityPositionDescriptor">
      <summary>
            An interface implemented by a class derived from <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" /> to specify the
            <see cref="T:AGI.Foundation.Geometry.ReferenceFrame" /> in which <see cref="P:AGI.Foundation.Tracking.IEntityPosition.Position" /> is defined.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame">
      <summary>
            Gets the reference frame in which <see cref="P:AGI.Foundation.Tracking.IEntityPosition.Position" /> is defined.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityRotationalAcceleration">
      <summary>
            An interface to a tracking entity that has rotational acceleration.  To obtain the axes in
            which the rotational velocity is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityRotationalAcceleration.RotationalAcceleration">
      <summary>
            Gets the transactional property that holds the rotational acceleration of the entity.  To obtain the
            axes in which the rotational acceleration is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityRotationalVelocity">
      <summary>
            An interface to a tracking entity that has rotational velocity.  To obtain the axes in
            which the rotational velocity is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityRotationalVelocity.RotationalVelocity">
      <summary>
            Gets the transactional property that holds the rotational velocity of the entity.  To obtain the
            axes in which the rotational velocity is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityOrientationDescriptor.OrientationAxes" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntitySensorFieldOfView">
      <summary>
            An interface to a tracking entity that has a volume describing the region of space that
            is detectable with its sensor.  The sensor volume is assumed to have its origin at the location
            specified by the <see cref="P:AGI.Foundation.Tracking.IEntityPosition.Position" /> property and it is oriented in the
            entity's body axes defined by the <see cref="P:AGI.Foundation.Tracking.IEntityOrientation.Orientation" /> property such
            that the sensor's boresight points down the Z-axis.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntitySensorFieldOfView.FieldOfView">
      <summary>
            Gets the transactional property that holds the orientation of the entity.  The value assigned
            to the transacted property may change, but the the <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> instance
            assigned by the property must not change after it is assigned to the transacted property.  To
            change the entity's field of view, create a new <see cref="T:AGI.Foundation.Geometry.Shapes.SensorFieldOfView" /> instance rather
            than changing the existing one.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IEntityVelocity">
      <summary>
            An interface to a tracking entity that has a velocity.  To obtain the reference frame
            in which the velocity is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.IEntityVelocity.Velocity">
      <summary>
            Gets the transactional property that holds the velocity of the entity.  To obtain the reference frame
            in which the velocity is defined, get the <see cref="P:AGI.Foundation.Tracking.IEntityPositionDescriptor.PositionReferenceFrame" />
            property from the entity's <see cref="T:AGI.Foundation.Tracking.EntityDescriptor`1" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.IsMatchCallback`1">
      <summary>
            Represents a method used to match an entity via <see cref="T:AGI.Foundation.Tracking.DelegateEntityFilter`1" />.
            </summary>
      <param name="transaction">The transaction to use to retrieve entity values.</param>
      <param name="entity">The entity to be filtered.</param>
      <typeparam name="TEntity">The type of entity.</typeparam>
      <returns>true if the entity meets the filter criteria, 
            false otherwise.</returns>
    </member>
    <member name="T:AGI.Foundation.Tracking.MatchingStrategy">
      <summary>
            Indicates if an <see cref="T:AGI.Foundation.Tracking.EntityFilterChain`1" /> will place each
            entity in only the first <see cref="T:AGI.Foundation.Tracking.EntityFilter`1" /> it matches
            against or all filters in the 
            <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" /> collection.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Tracking.MatchingStrategy.First">
      <summary>
            Indicates an entity will only be placed in the first
            <see cref="T:AGI.Foundation.Tracking.EntityFilter`1" /> that it matches in the   
            <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" /> collection.
            </summary>
    </member>
    <member name="F:AGI.Foundation.Tracking.MatchingStrategy.Multiple">
      <summary>
            Indicates an entity will be placed in all
            <see cref="T:AGI.Foundation.Tracking.EntityFilter`1">EntityFilters&lt;TEntity&gt;</see> that it 
            matches in the <see cref="P:AGI.Foundation.Tracking.EntityFilterChain`1.Filters" />
            collection.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.MemoryArchive`1">
      <summary>
            A <see cref="T:AGI.Foundation.Tracking.TrackingArchive`1" /> that stores tracking data in memory.
            </summary>
      <typeparam name="TEntity">The entity type to archive.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Construct a new instance with the provided context.
            </summary>
      <param name="context">The context in which archiving is to take place.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.#ctor(AGI.Foundation.TransactionContext,AGI.Foundation.Tracking.TrackingTypeArchiverCollection)">
      <summary>
            Construct a new instance with the provided context and type archivers.
            </summary>
      <param name="context">The context in which archiving is to take place.</param>
      <param name="typeArchivers">The type archivers to use to archive entity properties.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Archives a set of entities.
            </summary>
      <param name="transaction">
            A transaction that should be used to retrieve properties of the entities.  It is possible for
            later transactions to commit additional updates before this method is called for older updates.
            However, this transaction will see the state of the system as of the time that the
            updates being archived were committed.  Using this transaction rather than creating a separate
            one will guarantee that updates are not missed.
            </param>
      <param name="entities">The entities to archive.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.Clear">
      <summary>
            Clears the contents of the archive.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes the archive from the provided stream.
            </summary>
      <param name="stream">The stream to deserialize from.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.GetArchivedInterval">
      <summary>
            Gets the overall interval that exists in the archive for any entity.
            </summary>
      <returns>The interval of archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.GetArchivedInterval(System.Object)">
      <summary>
            Gets the overall interval that exists in the archive for the specified entity identifier.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to obtain the interval of availability.</param>
      <returns>The interval of archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.GetArchivedPrimitivePropertyComponents(System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.ArchivedProperty},AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Retrieves archived primitive property components for all entities over the provided time period.
            </summary>
      <param name="primitivePropertyComponents">The archived properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <returns>The array of primitive components.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.GetArchivedPrimitivePropertyComponents(System.Object,System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.ArchivedProperty},AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Retrieves archived primitive property components for the provided entity over the provided time period.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose properties to retrieve.</param>
      <param name="primitivePropertyComponents">The archived properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <returns>The array of primitive components.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.MemoryArchive`1.Serialize(System.IO.Stream)">
      <summary>
            Serializes the archive to the provided stream.
            </summary>
      <param name="stream">The stream to serialize to.</param>
    </member>
    <member name="T:AGI.Foundation.Tracking.RawEntityData`1">
      <summary>
            Holds raw entity data read from a <see cref="T:AGI.Foundation.Tracking.TrackingArchive`1" />.  The data
            may contain multiple distinct entities, multiple updates to a single entity, or both.
            </summary>
      <typeparam name="TEntity">The type of entity.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.RawEntityData`1.CreateEntity(System.Int32,AGI.Foundation.Transaction)">
      <summary>
            Creates an entity with the data from a specified record in the data set.
            </summary>
      <param name="recordIndex">The index of the entity record from which to create the entity.</param>
      <param name="transaction">The transaction to use to set properties of the entity.</param>
      <returns>The new entity created from the data record.</returns>
      <exception cref="T:System.InvalidOperationException">
            The data set does not contain the <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" /> property,
            which is required in order to create an entity.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.RawEntityData`1.FillArray(System.Int32,System.Object[])">
      <summary>
            Fills an array from a specified record in the data set.  The array must contain one
            element for each property in <see cref="P:AGI.Foundation.Tracking.RawEntityData`1.Properties" /> and on return of the array will
            be filled with values in the same order.
            </summary>
      <param name="recordIndex">The index of the entity record from which to get the values.</param>
      <param name="values">
            On input, an array of the same length as <see cref="P:AGI.Foundation.Tracking.RawEntityData`1.Properties" />.  On return, the values
            in the record corresponding to the <see cref="P:AGI.Foundation.Tracking.RawEntityData`1.Properties" />.
            </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.RawEntityData`1.FillEntity(System.Int32,AGI.Foundation.Transaction,`0)">
      <summary>
            Fills a given entity instance with the data from a specified record in the data set.
            The <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" /> property, if it exists in the data set,
            is ignored; it is not required to match the entity to be filled.
            </summary>
      <param name="recordIndex">The index of the entity record from which to fill the entity.</param>
      <param name="transaction">The transaction to use to set properties of the entity.</param>
      <param name="entity">The entity to fill.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.RawEntityData`1.GetEntityIdentifier(System.Int32)">
      <summary>
            Gets the entity identifier from a specified record in the data set.
            </summary>
      <param name="recordIndex">The index of the entity record from which to get the identifier.</param>
      <returns>The identifier.</returns>
      <exception cref="T:System.InvalidOperationException">
            The data set does not contain the <see cref="P:AGI.Foundation.Tracking.IEntityIdentifier.EntityIdentifier" /> property.
            </exception>
    </member>
    <member name="M:AGI.Foundation.Tracking.RawEntityData`1.GetValues(System.Int32)">
      <summary>
            Gets the values from a specified record in the data set.  The returned array will contain
            one element for each property in <see cref="P:AGI.Foundation.Tracking.RawEntityData`1.Properties" /> and will be in the same order.
            </summary>
      <param name="recordIndex">The index of the entity record from which to get the values.</param>
      <returns>The values in the record, each element corresponding to a property in <see cref="P:AGI.Foundation.Tracking.RawEntityData`1.Properties" />.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.RawEntityData`1.Properties">
      <summary>
             Gets the properties included in this data set.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.RawEntityData`1.RecordCount">
      <summary>
            Gets the number of entity records in the data set.  Each record represents one update
            to one entity.  The overall data set may contain multiple distinct entities, multiple updates to a
            single entity, or both.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.SqlServerArchive`1">
      <summary>
            A <see cref="T:AGI.Foundation.Tracking.TrackingArchive`1" /> implementation which
            stores tracking data using Microsoft SQL Server.
            </summary>
      <typeparam name="TEntity">The entity type to archive.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.#ctor(AGI.Foundation.TransactionContext,System.String,System.String)">
      <summary>
            Initializes a new instance, the archive is available immediately for reading.
            </summary>
      <param name="context">The <see cref="T:AGI.Foundation.TransactionContext" /> for which to archive entities.</param>
      <param name="connectionString">The connection string used for connecting to the database.</param>
      <param name="tableName">The name of the table to use for storing tracking data.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.#ctor(AGI.Foundation.TransactionContext,System.String,System.String,AGI.Foundation.Tracking.TrackingTypeArchiverCollection)">
      <summary>
            Initializes a new instance, the archive is available immediately for reading.
            </summary>
      <param name="context">The <see cref="T:AGI.Foundation.TransactionContext" /> for which to archive entities.</param>
      <param name="connectionString">The connection string used for connecting to the database.</param>
      <param name="tableName">The name of the table to use for storing tracking data.</param>
      <param name="typeArchivers">The type archivers to use to archive entity properties.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Archives a set of entities.
            </summary>
      <param name="transaction">
            A transaction that should be used to retrieve properties of the entities.  It is possible for
            later transactions to commit additional updates before this method is called for older updates.
            However, this transaction will see the state of the system as of the time that the
            updates being archived were committed.  Using this transaction rather than creating a separate
            one will guarantee that updates are not missed.
            </param>
      <param name="entities">The entities to archive.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.Clear">
      <summary>
            Clears the contents of the table being used for archiving.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.SqlServerArchive`1.ConnectionString">
      <summary>
            Gets the connection string being used to access the database.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.GetArchivedInterval">
      <summary>
            Gets the overall interval that exists in the archive for any entity.
            </summary>
      <returns>The interval of archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.GetArchivedInterval(System.Object)">
      <summary>
            Gets the overall interval that exists in the archive for the specified entity identifier.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to obtain the interval of availability.</param>
      <returns>The interval of archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.GetArchivedPrimitivePropertyComponents(System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.ArchivedProperty},AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Retrieves archived primitive property components for all entities over the provided time period.
            </summary>
      <param name="primitivePropertyComponents">The archived properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <returns>The array of primitive components.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.GetArchivedPrimitivePropertyComponents(System.Object,System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.ArchivedProperty},AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Retrieves archived primitive property components for the provided entity over the provided time period.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose properties to retrieve.</param>
      <param name="primitivePropertyComponents">The archived properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <returns>The array of primitive components.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.SqlServerArchive`1.TableName">
      <summary>
            Gets the name of the table being used to store tracking data.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.WritingShutdown">
      <summary>
            Called during <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.StopWriting" />, after the last call to <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.SqlServerArchive`1.WritingStartup">
      <summary>
            Called during <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.StartWriting" />, before the first call to <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.TrackingArchive`1">
      <summary>
            The base for classes that archive tracking data.
            </summary>
      <typeparam name="TEntity">The type of entity to be archived.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.#ctor(AGI.Foundation.TransactionContext)">
      <summary>
            Initializes a new instance using the provided <see cref="T:AGI.Foundation.TransactionContext" />.
            The default collection of type archivers is used.
            </summary>
      <param name="context">The context for which to archive entities.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.#ctor(AGI.Foundation.TransactionContext,AGI.Foundation.Tracking.TrackingTypeArchiverCollection)">
      <summary>
            Initializes a new instance using the provided <see cref="T:AGI.Foundation.TransactionContext" /> and a
            specified collection of type archivers.
            </summary>
      <param name="context">The context for which to archive entities.</param>
      <param name="typeArchivers">The type archivers to use to archive entity properties.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Archives a set of entities.
            </summary>
      <param name="transaction">
            A transaction that should be used to retrieve properties of the entities.  It is possible for
            later transactions to commit additional updates before this method is called for older updates.
            However, this transaction will see the state of the system as of the time that the
            updates being archived were committed.  Using this transaction rather than creating a separate
            one will guarantee that updates are not missed.
            </param>
      <param name="entities">The entities to archive.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.Clear">
      <summary>
            Clears the contents of the archive.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingArchive`1.Context">
      <summary>
            Gets the context for which to archives entities.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.Dispose">
      <summary>
        Releases any resources associated with this instance.
      </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.Dispose(System.Boolean)">
      <summary>
        Releases any resources associated with this instance.
      </summary>
      <param name="disposing">
        true to release both managed and unmanaged resources;
        false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetArchivedData(AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32,System.String[])">
      <summary>
            Retrieves archived properties for all entities over the provided time period.
            </summary>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <param name="propertyNames">The archived properties to retrieve.</param>
      <returns>An instance of <see cref="T:AGI.Foundation.Tracking.RawEntityData`1" /> representing the requested data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetArchivedData(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32,System.String[])">
      <summary>
            Retrieves archived properties for the provided entity over the provided time period.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <param name="propertyNames">The archived properties to retrieve.</param>
      <returns>An instance of <see cref="T:AGI.Foundation.Tracking.RawEntityData`1" /> representing the requested data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetArchivedInterval">
      <summary>
            Gets the overall interval that exists in the archive for any entity.
            </summary>
      <returns>The interval of archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetArchivedInterval(System.Object)">
      <summary>
            Gets the overall interval that exists in the archive for the specified entity identifier.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to obtain the interval of availability.</param>
      <returns>The interval of archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetArchivedPrimitivePropertyComponents(System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.ArchivedProperty},AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Retrieves archived primitive property components for all entities over the provided time period.
            </summary>
      <param name="primitivePropertyComponents">The archived properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <returns>The array of primitive components.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetArchivedPrimitivePropertyComponents(System.Object,System.Collections.Generic.IEnumerable{AGI.Foundation.Tracking.ArchivedProperty},AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Retrieves archived primitive property components for the provided entity over the provided time period.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose properties to retrieve.</param>
      <param name="primitivePropertyComponents">The archived properties to retrieve.</param>
      <param name="start">The time of the first property to retrieve.</param>
      <param name="stop">The time of the last property to retrieve.</param>
      <param name="maximumRecords">The maximum number of each property to retrieve.</param>
      <returns>The array of primitive components.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetEntityPrimitivePropertyComponents(AGI.Foundation.Transaction,`0,System.Object[])">
      <summary>
            Fills an array with the archived properties of an entity.
            </summary>
      <param name="transaction">The transaction in which to obtain the property values of the entity.</param>
      <param name="entity">The entity from which to obtain the property values.</param>
      <param name="values">
            The array in which to store the values.  The array must have an element for each property
            in <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.PrimitivePropertyComponents" />.
            </param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetMotion``2(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32,System.String[])">
      <summary>
            Gets time-varying data, such as position and velocity, from the archive.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to retrieve data.</param>
      <param name="start">The earliest time for which to retrieve data.</param>
      <param name="stop">The latest time for which to retrieve data.</param>
      <param name="maximumPoints">The maximum number of points to return.</param>
      <param name="propertyNames">
            The names of the properties to include in the returned collection.  The first string is the name of the
            property representing the <see cref="P:AGI.Foundation.DateMotionCollection`2.Values">Value</see> of the motion, the second
            is the name of the property representing the <see cref="P:AGI.Foundation.DateMotionCollection`2.FirstDerivatives">FirstDerivative</see>
            of the motion, and so on.  To obtain the orientations of the entity over time, pass
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityOrientation.OrientationName">Orientation</see> as the first property, and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalVelocity.RotationalVelocityName">RotationalVelocity</see> and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalAcceleration.RotationalAccelerationName">RotationalAcceleration</see> as the successive
            properties, if applicable.
            </param>
      <typeparam name="T">
            The type of value data to retrieve.  For example, this would be <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> for
            rotation and rotational velocity data.
            </typeparam>
      <typeparam name="TDerivative">
            The type of derivative data to retrieve.  For example, this would be <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> for
            rotation and rotational velocity data.
            </typeparam>
      <returns>An instance of <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing the requested interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetMotion``1(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32,System.String[])">
      <summary>
            Gets time-varying data, such as position and velocity, from the archive.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to retrieve data.</param>
      <param name="start">The earliest time for which to retrieve data.</param>
      <param name="stop">The latest time for which to retrieve data.</param>
      <param name="maximumPoints">The maximum number of points to return.</param>
      <param name="propertyNames">
            The names of the properties to include in the returned collection.  The first string is the name of the
            property representing the <see cref="P:AGI.Foundation.DateMotionCollection`1.Values">Value</see> of the motion, the second
            is the name of the property representing the <see cref="P:AGI.Foundation.DateMotionCollection`1.FirstDerivatives">FirstDerivative</see>
            of the motion, and so on.  To obtain the positions of the entity over time, pass
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityPosition.PositionName">Position</see> as the first property, and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityVelocity.VelocityName">Velocity</see> and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityAcceleration.AccelerationName">Acceleration</see> as the successive
            properties, if applicable.
            </param>
      <typeparam name="T">
            The type of data to retrieve.  For example, this would be <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> for
            position and velocity data.
            </typeparam>
      <returns>An instance of <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the requested interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetMotion``2(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.String[])">
      <summary>
            Gets time-varying data, such as position and velocity, from the archive.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to retrieve data.</param>
      <param name="start">The earliest time for which to retrieve data.</param>
      <param name="stop">The latest time for which to retrieve data.</param>
      <param name="properties">
            The names of the properties to include in the returned collection.  The first string is the name of the
            property representing the <see cref="P:AGI.Foundation.DateMotionCollection`2.Values">Value</see> of the motion, the second
            is the name of the property representing the <see cref="P:AGI.Foundation.DateMotionCollection`2.FirstDerivatives">FirstDerivative</see>
            of the motion, and so on.  To obtain the orientations of the entity over time, pass
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityOrientation.OrientationName">Orientation</see> as the first property, and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalVelocity.RotationalVelocityName">RotationalVelocity</see> and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityRotationalAcceleration.RotationalAccelerationName">RotationalAcceleration</see> as the successive
            properties, if applicable.
            </param>
      <typeparam name="T">
            The type of value data to retrieve.  For example, this would be <see cref="T:AGI.Foundation.Coordinates.UnitQuaternion" /> for
            rotation and rotational velocity data.
            </typeparam>
      <typeparam name="TDerivative">
            The type of derivative data to retrieve.  For example, this would be <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> for
            rotation and rotational velocity data.
            </typeparam>
      <returns>An instance of <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing the requested interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetMotion``1(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.String[])">
      <summary>
            Gets time-varying data, such as position and velocity, from the archive.
            </summary>
      <param name="entityIdentifier">The identifier of the entity for which to retrieve data.</param>
      <param name="start">The earliest time for which to retrieve data.</param>
      <param name="stop">The latest time for which to retrieve data.</param>
      <param name="properties">
            The names of the properties to include in the returned collection.  The first string is the name of the
            property representing the <see cref="P:AGI.Foundation.DateMotionCollection`1.Values">Value</see> of the motion, the second
            is the name of the property representing the <see cref="P:AGI.Foundation.DateMotionCollection`1.FirstDerivatives">FirstDerivative</see>
            of the motion, and so on.  To obtain the positions of the entity over time, pass
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityPosition.PositionName">Position</see> as the first property, and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityVelocity.VelocityName">Velocity</see> and
            <see cref="F:AGI.Foundation.Tracking.CommonEntityInterfaces.IEntityAcceleration.AccelerationName">Acceleration</see> as the successive
            properties, if applicable.
            </param>
      <typeparam name="T">
            The type of data to retrieve.  For example, this would be <see cref="T:AGI.Foundation.Coordinates.Cartesian" /> for
            position and velocity data.
            </typeparam>
      <returns>An instance of <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the requested interval.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetOrientations(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing
            the archived orientation, rotational velocity and rotational acceleration of the
            specified entity beginning at the specified time and lasting for the specified duration.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose data is to be retrieved.</param>
      <param name="start">The date of the earliest data point to retrieve.</param>
      <param name="stop">The time of the last data point to retrieve.</param>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing the archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetOrientations(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing
            the archived orientation, rotational velocity and rotational acceleration of the
            specified entity beginning at the specified time and lasting for the specified duration.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose data is to be retrieved.</param>
      <param name="start">The date of the earliest data point to retrieve.</param>
      <param name="stop">The time of the last data point to retrieve.</param>
      <param name="maximumPoints">The maximum number of points to return.</param>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing the archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetOrientations(System.Object,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing
            the archived orientation, rotational velocity and rotational acceleration of the
            specified entity beginning at the specified time and lasting for the specified duration.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose data is to be retrieved.</param>
      <param name="start">The date of the earliest data point to retrieve.</param>
      <param name="maximumPoints">The maximum number of points to return.</param>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`2" /> representing the archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetPositions(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the
            archived position, velocity and acceleration of the specified entity
            beginning at the specified time and lasting for the specified duration.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose data is to be retrieved.</param>
      <param name="start">The date of the earliest data point to retrieve.</param>
      <param name="stop">The time of the last data point to retrieve.</param>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetPositions(System.Object,AGI.Foundation.Time.JulianDate,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the
            archived position, velocity and acceleration of the specified entity
            beginning at the specified time and lasting for the specified duration.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose data is to be retrieved.</param>
      <param name="start">The date of the earliest data point to retrieve.</param>
      <param name="stop">The time of the last data point to retrieve.</param>
      <param name="maximumPoints">The maximum number of points to return.</param>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the archived data.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.GetPositions(System.Object,AGI.Foundation.Time.JulianDate,System.Int32)">
      <summary>
            Gets a <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the
            archived position, velocity and acceleration of the specified entity
            beginning at the specified time and lasting for the specified duration.
            </summary>
      <param name="entityIdentifier">The identifier of the entity whose data is to be retrieved.</param>
      <param name="start">The date of the earliest data point to retrieve.</param>
      <param name="maximumPoints">The maximum number of points to return.</param>
      <returns>A <see cref="T:AGI.Foundation.DateMotionCollection`1" /> representing the archived data.</returns>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingArchive`1.IsRunning">
      <summary>
            Gets a value indicating whether or not the archiver is currently archiving
            changes to entities in the <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.Context" />.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingArchive`1.MaximumQueueLength">
      <summary>
            Gets or sets the maximum length of the queue of committed transactions to be archived.
            If transactions are committed at a higher rate than they can be archived, the length of the queue
            will grow.  When it reaches this maximum length, committing threads will block until the archiver
            catches up.  Setting this value too high will result in excessive memory usage.  Changes to this
            value while the archiver <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.IsRunning" /> will not take effect until it is restarted.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingArchive`1.PrimitivePropertyComponents">
      <summary>
            Gets a list of the primitive components of the properties for this entity type.  Each
            property in <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.Properties" /> will correspond to one or more properties in this
            collection.  For example, a property in <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.Properties" /> of type
            <see cref="T:AGI.Foundation.Time.JulianDate" /> might have two properties in this collection: an integer called "Day"
            and a double called "SecondsOfDay".  The exact relationship between <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.Properties" />
            and this collection is dictated by the <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.TypeArchivers" /> being used by this archive.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingArchive`1.Properties">
      <summary>
            Gets a list of archived properties for this entity type.  There is one property in this 
            collection for each property in the entity's <see cref="T:AGI.Foundation.Tracking.EntitySchema`1" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.StartWriting">
      <summary>
            Starts the archiver.  After this method is called, all updates to entities in the 
            <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.Context" /> will be archived.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.StopWriting">
      <summary>
            Stops the archiver.  After this method is called, updates to entities in the
            <see cref="P:AGI.Foundation.Tracking.TrackingArchive`1.Context" /> will no longer be archived.  This method does not return until
            the current queue of updates to archive has been processed.
            </summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingArchive`1.TypeArchivers">
      <summary>
            Gets the collection of <see cref="T:AGI.Foundation.Tracking.TrackingTypeArchiver">TrackingTypeArchivers</see> that is used
            to archive the properties of entities.  The returned instance should be considered read-only.  Attempts
            to modify the collection of archivers will result in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.WaitForArchiveQueue">
      <summary>
            Waits for the currently queued transactions to be archived before returning.  Additional committed
            transactions may be queued while waiting and these will NOT be waited upon.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.WritingShutdown">
      <summary>
            Called during <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.StopWriting" />, after the last call to <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingArchive`1.WritingStartup">
      <summary>
            Called during <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.StartWriting" />, before the first call to <see cref="M:AGI.Foundation.Tracking.TrackingArchive`1.ArchiveEntities(AGI.Foundation.Transaction,System.Collections.Generic.IEnumerable{`0})" />.
            </summary>
    </member>
    <member name="T:AGI.Foundation.Tracking.TrackingTypeArchiver">
      <summary>
            An object that stores and retrieves specific types in a
            <see cref="T:AGI.Foundation.Tracking.TrackingArchive`1" /> by splitting a complex type into primitives.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:AGI.Foundation.Tracking.TrackingTypeArchiver" /> class</summary>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingTypeArchiver.Primitives">
      <summary>
            Gets the primitives composing the type archived by this instance.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiver.Retrieve(System.Object[],System.Int32)">
      <summary>
            Retrieves a value from the specified array.  This method retrieves one
            primitive from the array for each element in <see cref="P:AGI.Foundation.Tracking.TrackingTypeArchiver.Primitives" />, starting at
            <paramref name="startIndex" />, and returns the value composed from the retrieved
            primitives.
            </summary>
      <param name="primitiveArray">The array from which to retrieve the primitives composing the value.</param>
      <param name="startIndex">The first index from which to retrieve the primitives composing the value.</param>
      <returns>The value retrieved from the primitive array.</returns>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiver.Store(System.Object,System.Object[],System.Int32)">
      <summary>
            Stores the specified value in the specified array.  This method stores
            one value in the array for each element in <see cref="P:AGI.Foundation.Tracking.TrackingTypeArchiver.Primitives" />, starting at
            <paramref name="startIndex" />.
            </summary>
      <param name="value">The value to store in the array.</param>
      <param name="primitiveArray">The array in which to store the primitives composing <paramref name="value" />.</param>
      <param name="startIndex">The first index at which to store the primitives composing <paramref name="value" />.</param>
    </member>
    <member name="T:AGI.Foundation.Tracking.TrackingTypeArchiverCollection">
      <summary>
            A collection of <see cref="T:AGI.Foundation.Tracking.TrackingTypeArchiver">TrackingTypeArchivers</see>.  It is safe to
            use all methods of this class from multiple threads simultaneously.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.#ctor">
      <summary>
            Initializes a new instance.  The new collection will be filled with
            default <see cref="T:AGI.Foundation.Tracking.TrackingTypeArchiver">TrackingTypeArchivers</see>
            for all primitive types.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.#ctor(AGI.Foundation.Tracking.TrackingTypeArchiverCollection)">
      <summary>
            Initializes a new instance as a copy of an existing instance.
            </summary>
      <param name="collection">The existing instance to copy.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.#ctor(System.Collections.Generic.IDictionary{System.Type,AGI.Foundation.Tracking.TrackingTypeArchiver})">
      <summary>
            Initializes a new instance with a collection of <see cref="T:AGI.Foundation.Tracking.TrackingTypeArchiver">TrackingTypeArchivers</see>.
            </summary>
      <param name="archivers">The collection of archivers.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.Add(System.Type,AGI.Foundation.Tracking.TrackingTypeArchiver)">
      <summary>
            Adds an archiver for a complex type composed of multiple primitives.
            </summary>
      <param name="type">The type for which to add an archiver.</param>
      <param name="archiver">The archiver for the type.</param>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.AddEnumeration``1">
      <summary>
            Adds an archiver for an enumeration type that should be archived directly.
            </summary>
      <typeparam name="T">The enumeration type to archive directly.</typeparam>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.Freeze">
      <summary>
            Freezes this object.  Further attempts to modify it will result
            in an <see cref="T:AGI.Foundation.ObjectFrozenException" />.
            </summary>
    </member>
    <member name="M:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.GetArchiverForType(System.Type)">
      <summary>
            Gets the archiver for the specified type.
            </summary>
      <param name="type">The type for which to obtain an archiver.</param>
      <returns>The archiver.</returns>
      <exception cref="T:System.InvalidOperationException">
            Thrown when no archiver is registered for the specified type.
            </exception>
    </member>
    <member name="P:AGI.Foundation.Tracking.TrackingTypeArchiverCollection.IsFrozen">
      <summary>
            Gets a value indicating whether this object is frozen.  A frozen object cannot be modified and an
            <see cref="T:AGI.Foundation.ObjectFrozenException" /> will be thrown if an attempt is made to do so.
            </summary>
    </member>
  </members>
</doc>